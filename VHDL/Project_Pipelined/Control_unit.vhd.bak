library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Control_unit is 
	port( opcode:					IN STD_LOGIC_VECTOR(5 downto 0);
			RegDst, Branch: 				OUT STD_LOGIC;
			RegWrite, ALUsrc: 				OUT STD_LOGIC;
			Mem_Read, Mem_Write: 				OUT STD_LOGIC;
			MemtoReg: 				OUT STD_LOGIC;
			ALUop:			IN STD_LOGIC_VECTOR(3 downto 0));
end entity Control_unit;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

architecture Behavioral of Control_unit is
begin
    process(opcode)
    begin
        -- Default signal settings
        RegDst   <= '0';
        Branch   <= '0';
        RegWrite <= '0';
        ALUsrc   <= '0';
        Mem_Read  <= '0';
        Mem_Write <= '0';
        MemtoReg <= '0';
        ALUop    <= "0000";
        
        case opcode is
            when "000000" => -- R-type instructions
                RegDst   <= '1';
                RegWrite <= '1';
                ALUsrc   <= '0';
                MemtoReg <= '0';
                Mem_Read  <= '0';
                Mem_Write <= '0';
                Branch   <= '0';
                ALUop    <= "0010";  -- Let ALU control unit decode funct field
                
            when "100011" => -- lw
                RegDst   <= '0';
                RegWrite <= '1';
                ALUsrc   <= '1';
                MemtoReg <= '1';
                Mem_Read  <= '1';
                Mem_Write <= '0';
                Branch   <= '0';
                ALUop    <= "0010";  -- Addition to compute address
                
            when "101011" => -- sw
                RegWrite <= '0';
                ALUsrc   <= '1';
                Mem_Read  <= '0';
                Mem_Write <= '1';
                Branch   <= '0';
                ALUop    <= "0010";  -- Addition to compute address
                
            when "000100" => -- beq
                RegWrite <= '0';
                ALUsrc   <= '0';
                Mem_Read  <= '0';
                Mem_Write <= '0';
                Branch   <= '1';  -- Branch condition signal
                ALUop    <= "0110";  -- Subtraction used for branch comparison
                
            when "001000" => -- addi
                RegDst   <= '0';  -- destination register is rt
                RegWrite <= '1';
                ALUsrc   <= '1';
                MemtoReg <= '0';
                Mem_Read  <= '0';
                Mem_Write <= '0';
                Branch   <= '0';
                ALUop    <= "0010";  -- Addition
                
            when others =>
                null;
        end case;
    end process;
end Behavioral;
