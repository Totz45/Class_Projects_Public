
/home/totz45/labs/m4/DS3231/build/m4.elf:     file format elf32-littlearm


Disassembly of section .text:

10000000 <__VECTOR_TABLE>:
10000000:	20082000 	.word	0x20082000
10000004:	1000015d 	.word	0x1000015d
10000008:	10000113 	.word	0x10000113
1000000c:	10000115 	.word	0x10000115
10000010:	10000111 	.word	0x10000111
10000014:	10000111 	.word	0x10000111
10000018:	10000111 	.word	0x10000111
1000001c:	10000111 	.word	0x10000111
10000020:	10000111 	.word	0x10000111
10000024:	10000111 	.word	0x10000111
10000028:	10000111 	.word	0x10000111
1000002c:	10000117 	.word	0x10000117
10000030:	10000111 	.word	0x10000111
10000034:	10000111 	.word	0x10000111
10000038:	10000119 	.word	0x10000119
1000003c:	1000011b 	.word	0x1000011b
10000040:	1000011d 	.word	0x1000011d
10000044:	1000011d 	.word	0x1000011d
10000048:	1000011d 	.word	0x1000011d
1000004c:	1000011d 	.word	0x1000011d
10000050:	1000011d 	.word	0x1000011d
10000054:	1000011d 	.word	0x1000011d
10000058:	1000011d 	.word	0x1000011d
1000005c:	1000011d 	.word	0x1000011d
10000060:	1000011d 	.word	0x1000011d
10000064:	1000011d 	.word	0x1000011d
10000068:	1000011d 	.word	0x1000011d
1000006c:	1000011d 	.word	0x1000011d
10000070:	1000011d 	.word	0x1000011d
10000074:	1000011d 	.word	0x1000011d
10000078:	1000011d 	.word	0x1000011d
1000007c:	1000011d 	.word	0x1000011d
10000080:	1000011d 	.word	0x1000011d
10000084:	1000011d 	.word	0x1000011d
10000088:	1000011d 	.word	0x1000011d
1000008c:	1000011d 	.word	0x1000011d
10000090:	1000011d 	.word	0x1000011d
10000094:	1000011d 	.word	0x1000011d
10000098:	1000011d 	.word	0x1000011d
1000009c:	1000011d 	.word	0x1000011d
100000a0:	1000011d 	.word	0x1000011d
100000a4:	1000011d 	.word	0x1000011d
100000a8:	1000011d 	.word	0x1000011d
100000ac:	1000011d 	.word	0x1000011d
100000b0:	1000011d 	.word	0x1000011d
100000b4:	1000011d 	.word	0x1000011d
100000b8:	1000011d 	.word	0x1000011d
100000bc:	1000011d 	.word	0x1000011d
100000c0:	1000011d 	.word	0x1000011d
100000c4:	1000011d 	.word	0x1000011d
100000c8:	1000011d 	.word	0x1000011d
100000cc:	1000011d 	.word	0x1000011d
100000d0:	1000011d 	.word	0x1000011d
100000d4:	1000011d 	.word	0x1000011d
100000d8:	1000011d 	.word	0x1000011d
100000dc:	1000011d 	.word	0x1000011d
100000e0:	1000011d 	.word	0x1000011d
100000e4:	1000011d 	.word	0x1000011d
100000e8:	1000011d 	.word	0x1000011d
100000ec:	1000011d 	.word	0x1000011d
100000f0:	1000011d 	.word	0x1000011d
100000f4:	1000011d 	.word	0x1000011d
100000f8:	1000011d 	.word	0x1000011d
100000fc:	1000011d 	.word	0x1000011d
10000100:	1000011d 	.word	0x1000011d
10000104:	1000011d 	.word	0x1000011d
10000108:	1000011d 	.word	0x1000011d
1000010c:	1000011d 	.word	0x1000011d

10000110 <isr_invalid>:
\name:
    bkpt #0
.endm

// these are separated out for clarity
decl_isr_bkpt isr_invalid
10000110:	be00      	bkpt	0x0000

10000112 <isr_nmi>:
decl_isr_bkpt isr_nmi
10000112:	be00      	bkpt	0x0000

10000114 <isr_hardfault>:
decl_isr_bkpt isr_hardfault
10000114:	be00      	bkpt	0x0000

10000116 <isr_svcall>:
decl_isr_bkpt isr_svcall
10000116:	be00      	bkpt	0x0000

10000118 <isr_pendsv>:
decl_isr_bkpt isr_pendsv
10000118:	be00      	bkpt	0x0000

1000011a <isr_systick>:
decl_isr_bkpt isr_systick
1000011a:	be00      	bkpt	0x0000

1000011c <__unhandled_user_irq>:

// All unhandled USER IRQs fall through to here
.global __unhandled_user_irq
.thumb_func
__unhandled_user_irq:
    mrs  r0, ipsr
1000011c:	f3ef 8005 	mrs	r0, IPSR
    subs r0, #16
10000120:	3810      	subs	r0, #16

10000122 <unhandled_user_irq_num_in_r0>:
.global unhandled_user_irq_num_in_r0
unhandled_user_irq_num_in_r0:
    bkpt #0
10000122:	be00      	bkpt	0x0000

10000124 <binary_info_header>:
10000124:	7188ebf2 	.word	0x7188ebf2
10000128:	10006e24 	.word	0x10006e24
1000012c:	10006e4c 	.word	0x10006e4c
10000130:	100001a8 	.word	0x100001a8
10000134:	e71aa390 	.word	0xe71aa390

10000138 <__binary_info_header_end>:
10000138:	ffffded3 	.word	0xffffded3
1000013c:	10210142 	.word	0x10210142
10000140:	000001ff 	.word	0x000001ff
10000144:	00007390 	.word	0x00007390
10000148:	ab123579 	.word	0xab123579

1000014c <_entry_point>:
    // Vector through our own table (SP, VTOR will not have been set up at
    // this point). Same path for debugger entry and bootloader entry.
#else
    // Debugger tried to run code after loading, so SSI is in 03h-only mode.
    // Go back through bootrom + boot2 to properly initialise flash.
    ldr r0, =BOOTROM_VTABLE_OFFSET
1000014c:	f04f 0000 	mov.w	r0, #0

10000150 <_enter_vtable_in_r0>:
#endif

_enter_vtable_in_r0:
    ldr r1, =(PPB_BASE + ARM_CPU_PREFIXED(VTOR_OFFSET))
10000150:	4920      	ldr	r1, [pc, #128]	@ (100001d4 <data_cpy_table+0x2c>)
    str r0, [r1]
10000152:	6008      	str	r0, [r1, #0]
    ldmia r0!, {r1, r2}
10000154:	c806      	ldmia	r0!, {r1, r2}
    msr msp, r1
10000156:	f381 8808 	msr	MSP, r1
    bx r2
1000015a:	4710      	bx	r2

1000015c <_reset_handler>:
.thumb_func
_reset_handler:
    // Only core 0 should run the C runtime startup code; core 1 is normally
    // sleeping in the bootrom at this point but check to be sure (e.g. if
    // debugger put core 1 at the ELF entry point for some reason)
    ldr r0, =(SIO_BASE + SIO_CPUID_OFFSET)
1000015c:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
    ldr r0, [r0]
10000160:	6800      	ldr	r0, [r0, #0]
#if __ARM_ARCH_6M__
    cmp r0, #0
    beq 1f
#else
    cbz r0, 1f
10000162:	b110      	cbz	r0, 1000016a <hold_non_core0_in_bootrom+0x6>

10000164 <hold_non_core0_in_bootrom>:
#endif
hold_non_core0_in_bootrom:
    // Send back to the ROM to wait for core 0 to launch it.
    ldr r0, =BOOTROM_VTABLE_OFFSET
10000164:	f04f 0000 	mov.w	r0, #0
    b _enter_vtable_in_r0
10000168:	e7f2      	b.n	10000150 <_enter_vtable_in_r0>
#endif

    // In a NO_FLASH binary, don't perform .data etc copy, since it's loaded
    // in-place by the SRAM load. Still need to clear .bss
#if !PICO_NO_FLASH
    adr r4, data_cpy_table
1000016a:	a40f      	add	r4, pc, #60	@ (adr r4, 100001a8 <data_cpy_table>)

    // assume there is at least one entry
1:
    ldmia r4!, {r1-r3}
1000016c:	cc0e      	ldmia	r4!, {r1, r2, r3}
    cmp r1, #0
1000016e:	2900      	cmp	r1, #0
    beq 2f
10000170:	d002      	beq.n	10000178 <hold_non_core0_in_bootrom+0x14>
    bl data_cpy
10000172:	f000 f815 	bl	100001a0 <data_cpy>
    b 1b
10000176:	e7f9      	b.n	1000016c <hold_non_core0_in_bootrom+0x8>
2:
#endif

    // Zero out the BSS
    ldr r1, =__bss_start__
10000178:	4917      	ldr	r1, [pc, #92]	@ (100001d8 <data_cpy_table+0x30>)
    ldr r2, =__bss_end__
1000017a:	4a18      	ldr	r2, [pc, #96]	@ (100001dc <data_cpy_table+0x34>)
    movs r0, #0
1000017c:	2000      	movs	r0, #0
    b bss_fill_test
1000017e:	e000      	b.n	10000182 <bss_fill_test>

10000180 <bss_fill_loop>:
bss_fill_loop:
    stm r1!, {r0}
10000180:	c101      	stmia	r1!, {r0}

10000182 <bss_fill_test>:
bss_fill_test:
    cmp r1, r2
10000182:	4291      	cmp	r1, r2
    bne bss_fill_loop
10000184:	d1fc      	bne.n	10000180 <bss_fill_loop>

10000186 <platform_entry>:
    // Use 32-bit jumps, in case these symbols are moved out of branch range
    // (e.g. if main is in SRAM and crt0 in flash)
#if !__ARM_ARCH_6M__
    // Make sure stack limit is 0 - the user can set it themselves
    //  todo probably worth adding to the EXE_DEF in the future
    movs r0, #0
10000186:	2000      	movs	r0, #0
    msr msplim, r0
10000188:	f380 880a 	msr	MSPLIM, r0
#endif
    ldr r1, =runtime_init
1000018c:	4914      	ldr	r1, [pc, #80]	@ (100001e0 <data_cpy_table+0x38>)
    blx r1
1000018e:	4788      	blx	r1
    ldr r1, =main
10000190:	4914      	ldr	r1, [pc, #80]	@ (100001e4 <data_cpy_table+0x3c>)
    blx r1
10000192:	4788      	blx	r1
    ldr r1, =exit
10000194:	4914      	ldr	r1, [pc, #80]	@ (100001e8 <data_cpy_table+0x40>)
    blx r1
10000196:	4788      	blx	r1
    // exit should not return.  If it does, hang the core.
1: // separate label because _exit can be moved out of branch range
    bkpt #0
10000198:	be00      	bkpt	0x0000
    b 1b
1000019a:	e7fd      	b.n	10000198 <platform_entry+0x12>

1000019c <data_cpy_loop>:


#if !PICO_NO_FLASH
data_cpy_loop:
    ldm r1!, {r0}
1000019c:	c901      	ldmia	r1!, {r0}
    stm r2!, {r0}
1000019e:	c201      	stmia	r2!, {r0}

100001a0 <data_cpy>:
data_cpy:
    cmp r2, r3
100001a0:	429a      	cmp	r2, r3
    blo data_cpy_loop
100001a2:	d3fb      	bcc.n	1000019c <data_cpy_loop>
    bx lr
100001a4:	4770      	bx	lr
100001a6:	bf00      	nop

100001a8 <data_cpy_table>:
100001a8:	10006e4c 	.word	0x10006e4c
100001ac:	20000110 	.word	0x20000110
100001b0:	2000078c 	.word	0x2000078c
100001b4:	100074c8 	.word	0x100074c8
100001b8:	20080000 	.word	0x20080000
100001bc:	20080000 	.word	0x20080000
100001c0:	100074c8 	.word	0x100074c8
100001c4:	20081000 	.word	0x20081000
100001c8:	20081000 	.word	0x20081000
100001cc:	00000000 	.word	0x00000000

.weak runtime_init
.type runtime_init,%function
.thumb_func
runtime_init:
    bx lr
100001d0:	4770      	bx	lr
100001d2:	0000      	.short	0x0000
    ldr r1, =(PPB_BASE + ARM_CPU_PREFIXED(VTOR_OFFSET))
100001d4:	e000ed08 	.word	0xe000ed08
    ldr r1, =__bss_start__
100001d8:	2000078c 	.word	0x2000078c
    ldr r2, =__bss_end__
100001dc:	200009b8 	.word	0x200009b8
    ldr r1, =runtime_init
100001e0:	10005175 	.word	0x10005175
    ldr r1, =main
100001e4:	10000455 	.word	0x10000455
    ldr r1, =exit
100001e8:	1000511f 	.word	0x1000511f

100001ec <_init>:
100001ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100001ee:	bf00      	nop

100001f0 <register_tm_clones>:
100001f0:	4b06      	ldr	r3, [pc, #24]	@ (1000020c <register_tm_clones+0x1c>)
100001f2:	4907      	ldr	r1, [pc, #28]	@ (10000210 <register_tm_clones+0x20>)
100001f4:	1ac9      	subs	r1, r1, r3
100001f6:	1089      	asrs	r1, r1, #2
100001f8:	bf48      	it	mi
100001fa:	3101      	addmi	r1, #1
100001fc:	1049      	asrs	r1, r1, #1
100001fe:	d003      	beq.n	10000208 <register_tm_clones+0x18>
10000200:	4b04      	ldr	r3, [pc, #16]	@ (10000214 <register_tm_clones+0x24>)
10000202:	b10b      	cbz	r3, 10000208 <register_tm_clones+0x18>
10000204:	4801      	ldr	r0, [pc, #4]	@ (1000020c <register_tm_clones+0x1c>)
10000206:	4718      	bx	r3
10000208:	4770      	bx	lr
1000020a:	bf00      	nop
1000020c:	2000078c 	.word	0x2000078c
10000210:	2000078c 	.word	0x2000078c
10000214:	00000000 	.word	0x00000000

10000218 <frame_dummy>:
10000218:	b508      	push	{r3, lr}
1000021a:	4b05      	ldr	r3, [pc, #20]	@ (10000230 <frame_dummy+0x18>)
1000021c:	b11b      	cbz	r3, 10000226 <frame_dummy+0xe>
1000021e:	4905      	ldr	r1, [pc, #20]	@ (10000234 <frame_dummy+0x1c>)
10000220:	4805      	ldr	r0, [pc, #20]	@ (10000238 <frame_dummy+0x20>)
10000222:	f3af 8000 	nop.w
10000226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1000022a:	f7ff bfe1 	b.w	100001f0 <register_tm_clones>
1000022e:	bf00      	nop
10000230:	00000000 	.word	0x00000000
10000234:	20000970 	.word	0x20000970
10000238:	100064ec 	.word	0x100064ec

1000023c <check_hardware_alarm_num_param>:
// also define timer_hw for backwards compatibility (just accesses the default instance)
#define timer_hw PICO_DEFAULT_TIMER_INSTANCE()
#endif
#endif

static inline void check_hardware_alarm_num_param(__unused uint alarm_num) {
1000023c:	b480      	push	{r7}
1000023e:	b083      	sub	sp, #12
10000240:	af00      	add	r7, sp, #0
10000242:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_TIMER, alarm_num >= NUM_ALARMS);
}
10000244:	bf00      	nop
10000246:	370c      	adds	r7, #12
10000248:	46bd      	mov	sp, r7
1000024a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000024e:	4770      	bx	lr

10000250 <timer_hardware_alarm_get_irq_num>:
 * \brief Returns the \ref irq_num_t for the alarm interrupt from the given alarm on the given timer instance
 * \param timer the timer instance
 * \param alarm_num the alarm number
 * \sa TIMER_ALARM_IRQ_NUM
 */
static inline uint timer_hardware_alarm_get_irq_num(__unused timer_hw_t *timer, uint alarm_num) {
10000250:	b580      	push	{r7, lr}
10000252:	b082      	sub	sp, #8
10000254:	af00      	add	r7, sp, #0
10000256:	6078      	str	r0, [r7, #4]
10000258:	6039      	str	r1, [r7, #0]
    check_hardware_alarm_num_param(alarm_num);
1000025a:	6838      	ldr	r0, [r7, #0]
1000025c:	f7ff ffee 	bl	1000023c <check_hardware_alarm_num_param>
    return TIMER_ALARM_IRQ_NUM(timer, alarm_num);
10000260:	687b      	ldr	r3, [r7, #4]
10000262:	4a06      	ldr	r2, [pc, #24]	@ (1000027c <timer_hardware_alarm_get_irq_num+0x2c>)
10000264:	4293      	cmp	r3, r2
10000266:	d101      	bne.n	1000026c <timer_hardware_alarm_get_irq_num+0x1c>
10000268:	2204      	movs	r2, #4
1000026a:	e000      	b.n	1000026e <timer_hardware_alarm_get_irq_num+0x1e>
1000026c:	2200      	movs	r2, #0
1000026e:	683b      	ldr	r3, [r7, #0]
10000270:	4413      	add	r3, r2
}
10000272:	4618      	mov	r0, r3
10000274:	3708      	adds	r7, #8
10000276:	46bd      	mov	sp, r7
10000278:	bd80      	pop	{r7, pc}
1000027a:	bf00      	nop
1000027c:	400b8000 	.word	0x400b8000

10000280 <gpio_pull_up>:
/*! \brief Set specified GPIO to be pulled up.
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 */
static inline void gpio_pull_up(uint gpio) {
10000280:	b580      	push	{r7, lr}
10000282:	b082      	sub	sp, #8
10000284:	af00      	add	r7, sp, #0
10000286:	6078      	str	r0, [r7, #4]
    gpio_set_pulls(gpio, true, false);
10000288:	2200      	movs	r2, #0
1000028a:	2101      	movs	r1, #1
1000028c:	6878      	ldr	r0, [r7, #4]
1000028e:	f000 fa21 	bl	100006d4 <gpio_set_pulls>
}
10000292:	bf00      	nop
10000294:	3708      	adds	r7, #8
10000296:	46bd      	mov	sp, r7
10000298:	bd80      	pop	{r7, pc}

1000029a <gpio_put>:
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 * \param value If false clear the GPIO, otherwise set it.
 */
static inline void gpio_put(uint gpio, bool value) {
1000029a:	b480      	push	{r7}
1000029c:	b085      	sub	sp, #20
1000029e:	af00      	add	r7, sp, #0
100002a0:	6078      	str	r0, [r7, #4]
100002a2:	460b      	mov	r3, r1
100002a4:	70fb      	strb	r3, [r7, #3]
100002a6:	687b      	ldr	r3, [r7, #4]
100002a8:	60fb      	str	r3, [r7, #12]
100002aa:	78fb      	ldrb	r3, [r7, #3]
100002ac:	72fb      	strb	r3, [r7, #11]
//     if (val)
//         gpioc_hilo_out_set(1ull << pin);
//     else
//         gpioc_hilo_out_clr(1ull << pin);
__force_inline static void gpioc_bit_out_put(uint pin, bool val) {
    pico_default_asm_volatile ("mcrr p0, #4, %0, %1, c0" : : "r" (pin), "r" (val));
100002ae:	68fb      	ldr	r3, [r7, #12]
100002b0:	7afa      	ldrb	r2, [r7, #11]
100002b2:	ec42 3040 	mcrr	0, 4, r3, r2, cr0
}
100002b6:	bf00      	nop
        } else {
            sio_hw->gpio_hi_clr = mask;
        }
    }
#endif
}
100002b8:	bf00      	nop
100002ba:	3714      	adds	r7, #20
100002bc:	46bd      	mov	sp, r7
100002be:	f85d 7b04 	ldr.w	r7, [sp], #4
100002c2:	4770      	bx	lr

100002c4 <gpio_set_dir>:
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
100002c4:	b480      	push	{r7}
100002c6:	b085      	sub	sp, #20
100002c8:	af00      	add	r7, sp, #0
100002ca:	6078      	str	r0, [r7, #4]
100002cc:	460b      	mov	r3, r1
100002ce:	70fb      	strb	r3, [r7, #3]
100002d0:	687b      	ldr	r3, [r7, #4]
100002d2:	60fb      	str	r3, [r7, #12]
100002d4:	78fb      	ldrb	r3, [r7, #3]
100002d6:	72fb      	strb	r3, [r7, #11]
//     if (val)
//         gpioc_hilo_oe_set(1ull << pin);
//     else
//         gpioc_hilo_oe_clr(1ull << pin);
__force_inline static void gpioc_bit_oe_put(uint pin, bool val) {
    pico_default_asm_volatile ("mcrr p0, #4, %0, %1, c4" : : "r" (pin), "r" (val));
100002d8:	68fb      	ldr	r3, [r7, #12]
100002da:	7afa      	ldrb	r2, [r7, #11]
100002dc:	ec42 3044 	mcrr	0, 4, r3, r2, cr4
}
100002e0:	bf00      	nop
        } else {
            sio_hw->gpio_hi_oe_clr = mask;
        }
    }
#endif
}
100002e2:	bf00      	nop
100002e4:	3714      	adds	r7, #20
100002e6:	46bd      	mov	sp, r7
100002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100002ec:	4770      	bx	lr
	...

100002f0 <ds3231_read_register>:
    uint8_t buf[2] = {reg, data};
    i2c_write_blocking(i2c0, DS3231_ADDRESS, buf, 2, false);
}

// Read from a DS3231 register
void ds3231_read_register(uint8_t reg, uint8_t *data){
100002f0:	b580      	push	{r7, lr}
100002f2:	b084      	sub	sp, #16
100002f4:	af02      	add	r7, sp, #8
100002f6:	4603      	mov	r3, r0
100002f8:	6039      	str	r1, [r7, #0]
100002fa:	71fb      	strb	r3, [r7, #7]
    i2c_write_blocking(i2c0, DS3231_ADDRESS, &reg, 1, true);
100002fc:	1dfa      	adds	r2, r7, #7
100002fe:	2301      	movs	r3, #1
10000300:	9300      	str	r3, [sp, #0]
10000302:	2301      	movs	r3, #1
10000304:	2168      	movs	r1, #104	@ 0x68
10000306:	4807      	ldr	r0, [pc, #28]	@ (10000324 <ds3231_read_register+0x34>)
10000308:	f005 ff1f 	bl	1000614a <i2c_write_blocking>
    i2c_read_blocking(i2c0, DS3231_ADDRESS, data, 1, false);
1000030c:	2300      	movs	r3, #0
1000030e:	9300      	str	r3, [sp, #0]
10000310:	2301      	movs	r3, #1
10000312:	683a      	ldr	r2, [r7, #0]
10000314:	2168      	movs	r1, #104	@ 0x68
10000316:	4803      	ldr	r0, [pc, #12]	@ (10000324 <ds3231_read_register+0x34>)
10000318:	f005 fff9 	bl	1000630e <i2c_read_blocking>
}
1000031c:	bf00      	nop
1000031e:	3708      	adds	r7, #8
10000320:	46bd      	mov	sp, r7
10000322:	bd80      	pop	{r7, pc}
10000324:	20000774 	.word	0x20000774

10000328 <read_time>:

// Read the current time (seconds, minutes, hours) from the DS3231
void read_time(uint8_t *hours, uint8_t *minutes, uint8_t *seconds){
10000328:	b580      	push	{r7, lr}
1000032a:	b086      	sub	sp, #24
1000032c:	af00      	add	r7, sp, #0
1000032e:	60f8      	str	r0, [r7, #12]
10000330:	60b9      	str	r1, [r7, #8]
10000332:	607a      	str	r2, [r7, #4]
    uint8_t time[3]; // Seconds, Minutes, Hours
    for (uint8_t i = 0; i < 3; i++) {
10000334:	2300      	movs	r3, #0
10000336:	75fb      	strb	r3, [r7, #23]
10000338:	e00b      	b.n	10000352 <read_time+0x2a>
        ds3231_read_register(i, &time[i]);
1000033a:	7dfb      	ldrb	r3, [r7, #23]
1000033c:	f107 0214 	add.w	r2, r7, #20
10000340:	441a      	add	r2, r3
10000342:	7dfb      	ldrb	r3, [r7, #23]
10000344:	4611      	mov	r1, r2
10000346:	4618      	mov	r0, r3
10000348:	f7ff ffd2 	bl	100002f0 <ds3231_read_register>
    for (uint8_t i = 0; i < 3; i++) {
1000034c:	7dfb      	ldrb	r3, [r7, #23]
1000034e:	3301      	adds	r3, #1
10000350:	75fb      	strb	r3, [r7, #23]
10000352:	7dfb      	ldrb	r3, [r7, #23]
10000354:	2b02      	cmp	r3, #2
10000356:	d9f0      	bls.n	1000033a <read_time+0x12>
    }
    *seconds = time[0] & 0x7F; // Mask out CH bit
10000358:	7d3b      	ldrb	r3, [r7, #20]
1000035a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000035e:	b2da      	uxtb	r2, r3
10000360:	687b      	ldr	r3, [r7, #4]
10000362:	701a      	strb	r2, [r3, #0]
    *minutes = time[1] & 0x7F;
10000364:	7d7b      	ldrb	r3, [r7, #21]
10000366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000036a:	b2da      	uxtb	r2, r3
1000036c:	68bb      	ldr	r3, [r7, #8]
1000036e:	701a      	strb	r2, [r3, #0]
    *hours = time[2] & 0x3F;
10000370:	7dbb      	ldrb	r3, [r7, #22]
10000372:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10000376:	b2da      	uxtb	r2, r3
10000378:	68fb      	ldr	r3, [r7, #12]
1000037a:	701a      	strb	r2, [r3, #0]
}
1000037c:	bf00      	nop
1000037e:	3718      	adds	r7, #24
10000380:	46bd      	mov	sp, r7
10000382:	bd80      	pop	{r7, pc}

10000384 <ds3231_init>:
 * Side Effects: None
 * 
 * Overview: This routine intializes the DS3231 to work with the
            raspberry pi and eduboard.
 *****************************************************************/
void ds3231_init(){
10000384:	b580      	push	{r7, lr}
10000386:	af00      	add	r7, sp, #0

    i2c_init(i2c0, 100 * 1000);
10000388:	490f      	ldr	r1, [pc, #60]	@ (100003c8 <ds3231_init+0x44>)
1000038a:	4810      	ldr	r0, [pc, #64]	@ (100003cc <ds3231_init+0x48>)
1000038c:	f005 fcfc 	bl	10005d88 <i2c_init>
    gpio_set_function(SDA_PIN, GPIO_FUNC_I2C);
10000390:	2103      	movs	r1, #3
10000392:	2004      	movs	r0, #4
10000394:	f000 f95e 	bl	10000654 <gpio_set_function>
    gpio_set_function(SCL_PIN, GPIO_FUNC_I2C);
10000398:	2103      	movs	r1, #3
1000039a:	2005      	movs	r0, #5
1000039c:	f000 f95a 	bl	10000654 <gpio_set_function>
    gpio_pull_up(SDA_PIN);
100003a0:	2004      	movs	r0, #4
100003a2:	f7ff ff6d 	bl	10000280 <gpio_pull_up>
    gpio_pull_up(SCL_PIN);
100003a6:	2005      	movs	r0, #5
100003a8:	f7ff ff6a 	bl	10000280 <gpio_pull_up>

    gpio_init(LED_PIN);
100003ac:	2019      	movs	r0, #25
100003ae:	f000 f9c9 	bl	10000744 <gpio_init>
    gpio_set_dir(LED_PIN, GPIO_OUT);
100003b2:	2101      	movs	r1, #1
100003b4:	2019      	movs	r0, #25
100003b6:	f7ff ff85 	bl	100002c4 <gpio_set_dir>
    gpio_put(LED_PIN, 1); // Start with LED ON
100003ba:	2101      	movs	r1, #1
100003bc:	2019      	movs	r0, #25
100003be:	f7ff ff6c 	bl	1000029a <gpio_put>
}
100003c2:	bf00      	nop
100003c4:	bd80      	pop	{r7, pc}
100003c6:	bf00      	nop
100003c8:	000186a0 	.word	0x000186a0
100003cc:	20000774 	.word	0x20000774

100003d0 <alarm_irq>:
 * Side Effects: None
 * 
 * Overview: This routine changes the state of the pico LED upon 
             timer end.
 *****************************************************************/
static void alarm_irq(void) {
100003d0:	b5b0      	push	{r4, r5, r7, lr}
100003d2:	b084      	sub	sp, #16
100003d4:	af00      	add	r7, sp, #0
100003d6:	4b1b      	ldr	r3, [pc, #108]	@ (10000444 <alarm_irq+0x74>)
100003d8:	607b      	str	r3, [r7, #4]
100003da:	2301      	movs	r3, #1
100003dc:	603b      	str	r3, [r7, #0]
 *
 * \param addr Address of writable register
 * \param mask Bit-mask specifying bits to clear
 */
__force_inline static void hw_clear_bits(io_rw_32 *addr, uint32_t mask) {
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100003de:	687b      	ldr	r3, [r7, #4]
100003e0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
100003e4:	461a      	mov	r2, r3
100003e6:	683b      	ldr	r3, [r7, #0]
100003e8:	6013      	str	r3, [r2, #0]
}
100003ea:	bf00      	nop
    // Clear the alarm irq
    hw_clear_bits(&timer_hw->intr, 1u << ALARM_NUM);
    
    //turn on pico LED whenever timer goes off
    pico_led_state = !pico_led_state;         // Toggle LED state
100003ec:	4b16      	ldr	r3, [pc, #88]	@ (10000448 <alarm_irq+0x78>)
100003ee:	781b      	ldrb	r3, [r3, #0]
100003f0:	2b00      	cmp	r3, #0
100003f2:	bf14      	ite	ne
100003f4:	2301      	movne	r3, #1
100003f6:	2300      	moveq	r3, #0
100003f8:	b2db      	uxtb	r3, r3
100003fa:	f083 0301 	eor.w	r3, r3, #1
100003fe:	b2db      	uxtb	r3, r3
10000400:	f003 0301 	and.w	r3, r3, #1
10000404:	b2da      	uxtb	r2, r3
10000406:	4b10      	ldr	r3, [pc, #64]	@ (10000448 <alarm_irq+0x78>)
10000408:	701a      	strb	r2, [r3, #0]
    gpio_put(LED_PIN, pico_led_state);  // Update LED
1000040a:	4b0f      	ldr	r3, [pc, #60]	@ (10000448 <alarm_irq+0x78>)
1000040c:	781b      	ldrb	r3, [r3, #0]
1000040e:	4619      	mov	r1, r3
10000410:	2019      	movs	r0, #25
10000412:	f7ff ff42 	bl	1000029a <gpio_put>

    // This computes the next clock intstance at which the
    // alarm will "fire". The 500 * modifies u16_period to fit 
    // the how the alarm works
    uint64_t target = timer_hw->timerawl + (500 * u16_period);
10000416:	4b0d      	ldr	r3, [pc, #52]	@ (1000044c <alarm_irq+0x7c>)
10000418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000041a:	4a0d      	ldr	r2, [pc, #52]	@ (10000450 <alarm_irq+0x80>)
1000041c:	8812      	ldrh	r2, [r2, #0]
1000041e:	4611      	mov	r1, r2
10000420:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
10000424:	fb01 f202 	mul.w	r2, r1, r2
10000428:	4413      	add	r3, r2
1000042a:	2200      	movs	r2, #0
1000042c:	461c      	mov	r4, r3
1000042e:	4615      	mov	r5, r2
10000430:	e9c7 4502 	strd	r4, r5, [r7, #8]

    // Write the lower 32 bits of the target time to the alarm which
    // will arm it
    timer_hw->alarm[ALARM_NUM] = (uint32_t) target;
10000434:	4a05      	ldr	r2, [pc, #20]	@ (1000044c <alarm_irq+0x7c>)
10000436:	68bb      	ldr	r3, [r7, #8]
10000438:	6113      	str	r3, [r2, #16]
}
1000043a:	bf00      	nop
1000043c:	3710      	adds	r7, #16
1000043e:	46bd      	mov	sp, r7
10000440:	bdb0      	pop	{r4, r5, r7, pc}
10000442:	bf00      	nop
10000444:	400b003c 	.word	0x400b003c
10000448:	200006fa 	.word	0x200006fa
1000044c:	400b0000 	.word	0x400b0000
10000450:	200006f8 	.word	0x200006f8

10000454 <main>:

int main() {
10000454:	b5b0      	push	{r4, r5, r7, lr}
10000456:	b088      	sub	sp, #32
10000458:	af00      	add	r7, sp, #0
    stdio_init_all();
1000045a:	f005 f8f3 	bl	10005644 <stdio_init_all>
    gpio_init(PICOEDUB_LED2_PIN);
1000045e:	2002      	movs	r0, #2
10000460:	f000 f970 	bl	10000744 <gpio_init>
    gpio_set_dir(PICOEDUB_LED2_PIN, GPIO_OUT);
10000464:	2101      	movs	r1, #1
10000466:	2002      	movs	r0, #2
10000468:	f7ff ff2c 	bl	100002c4 <gpio_set_dir>
    gpio_init(PICOEDUB_LED3_PIN);
1000046c:	2003      	movs	r0, #3
1000046e:	f000 f969 	bl	10000744 <gpio_init>
    gpio_set_dir(PICOEDUB_LED3_PIN, GPIO_OUT);
10000472:	2101      	movs	r1, #1
10000474:	2003      	movs	r0, #3
10000476:	f7ff ff25 	bl	100002c4 <gpio_set_dir>
    watchdog_enable(12000, 1); //enable watchdog every 12 seconds.
1000047a:	2101      	movs	r1, #1
1000047c:	f642 60e0 	movw	r0, #12000	@ 0x2ee0
10000480:	f002 fda6 	bl	10002fd0 <watchdog_enable>
    ds3231_init();
10000484:	f7ff ff7e 	bl	10000384 <ds3231_init>
10000488:	4b4f      	ldr	r3, [pc, #316]	@ (100005c8 <main+0x174>)
1000048a:	60bb      	str	r3, [r7, #8]
1000048c:	2301      	movs	r3, #1
1000048e:	607b      	str	r3, [r7, #4]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000490:	68bb      	ldr	r3, [r7, #8]
10000492:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10000496:	461a      	mov	r2, r3
10000498:	687b      	ldr	r3, [r7, #4]
1000049a:	6013      	str	r3, [r2, #0]
}
1000049c:	bf00      	nop
    
    // Enable the interrupt for our alarm (the timer outputs 4 alarm irqs)
    hw_set_bits(&timer_hw->inte, 1u << ALARM_NUM);

    // Set irq handler for alarm irq
    irq_set_exclusive_handler(ALARM_IRQ, alarm_irq);
1000049e:	2100      	movs	r1, #0
100004a0:	484a      	ldr	r0, [pc, #296]	@ (100005cc <main+0x178>)
100004a2:	f7ff fed5 	bl	10000250 <timer_hardware_alarm_get_irq_num>
100004a6:	4603      	mov	r3, r0
100004a8:	4949      	ldr	r1, [pc, #292]	@ (100005d0 <main+0x17c>)
100004aa:	4618      	mov	r0, r3
100004ac:	f000 fb62 	bl	10000b74 <irq_set_exclusive_handler>

    // Enable the alarm irq
    irq_set_enabled(ALARM_IRQ, true);
100004b0:	2100      	movs	r1, #0
100004b2:	4846      	ldr	r0, [pc, #280]	@ (100005cc <main+0x178>)
100004b4:	f7ff fecc 	bl	10000250 <timer_hardware_alarm_get_irq_num>
100004b8:	4603      	mov	r3, r0
100004ba:	2101      	movs	r1, #1
100004bc:	4618      	mov	r0, r3
100004be:	f000 fac3 	bl	10000a48 <irq_set_enabled>
    // This is the first time the alarmed will be armed.
    // Afterwards, it'll be alarmed through the isr.
    // Alarm is only 32 bits so if trying to delay more
    // than that need to be careful and keep track of the upper
    // bits
    uint64_t target = timer_hw->timerawl + (500 * u16_period);
100004c2:	4b42      	ldr	r3, [pc, #264]	@ (100005cc <main+0x178>)
100004c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100004c6:	4a43      	ldr	r2, [pc, #268]	@ (100005d4 <main+0x180>)
100004c8:	8812      	ldrh	r2, [r2, #0]
100004ca:	4611      	mov	r1, r2
100004cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
100004d0:	fb01 f202 	mul.w	r2, r1, r2
100004d4:	4413      	add	r3, r2
100004d6:	2200      	movs	r2, #0
100004d8:	461c      	mov	r4, r3
100004da:	4615      	mov	r5, r2
100004dc:	e9c7 4504 	strd	r4, r5, [r7, #16]

    // Write the lower 32 bits of the target time to the alarm which
    // will arm it
    timer_hw->alarm[ALARM_NUM] = (uint32_t) target;
100004e0:	4a3a      	ldr	r2, [pc, #232]	@ (100005cc <main+0x178>)
100004e2:	693b      	ldr	r3, [r7, #16]
100004e4:	6113      	str	r3, [r2, #16]

    uint8_t previous_seconds = 0xFF; // Initialize to an invalid value to force the first display
100004e6:	23ff      	movs	r3, #255	@ 0xff
100004e8:	77fb      	strb	r3, [r7, #31]
    uint8_t previous_minutes = 0xFF;
100004ea:	23ff      	movs	r3, #255	@ 0xff
100004ec:	73fb      	strb	r3, [r7, #15]
    uint8_t previous_hours = 0xFF;
100004ee:	23ff      	movs	r3, #255	@ 0xff
100004f0:	73bb      	strb	r3, [r7, #14]
    uint8_t hours;
    uint8_t minutes;
    uint8_t seconds;
    
    //Read current time upon POR
    read_time(&hours, &minutes, &seconds);
100004f2:	1c7a      	adds	r2, r7, #1
100004f4:	1cb9      	adds	r1, r7, #2
100004f6:	1cfb      	adds	r3, r7, #3
100004f8:	4618      	mov	r0, r3
100004fa:	f7ff ff15 	bl	10000328 <read_time>
    printf("Current Time: %02X:%02X:%02X\n", hours, minutes, seconds);
100004fe:	78fb      	ldrb	r3, [r7, #3]
10000500:	4619      	mov	r1, r3
10000502:	78bb      	ldrb	r3, [r7, #2]
10000504:	461a      	mov	r2, r3
10000506:	787b      	ldrb	r3, [r7, #1]
10000508:	4833      	ldr	r0, [pc, #204]	@ (100005d8 <main+0x184>)
1000050a:	f005 f8e9 	bl	100056e0 <__wrap_printf>
    
    gpio_put(PICOEDUB_LED2_PIN, false); //turn off LED2 when watchdog timer activates.
1000050e:	2100      	movs	r1, #0
10000510:	2002      	movs	r0, #2
10000512:	f7ff fec2 	bl	1000029a <gpio_put>

    
    bool led3_state = true; // LED3 starts as ON
10000516:	2301      	movs	r3, #1
10000518:	77bb      	strb	r3, [r7, #30]
    gpio_put(PICOEDUB_LED3_PIN, led3_state);
1000051a:	7fbb      	ldrb	r3, [r7, #30]
1000051c:	4619      	mov	r1, r3
1000051e:	2003      	movs	r0, #3
10000520:	f7ff febb 	bl	1000029a <gpio_put>
    uint8_t watchdog_on = 0; // Incremental value until LED2 turns on
10000524:	2300      	movs	r3, #0
10000526:	777b      	strb	r3, [r7, #29]

    while (true) {
        //Keep track of previous time
        previous_minutes = minutes; 
10000528:	78bb      	ldrb	r3, [r7, #2]
1000052a:	73fb      	strb	r3, [r7, #15]
        previous_hours = hours;
1000052c:	78fb      	ldrb	r3, [r7, #3]
1000052e:	73bb      	strb	r3, [r7, #14]
        
        read_time(&hours, &minutes, &seconds);
10000530:	1c7a      	adds	r2, r7, #1
10000532:	1cb9      	adds	r1, r7, #2
10000534:	1cfb      	adds	r3, r7, #3
10000536:	4618      	mov	r0, r3
10000538:	f7ff fef6 	bl	10000328 <read_time>
        
            
        // Toggle LED every 5 seconds
        if (previous_seconds != seconds && seconds % 5 == 0) {
1000053c:	787b      	ldrb	r3, [r7, #1]
1000053e:	7ffa      	ldrb	r2, [r7, #31]
10000540:	429a      	cmp	r2, r3
10000542:	d02c      	beq.n	1000059e <main+0x14a>
10000544:	787a      	ldrb	r2, [r7, #1]
10000546:	4b25      	ldr	r3, [pc, #148]	@ (100005dc <main+0x188>)
10000548:	fba3 1302 	umull	r1, r3, r3, r2
1000054c:	0899      	lsrs	r1, r3, #2
1000054e:	460b      	mov	r3, r1
10000550:	009b      	lsls	r3, r3, #2
10000552:	440b      	add	r3, r1
10000554:	1ad3      	subs	r3, r2, r3
10000556:	b2db      	uxtb	r3, r3
10000558:	2b00      	cmp	r3, #0
1000055a:	d120      	bne.n	1000059e <main+0x14a>
            printf("LED %s at seconds: %02X\n", led3_state ? "ON" : "OFF", seconds);
1000055c:	7fbb      	ldrb	r3, [r7, #30]
1000055e:	2b00      	cmp	r3, #0
10000560:	d001      	beq.n	10000566 <main+0x112>
10000562:	4b1f      	ldr	r3, [pc, #124]	@ (100005e0 <main+0x18c>)
10000564:	e000      	b.n	10000568 <main+0x114>
10000566:	4b1f      	ldr	r3, [pc, #124]	@ (100005e4 <main+0x190>)
10000568:	787a      	ldrb	r2, [r7, #1]
1000056a:	4619      	mov	r1, r3
1000056c:	481e      	ldr	r0, [pc, #120]	@ (100005e8 <main+0x194>)
1000056e:	f005 f8b7 	bl	100056e0 <__wrap_printf>
            previous_seconds = seconds; 
10000572:	787b      	ldrb	r3, [r7, #1]
10000574:	77fb      	strb	r3, [r7, #31]
            led3_state = !led3_state;
10000576:	7fbb      	ldrb	r3, [r7, #30]
10000578:	2b00      	cmp	r3, #0
1000057a:	bf14      	ite	ne
1000057c:	2301      	movne	r3, #1
1000057e:	2300      	moveq	r3, #0
10000580:	b2db      	uxtb	r3, r3
10000582:	f083 0301 	eor.w	r3, r3, #1
10000586:	b2db      	uxtb	r3, r3
10000588:	77bb      	strb	r3, [r7, #30]
1000058a:	7fbb      	ldrb	r3, [r7, #30]
1000058c:	f003 0301 	and.w	r3, r3, #1
10000590:	77bb      	strb	r3, [r7, #30]
            gpio_put(PICOEDUB_LED3_PIN, led3_state);
10000592:	7fbb      	ldrb	r3, [r7, #30]
10000594:	4619      	mov	r1, r3
10000596:	2003      	movs	r0, #3
10000598:	f7ff fe7f 	bl	1000029a <gpio_put>
1000059c:	e00f      	b.n	100005be <main+0x16a>
            
        }else 
        {
            if(previous_seconds != seconds)
1000059e:	787b      	ldrb	r3, [r7, #1]
100005a0:	7ffa      	ldrb	r2, [r7, #31]
100005a2:	429a      	cmp	r2, r3
100005a4:	d00b      	beq.n	100005be <main+0x16a>
            {
                previous_seconds = seconds;
100005a6:	787b      	ldrb	r3, [r7, #1]
100005a8:	77fb      	strb	r3, [r7, #31]
                watchdog_on++;
100005aa:	7f7b      	ldrb	r3, [r7, #29]
100005ac:	3301      	adds	r3, #1
100005ae:	777b      	strb	r3, [r7, #29]
                //Turn LED2 on 2-3 seconds after POR.
                if(watchdog_on >= 3)
100005b0:	7f7b      	ldrb	r3, [r7, #29]
100005b2:	2b02      	cmp	r3, #2
100005b4:	d903      	bls.n	100005be <main+0x16a>
                {
                    gpio_put(PICOEDUB_LED2_PIN, true);
100005b6:	2101      	movs	r1, #1
100005b8:	2002      	movs	r0, #2
100005ba:	f7ff fe6e 	bl	1000029a <gpio_put>
                }   
            }
        }

        
        sleep_ms(100); // Polling interval
100005be:	2064      	movs	r0, #100	@ 0x64
100005c0:	f001 fedd 	bl	1000237e <sleep_ms>
        previous_minutes = minutes; 
100005c4:	e7b0      	b.n	10000528 <main+0xd4>
100005c6:	bf00      	nop
100005c8:	400b0040 	.word	0x400b0040
100005cc:	400b0000 	.word	0x400b0000
100005d0:	100003d1 	.word	0x100003d1
100005d4:	200006f8 	.word	0x200006f8
100005d8:	100064f0 	.word	0x100064f0
100005dc:	cccccccd 	.word	0xcccccccd
100005e0:	10006510 	.word	0x10006510
100005e4:	10006514 	.word	0x10006514
100005e8:	10006518 	.word	0x10006518

100005ec <check_gpio_param>:
static inline void check_gpio_param(__unused uint gpio) {
100005ec:	b480      	push	{r7}
100005ee:	b083      	sub	sp, #12
100005f0:	af00      	add	r7, sp, #0
100005f2:	6078      	str	r0, [r7, #4]
}
100005f4:	bf00      	nop
100005f6:	370c      	adds	r7, #12
100005f8:	46bd      	mov	sp, r7
100005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100005fe:	4770      	bx	lr

10000600 <gpio_put>:
static inline void gpio_put(uint gpio, bool value) {
10000600:	b480      	push	{r7}
10000602:	b085      	sub	sp, #20
10000604:	af00      	add	r7, sp, #0
10000606:	6078      	str	r0, [r7, #4]
10000608:	460b      	mov	r3, r1
1000060a:	70fb      	strb	r3, [r7, #3]
1000060c:	687b      	ldr	r3, [r7, #4]
1000060e:	60fb      	str	r3, [r7, #12]
10000610:	78fb      	ldrb	r3, [r7, #3]
10000612:	72fb      	strb	r3, [r7, #11]
    pico_default_asm_volatile ("mcrr p0, #4, %0, %1, c0" : : "r" (pin), "r" (val));
10000614:	68fb      	ldr	r3, [r7, #12]
10000616:	7afa      	ldrb	r2, [r7, #11]
10000618:	ec42 3040 	mcrr	0, 4, r3, r2, cr0
}
1000061c:	bf00      	nop
}
1000061e:	bf00      	nop
10000620:	3714      	adds	r7, #20
10000622:	46bd      	mov	sp, r7
10000624:	f85d 7b04 	ldr.w	r7, [sp], #4
10000628:	4770      	bx	lr

1000062a <gpio_set_dir>:
static inline void gpio_set_dir(uint gpio, bool out) {
1000062a:	b480      	push	{r7}
1000062c:	b085      	sub	sp, #20
1000062e:	af00      	add	r7, sp, #0
10000630:	6078      	str	r0, [r7, #4]
10000632:	460b      	mov	r3, r1
10000634:	70fb      	strb	r3, [r7, #3]
10000636:	687b      	ldr	r3, [r7, #4]
10000638:	60fb      	str	r3, [r7, #12]
1000063a:	78fb      	ldrb	r3, [r7, #3]
1000063c:	72fb      	strb	r3, [r7, #11]
    pico_default_asm_volatile ("mcrr p0, #4, %0, %1, c4" : : "r" (pin), "r" (val));
1000063e:	68fb      	ldr	r3, [r7, #12]
10000640:	7afa      	ldrb	r2, [r7, #11]
10000642:	ec42 3044 	mcrr	0, 4, r3, r2, cr4
}
10000646:	bf00      	nop
}
10000648:	bf00      	nop
1000064a:	3714      	adds	r7, #20
1000064c:	46bd      	mov	sp, r7
1000064e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000652:	4770      	bx	lr

10000654 <gpio_set_function>:
}

/// \tag::gpio_set_function[]
// Select function for this GPIO, and ensure input/output are enabled at the pad.
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, gpio_function_t fn) {
10000654:	b580      	push	{r7, lr}
10000656:	b08a      	sub	sp, #40	@ 0x28
10000658:	af00      	add	r7, sp, #0
1000065a:	6078      	str	r0, [r7, #4]
1000065c:	460b      	mov	r3, r1
1000065e:	70fb      	strb	r3, [r7, #3]
    check_gpio_param(gpio);
10000660:	6878      	ldr	r0, [r7, #4]
10000662:	f7ff ffc3 	bl	100005ec <check_gpio_param>
    invalid_params_if(HARDWARE_GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&pads_bank0_hw->io[gpio],
10000666:	687b      	ldr	r3, [r7, #4]
10000668:	009a      	lsls	r2, r3, #2
1000066a:	4b18      	ldr	r3, [pc, #96]	@ (100006cc <gpio_set_function+0x78>)
1000066c:	4413      	add	r3, r2
1000066e:	61fb      	str	r3, [r7, #28]
10000670:	2340      	movs	r3, #64	@ 0x40
10000672:	61bb      	str	r3, [r7, #24]
10000674:	23c0      	movs	r3, #192	@ 0xc0
10000676:	617b      	str	r3, [r7, #20]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000678:	69fb      	ldr	r3, [r7, #28]
1000067a:	681a      	ldr	r2, [r3, #0]
1000067c:	69bb      	ldr	r3, [r7, #24]
1000067e:	405a      	eors	r2, r3
10000680:	697b      	ldr	r3, [r7, #20]
10000682:	4013      	ands	r3, r2
10000684:	69fa      	ldr	r2, [r7, #28]
10000686:	613a      	str	r2, [r7, #16]
10000688:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000068a:	693b      	ldr	r3, [r7, #16]
1000068c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10000690:	461a      	mov	r2, r3
10000692:	68fb      	ldr	r3, [r7, #12]
10000694:	6013      	str	r3, [r2, #0]
}
10000696:	bf00      	nop
}
10000698:	bf00      	nop
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    io_bank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
1000069a:	490d      	ldr	r1, [pc, #52]	@ (100006d0 <gpio_set_function+0x7c>)
1000069c:	78fa      	ldrb	r2, [r7, #3]
1000069e:	687b      	ldr	r3, [r7, #4]
100006a0:	00db      	lsls	r3, r3, #3
100006a2:	440b      	add	r3, r1
100006a4:	605a      	str	r2, [r3, #4]
#if !PICO_RP2040
    // Remove pad isolation now that the correct peripheral is in control of the pad
    hw_clear_bits(&pads_bank0_hw->io[gpio], PADS_BANK0_GPIO0_ISO_BITS);
100006a6:	687b      	ldr	r3, [r7, #4]
100006a8:	009a      	lsls	r2, r3, #2
100006aa:	4b08      	ldr	r3, [pc, #32]	@ (100006cc <gpio_set_function+0x78>)
100006ac:	4413      	add	r3, r2
100006ae:	627b      	str	r3, [r7, #36]	@ 0x24
100006b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
100006b4:	623b      	str	r3, [r7, #32]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100006b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100006b8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
100006bc:	461a      	mov	r2, r3
100006be:	6a3b      	ldr	r3, [r7, #32]
100006c0:	6013      	str	r3, [r2, #0]
}
100006c2:	bf00      	nop
#endif
}
100006c4:	bf00      	nop
100006c6:	3728      	adds	r7, #40	@ 0x28
100006c8:	46bd      	mov	sp, r7
100006ca:	bd80      	pop	{r7, pc}
100006cc:	40038004 	.word	0x40038004
100006d0:	40028000 	.word	0x40028000

100006d4 <gpio_set_pulls>:
    return (gpio_function_t) ((io_bank0_hw->io[gpio].ctrl & IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS) >> IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB);
}

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
100006d4:	b580      	push	{r7, lr}
100006d6:	b088      	sub	sp, #32
100006d8:	af00      	add	r7, sp, #0
100006da:	6078      	str	r0, [r7, #4]
100006dc:	460b      	mov	r3, r1
100006de:	70fb      	strb	r3, [r7, #3]
100006e0:	4613      	mov	r3, r2
100006e2:	70bb      	strb	r3, [r7, #2]
    check_gpio_param(gpio);
100006e4:	6878      	ldr	r0, [r7, #4]
100006e6:	f7ff ff81 	bl	100005ec <check_gpio_param>
    hw_write_masked(
100006ea:	687b      	ldr	r3, [r7, #4]
100006ec:	009a      	lsls	r2, r3, #2
100006ee:	4b14      	ldr	r3, [pc, #80]	@ (10000740 <gpio_set_pulls+0x6c>)
100006f0:	4413      	add	r3, r2
            &pads_bank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
100006f2:	78fa      	ldrb	r2, [r7, #3]
100006f4:	2a00      	cmp	r2, #0
100006f6:	d001      	beq.n	100006fc <gpio_set_pulls+0x28>
100006f8:	2108      	movs	r1, #8
100006fa:	e000      	b.n	100006fe <gpio_set_pulls+0x2a>
100006fc:	2100      	movs	r1, #0
100006fe:	78ba      	ldrb	r2, [r7, #2]
10000700:	2a00      	cmp	r2, #0
10000702:	d001      	beq.n	10000708 <gpio_set_pulls+0x34>
10000704:	2204      	movs	r2, #4
10000706:	e000      	b.n	1000070a <gpio_set_pulls+0x36>
10000708:	2200      	movs	r2, #0
1000070a:	430a      	orrs	r2, r1
1000070c:	61fb      	str	r3, [r7, #28]
1000070e:	61ba      	str	r2, [r7, #24]
10000710:	230c      	movs	r3, #12
10000712:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000714:	69fb      	ldr	r3, [r7, #28]
10000716:	681a      	ldr	r2, [r3, #0]
10000718:	69bb      	ldr	r3, [r7, #24]
1000071a:	405a      	eors	r2, r3
1000071c:	697b      	ldr	r3, [r7, #20]
1000071e:	4013      	ands	r3, r2
10000720:	69fa      	ldr	r2, [r7, #28]
10000722:	613a      	str	r2, [r7, #16]
10000724:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000726:	693b      	ldr	r3, [r7, #16]
10000728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1000072c:	461a      	mov	r2, r3
1000072e:	68fb      	ldr	r3, [r7, #12]
10000730:	6013      	str	r3, [r2, #0]
}
10000732:	bf00      	nop
}
10000734:	bf00      	nop
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10000736:	bf00      	nop
10000738:	3720      	adds	r7, #32
1000073a:	46bd      	mov	sp, r7
1000073c:	bd80      	pop	{r7, pc}
1000073e:	bf00      	nop
10000740:	40038004 	.word	0x40038004

10000744 <gpio_init>:
        hw_set_bits(&pads_bank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
    else
        hw_clear_bits(&pads_bank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
10000744:	b580      	push	{r7, lr}
10000746:	b082      	sub	sp, #8
10000748:	af00      	add	r7, sp, #0
1000074a:	6078      	str	r0, [r7, #4]
    gpio_set_dir(gpio, GPIO_IN);
1000074c:	2100      	movs	r1, #0
1000074e:	6878      	ldr	r0, [r7, #4]
10000750:	f7ff ff6b 	bl	1000062a <gpio_set_dir>
    gpio_put(gpio, 0);
10000754:	2100      	movs	r1, #0
10000756:	6878      	ldr	r0, [r7, #4]
10000758:	f7ff ff52 	bl	10000600 <gpio_put>
    gpio_set_function(gpio, GPIO_FUNC_SIO);
1000075c:	2105      	movs	r1, #5
1000075e:	6878      	ldr	r0, [r7, #4]
10000760:	f7ff ff78 	bl	10000654 <gpio_set_function>
}
10000764:	bf00      	nop
10000766:	3708      	adds	r7, #8
10000768:	46bd      	mov	sp, r7
1000076a:	bd80      	pop	{r7, pc}

1000076c <panic>:
// todo consider making this try harder to output if we panic early
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
1000076c:	b40f      	push	{r0, r1, r2, r3}
1000076e:	b580      	push	{r7, lr}
10000770:	b082      	sub	sp, #8
10000772:	af00      	add	r7, sp, #0
    puts("\n*** PANIC ***\n");
10000774:	4809      	ldr	r0, [pc, #36]	@ (1000079c <panic+0x30>)
10000776:	f004 ff73 	bl	10005660 <__wrap_puts>
    if (fmt) {
1000077a:	693b      	ldr	r3, [r7, #16]
1000077c:	2b00      	cmp	r3, #0
1000077e:	d009      	beq.n	10000794 <panic+0x28>
#if LIB_PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10000780:	f107 0314 	add.w	r3, r7, #20
10000784:	607b      	str	r3, [r7, #4]
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
10000786:	6879      	ldr	r1, [r7, #4]
10000788:	6938      	ldr	r0, [r7, #16]
1000078a:	f004 ff7f 	bl	1000568c <__wrap_vprintf>
#else
        weak_raw_vprintf(fmt, args);
#endif
        va_end(args);
        puts("\n");
1000078e:	4804      	ldr	r0, [pc, #16]	@ (100007a0 <panic+0x34>)
10000790:	f004 ff66 	bl	10005660 <__wrap_puts>
#endif
    }

    _exit(1);
10000794:	2001      	movs	r0, #1
10000796:	f004 fcbb 	bl	10005110 <_exit>
1000079a:	bf00      	nop
1000079c:	10006544 	.word	0x10006544
100007a0:	10006554 	.word	0x10006554

100007a4 <hw_claim_lock>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "hardware/claim.h"

uint32_t hw_claim_lock(void) {
100007a4:	b480      	push	{r7}
100007a6:	b089      	sub	sp, #36	@ 0x24
100007a8:	af00      	add	r7, sp, #0
100007aa:	230b      	movs	r3, #11
100007ac:	607b      	str	r3, [r7, #4]
 * \return The spinlock instance
 */
__force_inline static spin_lock_t *spin_lock_instance(uint lock_num) {
    invalid_params_if(HARDWARE_SYNC, lock_num >= NUM_SPIN_LOCKS);
#if PICO_USE_SW_SPIN_LOCKS
    return SW_SPIN_LOCK_INSTANCE(lock_num);
100007ae:	687b      	ldr	r3, [r7, #4]
100007b0:	4a11      	ldr	r2, [pc, #68]	@ (100007f8 <hw_claim_lock+0x54>)
100007b2:	4413      	add	r3, r2
100007b4:	bf00      	nop
100007b6:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile (
        "csrrci %0, mstatus, 0x8\n"
        : "=r" (status) :: "memory"
    );
#else
    pico_default_asm_volatile (
100007b8:	f3ef 8310 	mrs	r3, PRIMASK
100007bc:	b672      	cpsid	i
100007be:	61bb      	str	r3, [r7, #24]
            "mrs %0, PRIMASK\n"
            "cpsid i"
            : "=r" (status) :: "memory");
#endif
    return status;
100007c0:	69bb      	ldr	r3, [r7, #24]
 *
 * \param lock Spinlock instance
 * \return interrupt status to be used when unlocking, to restore to original state
 */
__force_inline static uint32_t spin_lock_blocking(spin_lock_t *lock) {
    uint32_t save = save_and_disable_interrupts();
100007c2:	617b      	str	r3, [r7, #20]
100007c4:	69fb      	ldr	r3, [r7, #28]
100007c6:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_LOCK(lock);
100007c8:	6939      	ldr	r1, [r7, #16]
100007ca:	e8d1 3fcf 	ldaexb	r3, [r1]
100007ce:	2201      	movs	r2, #1
100007d0:	2b00      	cmp	r3, #0
100007d2:	d1fa      	bne.n	100007ca <hw_claim_lock+0x26>
100007d4:	e8c1 2f43 	strexb	r3, r2, [r1]
100007d8:	2b00      	cmp	r3, #0
100007da:	d1f6      	bne.n	100007ca <hw_claim_lock+0x26>
100007dc:	60fa      	str	r2, [r7, #12]
100007de:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("dmb" : : : "memory");
100007e0:	f3bf 8f5f 	dmb	sy
}
100007e4:	bf00      	nop
}
100007e6:	bf00      	nop
}
100007e8:	bf00      	nop
    spin_lock_unsafe_blocking(lock);
    return save;
100007ea:	697b      	ldr	r3, [r7, #20]
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
100007ec:	4618      	mov	r0, r3
100007ee:	3724      	adds	r7, #36	@ 0x24
100007f0:	46bd      	mov	sp, r7
100007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100007f6:	4770      	bx	lr
100007f8:	20000910 	.word	0x20000910

100007fc <hw_claim_unlock>:

void hw_claim_unlock(uint32_t save) {
100007fc:	b480      	push	{r7}
100007fe:	b089      	sub	sp, #36	@ 0x24
10000800:	af00      	add	r7, sp, #0
10000802:	6078      	str	r0, [r7, #4]
10000804:	230b      	movs	r3, #11
10000806:	60bb      	str	r3, [r7, #8]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000808:	68bb      	ldr	r3, [r7, #8]
1000080a:	4a0e      	ldr	r2, [pc, #56]	@ (10000844 <hw_claim_unlock+0x48>)
1000080c:	4413      	add	r3, r2
1000080e:	bf00      	nop
10000810:	61fb      	str	r3, [r7, #28]
10000812:	687b      	ldr	r3, [r7, #4]
10000814:	61bb      	str	r3, [r7, #24]
10000816:	69fb      	ldr	r3, [r7, #28]
10000818:	617b      	str	r3, [r7, #20]
    SW_SPIN_LOCK_UNLOCK(lock);
1000081a:	2300      	movs	r3, #0
1000081c:	613b      	str	r3, [r7, #16]
1000081e:	693b      	ldr	r3, [r7, #16]
10000820:	697a      	ldr	r2, [r7, #20]
10000822:	e8c2 3f8f 	stlb	r3, [r2]
}
10000826:	bf00      	nop
10000828:	69bb      	ldr	r3, [r7, #24]
1000082a:	60fb      	str	r3, [r7, #12]
    __compiler_memory_barrier();
    riscv_set_csr(mstatus, status & 8);
    __compiler_memory_barrier();
#else
    // on ARM, this behaves the same as restore_interrupts()
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
1000082c:	68fb      	ldr	r3, [r7, #12]
1000082e:	f383 8810 	msr	PRIMASK, r3
#endif
}
10000832:	bf00      	nop
 * \sa spin_lock_blocking()
 */
__force_inline static void spin_unlock(spin_lock_t *lock, uint32_t saved_irq) {
    spin_unlock_unsafe(lock);
    restore_interrupts_from_disabled(saved_irq);
}
10000834:	bf00      	nop
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
10000836:	bf00      	nop
10000838:	3724      	adds	r7, #36	@ 0x24
1000083a:	46bd      	mov	sp, r7
1000083c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000840:	4770      	bx	lr
10000842:	bf00      	nop
10000844:	20000910 	.word	0x20000910

10000848 <hw_is_claimed>:

inline bool hw_is_claimed(const uint8_t *bits, uint bit_index) {
10000848:	b480      	push	{r7}
1000084a:	b083      	sub	sp, #12
1000084c:	af00      	add	r7, sp, #0
1000084e:	6078      	str	r0, [r7, #4]
10000850:	6039      	str	r1, [r7, #0]
    return (bits[bit_index >> 3u] & (1u << (bit_index & 7u)));
10000852:	683b      	ldr	r3, [r7, #0]
10000854:	08db      	lsrs	r3, r3, #3
10000856:	687a      	ldr	r2, [r7, #4]
10000858:	4413      	add	r3, r2
1000085a:	781b      	ldrb	r3, [r3, #0]
1000085c:	4619      	mov	r1, r3
1000085e:	683b      	ldr	r3, [r7, #0]
10000860:	f003 0307 	and.w	r3, r3, #7
10000864:	2201      	movs	r2, #1
10000866:	fa02 f303 	lsl.w	r3, r2, r3
1000086a:	400b      	ands	r3, r1
1000086c:	2b00      	cmp	r3, #0
1000086e:	bf14      	ite	ne
10000870:	2301      	movne	r3, #1
10000872:	2300      	moveq	r3, #0
10000874:	b2db      	uxtb	r3, r3
}
10000876:	4618      	mov	r0, r3
10000878:	370c      	adds	r7, #12
1000087a:	46bd      	mov	sp, r7
1000087c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000880:	4770      	bx	lr

10000882 <hw_claim_or_assert>:

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10000882:	b580      	push	{r7, lr}
10000884:	b086      	sub	sp, #24
10000886:	af00      	add	r7, sp, #0
10000888:	60f8      	str	r0, [r7, #12]
1000088a:	60b9      	str	r1, [r7, #8]
1000088c:	607a      	str	r2, [r7, #4]
    uint32_t save = hw_claim_lock();
1000088e:	f7ff ff89 	bl	100007a4 <hw_claim_lock>
10000892:	6178      	str	r0, [r7, #20]
    if (hw_is_claimed(bits, bit_index)) {
10000894:	68b9      	ldr	r1, [r7, #8]
10000896:	68f8      	ldr	r0, [r7, #12]
10000898:	f7ff ffd6 	bl	10000848 <hw_is_claimed>
1000089c:	4603      	mov	r3, r0
1000089e:	2b00      	cmp	r3, #0
100008a0:	d003      	beq.n	100008aa <hw_claim_or_assert+0x28>
        panic(message, bit_index);
100008a2:	68b9      	ldr	r1, [r7, #8]
100008a4:	6878      	ldr	r0, [r7, #4]
100008a6:	f7ff ff61 	bl	1000076c <panic>
    } else {
        bits[bit_index >> 3u] |= (uint8_t)(1u << (bit_index & 7u));
100008aa:	68bb      	ldr	r3, [r7, #8]
100008ac:	08db      	lsrs	r3, r3, #3
100008ae:	68fa      	ldr	r2, [r7, #12]
100008b0:	4413      	add	r3, r2
100008b2:	7819      	ldrb	r1, [r3, #0]
100008b4:	68bb      	ldr	r3, [r7, #8]
100008b6:	f003 0307 	and.w	r3, r3, #7
100008ba:	2201      	movs	r2, #1
100008bc:	fa02 f303 	lsl.w	r3, r2, r3
100008c0:	b2da      	uxtb	r2, r3
100008c2:	68bb      	ldr	r3, [r7, #8]
100008c4:	08db      	lsrs	r3, r3, #3
100008c6:	68f8      	ldr	r0, [r7, #12]
100008c8:	4403      	add	r3, r0
100008ca:	430a      	orrs	r2, r1
100008cc:	b2d2      	uxtb	r2, r2
100008ce:	701a      	strb	r2, [r3, #0]
    }
    hw_claim_unlock(save);
100008d0:	6978      	ldr	r0, [r7, #20]
100008d2:	f7ff ff93 	bl	100007fc <hw_claim_unlock>
}
100008d6:	bf00      	nop
100008d8:	3718      	adds	r7, #24
100008da:	46bd      	mov	sp, r7
100008dc:	bd80      	pop	{r7, pc}
	...

100008e0 <next_striped_spin_lock_num>:

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(HARDWARE_SYNC, lock_num >= 32);
}

uint next_striped_spin_lock_num(void) {
100008e0:	b480      	push	{r7}
100008e2:	b083      	sub	sp, #12
100008e4:	af00      	add	r7, sp, #0
    uint rc = striped_spin_lock_num++;
100008e6:	4b0a      	ldr	r3, [pc, #40]	@ (10000910 <next_striped_spin_lock_num+0x30>)
100008e8:	781b      	ldrb	r3, [r3, #0]
100008ea:	1c5a      	adds	r2, r3, #1
100008ec:	b2d1      	uxtb	r1, r2
100008ee:	4a08      	ldr	r2, [pc, #32]	@ (10000910 <next_striped_spin_lock_num+0x30>)
100008f0:	7011      	strb	r1, [r2, #0]
100008f2:	607b      	str	r3, [r7, #4]
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
100008f4:	4b06      	ldr	r3, [pc, #24]	@ (10000910 <next_striped_spin_lock_num+0x30>)
100008f6:	781b      	ldrb	r3, [r3, #0]
100008f8:	2b17      	cmp	r3, #23
100008fa:	d902      	bls.n	10000902 <next_striped_spin_lock_num+0x22>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
100008fc:	4b04      	ldr	r3, [pc, #16]	@ (10000910 <next_striped_spin_lock_num+0x30>)
100008fe:	2210      	movs	r2, #16
10000900:	701a      	strb	r2, [r3, #0]
    }
    return rc;
10000902:	687b      	ldr	r3, [r7, #4]
}
10000904:	4618      	mov	r0, r3
10000906:	370c      	adds	r7, #12
10000908:	46bd      	mov	sp, r7
1000090a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000090e:	4770      	bx	lr
10000910:	200006fb 	.word	0x200006fb

10000914 <spin_locks_reset>:
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */
#include "hardware/sync/spin_lock.h"

void spin_locks_reset(void) {
10000914:	b480      	push	{r7}
10000916:	b085      	sub	sp, #20
10000918:	af00      	add	r7, sp, #0
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
1000091a:	2300      	movs	r3, #0
1000091c:	60fb      	str	r3, [r7, #12]
1000091e:	e010      	b.n	10000942 <spin_locks_reset+0x2e>
10000920:	68fb      	ldr	r3, [r7, #12]
10000922:	603b      	str	r3, [r7, #0]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000924:	683b      	ldr	r3, [r7, #0]
10000926:	4a0c      	ldr	r2, [pc, #48]	@ (10000958 <spin_locks_reset+0x44>)
10000928:	4413      	add	r3, r2
1000092a:	bf00      	nop
1000092c:	60bb      	str	r3, [r7, #8]
    SW_SPIN_LOCK_UNLOCK(lock);
1000092e:	2300      	movs	r3, #0
10000930:	607b      	str	r3, [r7, #4]
10000932:	687b      	ldr	r3, [r7, #4]
10000934:	68ba      	ldr	r2, [r7, #8]
10000936:	e8c2 3f8f 	stlb	r3, [r2]
}
1000093a:	bf00      	nop
1000093c:	68fb      	ldr	r3, [r7, #12]
1000093e:	3301      	adds	r3, #1
10000940:	60fb      	str	r3, [r7, #12]
10000942:	68fb      	ldr	r3, [r7, #12]
10000944:	2b1f      	cmp	r3, #31
10000946:	d9eb      	bls.n	10000920 <spin_locks_reset+0xc>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
10000948:	bf00      	nop
1000094a:	bf00      	nop
1000094c:	3714      	adds	r7, #20
1000094e:	46bd      	mov	sp, r7
10000950:	f85d 7b04 	ldr.w	r7, [sp], #4
10000954:	4770      	bx	lr
10000956:	bf00      	nop
10000958:	20000910 	.word	0x20000910

1000095c <spinlock_set_extexclall>:

#if __ARM_ARCH_8M_MAIN__ && !PICO_SW_SPIN_LOCKS_NO_EXTEXCLALL
#include "pico/runtime_init.h"
#include "hardware/structs/m33.h"

static void spinlock_set_extexclall(void) {
1000095c:	b480      	push	{r7}
1000095e:	af00      	add	r7, sp, #0
    // SRAM and also single-core exclusives in external PSRAM (not covered by
    // the global monitor on RP2350) you must clear this and add your own
    // Shareable regions.
    //
    // Setting PICO_SW_SPIN_LOCKS_NO_EXTEXCLALL == 1 will disable this code
    m33_hw->actlr |= M33_ACTLR_EXTEXCLALL_BITS;
10000960:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
10000964:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
10000968:	689b      	ldr	r3, [r3, #8]
1000096a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
1000096e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
10000972:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
10000976:	6093      	str	r3, [r2, #8]
}
10000978:	bf00      	nop
1000097a:	46bd      	mov	sp, r7
1000097c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000980:	4770      	bx	lr

10000982 <check_irq_param>:
 *
 * All interrupts handlers should be of this type, and follow normal ARM EABI register saving conventions
 */
typedef void (*irq_handler_t)(void);

static inline void check_irq_param(__unused uint num) {
10000982:	b480      	push	{r7}
10000984:	b083      	sub	sp, #12
10000986:	af00      	add	r7, sp, #0
10000988:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_IRQ, num >= NUM_IRQS);
}
1000098a:	bf00      	nop
1000098c:	370c      	adds	r7, #12
1000098e:	46bd      	mov	sp, r7
10000990:	f85d 7b04 	ldr.w	r7, [sp], #4
10000994:	4770      	bx	lr
	...

10000998 <get_vtable>:
static inline uint8_t *user_irq_claimed_ptr(void) {
    return &user_irq_claimed;
}
#endif

static inline irq_handler_t *get_vtable(void) {
10000998:	b480      	push	{r7}
1000099a:	af00      	add	r7, sp, #0
#ifdef __riscv
    return (irq_handler_t *) (riscv_read_csr(RVCSR_MTVEC_OFFSET) & ~0x3u);
#else
    return (irq_handler_t *) scb_hw->vtor;
1000099c:	4b03      	ldr	r3, [pc, #12]	@ (100009ac <get_vtable+0x14>)
1000099e:	689b      	ldr	r3, [r3, #8]
#endif
}
100009a0:	4618      	mov	r0, r3
100009a2:	46bd      	mov	sp, r7
100009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
100009a8:	4770      	bx	lr
100009aa:	bf00      	nop
100009ac:	e000ed00 	.word	0xe000ed00

100009b0 <add_thumb_bit>:

static inline void *add_thumb_bit(void *addr) {
100009b0:	b480      	push	{r7}
100009b2:	b083      	sub	sp, #12
100009b4:	af00      	add	r7, sp, #0
100009b6:	6078      	str	r0, [r7, #4]
#ifdef __riscv
    return addr;
#else
    return (void *) (((uintptr_t) addr) | 0x1);
100009b8:	687b      	ldr	r3, [r7, #4]
100009ba:	f043 0301 	orr.w	r3, r3, #1
#endif
}
100009be:	4618      	mov	r0, r3
100009c0:	370c      	adds	r7, #12
100009c2:	46bd      	mov	sp, r7
100009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
100009c8:	4770      	bx	lr

100009ca <remove_thumb_bit>:

static inline void *remove_thumb_bit(void *addr) {
100009ca:	b480      	push	{r7}
100009cc:	b083      	sub	sp, #12
100009ce:	af00      	add	r7, sp, #0
100009d0:	6078      	str	r0, [r7, #4]
#ifdef __riscv
    return addr;
#else
    return (void *) (((uintptr_t) addr) & (uint)~0x1);
100009d2:	687b      	ldr	r3, [r7, #4]
100009d4:	f023 0301 	bic.w	r3, r3, #1
#endif
}
100009d8:	4618      	mov	r0, r3
100009da:	370c      	adds	r7, #12
100009dc:	46bd      	mov	sp, r7
100009de:	f85d 7b04 	ldr.w	r7, [sp], #4
100009e2:	4770      	bx	lr

100009e4 <set_raw_irq_handler_and_unlock>:

static void set_raw_irq_handler_and_unlock(uint num, irq_handler_t handler, uint32_t save) {
100009e4:	b580      	push	{r7, lr}
100009e6:	b08a      	sub	sp, #40	@ 0x28
100009e8:	af00      	add	r7, sp, #0
100009ea:	60f8      	str	r0, [r7, #12]
100009ec:	60b9      	str	r1, [r7, #8]
100009ee:	607a      	str	r2, [r7, #4]
    // update vtable (vtable_handler may be same or updated depending on cases, but we do it anyway for compactness)
    get_vtable()[VTABLE_FIRST_IRQ + num] = handler;
100009f0:	f7ff ffd2 	bl	10000998 <get_vtable>
100009f4:	4602      	mov	r2, r0
100009f6:	68fb      	ldr	r3, [r7, #12]
100009f8:	3310      	adds	r3, #16
100009fa:	009b      	lsls	r3, r3, #2
100009fc:	4413      	add	r3, r2
100009fe:	68ba      	ldr	r2, [r7, #8]
10000a00:	601a      	str	r2, [r3, #0]
    pico_default_asm_volatile ("dmb" : : : "memory");
10000a02:	f3bf 8f5f 	dmb	sy
}
10000a06:	bf00      	nop
10000a08:	2309      	movs	r3, #9
10000a0a:	613b      	str	r3, [r7, #16]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000a0c:	693b      	ldr	r3, [r7, #16]
10000a0e:	4a0d      	ldr	r2, [pc, #52]	@ (10000a44 <set_raw_irq_handler_and_unlock+0x60>)
10000a10:	4413      	add	r3, r2
10000a12:	bf00      	nop
10000a14:	627b      	str	r3, [r7, #36]	@ 0x24
10000a16:	687b      	ldr	r3, [r7, #4]
10000a18:	623b      	str	r3, [r7, #32]
10000a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10000a1c:	61fb      	str	r3, [r7, #28]
    SW_SPIN_LOCK_UNLOCK(lock);
10000a1e:	2300      	movs	r3, #0
10000a20:	61bb      	str	r3, [r7, #24]
10000a22:	69bb      	ldr	r3, [r7, #24]
10000a24:	69fa      	ldr	r2, [r7, #28]
10000a26:	e8c2 3f8f 	stlb	r3, [r2]
}
10000a2a:	bf00      	nop
10000a2c:	6a3b      	ldr	r3, [r7, #32]
10000a2e:	617b      	str	r3, [r7, #20]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10000a30:	697b      	ldr	r3, [r7, #20]
10000a32:	f383 8810 	msr	PRIMASK, r3
}
10000a36:	bf00      	nop
}
10000a38:	bf00      	nop
    __dmb();
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_IRQ), save);
}
10000a3a:	bf00      	nop
10000a3c:	3728      	adds	r7, #40	@ 0x28
10000a3e:	46bd      	mov	sp, r7
10000a40:	bd80      	pop	{r7, pc}
10000a42:	bf00      	nop
10000a44:	20000910 	.word	0x20000910

10000a48 <irq_set_enabled>:

void irq_set_enabled(uint num, bool enabled) {
10000a48:	b580      	push	{r7, lr}
10000a4a:	b082      	sub	sp, #8
10000a4c:	af00      	add	r7, sp, #0
10000a4e:	6078      	str	r0, [r7, #4]
10000a50:	460b      	mov	r3, r1
10000a52:	70fb      	strb	r3, [r7, #3]
    check_irq_param(num);
10000a54:	6878      	ldr	r0, [r7, #4]
10000a56:	f7ff ff94 	bl	10000982 <check_irq_param>
    // really should update irq_set_mask_enabled?
    irq_set_mask_n_enabled(num / 32, 1u << (num % 32), enabled);
10000a5a:	687b      	ldr	r3, [r7, #4]
10000a5c:	0958      	lsrs	r0, r3, #5
10000a5e:	687b      	ldr	r3, [r7, #4]
10000a60:	f003 031f 	and.w	r3, r3, #31
10000a64:	2201      	movs	r2, #1
10000a66:	fa02 f303 	lsl.w	r3, r2, r3
10000a6a:	78fa      	ldrb	r2, [r7, #3]
10000a6c:	4619      	mov	r1, r3
10000a6e:	f000 f847 	bl	10000b00 <irq_set_mask_n_enabled>
}
10000a72:	bf00      	nop
10000a74:	3708      	adds	r7, #8
10000a76:	46bd      	mov	sp, r7
10000a78:	bd80      	pop	{r7, pc}
	...

10000a7c <irq_is_enabled>:

bool irq_is_enabled(uint num) {
10000a7c:	b580      	push	{r7, lr}
10000a7e:	b082      	sub	sp, #8
10000a80:	af00      	add	r7, sp, #0
10000a82:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
10000a84:	6878      	ldr	r0, [r7, #4]
10000a86:	f7ff ff7c 	bl	10000982 <check_irq_param>
#if PICO_RP2040
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
#elif defined(__riscv)
    return 0 != (hazard3_irqarray_read(RVCSR_MEIEA_OFFSET, num / 16) & (1u << (num % 16)));
#else
    return 0 != (nvic_hw->iser[num/32] & (1 << num % 32));
10000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (10000ab4 <irq_is_enabled+0x38>)
10000a8c:	687b      	ldr	r3, [r7, #4]
10000a8e:	095b      	lsrs	r3, r3, #5
10000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000a94:	687a      	ldr	r2, [r7, #4]
10000a96:	f002 021f 	and.w	r2, r2, #31
10000a9a:	2101      	movs	r1, #1
10000a9c:	fa01 f202 	lsl.w	r2, r1, r2
10000aa0:	4013      	ands	r3, r2
10000aa2:	2b00      	cmp	r3, #0
10000aa4:	bf14      	ite	ne
10000aa6:	2301      	movne	r3, #1
10000aa8:	2300      	moveq	r3, #0
10000aaa:	b2db      	uxtb	r3, r3
#endif
}
10000aac:	4618      	mov	r0, r3
10000aae:	3708      	adds	r7, #8
10000ab0:	46bd      	mov	sp, r7
10000ab2:	bd80      	pop	{r7, pc}
10000ab4:	e000e100 	.word	0xe000e100

10000ab8 <irq_set_mask_n_enabled_internal>:

static inline void irq_set_mask_n_enabled_internal(uint n, uint32_t mask, bool enabled) {
10000ab8:	b480      	push	{r7}
10000aba:	b085      	sub	sp, #20
10000abc:	af00      	add	r7, sp, #0
10000abe:	60f8      	str	r0, [r7, #12]
10000ac0:	60b9      	str	r1, [r7, #8]
10000ac2:	4613      	mov	r3, r2
10000ac4:	71fb      	strb	r3, [r7, #7]
    } else {
        nvic_hw->icer = mask;
    }
#else
    // >32 IRQs (well this works for the bottom 32 which is all that is passed in
    if (enabled) {
10000ac6:	79fb      	ldrb	r3, [r7, #7]
10000ac8:	2b00      	cmp	r3, #0
10000aca:	d00b      	beq.n	10000ae4 <irq_set_mask_n_enabled_internal+0x2c>
        nvic_hw->icpr[n] = mask;
10000acc:	490b      	ldr	r1, [pc, #44]	@ (10000afc <irq_set_mask_n_enabled_internal+0x44>)
10000ace:	68fb      	ldr	r3, [r7, #12]
10000ad0:	3360      	adds	r3, #96	@ 0x60
10000ad2:	68ba      	ldr	r2, [r7, #8]
10000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        nvic_hw->iser[n] = mask;
10000ad8:	4908      	ldr	r1, [pc, #32]	@ (10000afc <irq_set_mask_n_enabled_internal+0x44>)
10000ada:	68fb      	ldr	r3, [r7, #12]
10000adc:	68ba      	ldr	r2, [r7, #8]
10000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
        nvic_hw->icer[n] = mask;
    }
#endif
}
10000ae2:	e005      	b.n	10000af0 <irq_set_mask_n_enabled_internal+0x38>
        nvic_hw->icer[n] = mask;
10000ae4:	4905      	ldr	r1, [pc, #20]	@ (10000afc <irq_set_mask_n_enabled_internal+0x44>)
10000ae6:	68fb      	ldr	r3, [r7, #12]
10000ae8:	3320      	adds	r3, #32
10000aea:	68ba      	ldr	r2, [r7, #8]
10000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
10000af0:	bf00      	nop
10000af2:	3714      	adds	r7, #20
10000af4:	46bd      	mov	sp, r7
10000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
10000afa:	4770      	bx	lr
10000afc:	e000e100 	.word	0xe000e100

10000b00 <irq_set_mask_n_enabled>:

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    irq_set_mask_n_enabled_internal(0, mask, enabled);
}

void irq_set_mask_n_enabled(uint n, uint32_t mask, bool enabled) {
10000b00:	b580      	push	{r7, lr}
10000b02:	b084      	sub	sp, #16
10000b04:	af00      	add	r7, sp, #0
10000b06:	60f8      	str	r0, [r7, #12]
10000b08:	60b9      	str	r1, [r7, #8]
10000b0a:	4613      	mov	r3, r2
10000b0c:	71fb      	strb	r3, [r7, #7]
    irq_set_mask_n_enabled_internal(n, mask, enabled);
10000b0e:	79fb      	ldrb	r3, [r7, #7]
10000b10:	461a      	mov	r2, r3
10000b12:	68b9      	ldr	r1, [r7, #8]
10000b14:	68f8      	ldr	r0, [r7, #12]
10000b16:	f7ff ffcf 	bl	10000ab8 <irq_set_mask_n_enabled_internal>
}
10000b1a:	bf00      	nop
10000b1c:	3710      	adds	r7, #16
10000b1e:	46bd      	mov	sp, r7
10000b20:	bd80      	pop	{r7, pc}
	...

10000b24 <is_shared_irq_raw_handler>:
#endif
} irq_handler_chain_slots[PICO_MAX_SHARED_IRQ_HANDLERS];

static int8_t irq_handler_chain_free_slot_head;

static inline bool is_shared_irq_raw_handler(irq_handler_t raw_handler) {
10000b24:	b480      	push	{r7}
10000b26:	b083      	sub	sp, #12
10000b28:	af00      	add	r7, sp, #0
10000b2a:	6078      	str	r0, [r7, #4]
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
10000b2c:	687b      	ldr	r3, [r7, #4]
10000b2e:	4a06      	ldr	r2, [pc, #24]	@ (10000b48 <is_shared_irq_raw_handler+0x24>)
10000b30:	1a9b      	subs	r3, r3, r2
10000b32:	2b2f      	cmp	r3, #47	@ 0x2f
10000b34:	bf94      	ite	ls
10000b36:	2301      	movls	r3, #1
10000b38:	2300      	movhi	r3, #0
10000b3a:	b2db      	uxtb	r3, r3
}
10000b3c:	4618      	mov	r0, r3
10000b3e:	370c      	adds	r7, #12
10000b40:	46bd      	mov	sp, r7
10000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b46:	4770      	bx	lr
10000b48:	200006fc 	.word	0x200006fc

10000b4c <irq_get_vtable_handler>:
    return false;
}
#endif


irq_handler_t irq_get_vtable_handler(uint num) {
10000b4c:	b580      	push	{r7, lr}
10000b4e:	b082      	sub	sp, #8
10000b50:	af00      	add	r7, sp, #0
10000b52:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
10000b54:	6878      	ldr	r0, [r7, #4]
10000b56:	f7ff ff14 	bl	10000982 <check_irq_param>
    return get_vtable()[VTABLE_FIRST_IRQ + num];
10000b5a:	f7ff ff1d 	bl	10000998 <get_vtable>
10000b5e:	4602      	mov	r2, r0
10000b60:	687b      	ldr	r3, [r7, #4]
10000b62:	3310      	adds	r3, #16
10000b64:	009b      	lsls	r3, r3, #2
10000b66:	4413      	add	r3, r2
10000b68:	681b      	ldr	r3, [r3, #0]
}
10000b6a:	4618      	mov	r0, r3
10000b6c:	3708      	adds	r7, #8
10000b6e:	46bd      	mov	sp, r7
10000b70:	bd80      	pop	{r7, pc}
	...

10000b74 <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
10000b74:	b580      	push	{r7, lr}
10000b76:	b08c      	sub	sp, #48	@ 0x30
10000b78:	af00      	add	r7, sp, #0
10000b7a:	6078      	str	r0, [r7, #4]
10000b7c:	6039      	str	r1, [r7, #0]
    check_irq_param(num);
10000b7e:	6878      	ldr	r0, [r7, #4]
10000b80:	f7ff feff 	bl	10000982 <check_irq_param>
10000b84:	2309      	movs	r3, #9
10000b86:	60bb      	str	r3, [r7, #8]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000b88:	68bb      	ldr	r3, [r7, #8]
10000b8a:	4a1e      	ldr	r2, [pc, #120]	@ (10000c04 <irq_set_exclusive_handler+0x90>)
10000b8c:	4413      	add	r3, r2
10000b8e:	bf00      	nop
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
10000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
10000b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10000b94:	623b      	str	r3, [r7, #32]
    pico_default_asm_volatile (
10000b96:	f3ef 8310 	mrs	r3, PRIMASK
10000b9a:	b672      	cpsid	i
10000b9c:	61fb      	str	r3, [r7, #28]
    return status;
10000b9e:	69fb      	ldr	r3, [r7, #28]
    uint32_t save = save_and_disable_interrupts();
10000ba0:	61bb      	str	r3, [r7, #24]
10000ba2:	6a3b      	ldr	r3, [r7, #32]
10000ba4:	617b      	str	r3, [r7, #20]
    SW_SPIN_LOCK_LOCK(lock);
10000ba6:	6979      	ldr	r1, [r7, #20]
10000ba8:	e8d1 3fcf 	ldaexb	r3, [r1]
10000bac:	2201      	movs	r2, #1
10000bae:	2b00      	cmp	r3, #0
10000bb0:	d1fa      	bne.n	10000ba8 <irq_set_exclusive_handler+0x34>
10000bb2:	e8c1 2f43 	strexb	r3, r2, [r1]
10000bb6:	2b00      	cmp	r3, #0
10000bb8:	d1f6      	bne.n	10000ba8 <irq_set_exclusive_handler+0x34>
10000bba:	613a      	str	r2, [r7, #16]
10000bbc:	60fb      	str	r3, [r7, #12]
    pico_default_asm_volatile ("dmb" : : : "memory");
10000bbe:	f3bf 8f5f 	dmb	sy
}
10000bc2:	bf00      	nop
}
10000bc4:	bf00      	nop
}
10000bc6:	bf00      	nop
    return save;
10000bc8:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = spin_lock_blocking(lock);
10000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    __unused irq_handler_t current = irq_get_vtable_handler(num);
10000bcc:	6878      	ldr	r0, [r7, #4]
10000bce:	f7ff ffbd 	bl	10000b4c <irq_get_vtable_handler>
10000bd2:	6278      	str	r0, [r7, #36]	@ 0x24
    hard_assert(current == __unhandled_user_irq || current == handler);
10000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10000bd6:	4a0c      	ldr	r2, [pc, #48]	@ (10000c08 <irq_set_exclusive_handler+0x94>)
10000bd8:	4293      	cmp	r3, r2
10000bda:	d009      	beq.n	10000bf0 <irq_set_exclusive_handler+0x7c>
10000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10000bde:	683b      	ldr	r3, [r7, #0]
10000be0:	429a      	cmp	r2, r3
10000be2:	d005      	beq.n	10000bf0 <irq_set_exclusive_handler+0x7c>
10000be4:	4b09      	ldr	r3, [pc, #36]	@ (10000c0c <irq_set_exclusive_handler+0x98>)
10000be6:	4a0a      	ldr	r2, [pc, #40]	@ (10000c10 <irq_set_exclusive_handler+0x9c>)
10000be8:	21e1      	movs	r1, #225	@ 0xe1
10000bea:	480a      	ldr	r0, [pc, #40]	@ (10000c14 <irq_set_exclusive_handler+0xa0>)
10000bec:	f004 fa9e 	bl	1000512c <__assert_func>
    set_raw_irq_handler_and_unlock(num, handler, save);
10000bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10000bf2:	6839      	ldr	r1, [r7, #0]
10000bf4:	6878      	ldr	r0, [r7, #4]
10000bf6:	f7ff fef5 	bl	100009e4 <set_raw_irq_handler_and_unlock>
#else
    panic_unsupported();
#endif
}
10000bfa:	bf00      	nop
10000bfc:	3730      	adds	r7, #48	@ 0x30
10000bfe:	46bd      	mov	sp, r7
10000c00:	bd80      	pop	{r7, pc}
10000c02:	bf00      	nop
10000c04:	20000910 	.word	0x20000910
10000c08:	1000011d 	.word	0x1000011d
10000c0c:	10006558 	.word	0x10006558
10000c10:	100067ac 	.word	0x100067ac
10000c14:	10006590 	.word	0x10006590

10000c18 <make_j_16>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS

#ifndef __riscv

static uint16_t make_j_16(uint16_t *from, void *to) {
10000c18:	b580      	push	{r7, lr}
10000c1a:	b086      	sub	sp, #24
10000c1c:	af00      	add	r7, sp, #0
10000c1e:	6078      	str	r0, [r7, #4]
10000c20:	6039      	str	r1, [r7, #0]
    uint32_t ui_from = (uint32_t)from;
10000c22:	687b      	ldr	r3, [r7, #4]
10000c24:	617b      	str	r3, [r7, #20]
    uint32_t ui_to = (uint32_t)to;
10000c26:	683b      	ldr	r3, [r7, #0]
10000c28:	613b      	str	r3, [r7, #16]
    int32_t delta = (int32_t)(ui_to - ui_from - 4);
10000c2a:	693a      	ldr	r2, [r7, #16]
10000c2c:	697b      	ldr	r3, [r7, #20]
10000c2e:	1ad3      	subs	r3, r2, r3
10000c30:	3b04      	subs	r3, #4
10000c32:	60fb      	str	r3, [r7, #12]
    assert(delta >= -2048 && delta <= 2046 && !(delta & 1));
10000c34:	68fb      	ldr	r3, [r7, #12]
10000c36:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
10000c3a:	db09      	blt.n	10000c50 <make_j_16+0x38>
10000c3c:	68fb      	ldr	r3, [r7, #12]
10000c3e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
10000c42:	4293      	cmp	r3, r2
10000c44:	dc04      	bgt.n	10000c50 <make_j_16+0x38>
10000c46:	68fb      	ldr	r3, [r7, #12]
10000c48:	f003 0301 	and.w	r3, r3, #1
10000c4c:	2b00      	cmp	r3, #0
10000c4e:	d006      	beq.n	10000c5e <make_j_16+0x46>
10000c50:	4b0b      	ldr	r3, [pc, #44]	@ (10000c80 <make_j_16+0x68>)
10000c52:	4a0c      	ldr	r2, [pc, #48]	@ (10000c84 <make_j_16+0x6c>)
10000c54:	f240 1101 	movw	r1, #257	@ 0x101
10000c58:	480b      	ldr	r0, [pc, #44]	@ (10000c88 <make_j_16+0x70>)
10000c5a:	f004 fa67 	bl	1000512c <__assert_func>
    return (uint16_t)(0xe000 | ((delta >> 1) & 0x7ff));
10000c5e:	68fb      	ldr	r3, [r7, #12]
10000c60:	105b      	asrs	r3, r3, #1
10000c62:	b21b      	sxth	r3, r3
10000c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
10000c68:	b21b      	sxth	r3, r3
10000c6a:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
10000c6e:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
10000c72:	b21b      	sxth	r3, r3
10000c74:	b29b      	uxth	r3, r3
}
10000c76:	4618      	mov	r0, r3
10000c78:	3718      	adds	r7, #24
10000c7a:	46bd      	mov	sp, r7
10000c7c:	bd80      	pop	{r7, pc}
10000c7e:	bf00      	nop
10000c80:	100065d0 	.word	0x100065d0
10000c84:	100067c8 	.word	0x100067c8
10000c88:	10006590 	.word	0x10006590

10000c8c <insert_bl_32>:

static void insert_bl_32(uint16_t *from, void *to) {
10000c8c:	b580      	push	{r7, lr}
10000c8e:	b086      	sub	sp, #24
10000c90:	af00      	add	r7, sp, #0
10000c92:	6078      	str	r0, [r7, #4]
10000c94:	6039      	str	r1, [r7, #0]
    uint32_t ui_from = (uint32_t)from;
10000c96:	687b      	ldr	r3, [r7, #4]
10000c98:	617b      	str	r3, [r7, #20]
    uint32_t ui_to = (uint32_t)to;
10000c9a:	683b      	ldr	r3, [r7, #0]
10000c9c:	613b      	str	r3, [r7, #16]
    uint32_t delta = (ui_to - ui_from - 4) / 2;
10000c9e:	693a      	ldr	r2, [r7, #16]
10000ca0:	697b      	ldr	r3, [r7, #20]
10000ca2:	1ad3      	subs	r3, r2, r3
10000ca4:	3b04      	subs	r3, #4
10000ca6:	085b      	lsrs	r3, r3, #1
10000ca8:	60fb      	str	r3, [r7, #12]
    assert(!(delta >> 11u));
10000caa:	68fb      	ldr	r3, [r7, #12]
10000cac:	0adb      	lsrs	r3, r3, #11
10000cae:	2b00      	cmp	r3, #0
10000cb0:	d006      	beq.n	10000cc0 <insert_bl_32+0x34>
10000cb2:	4b11      	ldr	r3, [pc, #68]	@ (10000cf8 <insert_bl_32+0x6c>)
10000cb4:	4a11      	ldr	r2, [pc, #68]	@ (10000cfc <insert_bl_32+0x70>)
10000cb6:	f240 1109 	movw	r1, #265	@ 0x109
10000cba:	4811      	ldr	r0, [pc, #68]	@ (10000d00 <insert_bl_32+0x74>)
10000cbc:	f004 fa36 	bl	1000512c <__assert_func>
    from[0] = (uint16_t)(0xf000 | ((delta >> 11u) & 0x7ffu));
10000cc0:	68fb      	ldr	r3, [r7, #12]
10000cc2:	0adb      	lsrs	r3, r3, #11
10000cc4:	b29b      	uxth	r3, r3
10000cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
10000cca:	b29b      	uxth	r3, r3
10000ccc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
10000cd0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
10000cd4:	b29a      	uxth	r2, r3
10000cd6:	687b      	ldr	r3, [r7, #4]
10000cd8:	801a      	strh	r2, [r3, #0]
    from[1] = (uint16_t)(0xf800 | (delta & 0x7ffu));
10000cda:	68fb      	ldr	r3, [r7, #12]
10000cdc:	b29b      	uxth	r3, r3
10000cde:	687a      	ldr	r2, [r7, #4]
10000ce0:	3202      	adds	r2, #2
10000ce2:	ea6f 5343 	mvn.w	r3, r3, lsl #21
10000ce6:	ea6f 5353 	mvn.w	r3, r3, lsr #21
10000cea:	b29b      	uxth	r3, r3
10000cec:	8013      	strh	r3, [r2, #0]
}
10000cee:	bf00      	nop
10000cf0:	3718      	adds	r7, #24
10000cf2:	46bd      	mov	sp, r7
10000cf4:	bd80      	pop	{r7, pc}
10000cf6:	bf00      	nop
10000cf8:	10006600 	.word	0x10006600
10000cfc:	100067d4 	.word	0x100067d4
10000d00:	10006590 	.word	0x10006590

10000d04 <resolve_j_16>:

static inline void *resolve_j_16(uint16_t *inst) {
10000d04:	b580      	push	{r7, lr}
10000d06:	b084      	sub	sp, #16
10000d08:	af00      	add	r7, sp, #0
10000d0a:	6078      	str	r0, [r7, #4]
    assert(0x1c == (*inst)>>11u);
10000d0c:	687b      	ldr	r3, [r7, #4]
10000d0e:	881b      	ldrh	r3, [r3, #0]
10000d10:	0adb      	lsrs	r3, r3, #11
10000d12:	b29b      	uxth	r3, r3
10000d14:	2b1c      	cmp	r3, #28
10000d16:	d006      	beq.n	10000d26 <resolve_j_16+0x22>
10000d18:	4b0d      	ldr	r3, [pc, #52]	@ (10000d50 <resolve_j_16+0x4c>)
10000d1a:	4a0e      	ldr	r2, [pc, #56]	@ (10000d54 <resolve_j_16+0x50>)
10000d1c:	f240 110f 	movw	r1, #271	@ 0x10f
10000d20:	480d      	ldr	r0, [pc, #52]	@ (10000d58 <resolve_j_16+0x54>)
10000d22:	f004 fa03 	bl	1000512c <__assert_func>
    int32_t i_addr = (*inst) << 21u;
10000d26:	687b      	ldr	r3, [r7, #4]
10000d28:	881b      	ldrh	r3, [r3, #0]
10000d2a:	055b      	lsls	r3, r3, #21
10000d2c:	60fb      	str	r3, [r7, #12]
    i_addr /= (int32_t)(1u<<21u);
10000d2e:	68fb      	ldr	r3, [r7, #12]
10000d30:	2b00      	cmp	r3, #0
10000d32:	da02      	bge.n	10000d3a <resolve_j_16+0x36>
10000d34:	4a09      	ldr	r2, [pc, #36]	@ (10000d5c <resolve_j_16+0x58>)
10000d36:	441a      	add	r2, r3
10000d38:	4613      	mov	r3, r2
10000d3a:	155b      	asrs	r3, r3, #21
10000d3c:	60fb      	str	r3, [r7, #12]
    return inst + 2 + i_addr;
10000d3e:	68fb      	ldr	r3, [r7, #12]
10000d40:	3302      	adds	r3, #2
10000d42:	005b      	lsls	r3, r3, #1
10000d44:	687a      	ldr	r2, [r7, #4]
10000d46:	4413      	add	r3, r2
}
10000d48:	4618      	mov	r0, r3
10000d4a:	3710      	adds	r7, #16
10000d4c:	46bd      	mov	sp, r7
10000d4e:	bd80      	pop	{r7, pc}
10000d50:	10006610 	.word	0x10006610
10000d54:	100067e4 	.word	0x100067e4
10000d58:	10006590 	.word	0x10006590
10000d5c:	001fffff 	.word	0x001fffff

10000d60 <slot_diff>:
}

#endif

// GCC produces horrible code for subtraction of pointers here, and it was bugging me
static inline int8_t slot_diff(struct irq_handler_chain_slot *to, struct irq_handler_chain_slot *from) {
10000d60:	b480      	push	{r7}
10000d62:	b085      	sub	sp, #20
10000d64:	af00      	add	r7, sp, #0
10000d66:	6078      	str	r0, [r7, #4]
10000d68:	6039      	str	r1, [r7, #0]
    static_assert(sizeof(struct irq_handler_chain_slot) == 12, "");
#ifdef __riscv
    // todo I think RISC-V also deserves a fancy pointer diff implementation
    return (int8_t)(to - from);
#else
    int32_t result = 0xaaaa;
10000d6a:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
10000d6e:	60fb      	str	r3, [r7, #12]
    // return (to - from);
    // note this implementation has limited range, but is fine for plenty more than -128->127 result
    pico_default_asm (
10000d70:	6839      	ldr	r1, [r7, #0]
10000d72:	68fa      	ldr	r2, [r7, #12]
10000d74:	687b      	ldr	r3, [r7, #4]
10000d76:	1a5b      	subs	r3, r3, r1
10000d78:	415b      	adcs	r3, r3
10000d7a:	435a      	muls	r2, r3
10000d7c:	0d12      	lsrs	r2, r2, #20
10000d7e:	60fa      	str	r2, [r7, #12]
10000d80:	607b      	str	r3, [r7, #4]
         "lsrs %0, %0, #20\n"
         : "+l" (result), "+l" (to)
         : "l" (from)
         : "cc"
         );
    return (int8_t)result;
10000d82:	68fb      	ldr	r3, [r7, #12]
10000d84:	b25b      	sxtb	r3, r3
#endif
}
10000d86:	4618      	mov	r0, r3
10000d88:	3714      	adds	r7, #20
10000d8a:	46bd      	mov	sp, r7
10000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d90:	4770      	bx	lr
	...

10000d94 <get_slot_index>:
static const uint16_t inst16_return_from_last_slot = 0xbd01; // pop {r0, pc}
#else
static const uint16_t inst16_return_from_last_slot = 0xbe42; // cm.popret {ra}, 16
#endif

static inline int8_t get_slot_index(struct irq_handler_chain_slot *slot) {
10000d94:	b580      	push	{r7, lr}
10000d96:	b082      	sub	sp, #8
10000d98:	af00      	add	r7, sp, #0
10000d9a:	6078      	str	r0, [r7, #4]
    return slot_diff(slot, irq_handler_chain_slots);
10000d9c:	4904      	ldr	r1, [pc, #16]	@ (10000db0 <get_slot_index+0x1c>)
10000d9e:	6878      	ldr	r0, [r7, #4]
10000da0:	f7ff ffde 	bl	10000d60 <slot_diff>
10000da4:	4603      	mov	r3, r0
}
10000da6:	4618      	mov	r0, r3
10000da8:	3708      	adds	r7, #8
10000daa:	46bd      	mov	sp, r7
10000dac:	bd80      	pop	{r7, pc}
10000dae:	bf00      	nop
10000db0:	200006fc 	.word	0x200006fc

10000db4 <handler_from_slot>:
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
#endif // !PICO_NO_RAM_VECTOR_TABLE && !PICO_DISABLE_SHARED_IRQ_HANDLERS
}

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
static inline irq_handler_t handler_from_slot(struct irq_handler_chain_slot *slot) {
10000db4:	b480      	push	{r7}
10000db6:	b083      	sub	sp, #12
10000db8:	af00      	add	r7, sp, #0
10000dba:	6078      	str	r0, [r7, #4]
#ifndef __riscv
    return slot->handler;
10000dbc:	687b      	ldr	r3, [r7, #4]
10000dbe:	689b      	ldr	r3, [r3, #8]
        return (irq_handler_t)(
            ((slot->inst1 >> 12) << 12) + (uint32_t)((int32_t)slot->inst2 >> 20)
        );
    }
#endif
}
10000dc0:	4618      	mov	r0, r3
10000dc2:	370c      	adds	r7, #12
10000dc4:	46bd      	mov	sp, r7
10000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
10000dca:	4770      	bx	lr

10000dcc <irq_remove_handler>:
#endif

void irq_remove_handler(uint num, irq_handler_t handler) {
10000dcc:	b590      	push	{r4, r7, lr}
10000dce:	b095      	sub	sp, #84	@ 0x54
10000dd0:	af00      	add	r7, sp, #0
10000dd2:	6078      	str	r0, [r7, #4]
10000dd4:	6039      	str	r1, [r7, #0]
10000dd6:	2309      	movs	r3, #9
10000dd8:	60fb      	str	r3, [r7, #12]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000dda:	68fb      	ldr	r3, [r7, #12]
10000ddc:	4a82      	ldr	r2, [pc, #520]	@ (10000fe8 <irq_remove_handler+0x21c>)
10000dde:	4413      	add	r3, r2
10000de0:	bf00      	nop
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
10000de2:	643b      	str	r3, [r7, #64]	@ 0x40
10000de4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    pico_default_asm_volatile (
10000de8:	f3ef 8310 	mrs	r3, PRIMASK
10000dec:	b672      	cpsid	i
10000dee:	623b      	str	r3, [r7, #32]
    return status;
10000df0:	6a3b      	ldr	r3, [r7, #32]
    uint32_t save = save_and_disable_interrupts();
10000df2:	61fb      	str	r3, [r7, #28]
10000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10000df6:	61bb      	str	r3, [r7, #24]
    SW_SPIN_LOCK_LOCK(lock);
10000df8:	69b9      	ldr	r1, [r7, #24]
10000dfa:	e8d1 3fcf 	ldaexb	r3, [r1]
10000dfe:	2201      	movs	r2, #1
10000e00:	2b00      	cmp	r3, #0
10000e02:	d1fa      	bne.n	10000dfa <irq_remove_handler+0x2e>
10000e04:	e8c1 2f43 	strexb	r3, r2, [r1]
10000e08:	2b00      	cmp	r3, #0
10000e0a:	d1f6      	bne.n	10000dfa <irq_remove_handler+0x2e>
10000e0c:	617a      	str	r2, [r7, #20]
10000e0e:	613b      	str	r3, [r7, #16]
    pico_default_asm_volatile ("dmb" : : : "memory");
10000e10:	f3bf 8f5f 	dmb	sy
}
10000e14:	bf00      	nop
}
10000e16:	bf00      	nop
}
10000e18:	bf00      	nop
    return save;
10000e1a:	69fb      	ldr	r3, [r7, #28]
    uint32_t save = spin_lock_blocking(lock);
10000e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    irq_handler_t vtable_handler = get_vtable()[VTABLE_FIRST_IRQ + num];
10000e1e:	f7ff fdbb 	bl	10000998 <get_vtable>
10000e22:	4602      	mov	r2, r0
10000e24:	687b      	ldr	r3, [r7, #4]
10000e26:	3310      	adds	r3, #16
10000e28:	009b      	lsls	r3, r3, #2
10000e2a:	4413      	add	r3, r2
10000e2c:	681b      	ldr	r3, [r3, #0]
10000e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (vtable_handler != __unhandled_user_irq && vtable_handler != handler) {
10000e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10000e32:	4a6e      	ldr	r2, [pc, #440]	@ (10000fec <irq_remove_handler+0x220>)
10000e34:	4293      	cmp	r3, r2
10000e36:	f000 80cb 	beq.w	10000fd0 <irq_remove_handler+0x204>
10000e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
10000e3c:	683b      	ldr	r3, [r7, #0]
10000e3e:	429a      	cmp	r2, r3
10000e40:	f000 80c6 	beq.w	10000fd0 <irq_remove_handler+0x204>
#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
        if (is_shared_irq_raw_handler(vtable_handler)) {
10000e44:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10000e46:	f7ff fe6d 	bl	10000b24 <is_shared_irq_raw_handler>
10000e4a:	4603      	mov	r3, r0
10000e4c:	2b00      	cmp	r3, #0
10000e4e:	f000 80c1 	beq.w	10000fd4 <irq_remove_handler+0x208>
            // This is a bit tricky, as an executing IRQ handler doesn't take a lock.

            // First thing to do is to disable the IRQ in question; that takes care of calls from user code.
            // Note that a irq handler chain is local to our own core, so we don't need to worry about the other core
            bool was_enabled = irq_is_enabled(num);
10000e52:	6878      	ldr	r0, [r7, #4]
10000e54:	f7ff fe12 	bl	10000a7c <irq_is_enabled>
10000e58:	4603      	mov	r3, r0
10000e5a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            irq_set_enabled(num, false);
10000e5e:	2100      	movs	r1, #0
10000e60:	6878      	ldr	r0, [r7, #4]
10000e62:	f7ff fdf1 	bl	10000a48 <irq_set_enabled>
    pico_default_asm_volatile ("dmb" : : : "memory");
10000e66:	f3bf 8f5f 	dmb	sy
}
10000e6a:	bf00      	nop
                (meicontext & RVCSR_MEICONTEXT_IRQ_BITS) >> RVCSR_MEICONTEXT_IRQ_LSB
        );
    }
#else
    uint exception;
    pico_default_asm_volatile (
10000e6c:	f3ef 8305 	mrs	r3, IPSR
10000e70:	b2db      	uxtb	r3, r3
10000e72:	60bb      	str	r3, [r7, #8]
        "mrs %0, ipsr\n"
        "uxtb %0, %0\n"
        : "=l" (exception)
    );
    return exception;
10000e74:	68bb      	ldr	r3, [r7, #8]
            // Note we expect that the slot we are deleting is the one that is executing.
            // In particular, bad things happen if the caller were to delete the handler in the chain
            // before it. This is not an allowed use case though, and I can't imagine anyone wanting to in practice.
            // Sadly this is not something we can detect.

            uint exception = __get_current_exception();
10000e76:	637b      	str	r3, [r7, #52]	@ 0x34
            hard_assert(!exception || exception == num + VTABLE_FIRST_IRQ);
10000e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10000e7a:	2b00      	cmp	r3, #0
10000e7c:	d00b      	beq.n	10000e96 <irq_remove_handler+0xca>
10000e7e:	687b      	ldr	r3, [r7, #4]
10000e80:	3310      	adds	r3, #16
10000e82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10000e84:	429a      	cmp	r2, r3
10000e86:	d006      	beq.n	10000e96 <irq_remove_handler+0xca>
10000e88:	4b59      	ldr	r3, [pc, #356]	@ (10000ff0 <irq_remove_handler+0x224>)
10000e8a:	4a5a      	ldr	r2, [pc, #360]	@ (10000ff4 <irq_remove_handler+0x228>)
10000e8c:	f240 11f3 	movw	r1, #499	@ 0x1f3
10000e90:	4859      	ldr	r0, [pc, #356]	@ (10000ff8 <irq_remove_handler+0x22c>)
10000e92:	f004 f94b 	bl	1000512c <__assert_func>

            struct irq_handler_chain_slot *prev_slot = NULL;
10000e96:	2300      	movs	r3, #0
10000e98:	64bb      	str	r3, [r7, #72]	@ 0x48
            struct irq_handler_chain_slot *existing_vtable_slot = remove_thumb_bit((void *) vtable_handler);
10000e9a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10000e9c:	f7ff fd95 	bl	100009ca <remove_thumb_bit>
10000ea0:	6338      	str	r0, [r7, #48]	@ 0x30
            struct irq_handler_chain_slot *to_free_slot = existing_vtable_slot;
10000ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10000ea4:	647b      	str	r3, [r7, #68]	@ 0x44
            while (handler_from_slot(to_free_slot) != handler) {
10000ea6:	e011      	b.n	10000ecc <irq_remove_handler+0x100>
                prev_slot = to_free_slot;
10000ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (to_free_slot->link < 0) break;
10000eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000eae:	f993 3006 	ldrsb.w	r3, [r3, #6]
10000eb2:	2b00      	cmp	r3, #0
10000eb4:	db12      	blt.n	10000edc <irq_remove_handler+0x110>
                to_free_slot = &irq_handler_chain_slots[to_free_slot->link];
10000eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000eb8:	f993 3006 	ldrsb.w	r3, [r3, #6]
10000ebc:	461a      	mov	r2, r3
10000ebe:	4613      	mov	r3, r2
10000ec0:	005b      	lsls	r3, r3, #1
10000ec2:	4413      	add	r3, r2
10000ec4:	009b      	lsls	r3, r3, #2
10000ec6:	4a4d      	ldr	r2, [pc, #308]	@ (10000ffc <irq_remove_handler+0x230>)
10000ec8:	4413      	add	r3, r2
10000eca:	647b      	str	r3, [r7, #68]	@ 0x44
            while (handler_from_slot(to_free_slot) != handler) {
10000ecc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10000ece:	f7ff ff71 	bl	10000db4 <handler_from_slot>
10000ed2:	4602      	mov	r2, r0
10000ed4:	683b      	ldr	r3, [r7, #0]
10000ed6:	4293      	cmp	r3, r2
10000ed8:	d1e6      	bne.n	10000ea8 <irq_remove_handler+0xdc>
10000eda:	e000      	b.n	10000ede <irq_remove_handler+0x112>
                if (to_free_slot->link < 0) break;
10000edc:	bf00      	nop
            }
            if (handler_from_slot(to_free_slot) == handler) {
10000ede:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10000ee0:	f7ff ff68 	bl	10000db4 <handler_from_slot>
10000ee4:	4602      	mov	r2, r0
10000ee6:	683b      	ldr	r3, [r7, #0]
10000ee8:	4293      	cmp	r3, r2
10000eea:	d163      	bne.n	10000fb4 <irq_remove_handler+0x1e8>
                int8_t next_slot_index = to_free_slot->link;
10000eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000eee:	799b      	ldrb	r3, [r3, #6]
10000ef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if (next_slot_index >= 0) {
10000ef4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
10000ef8:	2b00      	cmp	r3, #0
10000efa:	db37      	blt.n	10000f6c <irq_remove_handler+0x1a0>
                    // There is another slot in the chain, so copy that over us, so that our inst3 points at something valid
                    // Note this only matters in the exception case anyway, and it that case, we will skip the next handler,
                    // however in that case its IRQ cause should immediately cause re-entry of the IRQ and the only side
                    // effect will be that there was potentially brief out of priority order execution of the handlers
                    struct irq_handler_chain_slot *next_slot = &irq_handler_chain_slots[next_slot_index];
10000efc:	f997 202f 	ldrsb.w	r2, [r7, #47]	@ 0x2f
10000f00:	4613      	mov	r3, r2
10000f02:	005b      	lsls	r3, r3, #1
10000f04:	4413      	add	r3, r2
10000f06:	009b      	lsls	r3, r3, #2
10000f08:	4a3c      	ldr	r2, [pc, #240]	@ (10000ffc <irq_remove_handler+0x230>)
10000f0a:	4413      	add	r3, r2
10000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
#ifndef __riscv
                    to_free_slot->handler = next_slot->handler;
10000f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000f10:	689a      	ldr	r2, [r3, #8]
10000f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000f14:	609a      	str	r2, [r3, #8]
                    } else {
                        to_free_slot->inst1 = make_call_inst1(handler_of_next_slot);
                        to_free_slot->inst2 = make_call_inst2(handler_of_next_slot);
                    }
#endif
                    to_free_slot->priority = next_slot->priority;
10000f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000f18:	79da      	ldrb	r2, [r3, #7]
10000f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000f1c:	71da      	strb	r2, [r3, #7]
                    to_free_slot->link = next_slot->link;
10000f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000f20:	f993 2006 	ldrsb.w	r2, [r3, #6]
10000f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000f26:	719a      	strb	r2, [r3, #6]
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10000f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000f2a:	f993 3006 	ldrsb.w	r3, [r3, #6]
10000f2e:	2b00      	cmp	r3, #0
10000f30:	db0e      	blt.n	10000f50 <irq_remove_handler+0x184>
                            make_j_16(&to_free_slot->inst3, resolve_j_16(&next_slot->inst3)) : // b next_>slot->next_slot
10000f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000f34:	1d1c      	adds	r4, r3, #4
10000f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000f38:	3304      	adds	r3, #4
10000f3a:	4618      	mov	r0, r3
10000f3c:	f7ff fee2 	bl	10000d04 <resolve_j_16>
10000f40:	4603      	mov	r3, r0
10000f42:	4619      	mov	r1, r3
10000f44:	4620      	mov	r0, r4
10000f46:	f7ff fe67 	bl	10000c18 <make_j_16>
10000f4a:	4603      	mov	r3, r0
10000f4c:	461a      	mov	r2, r3
10000f4e:	e001      	b.n	10000f54 <irq_remove_handler+0x188>
                    to_free_slot->inst3 = next_slot->link >= 0 ?
10000f50:	f64b 5201 	movw	r2, #48385	@ 0xbd01
10000f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000f56:	809a      	strh	r2, [r3, #4]
                            inst16_return_from_last_slot,

                    // add old next slot back to free list
                    next_slot->link = irq_handler_chain_free_slot_head;
10000f58:	4b29      	ldr	r3, [pc, #164]	@ (10001000 <irq_remove_handler+0x234>)
10000f5a:	f993 2000 	ldrsb.w	r2, [r3]
10000f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000f60:	719a      	strb	r2, [r3, #6]
                    irq_handler_chain_free_slot_head = next_slot_index;
10000f62:	4a27      	ldr	r2, [pc, #156]	@ (10001000 <irq_remove_handler+0x234>)
10000f64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
10000f68:	7013      	strb	r3, [r2, #0]
10000f6a:	e02a      	b.n	10000fc2 <irq_remove_handler+0x1f6>
                } else {
                    // Slot being removed is at the end of the chain
                    if (!exception) {
10000f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10000f6e:	2b00      	cmp	r3, #0
10000f70:	d119      	bne.n	10000fa6 <irq_remove_handler+0x1da>
                        // case when we're not in exception, we physically unlink now
                        if (prev_slot) {
10000f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10000f74:	2b00      	cmp	r3, #0
10000f76:	d007      	beq.n	10000f88 <irq_remove_handler+0x1bc>
                            // chain is not empty
                            prev_slot->link = -1;
10000f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10000f7a:	22ff      	movs	r2, #255	@ 0xff
10000f7c:	719a      	strb	r2, [r3, #6]
                            prev_slot->inst3 = inst16_return_from_last_slot;
10000f7e:	f64b 5201 	movw	r2, #48385	@ 0xbd01
10000f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10000f84:	809a      	strh	r2, [r3, #4]
10000f86:	e001      	b.n	10000f8c <irq_remove_handler+0x1c0>
                        } else {
                            // chain is not empty
                            vtable_handler = __unhandled_user_irq;
10000f88:	4b18      	ldr	r3, [pc, #96]	@ (10000fec <irq_remove_handler+0x220>)
10000f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        // add slot back to free list
                        to_free_slot->link = irq_handler_chain_free_slot_head;
10000f8c:	4b1c      	ldr	r3, [pc, #112]	@ (10001000 <irq_remove_handler+0x234>)
10000f8e:	f993 2000 	ldrsb.w	r2, [r3]
10000f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000f94:	719a      	strb	r2, [r3, #6]
                        irq_handler_chain_free_slot_head = get_slot_index(to_free_slot);
10000f96:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10000f98:	f7ff fefc 	bl	10000d94 <get_slot_index>
10000f9c:	4603      	mov	r3, r0
10000f9e:	461a      	mov	r2, r3
10000fa0:	4b17      	ldr	r3, [pc, #92]	@ (10001000 <irq_remove_handler+0x234>)
10000fa2:	701a      	strb	r2, [r3, #0]
10000fa4:	e00d      	b.n	10000fc2 <irq_remove_handler+0x1f6>
                        // since we are the last slot we know that our inst3 hasn't executed yet, so we change
                        // it to bl to irq_handler_chain_remove_tail which will remove the slot.
#ifndef __riscv
                        // NOTE THAT THIS TRASHES PRIORITY AND LINK SINCE THIS IS A 4 BYTE INSTRUCTION
                        //      BUT THEY ARE NOT NEEDED NOW
                        insert_bl_32(&to_free_slot->inst3, (void *) irq_handler_chain_remove_tail);
10000fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10000fa8:	3304      	adds	r3, #4
10000faa:	4916      	ldr	r1, [pc, #88]	@ (10001004 <irq_remove_handler+0x238>)
10000fac:	4618      	mov	r0, r3
10000fae:	f7ff fe6d 	bl	10000c8c <insert_bl_32>
10000fb2:	e006      	b.n	10000fc2 <irq_remove_handler+0x1f6>
                        to_free_slot->inst3 = make_jal_16(&to_free_slot->inst3, (void*) irq_handler_chain_remove_tail);
#endif
                    }
                }
            } else {
                assert(false); // not found
10000fb4:	4b14      	ldr	r3, [pc, #80]	@ (10001008 <irq_remove_handler+0x23c>)
10000fb6:	4a0f      	ldr	r2, [pc, #60]	@ (10000ff4 <irq_remove_handler+0x228>)
10000fb8:	f240 2135 	movw	r1, #565	@ 0x235
10000fbc:	480e      	ldr	r0, [pc, #56]	@ (10000ff8 <irq_remove_handler+0x22c>)
10000fbe:	f004 f8b5 	bl	1000512c <__assert_func>
            }
            irq_set_enabled(num, was_enabled);
10000fc2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
10000fc6:	4619      	mov	r1, r3
10000fc8:	6878      	ldr	r0, [r7, #4]
10000fca:	f7ff fd3d 	bl	10000a48 <irq_set_enabled>
        if (is_shared_irq_raw_handler(vtable_handler)) {
10000fce:	e001      	b.n	10000fd4 <irq_remove_handler+0x208>
        }
#else
        assert(false); // not found
#endif
    } else {
        vtable_handler = __unhandled_user_irq;
10000fd0:	4b06      	ldr	r3, [pc, #24]	@ (10000fec <irq_remove_handler+0x220>)
10000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
10000fd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10000fd6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
10000fd8:	6878      	ldr	r0, [r7, #4]
10000fda:	f7ff fd03 	bl	100009e4 <set_raw_irq_handler_and_unlock>
#else
    panic_unsupported();
#endif
}
10000fde:	bf00      	nop
10000fe0:	3754      	adds	r7, #84	@ 0x54
10000fe2:	46bd      	mov	sp, r7
10000fe4:	bd90      	pop	{r4, r7, pc}
10000fe6:	bf00      	nop
10000fe8:	20000910 	.word	0x20000910
10000fec:	1000011d 	.word	0x1000011d
10000ff0:	100066fc 	.word	0x100066fc
10000ff4:	100067f4 	.word	0x100067f4
10000ff8:	10006590 	.word	0x10006590
10000ffc:	200006fc 	.word	0x200006fc
10001000:	200009b4 	.word	0x200009b4
10001004:	20000736 	.word	0x20000736
10001008:	10006730 	.word	0x10006730

1000100c <nvic_ipr0>:

#ifndef __riscv
static io_rw_32 *nvic_ipr0(void) {
1000100c:	b480      	push	{r7}
1000100e:	af00      	add	r7, sp, #0
    return (io_rw_32 *)(PPB_BASE + ARM_CPU_PREFIXED(NVIC_IPR0_OFFSET));
10001010:	4b02      	ldr	r3, [pc, #8]	@ (1000101c <nvic_ipr0+0x10>)
}
10001012:	4618      	mov	r0, r3
10001014:	46bd      	mov	sp, r7
10001016:	f85d 7b04 	ldr.w	r7, [sp], #4
1000101a:	4770      	bx	lr
1000101c:	e000e400 	.word	0xe000e400

10001020 <irq_add_tail_to_free_list>:
}

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
10001020:	b580      	push	{r7, lr}
10001022:	b096      	sub	sp, #88	@ 0x58
10001024:	af00      	add	r7, sp, #0
10001026:	6078      	str	r0, [r7, #4]
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
10001028:	6878      	ldr	r0, [r7, #4]
1000102a:	f7ff fcc1 	bl	100009b0 <add_thumb_bit>
1000102e:	4603      	mov	r3, r0
10001030:	64fb      	str	r3, [r7, #76]	@ 0x4c
    assert(is_shared_irq_raw_handler(slot_handler));
10001032:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10001034:	f7ff fd76 	bl	10000b24 <is_shared_irq_raw_handler>
10001038:	4603      	mov	r3, r0
1000103a:	2b00      	cmp	r3, #0
1000103c:	d106      	bne.n	1000104c <irq_add_tail_to_free_list+0x2c>
1000103e:	4b5a      	ldr	r3, [pc, #360]	@ (100011a8 <irq_add_tail_to_free_list+0x188>)
10001040:	4a5a      	ldr	r2, [pc, #360]	@ (100011ac <irq_add_tail_to_free_list+0x18c>)
10001042:	f240 216e 	movw	r1, #622	@ 0x26e
10001046:	485a      	ldr	r0, [pc, #360]	@ (100011b0 <irq_add_tail_to_free_list+0x190>)
10001048:	f004 f870 	bl	1000512c <__assert_func>
    pico_default_asm_volatile (
1000104c:	f3ef 8305 	mrs	r3, IPSR
10001050:	b2db      	uxtb	r3, r3
10001052:	63bb      	str	r3, [r7, #56]	@ 0x38
    return exception;
10001054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    uint exception = __get_current_exception();
10001056:	64bb      	str	r3, [r7, #72]	@ 0x48
    assert(exception);
10001058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1000105a:	2b00      	cmp	r3, #0
1000105c:	d106      	bne.n	1000106c <irq_add_tail_to_free_list+0x4c>
1000105e:	4b55      	ldr	r3, [pc, #340]	@ (100011b4 <irq_add_tail_to_free_list+0x194>)
10001060:	4a52      	ldr	r2, [pc, #328]	@ (100011ac <irq_add_tail_to_free_list+0x18c>)
10001062:	f240 2171 	movw	r1, #625	@ 0x271
10001066:	4852      	ldr	r0, [pc, #328]	@ (100011b0 <irq_add_tail_to_free_list+0x190>)
10001068:	f004 f860 	bl	1000512c <__assert_func>
1000106c:	2309      	movs	r3, #9
1000106e:	61fb      	str	r3, [r7, #28]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10001070:	69fb      	ldr	r3, [r7, #28]
10001072:	4a51      	ldr	r2, [pc, #324]	@ (100011b8 <irq_add_tail_to_free_list+0x198>)
10001074:	4413      	add	r3, r2
10001076:	bf00      	nop
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
10001078:	647b      	str	r3, [r7, #68]	@ 0x44
1000107a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000107c:	637b      	str	r3, [r7, #52]	@ 0x34
    pico_default_asm_volatile (
1000107e:	f3ef 8310 	mrs	r3, PRIMASK
10001082:	b672      	cpsid	i
10001084:	633b      	str	r3, [r7, #48]	@ 0x30
    return status;
10001086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    uint32_t save = save_and_disable_interrupts();
10001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
1000108a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000108c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SW_SPIN_LOCK_LOCK(lock);
1000108e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
10001090:	e8d1 3fcf 	ldaexb	r3, [r1]
10001094:	2201      	movs	r2, #1
10001096:	2b00      	cmp	r3, #0
10001098:	d1fa      	bne.n	10001090 <irq_add_tail_to_free_list+0x70>
1000109a:	e8c1 2f43 	strexb	r3, r2, [r1]
1000109e:	2b00      	cmp	r3, #0
100010a0:	d1f6      	bne.n	10001090 <irq_add_tail_to_free_list+0x70>
100010a2:	627a      	str	r2, [r7, #36]	@ 0x24
100010a4:	623b      	str	r3, [r7, #32]
    pico_default_asm_volatile ("dmb" : : : "memory");
100010a6:	f3bf 8f5f 	dmb	sy
}
100010aa:	bf00      	nop
}
100010ac:	bf00      	nop
}
100010ae:	bf00      	nop
    return save;
100010b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    uint32_t save = spin_lock_blocking(lock);
100010b2:	643b      	str	r3, [r7, #64]	@ 0x40
    int8_t slot_index = get_slot_index(slot);
100010b4:	6878      	ldr	r0, [r7, #4]
100010b6:	f7ff fe6d 	bl	10000d94 <get_slot_index>
100010ba:	4603      	mov	r3, r0
100010bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (slot_handler == get_vtable()[exception]) {
100010c0:	f7ff fc6a 	bl	10000998 <get_vtable>
100010c4:	4602      	mov	r2, r0
100010c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100010c8:	009b      	lsls	r3, r3, #2
100010ca:	4413      	add	r3, r2
100010cc:	681b      	ldr	r3, [r3, #0]
100010ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
100010d0:	429a      	cmp	r2, r3
100010d2:	d108      	bne.n	100010e6 <irq_add_tail_to_free_list+0xc6>
        get_vtable()[exception] = __unhandled_user_irq;
100010d4:	f7ff fc60 	bl	10000998 <get_vtable>
100010d8:	4602      	mov	r2, r0
100010da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100010dc:	009b      	lsls	r3, r3, #2
100010de:	4413      	add	r3, r2
100010e0:	4a36      	ldr	r2, [pc, #216]	@ (100011bc <irq_add_tail_to_free_list+0x19c>)
100010e2:	601a      	str	r2, [r3, #0]
100010e4:	e03e      	b.n	10001164 <irq_add_tail_to_free_list+0x144>
    } else {
        bool __unused found = false;
100010e6:	2300      	movs	r3, #0
100010e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
100010ec:	2300      	movs	r3, #0
100010ee:	653b      	str	r3, [r7, #80]	@ 0x50
100010f0:	e02a      	b.n	10001148 <irq_add_tail_to_free_list+0x128>
            if (irq_handler_chain_slots[i].link == slot_index) {
100010f2:	4933      	ldr	r1, [pc, #204]	@ (100011c0 <irq_add_tail_to_free_list+0x1a0>)
100010f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
100010f6:	4613      	mov	r3, r2
100010f8:	005b      	lsls	r3, r3, #1
100010fa:	4413      	add	r3, r2
100010fc:	009b      	lsls	r3, r3, #2
100010fe:	440b      	add	r3, r1
10001100:	3306      	adds	r3, #6
10001102:	f993 3000 	ldrsb.w	r3, [r3]
10001106:	f997 203f 	ldrsb.w	r2, [r7, #63]	@ 0x3f
1000110a:	429a      	cmp	r2, r3
1000110c:	d119      	bne.n	10001142 <irq_add_tail_to_free_list+0x122>
                irq_handler_chain_slots[i].link = -1;
1000110e:	492c      	ldr	r1, [pc, #176]	@ (100011c0 <irq_add_tail_to_free_list+0x1a0>)
10001110:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10001112:	4613      	mov	r3, r2
10001114:	005b      	lsls	r3, r3, #1
10001116:	4413      	add	r3, r2
10001118:	009b      	lsls	r3, r3, #2
1000111a:	440b      	add	r3, r1
1000111c:	3306      	adds	r3, #6
1000111e:	22ff      	movs	r2, #255	@ 0xff
10001120:	701a      	strb	r2, [r3, #0]
                irq_handler_chain_slots[i].inst3 = inst16_return_from_last_slot;
10001122:	f64b 5001 	movw	r0, #48385	@ 0xbd01
10001126:	4926      	ldr	r1, [pc, #152]	@ (100011c0 <irq_add_tail_to_free_list+0x1a0>)
10001128:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
1000112a:	4613      	mov	r3, r2
1000112c:	005b      	lsls	r3, r3, #1
1000112e:	4413      	add	r3, r2
10001130:	009b      	lsls	r3, r3, #2
10001132:	440b      	add	r3, r1
10001134:	3304      	adds	r3, #4
10001136:	4602      	mov	r2, r0
10001138:	801a      	strh	r2, [r3, #0]
                found = true;
1000113a:	2301      	movs	r3, #1
1000113c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                break;
10001140:	e005      	b.n	1000114e <irq_add_tail_to_free_list+0x12e>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10001144:	3301      	adds	r3, #1
10001146:	653b      	str	r3, [r7, #80]	@ 0x50
10001148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
1000114a:	2b03      	cmp	r3, #3
1000114c:	d9d1      	bls.n	100010f2 <irq_add_tail_to_free_list+0xd2>
            }
        }
        assert(found);
1000114e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
10001152:	2b00      	cmp	r3, #0
10001154:	d106      	bne.n	10001164 <irq_add_tail_to_free_list+0x144>
10001156:	4b1b      	ldr	r3, [pc, #108]	@ (100011c4 <irq_add_tail_to_free_list+0x1a4>)
10001158:	4a14      	ldr	r2, [pc, #80]	@ (100011ac <irq_add_tail_to_free_list+0x18c>)
1000115a:	f240 2182 	movw	r1, #642	@ 0x282
1000115e:	4814      	ldr	r0, [pc, #80]	@ (100011b0 <irq_add_tail_to_free_list+0x190>)
10001160:	f003 ffe4 	bl	1000512c <__assert_func>
    }
    // add slot to free list
    slot->link = irq_handler_chain_free_slot_head;
10001164:	4b18      	ldr	r3, [pc, #96]	@ (100011c8 <irq_add_tail_to_free_list+0x1a8>)
10001166:	f993 2000 	ldrsb.w	r2, [r3]
1000116a:	687b      	ldr	r3, [r7, #4]
1000116c:	719a      	strb	r2, [r3, #6]
    irq_handler_chain_free_slot_head = slot_index;
1000116e:	4a16      	ldr	r2, [pc, #88]	@ (100011c8 <irq_add_tail_to_free_list+0x1a8>)
10001170:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
10001174:	7013      	strb	r3, [r2, #0]
10001176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10001178:	61bb      	str	r3, [r7, #24]
1000117a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000117c:	617b      	str	r3, [r7, #20]
1000117e:	69bb      	ldr	r3, [r7, #24]
10001180:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_UNLOCK(lock);
10001182:	2300      	movs	r3, #0
10001184:	60fb      	str	r3, [r7, #12]
10001186:	68fb      	ldr	r3, [r7, #12]
10001188:	693a      	ldr	r2, [r7, #16]
1000118a:	e8c2 3f8f 	stlb	r3, [r2]
}
1000118e:	bf00      	nop
10001190:	697b      	ldr	r3, [r7, #20]
10001192:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10001194:	68bb      	ldr	r3, [r7, #8]
10001196:	f383 8810 	msr	PRIMASK, r3
}
1000119a:	bf00      	nop
}
1000119c:	bf00      	nop
    spin_unlock(lock, save);
}
1000119e:	bf00      	nop
100011a0:	3758      	adds	r7, #88	@ 0x58
100011a2:	46bd      	mov	sp, r7
100011a4:	bd80      	pop	{r7, pc}
100011a6:	bf00      	nop
100011a8:	10006738 	.word	0x10006738
100011ac:	10006808 	.word	0x10006808
100011b0:	10006590 	.word	0x10006590
100011b4:	10006760 	.word	0x10006760
100011b8:	20000910 	.word	0x20000910
100011bc:	1000011d 	.word	0x1000011d
100011c0:	200006fc 	.word	0x200006fc
100011c4:	1000676c 	.word	0x1000676c
100011c8:	200009b4 	.word	0x200009b4

100011cc <runtime_init_per_core_irq_priorities>:
#endif

__weak void runtime_init_per_core_irq_priorities(void) {
100011cc:	b580      	push	{r7, lr}
100011ce:	b084      	sub	sp, #16
100011d0:	af00      	add	r7, sp, #0
#if PICO_DEFAULT_IRQ_PRIORITY != 0
#ifndef __riscv
    // static_assert(!(NUM_IRQS & 3), ""); // this isn't really required - the reg is still 32 bit
    uint32_t prio4 = (PICO_DEFAULT_IRQ_PRIORITY & 0xff) * 0x1010101u;
100011d2:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
100011d6:	607b      	str	r3, [r7, #4]
    io_rw_32 *p = nvic_ipr0();
100011d8:	f7ff ff18 	bl	1000100c <nvic_ipr0>
100011dc:	60f8      	str	r0, [r7, #12]
    for (uint i = 0; i < (NUM_IRQS + 3) / 4; i++) {
100011de:	2300      	movs	r3, #0
100011e0:	60bb      	str	r3, [r7, #8]
100011e2:	e007      	b.n	100011f4 <runtime_init_per_core_irq_priorities+0x28>
        *p++ = prio4;
100011e4:	68fb      	ldr	r3, [r7, #12]
100011e6:	1d1a      	adds	r2, r3, #4
100011e8:	60fa      	str	r2, [r7, #12]
100011ea:	687a      	ldr	r2, [r7, #4]
100011ec:	601a      	str	r2, [r3, #0]
    for (uint i = 0; i < (NUM_IRQS + 3) / 4; i++) {
100011ee:	68bb      	ldr	r3, [r7, #8]
100011f0:	3301      	adds	r3, #1
100011f2:	60bb      	str	r3, [r7, #8]
100011f4:	68bb      	ldr	r3, [r7, #8]
100011f6:	2b0c      	cmp	r3, #12
100011f8:	d9f4      	bls.n	100011e4 <runtime_init_per_core_irq_priorities+0x18>
    for (uint i = 0; i < NUM_IRQS; ++i) {
        irq_set_priority(i, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
#endif
}
100011fa:	bf00      	nop
100011fc:	bf00      	nop
100011fe:	3710      	adds	r7, #16
10001200:	46bd      	mov	sp, r7
10001202:	bd80      	pop	{r7, pc}

10001204 <lock_init>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
10001204:	b480      	push	{r7}
10001206:	b085      	sub	sp, #20
10001208:	af00      	add	r7, sp, #0
1000120a:	6078      	str	r0, [r7, #4]
1000120c:	6039      	str	r1, [r7, #0]
1000120e:	683b      	ldr	r3, [r7, #0]
10001210:	60fb      	str	r3, [r7, #12]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10001212:	68fb      	ldr	r3, [r7, #12]
10001214:	4a05      	ldr	r2, [pc, #20]	@ (1000122c <lock_init+0x28>)
10001216:	441a      	add	r2, r3
10001218:	bf00      	nop
    valid_params_if(LOCK_CORE, lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
1000121a:	687b      	ldr	r3, [r7, #4]
1000121c:	601a      	str	r2, [r3, #0]
}
1000121e:	bf00      	nop
10001220:	3714      	adds	r7, #20
10001222:	46bd      	mov	sp, r7
10001224:	f85d 7b04 	ldr.w	r7, [sp], #4
10001228:	4770      	bx	lr
1000122a:	bf00      	nop
1000122c:	20000910 	.word	0x20000910

10001230 <runtime_init_mutex>:
#include "pico/mutex.h"
#include "pico/time.h"
#include "pico/runtime_init.h"

#if !PICO_RUNTIME_NO_INIT_MUTEX
void __weak runtime_init_mutex(void) {
10001230:	b580      	push	{r7, lr}
10001232:	b084      	sub	sp, #16
10001234:	af00      	add	r7, sp, #0
    static_assert(!offsetof(mutex_t, core), "");
    static_assert(!offsetof(recursive_mutex_t, core), "");
    extern lock_core_t __mutex_array_start;
    extern lock_core_t __mutex_array_end;

    for (lock_core_t *l = &__mutex_array_start; l < &__mutex_array_end; ) {
10001236:	4b15      	ldr	r3, [pc, #84]	@ (1000128c <runtime_init_mutex+0x5c>)
10001238:	60fb      	str	r3, [r7, #12]
1000123a:	e01e      	b.n	1000127a <runtime_init_mutex+0x4a>
        if (l->spin_lock) {
1000123c:	68fb      	ldr	r3, [r7, #12]
1000123e:	681b      	ldr	r3, [r3, #0]
10001240:	2b00      	cmp	r3, #0
10001242:	d012      	beq.n	1000126a <runtime_init_mutex+0x3a>
            assert(1 == (uintptr_t)l->spin_lock); // indicator for a recursive mutex
10001244:	68fb      	ldr	r3, [r7, #12]
10001246:	681b      	ldr	r3, [r3, #0]
10001248:	2b01      	cmp	r3, #1
1000124a:	d005      	beq.n	10001258 <runtime_init_mutex+0x28>
1000124c:	4b10      	ldr	r3, [pc, #64]	@ (10001290 <runtime_init_mutex+0x60>)
1000124e:	4a11      	ldr	r2, [pc, #68]	@ (10001294 <runtime_init_mutex+0x64>)
10001250:	211a      	movs	r1, #26
10001252:	4811      	ldr	r0, [pc, #68]	@ (10001298 <runtime_init_mutex+0x68>)
10001254:	f003 ff6a 	bl	1000512c <__assert_func>
            recursive_mutex_t *rm = (recursive_mutex_t *)l;
10001258:	68fb      	ldr	r3, [r7, #12]
1000125a:	607b      	str	r3, [r7, #4]
            recursive_mutex_init(rm);
1000125c:	6878      	ldr	r0, [r7, #4]
1000125e:	f000 f836 	bl	100012ce <recursive_mutex_init>
            l = &rm[1].core; // next
10001262:	687b      	ldr	r3, [r7, #4]
10001264:	3308      	adds	r3, #8
10001266:	60fb      	str	r3, [r7, #12]
10001268:	e007      	b.n	1000127a <runtime_init_mutex+0x4a>
        } else {
            mutex_t *m = (mutex_t *)l;
1000126a:	68fb      	ldr	r3, [r7, #12]
1000126c:	60bb      	str	r3, [r7, #8]
            mutex_init(m);
1000126e:	68b8      	ldr	r0, [r7, #8]
10001270:	f000 f816 	bl	100012a0 <mutex_init>
            l = &m[1].core; // next
10001274:	68bb      	ldr	r3, [r7, #8]
10001276:	3308      	adds	r3, #8
10001278:	60fb      	str	r3, [r7, #12]
    for (lock_core_t *l = &__mutex_array_start; l < &__mutex_array_end; ) {
1000127a:	68fb      	ldr	r3, [r7, #12]
1000127c:	4a07      	ldr	r2, [pc, #28]	@ (1000129c <runtime_init_mutex+0x6c>)
1000127e:	4293      	cmp	r3, r2
10001280:	d3dc      	bcc.n	1000123c <runtime_init_mutex+0xc>
        }
    }
}
10001282:	bf00      	nop
10001284:	bf00      	nop
10001286:	3710      	adds	r7, #16
10001288:	46bd      	mov	sp, r7
1000128a:	bd80      	pop	{r7, pc}
1000128c:	20000784 	.word	0x20000784
10001290:	10006824 	.word	0x10006824
10001294:	100068d4 	.word	0x100068d4
10001298:	10006844 	.word	0x10006844
1000129c:	2000078c 	.word	0x2000078c

100012a0 <mutex_init>:

#if defined(PICO_RUNTIME_INIT_MUTEX) && !PICO_RUNTIME_SKIP_INIT_MUTEX
PICO_RUNTIME_INIT_FUNC_RUNTIME(runtime_init_mutex, PICO_RUNTIME_INIT_MUTEX);
#endif

void mutex_init(mutex_t *mtx) {
100012a0:	b590      	push	{r4, r7, lr}
100012a2:	b083      	sub	sp, #12
100012a4:	af00      	add	r7, sp, #0
100012a6:	6078      	str	r0, [r7, #4]
    lock_init(&mtx->core, next_striped_spin_lock_num());
100012a8:	687c      	ldr	r4, [r7, #4]
100012aa:	f7ff fb19 	bl	100008e0 <next_striped_spin_lock_num>
100012ae:	4603      	mov	r3, r0
100012b0:	4619      	mov	r1, r3
100012b2:	4620      	mov	r0, r4
100012b4:	f7ff ffa6 	bl	10001204 <lock_init>
    mtx->owner = LOCK_INVALID_OWNER_ID;
100012b8:	687b      	ldr	r3, [r7, #4]
100012ba:	22ff      	movs	r2, #255	@ 0xff
100012bc:	711a      	strb	r2, [r3, #4]
    pico_default_asm_volatile ("dmb" : : : "memory");
100012be:	f3bf 8f5f 	dmb	sy
}
100012c2:	bf00      	nop
}
100012c4:	bf00      	nop
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    mtx->recursive = false;
#endif
    __mem_fence_release();
}
100012c6:	bf00      	nop
100012c8:	370c      	adds	r7, #12
100012ca:	46bd      	mov	sp, r7
100012cc:	bd90      	pop	{r4, r7, pc}

100012ce <recursive_mutex_init>:

void recursive_mutex_init(recursive_mutex_t *mtx) {
100012ce:	b590      	push	{r4, r7, lr}
100012d0:	b083      	sub	sp, #12
100012d2:	af00      	add	r7, sp, #0
100012d4:	6078      	str	r0, [r7, #4]
    lock_init(&mtx->core, next_striped_spin_lock_num());
100012d6:	687c      	ldr	r4, [r7, #4]
100012d8:	f7ff fb02 	bl	100008e0 <next_striped_spin_lock_num>
100012dc:	4603      	mov	r3, r0
100012de:	4619      	mov	r1, r3
100012e0:	4620      	mov	r0, r4
100012e2:	f7ff ff8f 	bl	10001204 <lock_init>
    mtx->owner = LOCK_INVALID_OWNER_ID;
100012e6:	687b      	ldr	r3, [r7, #4]
100012e8:	22ff      	movs	r2, #255	@ 0xff
100012ea:	711a      	strb	r2, [r3, #4]
    mtx->enter_count = 0;
100012ec:	687b      	ldr	r3, [r7, #4]
100012ee:	2200      	movs	r2, #0
100012f0:	715a      	strb	r2, [r3, #5]
    pico_default_asm_volatile ("dmb" : : : "memory");
100012f2:	f3bf 8f5f 	dmb	sy
}
100012f6:	bf00      	nop
}
100012f8:	bf00      	nop
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    mtx->recursive = true;
#endif
    __mem_fence_release();
}
100012fa:	bf00      	nop
100012fc:	370c      	adds	r7, #12
100012fe:	46bd      	mov	sp, r7
10001300:	bd90      	pop	{r4, r7, pc}

10001302 <to_us_since_boot>:
 * \brief convert an absolute_time_t into a number of microseconds since boot.
 * \param t the absolute time to convert
 * \return a number of microseconds since boot, equivalent to t
 * \ingroup timestamp
 */
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10001302:	b480      	push	{r7}
10001304:	b083      	sub	sp, #12
10001306:	af00      	add	r7, sp, #0
10001308:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef PICO_DEBUG_ABSOLUTE_TIME_T
    return t._private_us_since_boot;
#else
    return t;
1000130c:	e9d7 2300 	ldrd	r2, r3, [r7]
#endif
}
10001310:	4610      	mov	r0, r2
10001312:	4619      	mov	r1, r3
10001314:	370c      	adds	r7, #12
10001316:	46bd      	mov	sp, r7
10001318:	f85d 7b04 	ldr.w	r7, [sp], #4
1000131c:	4770      	bx	lr

1000131e <update_us_since_boot>:
 * \param t the absolute time value to update
 * \param us_since_boot the number of microseconds since boot to represent. Note this should be representable
 *                      as a signed 64 bit integer
 * \ingroup timestamp
 */
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
1000131e:	b480      	push	{r7}
10001320:	b085      	sub	sp, #20
10001322:	af00      	add	r7, sp, #0
10001324:	60f8      	str	r0, [r7, #12]
10001326:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef PICO_DEBUG_ABSOLUTE_TIME_T
    assert(us_since_boot <= INT64_MAX);
    t->_private_us_since_boot = us_since_boot;
#else
    *t = us_since_boot;
1000132a:	68f9      	ldr	r1, [r7, #12]
1000132c:	e9d7 2300 	ldrd	r2, r3, [r7]
10001330:	e9c1 2300 	strd	r2, r3, [r1]
#endif
}
10001334:	bf00      	nop
10001336:	3714      	adds	r7, #20
10001338:	46bd      	mov	sp, r7
1000133a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000133e:	4770      	bx	lr

10001340 <check_hardware_alarm_num_param>:
static inline void check_hardware_alarm_num_param(__unused uint alarm_num) {
10001340:	b480      	push	{r7}
10001342:	b083      	sub	sp, #12
10001344:	af00      	add	r7, sp, #0
10001346:	6078      	str	r0, [r7, #4]
}
10001348:	bf00      	nop
1000134a:	370c      	adds	r7, #12
1000134c:	46bd      	mov	sp, r7
1000134e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001352:	4770      	bx	lr

10001354 <timer_time_reached>:
static inline bool timer_time_reached(timer_hw_t *timer, absolute_time_t t) {
10001354:	b580      	push	{r7, lr}
10001356:	b088      	sub	sp, #32
10001358:	af00      	add	r7, sp, #0
1000135a:	60f8      	str	r0, [r7, #12]
1000135c:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t target = to_us_since_boot(t);
10001360:	e9d7 0100 	ldrd	r0, r1, [r7]
10001364:	f7ff ffcd 	bl	10001302 <to_us_since_boot>
10001368:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint32_t hi_target = (uint32_t)(target >> 32u);
1000136c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
10001370:	f04f 0200 	mov.w	r2, #0
10001374:	f04f 0300 	mov.w	r3, #0
10001378:	000a      	movs	r2, r1
1000137a:	2300      	movs	r3, #0
1000137c:	4613      	mov	r3, r2
1000137e:	617b      	str	r3, [r7, #20]
    uint32_t hi = timer->timerawh;
10001380:	68fb      	ldr	r3, [r7, #12]
10001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001384:	613b      	str	r3, [r7, #16]
    return (hi >= hi_target && (timer->timerawl >= (uint32_t) target || hi != hi_target));
10001386:	693a      	ldr	r2, [r7, #16]
10001388:	697b      	ldr	r3, [r7, #20]
1000138a:	429a      	cmp	r2, r3
1000138c:	d30a      	bcc.n	100013a4 <timer_time_reached+0x50>
1000138e:	68fb      	ldr	r3, [r7, #12]
10001390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10001392:	69bb      	ldr	r3, [r7, #24]
10001394:	429a      	cmp	r2, r3
10001396:	d203      	bcs.n	100013a0 <timer_time_reached+0x4c>
10001398:	693a      	ldr	r2, [r7, #16]
1000139a:	697b      	ldr	r3, [r7, #20]
1000139c:	429a      	cmp	r2, r3
1000139e:	d001      	beq.n	100013a4 <timer_time_reached+0x50>
100013a0:	2301      	movs	r3, #1
100013a2:	e000      	b.n	100013a6 <timer_time_reached+0x52>
100013a4:	2300      	movs	r3, #0
100013a6:	f003 0301 	and.w	r3, r3, #1
100013aa:	b2db      	uxtb	r3, r3
}
100013ac:	4618      	mov	r0, r3
100013ae:	3720      	adds	r7, #32
100013b0:	46bd      	mov	sp, r7
100013b2:	bd80      	pop	{r7, pc}

100013b4 <time_reached>:
static inline bool time_reached(absolute_time_t t) {
100013b4:	b580      	push	{r7, lr}
100013b6:	b082      	sub	sp, #8
100013b8:	af00      	add	r7, sp, #0
100013ba:	e9c7 0100 	strd	r0, r1, [r7]
    return timer_time_reached(PICO_DEFAULT_TIMER_INSTANCE(), t);
100013be:	e9d7 2300 	ldrd	r2, r3, [r7]
100013c2:	4804      	ldr	r0, [pc, #16]	@ (100013d4 <time_reached+0x20>)
100013c4:	f7ff ffc6 	bl	10001354 <timer_time_reached>
100013c8:	4603      	mov	r3, r0
}
100013ca:	4618      	mov	r0, r3
100013cc:	3708      	adds	r7, #8
100013ce:	46bd      	mov	sp, r7
100013d0:	bd80      	pop	{r7, pc}
100013d2:	bf00      	nop
100013d4:	400b0000 	.word	0x400b0000

100013d8 <timer_hardware_alarm_get_irq_num>:
static inline uint timer_hardware_alarm_get_irq_num(__unused timer_hw_t *timer, uint alarm_num) {
100013d8:	b580      	push	{r7, lr}
100013da:	b082      	sub	sp, #8
100013dc:	af00      	add	r7, sp, #0
100013de:	6078      	str	r0, [r7, #4]
100013e0:	6039      	str	r1, [r7, #0]
    check_hardware_alarm_num_param(alarm_num);
100013e2:	6838      	ldr	r0, [r7, #0]
100013e4:	f7ff ffac 	bl	10001340 <check_hardware_alarm_num_param>
    return TIMER_ALARM_IRQ_NUM(timer, alarm_num);
100013e8:	687b      	ldr	r3, [r7, #4]
100013ea:	4a06      	ldr	r2, [pc, #24]	@ (10001404 <timer_hardware_alarm_get_irq_num+0x2c>)
100013ec:	4293      	cmp	r3, r2
100013ee:	d101      	bne.n	100013f4 <timer_hardware_alarm_get_irq_num+0x1c>
100013f0:	2204      	movs	r2, #4
100013f2:	e000      	b.n	100013f6 <timer_hardware_alarm_get_irq_num+0x1e>
100013f4:	2200      	movs	r2, #0
100013f6:	683b      	ldr	r3, [r7, #0]
100013f8:	4413      	add	r3, r2
}
100013fa:	4618      	mov	r0, r3
100013fc:	3708      	adds	r7, #8
100013fe:	46bd      	mov	sp, r7
10001400:	bd80      	pop	{r7, pc}
10001402:	bf00      	nop
10001404:	400b8000 	.word	0x400b8000

10001408 <timer_get_index>:
 *
 * \param timer the timer instance
 * \return the timer number
 * \sa TIMER_NUM
 */
static inline uint timer_get_index(timer_hw_t *timer) {
10001408:	b480      	push	{r7}
1000140a:	b083      	sub	sp, #12
1000140c:	af00      	add	r7, sp, #0
1000140e:	6078      	str	r0, [r7, #4]
    return TIMER_NUM(timer);
10001410:	687b      	ldr	r3, [r7, #4]
10001412:	4a06      	ldr	r2, [pc, #24]	@ (1000142c <timer_get_index+0x24>)
10001414:	4293      	cmp	r3, r2
10001416:	bf0c      	ite	eq
10001418:	2301      	moveq	r3, #1
1000141a:	2300      	movne	r3, #0
1000141c:	b2db      	uxtb	r3, r3
}
1000141e:	4618      	mov	r0, r3
10001420:	370c      	adds	r7, #12
10001422:	46bd      	mov	sp, r7
10001424:	f85d 7b04 	ldr.w	r7, [sp], #4
10001428:	4770      	bx	lr
1000142a:	bf00      	nop
1000142c:	400b8000 	.word	0x400b8000

10001430 <timer_get_instance>:
 * \brief Returns the timer instance with the given timer number
 *
 * \param timer_num the timer number
 * \return the timer instance
 */
static inline timer_hw_t *timer_get_instance(uint timer_num) {
10001430:	b480      	push	{r7}
10001432:	b083      	sub	sp, #12
10001434:	af00      	add	r7, sp, #0
10001436:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_TIMER, timer_num >= NUM_GENERIC_TIMERS);
    return TIMER_INSTANCE(timer_num);
10001438:	687b      	ldr	r3, [r7, #4]
1000143a:	2b00      	cmp	r3, #0
1000143c:	d001      	beq.n	10001442 <timer_get_instance+0x12>
1000143e:	4b04      	ldr	r3, [pc, #16]	@ (10001450 <timer_get_instance+0x20>)
10001440:	e000      	b.n	10001444 <timer_get_instance+0x14>
10001442:	4b04      	ldr	r3, [pc, #16]	@ (10001454 <timer_get_instance+0x24>)
}
10001444:	4618      	mov	r0, r3
10001446:	370c      	adds	r7, #12
10001448:	46bd      	mov	sp, r7
1000144a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000144e:	4770      	bx	lr
10001450:	400b8000 	.word	0x400b8000
10001454:	400b0000 	.word	0x400b0000

10001458 <get_absolute_time>:
 *
 * \sa absolute_time_t
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time(void) {
10001458:	b580      	push	{r7, lr}
1000145a:	b082      	sub	sp, #8
1000145c:	af00      	add	r7, sp, #0
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
1000145e:	f001 f909 	bl	10002674 <time_us_64>
10001462:	4602      	mov	r2, r0
10001464:	460b      	mov	r3, r1
10001466:	4639      	mov	r1, r7
10001468:	4608      	mov	r0, r1
1000146a:	f7ff ff58 	bl	1000131e <update_us_since_boot>
    return t;
1000146e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
10001472:	4610      	mov	r0, r2
10001474:	4619      	mov	r1, r3
10001476:	3708      	adds	r7, #8
10001478:	46bd      	mov	sp, r7
1000147a:	bd80      	pop	{r7, pc}

1000147c <delayed_by_us>:
 *
 * \param t the base timestamp
 * \param us the number of microseconds to add
 * \return the timestamp representing the resulting time
 */
static inline absolute_time_t delayed_by_us(const absolute_time_t t, uint64_t us) {
1000147c:	b5b0      	push	{r4, r5, r7, lr}
1000147e:	b08a      	sub	sp, #40	@ 0x28
10001480:	af00      	add	r7, sp, #0
10001482:	e9c7 0102 	strd	r0, r1, [r7, #8]
10001486:	e9c7 2300 	strd	r2, r3, [r7]
    absolute_time_t t2;
    uint64_t base = to_us_since_boot(t);
1000148a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1000148e:	f7ff ff38 	bl	10001302 <to_us_since_boot>
10001492:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t delayed = base + us;
10001496:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
1000149a:	e9d7 2300 	ldrd	r2, r3, [r7]
1000149e:	1884      	adds	r4, r0, r2
100014a0:	eb41 0503 	adc.w	r5, r1, r3
100014a4:	e9c7 4508 	strd	r4, r5, [r7, #32]
    if ((int64_t)delayed < 0) {
100014a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100014ac:	2b00      	cmp	r3, #0
100014ae:	da05      	bge.n	100014bc <delayed_by_us+0x40>
        // absolute_time_t (to allow for signed time deltas) is never greater than INT64_MAX which == at_the_end_of_time
        delayed = INT64_MAX;
100014b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100014b4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
100014b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    update_us_since_boot(&t2, delayed);
100014bc:	f107 0110 	add.w	r1, r7, #16
100014c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100014c4:	4608      	mov	r0, r1
100014c6:	f7ff ff2a 	bl	1000131e <update_us_since_boot>
    return t2;
100014ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
100014ce:	4610      	mov	r0, r2
100014d0:	4619      	mov	r1, r3
100014d2:	3728      	adds	r7, #40	@ 0x28
100014d4:	46bd      	mov	sp, r7
100014d6:	bdb0      	pop	{r4, r5, r7, pc}

100014d8 <make_timeout_time_us>:
 * \ingroup timestamp
 *
 * \param us the number of microseconds to add to the current timestamp
 * \return the future timestamp
 */
static inline absolute_time_t make_timeout_time_us(uint64_t us) {
100014d8:	b580      	push	{r7, lr}
100014da:	b082      	sub	sp, #8
100014dc:	af00      	add	r7, sp, #0
100014de:	e9c7 0100 	strd	r0, r1, [r7]
    return delayed_by_us(get_absolute_time(), us);
100014e2:	f7ff ffb9 	bl	10001458 <get_absolute_time>
100014e6:	e9d7 2300 	ldrd	r2, r3, [r7]
100014ea:	f7ff ffc7 	bl	1000147c <delayed_by_us>
100014ee:	4602      	mov	r2, r0
100014f0:	460b      	mov	r3, r1
}
100014f2:	4610      	mov	r0, r2
100014f4:	4619      	mov	r1, r3
100014f6:	3708      	adds	r7, #8
100014f8:	46bd      	mov	sp, r7
100014fa:	bd80      	pop	{r7, pc}

100014fc <absolute_time_diff_us>:
 * \param from the first timestamp
 * \param to the second timestamp
 * \return the number of microseconds between the two timestamps (positive if `to` is after `from` except
 * in case of overflow)
 */
static inline int64_t absolute_time_diff_us(absolute_time_t from, absolute_time_t to) {
100014fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
10001500:	b084      	sub	sp, #16
10001502:	af00      	add	r7, sp, #0
10001504:	e9c7 0102 	strd	r0, r1, [r7, #8]
10001508:	e9c7 2300 	strd	r2, r3, [r7]
    return (int64_t)(to_us_since_boot(to) - to_us_since_boot(from));
1000150c:	e9d7 0100 	ldrd	r0, r1, [r7]
10001510:	f7ff fef7 	bl	10001302 <to_us_since_boot>
10001514:	4604      	mov	r4, r0
10001516:	460d      	mov	r5, r1
10001518:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
1000151c:	f7ff fef1 	bl	10001302 <to_us_since_boot>
10001520:	4602      	mov	r2, r0
10001522:	460b      	mov	r3, r1
10001524:	ebb4 0802 	subs.w	r8, r4, r2
10001528:	eb65 0903 	sbc.w	r9, r5, r3
1000152c:	4642      	mov	r2, r8
1000152e:	464b      	mov	r3, r9
}
10001530:	4610      	mov	r0, r2
10001532:	4619      	mov	r1, r3
10001534:	3710      	adds	r7, #16
10001536:	46bd      	mov	sp, r7
10001538:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

1000153c <add_alarm_at>:
 *                     then the callback should be called during (by) this function instead 
 * @return >0 the alarm id
 * @return 0 if the alarm time passed before or during the call and fire_if_past was false
 * @return <0 if there were no alarm slots available, or other error occurred
 */
static inline alarm_id_t add_alarm_at(absolute_time_t time, alarm_callback_t callback, void *user_data, bool fire_if_past) {
1000153c:	b580      	push	{r7, lr}
1000153e:	b088      	sub	sp, #32
10001540:	af04      	add	r7, sp, #16
10001542:	e9c7 0102 	strd	r0, r1, [r7, #8]
10001546:	607a      	str	r2, [r7, #4]
10001548:	603b      	str	r3, [r7, #0]
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
1000154a:	f000 f951 	bl	100017f0 <alarm_pool_get_default>
1000154e:	4601      	mov	r1, r0
10001550:	7e3b      	ldrb	r3, [r7, #24]
10001552:	9302      	str	r3, [sp, #8]
10001554:	683b      	ldr	r3, [r7, #0]
10001556:	9301      	str	r3, [sp, #4]
10001558:	687b      	ldr	r3, [r7, #4]
1000155a:	9300      	str	r3, [sp, #0]
1000155c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
10001560:	4608      	mov	r0, r1
10001562:	f000 fc9b 	bl	10001e9c <alarm_pool_add_alarm_at>
10001566:	4603      	mov	r3, r0
}
10001568:	4618      	mov	r0, r3
1000156a:	3710      	adds	r7, #16
1000156c:	46bd      	mov	sp, r7
1000156e:	bd80      	pop	{r7, pc}

10001570 <cancel_alarm>:
 * \ingroup alarm
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
10001570:	b580      	push	{r7, lr}
10001572:	b082      	sub	sp, #8
10001574:	af00      	add	r7, sp, #0
10001576:	6078      	str	r0, [r7, #4]
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
10001578:	f000 f93a 	bl	100017f0 <alarm_pool_get_default>
1000157c:	4603      	mov	r3, r0
1000157e:	6879      	ldr	r1, [r7, #4]
10001580:	4618      	mov	r0, r3
10001582:	f000 fd84 	bl	1000208e <alarm_pool_cancel_alarm>
10001586:	4603      	mov	r3, r0
}
10001588:	4618      	mov	r0, r3
1000158a:	3708      	adds	r7, #8
1000158c:	46bd      	mov	sp, r7
1000158e:	bd80      	pop	{r7, pc}

10001590 <default_alarm_pool_initialized>:

static alarm_pool_t default_alarm_pool = {
        .entries = default_alarm_pool_entries,
};

static inline bool default_alarm_pool_initialized(void) {
10001590:	b480      	push	{r7}
10001592:	af00      	add	r7, sp, #0
    return default_alarm_pool.lock != NULL;
10001594:	4b05      	ldr	r3, [pc, #20]	@ (100015ac <default_alarm_pool_initialized+0x1c>)
10001596:	691b      	ldr	r3, [r3, #16]
10001598:	2b00      	cmp	r3, #0
1000159a:	bf14      	ite	ne
1000159c:	2301      	movne	r3, #1
1000159e:	2300      	moveq	r3, #0
100015a0:	b2db      	uxtb	r3, r3
}
100015a2:	4618      	mov	r0, r3
100015a4:	46bd      	mov	sp, r7
100015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100015aa:	4770      	bx	lr
100015ac:	20000744 	.word	0x20000744

100015b0 <ta_force_irq>:
#define TA_NUM_TIMERS NUM_GENERIC_TIMERS
#define TA_NUM_TIMER_ALARMS NUM_ALARMS

#define timer_hw_from_timer(t) ((timer_hw_t *)(t))

static inline void ta_force_irq(alarm_pool_timer_t *timer, uint alarm_num) {
100015b0:	b480      	push	{r7}
100015b2:	b085      	sub	sp, #20
100015b4:	af00      	add	r7, sp, #0
100015b6:	6078      	str	r0, [r7, #4]
100015b8:	6039      	str	r1, [r7, #0]
    hw_set_bits(&timer_hw_from_timer(timer)->intf, 1u << alarm_num);
100015ba:	687b      	ldr	r3, [r7, #4]
100015bc:	f103 0244 	add.w	r2, r3, #68	@ 0x44
100015c0:	2101      	movs	r1, #1
100015c2:	683b      	ldr	r3, [r7, #0]
100015c4:	fa01 f303 	lsl.w	r3, r1, r3
100015c8:	60fa      	str	r2, [r7, #12]
100015ca:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100015cc:	68fb      	ldr	r3, [r7, #12]
100015ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100015d2:	461a      	mov	r2, r3
100015d4:	68bb      	ldr	r3, [r7, #8]
100015d6:	6013      	str	r3, [r2, #0]
}
100015d8:	bf00      	nop
}
100015da:	bf00      	nop
100015dc:	3714      	adds	r7, #20
100015de:	46bd      	mov	sp, r7
100015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100015e4:	4770      	bx	lr

100015e6 <ta_clear_force_irq>:

static inline void ta_clear_force_irq(alarm_pool_timer_t *timer, uint alarm_num) {
100015e6:	b480      	push	{r7}
100015e8:	b085      	sub	sp, #20
100015ea:	af00      	add	r7, sp, #0
100015ec:	6078      	str	r0, [r7, #4]
100015ee:	6039      	str	r1, [r7, #0]
    hw_clear_bits(&timer_hw_from_timer(timer)->intf, 1u << alarm_num);
100015f0:	687b      	ldr	r3, [r7, #4]
100015f2:	f103 0244 	add.w	r2, r3, #68	@ 0x44
100015f6:	2101      	movs	r1, #1
100015f8:	683b      	ldr	r3, [r7, #0]
100015fa:	fa01 f303 	lsl.w	r3, r1, r3
100015fe:	60fa      	str	r2, [r7, #12]
10001600:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001602:	68fb      	ldr	r3, [r7, #12]
10001604:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10001608:	461a      	mov	r2, r3
1000160a:	68bb      	ldr	r3, [r7, #8]
1000160c:	6013      	str	r3, [r2, #0]
}
1000160e:	bf00      	nop
}
10001610:	bf00      	nop
10001612:	3714      	adds	r7, #20
10001614:	46bd      	mov	sp, r7
10001616:	f85d 7b04 	ldr.w	r7, [sp], #4
1000161a:	4770      	bx	lr

1000161c <ta_clear_irq>:

static inline void ta_clear_irq(alarm_pool_timer_t *timer, uint alarm_num) {
1000161c:	b480      	push	{r7}
1000161e:	b083      	sub	sp, #12
10001620:	af00      	add	r7, sp, #0
10001622:	6078      	str	r0, [r7, #4]
10001624:	6039      	str	r1, [r7, #0]
    timer_hw_from_timer(timer)->intr = 1u << alarm_num;
10001626:	2201      	movs	r2, #1
10001628:	683b      	ldr	r3, [r7, #0]
1000162a:	409a      	lsls	r2, r3
1000162c:	687b      	ldr	r3, [r7, #4]
1000162e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
10001630:	bf00      	nop
10001632:	370c      	adds	r7, #12
10001634:	46bd      	mov	sp, r7
10001636:	f85d 7b04 	ldr.w	r7, [sp], #4
1000163a:	4770      	bx	lr

1000163c <ta_from_current_irq>:

static inline alarm_pool_timer_t *ta_from_current_irq(uint *alarm_num) {
1000163c:	b580      	push	{r7, lr}
1000163e:	b086      	sub	sp, #24
10001640:	af00      	add	r7, sp, #0
10001642:	6078      	str	r0, [r7, #4]
    pico_default_asm_volatile (
10001644:	f3ef 8305 	mrs	r3, IPSR
10001648:	b2db      	uxtb	r3, r3
1000164a:	60fb      	str	r3, [r7, #12]
    return exception;
1000164c:	68fb      	ldr	r3, [r7, #12]
    uint irq_num = __get_current_exception() - VTABLE_FIRST_IRQ;
1000164e:	3b10      	subs	r3, #16
10001650:	617b      	str	r3, [r7, #20]
    alarm_pool_timer_t *timer = timer_get_instance(TIMER_NUM_FROM_IRQ(irq_num));
10001652:	697b      	ldr	r3, [r7, #20]
10001654:	089b      	lsrs	r3, r3, #2
10001656:	4618      	mov	r0, r3
10001658:	f7ff feea 	bl	10001430 <timer_get_instance>
1000165c:	6138      	str	r0, [r7, #16]
    *alarm_num = TIMER_ALARM_NUM_FROM_IRQ(irq_num);
1000165e:	697b      	ldr	r3, [r7, #20]
10001660:	f003 0203 	and.w	r2, r3, #3
10001664:	687b      	ldr	r3, [r7, #4]
10001666:	601a      	str	r2, [r3, #0]
    return timer;
10001668:	693b      	ldr	r3, [r7, #16]
}
1000166a:	4618      	mov	r0, r3
1000166c:	3718      	adds	r7, #24
1000166e:	46bd      	mov	sp, r7
10001670:	bd80      	pop	{r7, pc}

10001672 <ta_set_timeout>:

static inline void ta_set_timeout(alarm_pool_timer_t *timer, uint alarm_num, int64_t target) {
10001672:	b480      	push	{r7}
10001674:	b085      	sub	sp, #20
10001676:	af00      	add	r7, sp, #0
10001678:	60f8      	str	r0, [r7, #12]
1000167a:	60b9      	str	r1, [r7, #8]
1000167c:	e9c7 2300 	strd	r2, r3, [r7]
    timer_hw_from_timer(timer)->alarm[alarm_num] = (uint32_t) target;
10001680:	6839      	ldr	r1, [r7, #0]
10001682:	68fb      	ldr	r3, [r7, #12]
10001684:	68ba      	ldr	r2, [r7, #8]
10001686:	3204      	adds	r2, #4
10001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
1000168c:	bf00      	nop
1000168e:	3714      	adds	r7, #20
10001690:	46bd      	mov	sp, r7
10001692:	f85d 7b04 	ldr.w	r7, [sp], #4
10001696:	4770      	bx	lr

10001698 <ta_time_us_64>:

static inline uint64_t ta_time_us_64(alarm_pool_timer_t *timer) {
10001698:	b580      	push	{r7, lr}
1000169a:	b082      	sub	sp, #8
1000169c:	af00      	add	r7, sp, #0
1000169e:	6078      	str	r0, [r7, #4]
    return timer_time_us_64(timer_hw_from_timer(timer));
100016a0:	6878      	ldr	r0, [r7, #4]
100016a2:	f000 ff4f 	bl	10002544 <timer_time_us_64>
100016a6:	4602      	mov	r2, r0
100016a8:	460b      	mov	r3, r1
}
100016aa:	4610      	mov	r0, r2
100016ac:	4619      	mov	r1, r3
100016ae:	3708      	adds	r7, #8
100016b0:	46bd      	mov	sp, r7
100016b2:	bd80      	pop	{r7, pc}

100016b4 <ta_enable_irq_handler>:

static inline void ta_enable_irq_handler(alarm_pool_timer_t *timer, uint alarm_num, irq_handler_t irq_handler) {
100016b4:	b580      	push	{r7, lr}
100016b6:	b088      	sub	sp, #32
100016b8:	af00      	add	r7, sp, #0
100016ba:	60f8      	str	r0, [r7, #12]
100016bc:	60b9      	str	r1, [r7, #8]
100016be:	607a      	str	r2, [r7, #4]
    // disarm the timer
    uint irq_num = timer_hardware_alarm_get_irq_num(timer, alarm_num);
100016c0:	68b9      	ldr	r1, [r7, #8]
100016c2:	68f8      	ldr	r0, [r7, #12]
100016c4:	f7ff fe88 	bl	100013d8 <timer_hardware_alarm_get_irq_num>
100016c8:	61f8      	str	r0, [r7, #28]
    timer_hw_from_timer(timer)->armed = 1u << alarm_num;
100016ca:	2201      	movs	r2, #1
100016cc:	68bb      	ldr	r3, [r7, #8]
100016ce:	409a      	lsls	r2, r3
100016d0:	68fb      	ldr	r3, [r7, #12]
100016d2:	621a      	str	r2, [r3, #32]
    irq_set_exclusive_handler(irq_num, irq_handler);
100016d4:	6879      	ldr	r1, [r7, #4]
100016d6:	69f8      	ldr	r0, [r7, #28]
100016d8:	f7ff fa4c 	bl	10000b74 <irq_set_exclusive_handler>
    irq_set_enabled(irq_num, true);
100016dc:	2101      	movs	r1, #1
100016de:	69f8      	ldr	r0, [r7, #28]
100016e0:	f7ff f9b2 	bl	10000a48 <irq_set_enabled>
    hw_set_bits(&timer_hw_from_timer(timer)->inte, 1u << alarm_num);
100016e4:	68fb      	ldr	r3, [r7, #12]
100016e6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
100016ea:	2101      	movs	r1, #1
100016ec:	68bb      	ldr	r3, [r7, #8]
100016ee:	fa01 f303 	lsl.w	r3, r1, r3
100016f2:	61ba      	str	r2, [r7, #24]
100016f4:	617b      	str	r3, [r7, #20]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100016f6:	69bb      	ldr	r3, [r7, #24]
100016f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100016fc:	461a      	mov	r2, r3
100016fe:	697b      	ldr	r3, [r7, #20]
10001700:	6013      	str	r3, [r2, #0]
}
10001702:	bf00      	nop
}
10001704:	bf00      	nop
10001706:	3720      	adds	r7, #32
10001708:	46bd      	mov	sp, r7
1000170a:	bd80      	pop	{r7, pc}

1000170c <ta_hardware_alarm_claim>:
    irq_set_enabled(irq_num, true);
    irq_remove_handler(irq_num, irq_handler);
    hardware_alarm_unclaim(alarm_num);
}

static inline void ta_hardware_alarm_claim(alarm_pool_timer_t *timer, uint hardware_alaram_num) {
1000170c:	b580      	push	{r7, lr}
1000170e:	b082      	sub	sp, #8
10001710:	af00      	add	r7, sp, #0
10001712:	6078      	str	r0, [r7, #4]
10001714:	6039      	str	r1, [r7, #0]
    timer_hardware_alarm_claim(timer_hw_from_timer(timer), hardware_alaram_num);
10001716:	6839      	ldr	r1, [r7, #0]
10001718:	6878      	ldr	r0, [r7, #4]
1000171a:	f000 fef7 	bl	1000250c <timer_hardware_alarm_claim>
}
1000171e:	bf00      	nop
10001720:	3708      	adds	r7, #8
10001722:	46bd      	mov	sp, r7
10001724:	bd80      	pop	{r7, pc}

10001726 <ta_timer_num>:

static inline alarm_pool_timer_t *ta_timer_instance(uint timer_num) {
    return timer_get_instance(timer_num);
}

static inline uint ta_timer_num(alarm_pool_timer_t *timer) {
10001726:	b580      	push	{r7, lr}
10001728:	b082      	sub	sp, #8
1000172a:	af00      	add	r7, sp, #0
1000172c:	6078      	str	r0, [r7, #4]
    return timer_get_index(timer_hw_from_timer(timer));
1000172e:	6878      	ldr	r0, [r7, #4]
10001730:	f7ff fe6a 	bl	10001408 <timer_get_index>
10001734:	4603      	mov	r3, r0
}
10001736:	4618      	mov	r0, r3
10001738:	3708      	adds	r7, #8
1000173a:	46bd      	mov	sp, r7
1000173c:	bd80      	pop	{r7, pc}
	...

10001740 <ta_default_timer_instance>:

static inline alarm_pool_timer_t *ta_default_timer_instance(void) {
10001740:	b480      	push	{r7}
10001742:	af00      	add	r7, sp, #0
    return PICO_DEFAULT_TIMER_INSTANCE();
10001744:	4b02      	ldr	r3, [pc, #8]	@ (10001750 <ta_default_timer_instance+0x10>)
}
10001746:	4618      	mov	r0, r3
10001748:	46bd      	mov	sp, r7
1000174a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000174e:	4770      	bx	lr
10001750:	400b0000 	.word	0x400b0000

10001754 <alarm_index>:

static alarm_pool_t *pools[TA_NUM_TIMERS][TA_NUM_TIMER_ALARMS];

static void alarm_pool_post_alloc_init(alarm_pool_t *pool, alarm_pool_timer_t *timer, uint hardware_alarm_num, uint max_timers);

static inline int16_t alarm_index(alarm_id_t id) {
10001754:	b480      	push	{r7}
10001756:	b083      	sub	sp, #12
10001758:	af00      	add	r7, sp, #0
1000175a:	6078      	str	r0, [r7, #4]
    return (int16_t)(id >> 16);
1000175c:	687b      	ldr	r3, [r7, #4]
1000175e:	141b      	asrs	r3, r3, #16
10001760:	b21b      	sxth	r3, r3
}
10001762:	4618      	mov	r0, r3
10001764:	370c      	adds	r7, #12
10001766:	46bd      	mov	sp, r7
10001768:	f85d 7b04 	ldr.w	r7, [sp], #4
1000176c:	4770      	bx	lr

1000176e <alarm_sequence>:

static inline uint16_t alarm_sequence(alarm_id_t id) {
1000176e:	b480      	push	{r7}
10001770:	b083      	sub	sp, #12
10001772:	af00      	add	r7, sp, #0
10001774:	6078      	str	r0, [r7, #4]
    return (uint16_t)id;
10001776:	687b      	ldr	r3, [r7, #4]
10001778:	b29b      	uxth	r3, r3
}
1000177a:	4618      	mov	r0, r3
1000177c:	370c      	adds	r7, #12
1000177e:	46bd      	mov	sp, r7
10001780:	f85d 7b04 	ldr.w	r7, [sp], #4
10001784:	4770      	bx	lr

10001786 <make_alarm_id>:

static alarm_id_t make_alarm_id(int index, uint16_t counter) {
10001786:	b480      	push	{r7}
10001788:	b083      	sub	sp, #12
1000178a:	af00      	add	r7, sp, #0
1000178c:	6078      	str	r0, [r7, #4]
1000178e:	460b      	mov	r3, r1
10001790:	807b      	strh	r3, [r7, #2]
    return index << 16 | counter;
10001792:	687b      	ldr	r3, [r7, #4]
10001794:	041a      	lsls	r2, r3, #16
10001796:	887b      	ldrh	r3, [r7, #2]
10001798:	4313      	orrs	r3, r2
}
1000179a:	4618      	mov	r0, r3
1000179c:	370c      	adds	r7, #12
1000179e:	46bd      	mov	sp, r7
100017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
100017a4:	4770      	bx	lr
	...

100017a8 <runtime_init_default_alarm_pool>:

#if !PICO_RUNTIME_NO_INIT_DEFAULT_ALARM_POOL
void __weak runtime_init_default_alarm_pool(void) {
100017a8:	b580      	push	{r7, lr}
100017aa:	b082      	sub	sp, #8
100017ac:	af00      	add	r7, sp, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    // allow multiple calls for ease of use from host tests
    if (!default_alarm_pool_initialized()) {
100017ae:	f7ff feef 	bl	10001590 <default_alarm_pool_initialized>
100017b2:	4603      	mov	r3, r0
100017b4:	f083 0301 	eor.w	r3, r3, #1
100017b8:	b2db      	uxtb	r3, r3
100017ba:	2b00      	cmp	r3, #0
100017bc:	d00c      	beq.n	100017d8 <runtime_init_default_alarm_pool+0x30>
        alarm_pool_timer_t *timer = alarm_pool_get_default_timer();
100017be:	f000 fe61 	bl	10002484 <alarm_pool_get_default_timer>
100017c2:	6078      	str	r0, [r7, #4]
        ta_hardware_alarm_claim(timer, PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM);
100017c4:	2103      	movs	r1, #3
100017c6:	6878      	ldr	r0, [r7, #4]
100017c8:	f7ff ffa0 	bl	1000170c <ta_hardware_alarm_claim>
        alarm_pool_post_alloc_init(&default_alarm_pool,
100017cc:	2310      	movs	r3, #16
100017ce:	2203      	movs	r2, #3
100017d0:	6879      	ldr	r1, [r7, #4]
100017d2:	4805      	ldr	r0, [pc, #20]	@ (100017e8 <runtime_init_default_alarm_pool+0x40>)
100017d4:	f000 fafe 	bl	10001dd4 <alarm_pool_post_alloc_init>
                                   timer,
                                   PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
                                   PICO_TIME_DEFAULT_ALARM_POOL_MAX_TIMERS);
    }
    lock_init(&sleep_notifier, PICO_SPINLOCK_ID_TIMER);
100017d8:	210a      	movs	r1, #10
100017da:	4804      	ldr	r0, [pc, #16]	@ (100017ec <runtime_init_default_alarm_pool+0x44>)
100017dc:	f7ff fd12 	bl	10001204 <lock_init>
#endif
}
100017e0:	bf00      	nop
100017e2:	3708      	adds	r7, #8
100017e4:	46bd      	mov	sp, r7
100017e6:	bd80      	pop	{r7, pc}
100017e8:	20000744 	.word	0x20000744
100017ec:	200009a8 	.word	0x200009a8

100017f0 <alarm_pool_get_default>:
void alarm_pool_init_default(void) {
    runtime_init_default_alarm_pool();
}

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
alarm_pool_t *alarm_pool_get_default(void) {
100017f0:	b580      	push	{r7, lr}
100017f2:	af00      	add	r7, sp, #0
    assert(default_alarm_pool_initialized());
100017f4:	f7ff fecc 	bl	10001590 <default_alarm_pool_initialized>
100017f8:	4603      	mov	r3, r0
100017fa:	2b00      	cmp	r3, #0
100017fc:	d105      	bne.n	1000180a <alarm_pool_get_default+0x1a>
100017fe:	4b04      	ldr	r3, [pc, #16]	@ (10001810 <alarm_pool_get_default+0x20>)
10001800:	4a04      	ldr	r2, [pc, #16]	@ (10001814 <alarm_pool_get_default+0x24>)
10001802:	2165      	movs	r1, #101	@ 0x65
10001804:	4804      	ldr	r0, [pc, #16]	@ (10001818 <alarm_pool_get_default+0x28>)
10001806:	f003 fc91 	bl	1000512c <__assert_func>
    return &default_alarm_pool;
1000180a:	4b04      	ldr	r3, [pc, #16]	@ (1000181c <alarm_pool_get_default+0x2c>)
}
1000180c:	4618      	mov	r0, r3
1000180e:	bd80      	pop	{r7, pc}
10001810:	1000690c 	.word	0x1000690c
10001814:	10006a2c 	.word	0x10006a2c
10001818:	10006930 	.word	0x10006930
1000181c:	20000744 	.word	0x20000744

10001820 <alarm_pool_irq_handler>:

// marker which we can use in place of handler function to indicate we are a repeating timer

#define repeating_timer_marker ((alarm_callback_t)alarm_pool_irq_handler)
#include "hardware/gpio.h"
static void alarm_pool_irq_handler(void) {
10001820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10001824:	b0bf      	sub	sp, #252	@ 0xfc
10001826:	af00      	add	r7, sp, #0
    // This IRQ handler does the main work, as it always (assuming the IRQ hasn't been enabled on both cores
    // which is unsupported) run on the alarm pool's core, and can't be preempted by itself, meaning
    // that it doesn't need locks except to protect against linked list access
    uint timer_alarm_num;
    alarm_pool_timer_t *timer = ta_from_current_irq(&timer_alarm_num);
10001828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
1000182c:	4618      	mov	r0, r3
1000182e:	f7ff ff05 	bl	1000163c <ta_from_current_irq>
10001832:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    uint timer_num = ta_timer_num(timer);
10001836:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
1000183a:	f7ff ff74 	bl	10001726 <ta_timer_num>
1000183e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    alarm_pool_t *pool = pools[timer_num][timer_alarm_num];
10001842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10001844:	4997      	ldr	r1, [pc, #604]	@ (10001aa4 <alarm_pool_irq_handler+0x284>)
10001846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
1000184a:	009b      	lsls	r3, r3, #2
1000184c:	4413      	add	r3, r2
1000184e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001852:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    assert(pool->timer_alarm_num == timer_alarm_num);
10001856:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
1000185a:	781b      	ldrb	r3, [r3, #0]
1000185c:	461a      	mov	r2, r3
1000185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10001860:	429a      	cmp	r2, r3
10001862:	d005      	beq.n	10001870 <alarm_pool_irq_handler+0x50>
10001864:	4b90      	ldr	r3, [pc, #576]	@ (10001aa8 <alarm_pool_irq_handler+0x288>)
10001866:	4a91      	ldr	r2, [pc, #580]	@ (10001aac <alarm_pool_irq_handler+0x28c>)
10001868:	2190      	movs	r1, #144	@ 0x90
1000186a:	4891      	ldr	r0, [pc, #580]	@ (10001ab0 <alarm_pool_irq_handler+0x290>)
1000186c:	f003 fc5e 	bl	1000512c <__assert_func>
    int64_t now = (int64_t) ta_time_us_64(timer);
10001870:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
10001874:	f7ff ff10 	bl	10001698 <ta_time_us_64>
10001878:	4602      	mov	r2, r0
1000187a:	460b      	mov	r3, r1
1000187c:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
    int64_t earliest_target;
    // 1. clear force bits if we were forced (do this outside the loop, as forcing is hopefully rare)
    ta_clear_force_irq(timer, timer_alarm_num);
10001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10001882:	4619      	mov	r1, r3
10001884:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
10001888:	f7ff fead 	bl	100015e6 <ta_clear_force_irq>
    do {
        // 2. clear the IRQ if it was fired
        ta_clear_irq(timer, timer_alarm_num);
1000188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000188e:	4619      	mov	r1, r3
10001890:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
10001894:	f7ff fec2 	bl	1000161c <ta_clear_irq>
        // 3. we look at the earliest existing alarm first; the reasoning here is that we
        //    don't want to delay an existing callback because a later one is added, and
        //    if both are due now, then we have a race anyway (but we prefer to fire existing
        //    timers before new ones anyway.
        int16_t earliest_index = pool->ordered_head;
10001898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
1000189c:	891b      	ldrh	r3, [r3, #8]
1000189e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        // by default, we loop if there was any event pending (we will mark it false
        // later if there is no work to do)
        if (earliest_index >= 0) {
100018a2:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
100018a6:	2b00      	cmp	r3, #0
100018a8:	f2c0 8150 	blt.w	10001b4c <alarm_pool_irq_handler+0x32c>
            alarm_pool_entry_t *earliest_entry = &pool->entries[earliest_index];
100018ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100018b0:	6959      	ldr	r1, [r3, #20]
100018b2:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	@ 0xbe
100018b6:	4613      	mov	r3, r2
100018b8:	005b      	lsls	r3, r3, #1
100018ba:	4413      	add	r3, r2
100018bc:	00db      	lsls	r3, r3, #3
100018be:	440b      	add	r3, r1
100018c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            earliest_target = earliest_entry->target;
100018c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
100018c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
100018cc:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
            if ((now - earliest_target) >= 0) {
100018d0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
100018d4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
100018d8:	ebb0 0802 	subs.w	r8, r0, r2
100018dc:	eb61 0903 	sbc.w	r9, r1, r3
100018e0:	f1b9 0f00 	cmp.w	r9, #0
100018e4:	f2c0 8132 	blt.w	10001b4c <alarm_pool_irq_handler+0x32c>
                // time to call the callback now (or in the past)
                // note that an entry->target of < 0 means the entry has been canceled (not this is set
                // by this function, in response to the entry having been queued by the cancel_alarm API
                // meaning that we don't need to worry about tearing of the 64 bit value)
                int64_t delta;
                if (earliest_target >= 0) {
100018e8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
100018ec:	2b00      	cmp	r3, #0
100018ee:	db3b      	blt.n	10001968 <alarm_pool_irq_handler+0x148>
                    // special case repeating timer without making another function call which adds overhead
                    if (earliest_entry->callback == repeating_timer_marker) {
100018f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
100018f4:	691a      	ldr	r2, [r3, #16]
100018f6:	4b6f      	ldr	r3, [pc, #444]	@ (10001ab4 <alarm_pool_irq_handler+0x294>)
100018f8:	429a      	cmp	r2, r3
100018fa:	d119      	bne.n	10001930 <alarm_pool_irq_handler+0x110>
                        repeating_timer_t *rpt = (repeating_timer_t *)earliest_entry->user_data;
100018fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
10001900:	695b      	ldr	r3, [r3, #20]
10001902:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                        delta = rpt->callback(rpt) ? rpt->delay_us : 0;
10001906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
1000190a:	691b      	ldr	r3, [r3, #16]
1000190c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
10001910:	4798      	blx	r3
10001912:	4603      	mov	r3, r0
10001914:	2b00      	cmp	r3, #0
10001916:	d004      	beq.n	10001922 <alarm_pool_irq_handler+0x102>
10001918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
1000191c:	e9d3 2300 	ldrd	r2, r3, [r3]
10001920:	e003      	b.n	1000192a <alarm_pool_irq_handler+0x10a>
10001922:	f04f 0200 	mov.w	r2, #0
10001926:	f04f 0300 	mov.w	r3, #0
1000192a:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
1000192e:	e021      	b.n	10001974 <alarm_pool_irq_handler+0x154>
                    } else {
                        alarm_id_t id = make_alarm_id(pool->ordered_head, earliest_entry->sequence);
10001930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
10001938:	461a      	mov	r2, r3
1000193a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
1000193e:	885b      	ldrh	r3, [r3, #2]
10001940:	b29b      	uxth	r3, r3
10001942:	4619      	mov	r1, r3
10001944:	4610      	mov	r0, r2
10001946:	f7ff ff1e 	bl	10001786 <make_alarm_id>
1000194a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                        delta = earliest_entry->callback(id, earliest_entry->user_data);
1000194e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
10001952:	691a      	ldr	r2, [r3, #16]
10001954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
10001958:	695b      	ldr	r3, [r3, #20]
1000195a:	4619      	mov	r1, r3
1000195c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
10001960:	4790      	blx	r2
10001962:	e9c7 013a 	strd	r0, r1, [r7, #232]	@ 0xe8
10001966:	e005      	b.n	10001974 <alarm_pool_irq_handler+0x154>
                    }
                } else {
                    // negative target means cancel alarm
                    delta = 0;
10001968:	f04f 0200 	mov.w	r2, #0
1000196c:	f04f 0300 	mov.w	r3, #0
10001970:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
                }
                if (delta) {
10001974:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
10001978:	4313      	orrs	r3, r2
1000197a:	f000 809d 	beq.w	10001ab8 <alarm_pool_irq_handler+0x298>
                    int64_t next_time;
                    if (delta < 0) {
1000197e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
10001982:	2b00      	cmp	r3, #0
10001984:	da0d      	bge.n	100019a2 <alarm_pool_irq_handler+0x182>
                        // delta is (positive) delta from last fire time
                        next_time = earliest_target - delta;
10001986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
1000198a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
1000198e:	1a86      	subs	r6, r0, r2
10001990:	60be      	str	r6, [r7, #8]
10001992:	eb61 0303 	sbc.w	r3, r1, r3
10001996:	60fb      	str	r3, [r7, #12]
10001998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
1000199c:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
100019a0:	e011      	b.n	100019c6 <alarm_pool_irq_handler+0x1a6>
                    } else {
                        // delta is relative to now
                        next_time = (int64_t) ta_time_us_64(timer) + delta;
100019a2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
100019a6:	f7ff fe77 	bl	10001698 <ta_time_us_64>
100019aa:	4602      	mov	r2, r0
100019ac:	460b      	mov	r3, r1
100019ae:	4610      	mov	r0, r2
100019b0:	4619      	mov	r1, r3
100019b2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
100019b6:	1816      	adds	r6, r2, r0
100019b8:	603e      	str	r6, [r7, #0]
100019ba:	414b      	adcs	r3, r1
100019bc:	607b      	str	r3, [r7, #4]
100019be:	e9d7 2300 	ldrd	r2, r3, [r7]
100019c2:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
                    }
                    earliest_entry->target = next_time;
100019c6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
100019ca:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
100019ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
                    // need to re-add, unless we are the only entry or already at the front
                    if (earliest_entry->next >= 0 && next_time - pool->entries[earliest_entry->next].target >= 0) {
100019d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
100019d6:	f9b3 3000 	ldrsh.w	r3, [r3]
100019da:	2b00      	cmp	r3, #0
100019dc:	f2c0 80b6 	blt.w	10001b4c <alarm_pool_irq_handler+0x32c>
100019e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100019e4:	6959      	ldr	r1, [r3, #20]
100019e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
100019ea:	f9b3 3000 	ldrsh.w	r3, [r3]
100019ee:	461a      	mov	r2, r3
100019f0:	4613      	mov	r3, r2
100019f2:	005b      	lsls	r3, r3, #1
100019f4:	4413      	add	r3, r2
100019f6:	00db      	lsls	r3, r3, #3
100019f8:	440b      	add	r3, r1
100019fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
100019fe:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
10001a02:	ebb2 0a00 	subs.w	sl, r2, r0
10001a06:	eb63 0b01 	sbc.w	fp, r3, r1
10001a0a:	f1bb 0f00 	cmp.w	fp, #0
10001a0e:	f2c0 809d 	blt.w	10001b4c <alarm_pool_irq_handler+0x32c>
                        // unlink this item
                        pool->ordered_head = earliest_entry->next;
10001a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
10001a16:	f9b3 3000 	ldrsh.w	r3, [r3]
10001a1a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
10001a1e:	8113      	strh	r3, [r2, #8]
                        int16_t *prev = &pool->ordered_head;
10001a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001a24:	3308      	adds	r3, #8
10001a26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                        // find insertion point; note >= as if we add a new item for the same time as another, then it follows
                        while (*prev >= 0 && (next_time - pool->entries[*prev].target) >= 0) {
10001a2a:	e00e      	b.n	10001a4a <alarm_pool_irq_handler+0x22a>
                            prev = &pool->entries[*prev].next;
10001a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001a30:	6959      	ldr	r1, [r3, #20]
10001a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
10001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
10001a3a:	461a      	mov	r2, r3
10001a3c:	4613      	mov	r3, r2
10001a3e:	005b      	lsls	r3, r3, #1
10001a40:	4413      	add	r3, r2
10001a42:	00db      	lsls	r3, r3, #3
10001a44:	440b      	add	r3, r1
10001a46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                        while (*prev >= 0 && (next_time - pool->entries[*prev].target) >= 0) {
10001a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
10001a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
10001a52:	2b00      	cmp	r3, #0
10001a54:	db18      	blt.n	10001a88 <alarm_pool_irq_handler+0x268>
10001a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001a5a:	6959      	ldr	r1, [r3, #20]
10001a5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
10001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
10001a64:	461a      	mov	r2, r3
10001a66:	4613      	mov	r3, r2
10001a68:	005b      	lsls	r3, r3, #1
10001a6a:	4413      	add	r3, r2
10001a6c:	00db      	lsls	r3, r3, #3
10001a6e:	440b      	add	r3, r1
10001a70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
10001a74:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
10001a78:	1a16      	subs	r6, r2, r0
10001a7a:	61be      	str	r6, [r7, #24]
10001a7c:	eb63 0301 	sbc.w	r3, r3, r1
10001a80:	61fb      	str	r3, [r7, #28]
10001a82:	69fb      	ldr	r3, [r7, #28]
10001a84:	2b00      	cmp	r3, #0
10001a86:	dad1      	bge.n	10001a2c <alarm_pool_irq_handler+0x20c>
                        }
                        earliest_entry->next = *prev;
10001a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
10001a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
10001a90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
10001a94:	8013      	strh	r3, [r2, #0]
                        *prev = earliest_index;
10001a96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
10001a9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
10001a9e:	8013      	strh	r3, [r2, #0]
10001aa0:	e054      	b.n	10001b4c <alarm_pool_irq_handler+0x32c>
10001aa2:	bf00      	nop
10001aa4:	20000988 	.word	0x20000988
10001aa8:	10006968 	.word	0x10006968
10001aac:	10006a44 	.word	0x10006a44
10001ab0:	10006930 	.word	0x10006930
10001ab4:	10001821 	.word	0x10001821
                    }
                } else {
                    // need to remove the item
                    pool->ordered_head = earliest_entry->next;
10001ab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
10001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
10001ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
10001ac4:	8113      	strh	r3, [r2, #8]
                    // and add it back to the free list (under lock)
                    uint32_t save = spin_lock_blocking(pool->lock);
10001ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001aca:	691b      	ldr	r3, [r3, #16]
10001acc:	66bb      	str	r3, [r7, #104]	@ 0x68
    pico_default_asm_volatile (
10001ace:	f3ef 8310 	mrs	r3, PRIMASK
10001ad2:	b672      	cpsid	i
10001ad4:	667b      	str	r3, [r7, #100]	@ 0x64
    return status;
10001ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    uint32_t save = save_and_disable_interrupts();
10001ad8:	663b      	str	r3, [r7, #96]	@ 0x60
10001ada:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10001adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    SW_SPIN_LOCK_LOCK(lock);
10001ade:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
10001ae0:	e8d1 3fcf 	ldaexb	r3, [r1]
10001ae4:	2201      	movs	r2, #1
10001ae6:	2b00      	cmp	r3, #0
10001ae8:	d1fa      	bne.n	10001ae0 <alarm_pool_irq_handler+0x2c0>
10001aea:	e8c1 2f43 	strexb	r3, r2, [r1]
10001aee:	2b00      	cmp	r3, #0
10001af0:	d1f6      	bne.n	10001ae0 <alarm_pool_irq_handler+0x2c0>
10001af2:	65ba      	str	r2, [r7, #88]	@ 0x58
10001af4:	657b      	str	r3, [r7, #84]	@ 0x54
    pico_default_asm_volatile ("dmb" : : : "memory");
10001af6:	f3bf 8f5f 	dmb	sy
}
10001afa:	bf00      	nop
}
10001afc:	bf00      	nop
}
10001afe:	bf00      	nop
    return save;
10001b00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10001b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                    earliest_entry->next = pool->free_head;
10001b06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001b0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
10001b0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
10001b12:	8013      	strh	r3, [r2, #0]
                    pool->free_head = earliest_index;
10001b14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
10001b18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
10001b1c:	8053      	strh	r3, [r2, #2]
                    spin_unlock(pool->lock, save);
10001b1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001b22:	691b      	ldr	r3, [r3, #16]
10001b24:	67fb      	str	r3, [r7, #124]	@ 0x7c
10001b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
10001b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
10001b2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
10001b2e:	677b      	str	r3, [r7, #116]	@ 0x74
    SW_SPIN_LOCK_UNLOCK(lock);
10001b30:	2300      	movs	r3, #0
10001b32:	673b      	str	r3, [r7, #112]	@ 0x70
10001b34:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
10001b36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10001b38:	e8c3 2f8f 	stlb	r2, [r3]
}
10001b3c:	bf00      	nop
10001b3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10001b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10001b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10001b44:	f383 8810 	msr	PRIMASK, r3
}
10001b48:	bf00      	nop
}
10001b4a:	bf00      	nop
                }
            }
        }
        // if we have any new alarms, add them to the ordered list
        if (pool->new_head >= 0) {
10001b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001b50:	889b      	ldrh	r3, [r3, #4]
10001b52:	b21b      	sxth	r3, r3
10001b54:	2b00      	cmp	r3, #0
10001b56:	f2c0 80a0 	blt.w	10001c9a <alarm_pool_irq_handler+0x47a>
            uint32_t save = spin_lock_blocking(pool->lock);
10001b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001b5e:	691b      	ldr	r3, [r3, #16]
10001b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pico_default_asm_volatile (
10001b62:	f3ef 8310 	mrs	r3, PRIMASK
10001b66:	b672      	cpsid	i
10001b68:	63bb      	str	r3, [r7, #56]	@ 0x38
    return status;
10001b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    uint32_t save = save_and_disable_interrupts();
10001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
10001b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10001b70:	633b      	str	r3, [r7, #48]	@ 0x30
    SW_SPIN_LOCK_LOCK(lock);
10001b72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10001b74:	e8d1 3fcf 	ldaexb	r3, [r1]
10001b78:	2201      	movs	r2, #1
10001b7a:	2b00      	cmp	r3, #0
10001b7c:	d1fa      	bne.n	10001b74 <alarm_pool_irq_handler+0x354>
10001b7e:	e8c1 2f43 	strexb	r3, r2, [r1]
10001b82:	2b00      	cmp	r3, #0
10001b84:	d1f6      	bne.n	10001b74 <alarm_pool_irq_handler+0x354>
10001b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
10001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    pico_default_asm_volatile ("dmb" : : : "memory");
10001b8a:	f3bf 8f5f 	dmb	sy
}
10001b8e:	bf00      	nop
}
10001b90:	bf00      	nop
}
10001b92:	bf00      	nop
    return save;
10001b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10001b96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            // must re-read new head under lock
            int16_t new_index = pool->new_head;
10001b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001b9e:	889b      	ldrh	r3, [r3, #4]
10001ba0:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
            // clear the list
            pool->new_head = -1;
10001ba4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
10001ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10001bac:	8093      	strh	r3, [r2, #4]
            spin_unlock(pool->lock, save);
10001bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001bb2:	691b      	ldr	r3, [r3, #16]
10001bb4:	653b      	str	r3, [r7, #80]	@ 0x50
10001bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
10001bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
10001bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10001bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    SW_SPIN_LOCK_UNLOCK(lock);
10001bc0:	2300      	movs	r3, #0
10001bc2:	647b      	str	r3, [r7, #68]	@ 0x44
10001bc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10001bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10001bc8:	e8c3 2f8f 	stlb	r2, [r3]
}
10001bcc:	bf00      	nop
10001bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10001bd0:	643b      	str	r3, [r7, #64]	@ 0x40
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10001bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10001bd4:	f383 8810 	msr	PRIMASK, r3
}
10001bd8:	bf00      	nop
}
10001bda:	bf00      	nop
            // insert each of the new items
            while (new_index >= 0) {
10001bdc:	e059      	b.n	10001c92 <alarm_pool_irq_handler+0x472>
                alarm_pool_entry_t *new_entry = &pool->entries[new_index];
10001bde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001be2:	6959      	ldr	r1, [r3, #20]
10001be4:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	@ 0xda
10001be8:	4613      	mov	r3, r2
10001bea:	005b      	lsls	r3, r3, #1
10001bec:	4413      	add	r3, r2
10001bee:	00db      	lsls	r3, r3, #3
10001bf0:	440b      	add	r3, r1
10001bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                int64_t new_entry_time = new_entry->target;
10001bf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
10001bfa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
10001bfe:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
                int16_t *prev = &pool->ordered_head;
10001c02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001c06:	3308      	adds	r3, #8
10001c08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                // find insertion point; note >= as if we add a new item for the same time as another, then it follows
                while (*prev >= 0 && (new_entry_time - pool->entries[*prev].target) >= 0) {
10001c0c:	e00e      	b.n	10001c2c <alarm_pool_irq_handler+0x40c>
                    prev = &pool->entries[*prev].next;
10001c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001c12:	6959      	ldr	r1, [r3, #20]
10001c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
10001c18:	f9b3 3000 	ldrsh.w	r3, [r3]
10001c1c:	461a      	mov	r2, r3
10001c1e:	4613      	mov	r3, r2
10001c20:	005b      	lsls	r3, r3, #1
10001c22:	4413      	add	r3, r2
10001c24:	00db      	lsls	r3, r3, #3
10001c26:	440b      	add	r3, r1
10001c28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                while (*prev >= 0 && (new_entry_time - pool->entries[*prev].target) >= 0) {
10001c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
10001c30:	f9b3 3000 	ldrsh.w	r3, [r3]
10001c34:	2b00      	cmp	r3, #0
10001c36:	db18      	blt.n	10001c6a <alarm_pool_irq_handler+0x44a>
10001c38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001c3c:	6959      	ldr	r1, [r3, #20]
10001c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
10001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
10001c46:	461a      	mov	r2, r3
10001c48:	4613      	mov	r3, r2
10001c4a:	005b      	lsls	r3, r3, #1
10001c4c:	4413      	add	r3, r2
10001c4e:	00db      	lsls	r3, r3, #3
10001c50:	440b      	add	r3, r1
10001c52:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
10001c56:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
10001c5a:	1a16      	subs	r6, r2, r0
10001c5c:	613e      	str	r6, [r7, #16]
10001c5e:	eb63 0301 	sbc.w	r3, r3, r1
10001c62:	617b      	str	r3, [r7, #20]
10001c64:	697b      	ldr	r3, [r7, #20]
10001c66:	2b00      	cmp	r3, #0
10001c68:	dad1      	bge.n	10001c0e <alarm_pool_irq_handler+0x3ee>
                }
                int16_t next = *prev;
10001c6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
10001c6e:	881b      	ldrh	r3, [r3, #0]
10001c70:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
                *prev = new_index;
10001c74:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
10001c78:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
10001c7c:	8013      	strh	r3, [r2, #0]
                new_index = new_entry->next;
10001c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
10001c82:	881b      	ldrh	r3, [r3, #0]
10001c84:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
                new_entry->next = next;
10001c88:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
10001c8c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
10001c90:	8013      	strh	r3, [r2, #0]
            while (new_index >= 0) {
10001c92:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	@ 0xda
10001c96:	2b00      	cmp	r3, #0
10001c98:	daa1      	bge.n	10001bde <alarm_pool_irq_handler+0x3be>
            }
        }
        // if we have any canceled alarms, then mark them for removal by setting their due time to -1 (which will
        // cause them to be handled the next time round and removed)
        if (pool->has_pending_cancellations) {
10001c9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001c9e:	799b      	ldrb	r3, [r3, #6]
10001ca0:	b2db      	uxtb	r3, r3
10001ca2:	2b00      	cmp	r3, #0
10001ca4:	d058      	beq.n	10001d58 <alarm_pool_irq_handler+0x538>
            pool->has_pending_cancellations = false;
10001ca6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
10001caa:	2300      	movs	r3, #0
10001cac:	7193      	strb	r3, [r2, #6]
 * The compiler will not move the load from `some_other_memory_location` above the memory barrier (which it otherwise
 * might - even above the memory store!)
 */
__force_inline static void __compiler_memory_barrier(void) {
    pico_default_asm_volatile ("" : : : "memory");
}
10001cae:	bf00      	nop
            __compiler_memory_barrier();
            int16_t *prev = &pool->ordered_head;
10001cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001cb4:	3308      	adds	r3, #8
10001cb6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            // set target for canceled items to -1, and move to front of the list
            for(int16_t index = pool->ordered_head; index != -1; ) {
10001cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001cbe:	891b      	ldrh	r3, [r3, #8]
10001cc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
10001cc4:	e043      	b.n	10001d4e <alarm_pool_irq_handler+0x52e>
                alarm_pool_entry_t *entry = &pool->entries[index];
10001cc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001cca:	6959      	ldr	r1, [r3, #20]
10001ccc:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	@ 0xce
10001cd0:	4613      	mov	r3, r2
10001cd2:	005b      	lsls	r3, r3, #1
10001cd4:	4413      	add	r3, r2
10001cd6:	00db      	lsls	r3, r3, #3
10001cd8:	440b      	add	r3, r1
10001cda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                int16_t next = entry->next;
10001cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10001ce2:	881b      	ldrh	r3, [r3, #0]
10001ce4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
                if ((int16_t)entry->sequence < 0) {
10001ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10001cec:	885b      	ldrh	r3, [r3, #2]
10001cee:	b29b      	uxth	r3, r3
10001cf0:	b21b      	sxth	r3, r3
10001cf2:	2b00      	cmp	r3, #0
10001cf4:	da23      	bge.n	10001d3e <alarm_pool_irq_handler+0x51e>
                    // mark for deletion
                    entry->target = -1;
10001cf6:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
10001cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10001cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10001d02:	e9c1 2302 	strd	r2, r3, [r1, #8]
                    if (index != pool->ordered_head) {
10001d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001d0a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
10001d0e:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
10001d12:	4293      	cmp	r3, r2
10001d14:	d017      	beq.n	10001d46 <alarm_pool_irq_handler+0x526>
                        // move to start of queue
                        *prev = entry->next;
10001d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10001d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
10001d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
10001d22:	8013      	strh	r3, [r2, #0]
                        entry->next = pool->ordered_head;
10001d24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001d28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
10001d2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
10001d30:	8013      	strh	r3, [r2, #0]
                        pool->ordered_head = index;
10001d32:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
10001d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
10001d3a:	8113      	strh	r3, [r2, #8]
10001d3c:	e003      	b.n	10001d46 <alarm_pool_irq_handler+0x526>
                    }
                } else {
                    prev = &entry->next;
10001d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10001d42:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                }
                index = next;
10001d46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
10001d4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            for(int16_t index = pool->ordered_head; index != -1; ) {
10001d4e:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
10001d52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10001d56:	d1b6      	bne.n	10001cc6 <alarm_pool_irq_handler+0x4a6>
            }
        }
        now = (int64_t) ta_time_us_64(timer);
10001d58:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
10001d5c:	f7ff fc9c 	bl	10001698 <ta_time_us_64>
10001d60:	4602      	mov	r2, r0
10001d62:	460b      	mov	r3, r1
10001d64:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
        earliest_index = pool->ordered_head;
10001d68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001d6c:	891b      	ldrh	r3, [r3, #8]
10001d6e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        if (earliest_index < 0) break;
10001d72:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
10001d76:	2b00      	cmp	r3, #0
10001d78:	db25      	blt.n	10001dc6 <alarm_pool_irq_handler+0x5a6>
        // need to wait
        alarm_pool_entry_t *earliest_entry = &pool->entries[earliest_index];
10001d7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001d7e:	6959      	ldr	r1, [r3, #20]
10001d80:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	@ 0xbe
10001d84:	4613      	mov	r3, r2
10001d86:	005b      	lsls	r3, r3, #1
10001d88:	4413      	add	r3, r2
10001d8a:	00db      	lsls	r3, r3, #3
10001d8c:	440b      	add	r3, r1
10001d8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        earliest_target = earliest_entry->target;
10001d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
10001d96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
10001d9a:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
        ta_set_timeout(timer, timer_alarm_num, earliest_target);
10001d9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10001da0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
10001da4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
10001da8:	f7ff fc63 	bl	10001672 <ta_set_timeout>
        // check we haven't now past the target time; if not we don't want to loop again
    } while ((earliest_target - now) <= 0);
10001dac:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
10001db0:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
10001db4:	1a84      	subs	r4, r0, r2
10001db6:	eb61 0503 	sbc.w	r5, r1, r3
10001dba:	2c01      	cmp	r4, #1
10001dbc:	f175 0300 	sbcs.w	r3, r5, #0
10001dc0:	f6ff ad64 	blt.w	1000188c <alarm_pool_irq_handler+0x6c>
}
10001dc4:	e000      	b.n	10001dc8 <alarm_pool_irq_handler+0x5a8>
        if (earliest_index < 0) break;
10001dc6:	bf00      	nop
}
10001dc8:	bf00      	nop
10001dca:	37fc      	adds	r7, #252	@ 0xfc
10001dcc:	46bd      	mov	sp, r7
10001dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10001dd2:	bf00      	nop

10001dd4 <alarm_pool_post_alloc_init>:

void alarm_pool_post_alloc_init(alarm_pool_t *pool, alarm_pool_timer_t *timer, uint hardware_alarm_num, uint max_timers) {
10001dd4:	b580      	push	{r7, lr}
10001dd6:	b086      	sub	sp, #24
10001dd8:	af00      	add	r7, sp, #0
10001dda:	60f8      	str	r0, [r7, #12]
10001ddc:	60b9      	str	r1, [r7, #8]
10001dde:	607a      	str	r2, [r7, #4]
10001de0:	603b      	str	r3, [r7, #0]
    pool->timer = timer;
10001de2:	68fb      	ldr	r3, [r7, #12]
10001de4:	68ba      	ldr	r2, [r7, #8]
10001de6:	60da      	str	r2, [r3, #12]
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
10001de8:	f7fe fd7a 	bl	100008e0 <next_striped_spin_lock_num>
10001dec:	4603      	mov	r3, r0
10001dee:	613b      	str	r3, [r7, #16]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10001df0:	693b      	ldr	r3, [r7, #16]
10001df2:	4a27      	ldr	r2, [pc, #156]	@ (10001e90 <alarm_pool_post_alloc_init+0xbc>)
10001df4:	441a      	add	r2, r3
10001df6:	bf00      	nop
10001df8:	68fb      	ldr	r3, [r7, #12]
10001dfa:	611a      	str	r2, [r3, #16]
    pool->timer_alarm_num = (uint8_t) hardware_alarm_num;
10001dfc:	687b      	ldr	r3, [r7, #4]
10001dfe:	b2da      	uxtb	r2, r3
10001e00:	68fb      	ldr	r3, [r7, #12]
10001e02:	701a      	strb	r2, [r3, #0]
    invalid_params_if(PICO_TIME, max_timers > 65536);
    pool->num_entries = (uint16_t)max_timers;
10001e04:	683b      	ldr	r3, [r7, #0]
10001e06:	b29a      	uxth	r2, r3
10001e08:	68fb      	ldr	r3, [r7, #12]
10001e0a:	815a      	strh	r2, [r3, #10]
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
10001e0c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
10001e10:	681b      	ldr	r3, [r3, #0]
    pool->core_num = (uint8_t) get_core_num();
10001e12:	b2da      	uxtb	r2, r3
10001e14:	68fb      	ldr	r3, [r7, #12]
10001e16:	705a      	strb	r2, [r3, #1]
    pool->new_head = pool->ordered_head = -1;
10001e18:	68fb      	ldr	r3, [r7, #12]
10001e1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
10001e1e:	811a      	strh	r2, [r3, #8]
10001e20:	68fb      	ldr	r3, [r7, #12]
10001e22:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
10001e26:	68fb      	ldr	r3, [r7, #12]
10001e28:	809a      	strh	r2, [r3, #4]
    pool->free_head = (int16_t)(max_timers - 1);
10001e2a:	683b      	ldr	r3, [r7, #0]
10001e2c:	b29b      	uxth	r3, r3
10001e2e:	3b01      	subs	r3, #1
10001e30:	b29b      	uxth	r3, r3
10001e32:	b21a      	sxth	r2, r3
10001e34:	68fb      	ldr	r3, [r7, #12]
10001e36:	805a      	strh	r2, [r3, #2]
    for(uint i=0;i<max_timers;i++) {
10001e38:	2300      	movs	r3, #0
10001e3a:	617b      	str	r3, [r7, #20]
10001e3c:	e010      	b.n	10001e60 <alarm_pool_post_alloc_init+0x8c>
        pool->entries[i].next = (int16_t)(i-1);
10001e3e:	697b      	ldr	r3, [r7, #20]
10001e40:	b29b      	uxth	r3, r3
10001e42:	3b01      	subs	r3, #1
10001e44:	b298      	uxth	r0, r3
10001e46:	68fb      	ldr	r3, [r7, #12]
10001e48:	6959      	ldr	r1, [r3, #20]
10001e4a:	697a      	ldr	r2, [r7, #20]
10001e4c:	4613      	mov	r3, r2
10001e4e:	005b      	lsls	r3, r3, #1
10001e50:	4413      	add	r3, r2
10001e52:	00db      	lsls	r3, r3, #3
10001e54:	440b      	add	r3, r1
10001e56:	b202      	sxth	r2, r0
10001e58:	801a      	strh	r2, [r3, #0]
    for(uint i=0;i<max_timers;i++) {
10001e5a:	697b      	ldr	r3, [r7, #20]
10001e5c:	3301      	adds	r3, #1
10001e5e:	617b      	str	r3, [r7, #20]
10001e60:	697a      	ldr	r2, [r7, #20]
10001e62:	683b      	ldr	r3, [r7, #0]
10001e64:	429a      	cmp	r2, r3
10001e66:	d3ea      	bcc.n	10001e3e <alarm_pool_post_alloc_init+0x6a>
    }
    pools[ta_timer_num(timer)][hardware_alarm_num] = pool;
10001e68:	68b8      	ldr	r0, [r7, #8]
10001e6a:	f7ff fc5c 	bl	10001726 <ta_timer_num>
10001e6e:	4603      	mov	r3, r0
10001e70:	4908      	ldr	r1, [pc, #32]	@ (10001e94 <alarm_pool_post_alloc_init+0xc0>)
10001e72:	009a      	lsls	r2, r3, #2
10001e74:	687b      	ldr	r3, [r7, #4]
10001e76:	4413      	add	r3, r2
10001e78:	68fa      	ldr	r2, [r7, #12]
10001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    ta_enable_irq_handler(timer, hardware_alarm_num, alarm_pool_irq_handler);
10001e7e:	4a06      	ldr	r2, [pc, #24]	@ (10001e98 <alarm_pool_post_alloc_init+0xc4>)
10001e80:	6879      	ldr	r1, [r7, #4]
10001e82:	68b8      	ldr	r0, [r7, #8]
10001e84:	f7ff fc16 	bl	100016b4 <ta_enable_irq_handler>
}
10001e88:	bf00      	nop
10001e8a:	3718      	adds	r7, #24
10001e8c:	46bd      	mov	sp, r7
10001e8e:	bd80      	pop	{r7, pc}
10001e90:	20000910 	.word	0x20000910
10001e94:	20000988 	.word	0x20000988
10001e98:	10001821 	.word	0x10001821

10001e9c <alarm_pool_add_alarm_at>:
    free(pool->entries);
    free(pool);
}

alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
                                   void *user_data, bool fire_if_past) {
10001e9c:	b580      	push	{r7, lr}
10001e9e:	b088      	sub	sp, #32
10001ea0:	af02      	add	r7, sp, #8
10001ea2:	60f8      	str	r0, [r7, #12]
10001ea4:	e9c7 2300 	strd	r2, r3, [r7]
    if (!fire_if_past) {
10001ea8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
10001eac:	f083 0301 	eor.w	r3, r3, #1
10001eb0:	b2db      	uxtb	r3, r3
10001eb2:	2b00      	cmp	r3, #0
10001eb4:	d00f      	beq.n	10001ed6 <alarm_pool_add_alarm_at+0x3a>
        absolute_time_t t = get_absolute_time();
10001eb6:	f7ff facf 	bl	10001458 <get_absolute_time>
10001eba:	e9c7 0104 	strd	r0, r1, [r7, #16]
        if (absolute_time_diff_us(t, time) < 0) return 0;
10001ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
10001ec2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
10001ec6:	f7ff fb19 	bl	100014fc <absolute_time_diff_us>
10001eca:	4602      	mov	r2, r0
10001ecc:	460b      	mov	r3, r1
10001ece:	2b00      	cmp	r3, #0
10001ed0:	da01      	bge.n	10001ed6 <alarm_pool_add_alarm_at+0x3a>
10001ed2:	2300      	movs	r3, #0
10001ed4:	e009      	b.n	10001eea <alarm_pool_add_alarm_at+0x4e>
    }
    return alarm_pool_add_alarm_at_force_in_context(pool, time, callback, user_data);
10001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10001ed8:	9301      	str	r3, [sp, #4]
10001eda:	6a3b      	ldr	r3, [r7, #32]
10001edc:	9300      	str	r3, [sp, #0]
10001ede:	e9d7 2300 	ldrd	r2, r3, [r7]
10001ee2:	68f8      	ldr	r0, [r7, #12]
10001ee4:	f000 f805 	bl	10001ef2 <alarm_pool_add_alarm_at_force_in_context>
10001ee8:	4603      	mov	r3, r0
}
10001eea:	4618      	mov	r0, r3
10001eec:	3718      	adds	r7, #24
10001eee:	46bd      	mov	sp, r7
10001ef0:	bd80      	pop	{r7, pc}

10001ef2 <alarm_pool_add_alarm_at_force_in_context>:

alarm_id_t alarm_pool_add_alarm_at_force_in_context(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
                                                    void *user_data) {
10001ef2:	b580      	push	{r7, lr}
10001ef4:	b0a0      	sub	sp, #128	@ 0x80
10001ef6:	af00      	add	r7, sp, #0
10001ef8:	60f8      	str	r0, [r7, #12]
10001efa:	e9c7 2300 	strd	r2, r3, [r7]
    // ---- take a free pool entry
    uint32_t save = spin_lock_blocking(pool->lock);
10001efe:	68fb      	ldr	r3, [r7, #12]
10001f00:	691b      	ldr	r3, [r3, #16]
10001f02:	66bb      	str	r3, [r7, #104]	@ 0x68
    pico_default_asm_volatile (
10001f04:	f3ef 8310 	mrs	r3, PRIMASK
10001f08:	b672      	cpsid	i
10001f0a:	667b      	str	r3, [r7, #100]	@ 0x64
    return status;
10001f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    uint32_t save = save_and_disable_interrupts();
10001f0e:	663b      	str	r3, [r7, #96]	@ 0x60
10001f10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10001f12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    SW_SPIN_LOCK_LOCK(lock);
10001f14:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
10001f16:	e8d1 3fcf 	ldaexb	r3, [r1]
10001f1a:	2201      	movs	r2, #1
10001f1c:	2b00      	cmp	r3, #0
10001f1e:	d1fa      	bne.n	10001f16 <alarm_pool_add_alarm_at_force_in_context+0x24>
10001f20:	e8c1 2f43 	strexb	r3, r2, [r1]
10001f24:	2b00      	cmp	r3, #0
10001f26:	d1f6      	bne.n	10001f16 <alarm_pool_add_alarm_at_force_in_context+0x24>
10001f28:	65ba      	str	r2, [r7, #88]	@ 0x58
10001f2a:	657b      	str	r3, [r7, #84]	@ 0x54
    pico_default_asm_volatile ("dmb" : : : "memory");
10001f2c:	f3bf 8f5f 	dmb	sy
}
10001f30:	bf00      	nop
}
10001f32:	bf00      	nop
}
10001f34:	bf00      	nop
    return save;
10001f36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10001f38:	67bb      	str	r3, [r7, #120]	@ 0x78
    int16_t index = pool->free_head;
10001f3a:	68fb      	ldr	r3, [r7, #12]
10001f3c:	885b      	ldrh	r3, [r3, #2]
10001f3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    alarm_pool_entry_t *entry = &pool->entries[index];
10001f42:	68fb      	ldr	r3, [r7, #12]
10001f44:	6959      	ldr	r1, [r3, #20]
10001f46:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
10001f4a:	4613      	mov	r3, r2
10001f4c:	005b      	lsls	r3, r3, #1
10001f4e:	4413      	add	r3, r2
10001f50:	00db      	lsls	r3, r3, #3
10001f52:	440b      	add	r3, r1
10001f54:	673b      	str	r3, [r7, #112]	@ 0x70
    if (index >= 0) {
10001f56:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
10001f5a:	2b00      	cmp	r3, #0
10001f5c:	db04      	blt.n	10001f68 <alarm_pool_add_alarm_at_force_in_context+0x76>
        // remove from free list
        pool->free_head = entry->next;
10001f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10001f60:	f9b3 2000 	ldrsh.w	r2, [r3]
10001f64:	68fb      	ldr	r3, [r7, #12]
10001f66:	805a      	strh	r2, [r3, #2]
    }
    spin_unlock(pool->lock, save);
10001f68:	68fb      	ldr	r3, [r7, #12]
10001f6a:	691b      	ldr	r3, [r3, #16]
10001f6c:	653b      	str	r3, [r7, #80]	@ 0x50
10001f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10001f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
10001f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10001f74:	64bb      	str	r3, [r7, #72]	@ 0x48
    SW_SPIN_LOCK_UNLOCK(lock);
10001f76:	2300      	movs	r3, #0
10001f78:	647b      	str	r3, [r7, #68]	@ 0x44
10001f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10001f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10001f7e:	e8c2 3f8f 	stlb	r3, [r2]
}
10001f82:	bf00      	nop
10001f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10001f86:	643b      	str	r3, [r7, #64]	@ 0x40
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10001f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10001f8a:	f383 8810 	msr	PRIMASK, r3
}
10001f8e:	bf00      	nop
}
10001f90:	bf00      	nop
    if (index < 0) return PICO_ERROR_GENERIC; // PICO_ERROR_INSUFFICIENT_RESOURCES - not using to preserve previous -1 return code
10001f92:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
10001f96:	2b00      	cmp	r3, #0
10001f98:	da02      	bge.n	10001fa0 <alarm_pool_add_alarm_at_force_in_context+0xae>
10001f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10001f9e:	e072      	b.n	10002086 <alarm_pool_add_alarm_at_force_in_context+0x194>

    // ---- initialize the pool entry
    entry->callback = callback;
10001fa0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10001fa2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
10001fa6:	611a      	str	r2, [r3, #16]
    entry->user_data = user_data;
10001fa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10001faa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
10001fae:	615a      	str	r2, [r3, #20]
    entry->target = (int64_t)to_us_since_boot(time);
10001fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
10001fb4:	f7ff f9a5 	bl	10001302 <to_us_since_boot>
10001fb8:	4602      	mov	r2, r0
10001fba:	460b      	mov	r3, r1
10001fbc:	6f39      	ldr	r1, [r7, #112]	@ 0x70
10001fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
    uint16_t next_sequence = (entry->sequence + 1) & 0x7fff;
10001fc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10001fc4:	885b      	ldrh	r3, [r3, #2]
10001fc6:	b29b      	uxth	r3, r3
10001fc8:	3301      	adds	r3, #1
10001fca:	b29b      	uxth	r3, r3
10001fcc:	f3c3 030e 	ubfx	r3, r3, #0, #15
10001fd0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    if (!next_sequence) next_sequence = 1; // zero is not allowed
10001fd4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
10001fd8:	2b00      	cmp	r3, #0
10001fda:	d102      	bne.n	10001fe2 <alarm_pool_add_alarm_at_force_in_context+0xf0>
10001fdc:	2301      	movs	r3, #1
10001fde:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    entry->sequence = next_sequence;
10001fe2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10001fe4:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
10001fe8:	805a      	strh	r2, [r3, #2]
    alarm_id_t id = make_alarm_id(index, next_sequence);
10001fea:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
10001fee:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
10001ff2:	4611      	mov	r1, r2
10001ff4:	4618      	mov	r0, r3
10001ff6:	f7ff fbc6 	bl	10001786 <make_alarm_id>
10001ffa:	66f8      	str	r0, [r7, #108]	@ 0x6c

    // ---- and add it to the new list
    save = spin_lock_blocking(pool->lock);
10001ffc:	68fb      	ldr	r3, [r7, #12]
10001ffe:	691b      	ldr	r3, [r3, #16]
10002000:	62bb      	str	r3, [r7, #40]	@ 0x28
    pico_default_asm_volatile (
10002002:	f3ef 8310 	mrs	r3, PRIMASK
10002006:	b672      	cpsid	i
10002008:	627b      	str	r3, [r7, #36]	@ 0x24
    return status;
1000200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    uint32_t save = save_and_disable_interrupts();
1000200c:	623b      	str	r3, [r7, #32]
1000200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10002010:	61fb      	str	r3, [r7, #28]
    SW_SPIN_LOCK_LOCK(lock);
10002012:	69f9      	ldr	r1, [r7, #28]
10002014:	e8d1 3fcf 	ldaexb	r3, [r1]
10002018:	2201      	movs	r2, #1
1000201a:	2b00      	cmp	r3, #0
1000201c:	d1fa      	bne.n	10002014 <alarm_pool_add_alarm_at_force_in_context+0x122>
1000201e:	e8c1 2f43 	strexb	r3, r2, [r1]
10002022:	2b00      	cmp	r3, #0
10002024:	d1f6      	bne.n	10002014 <alarm_pool_add_alarm_at_force_in_context+0x122>
10002026:	61ba      	str	r2, [r7, #24]
10002028:	617b      	str	r3, [r7, #20]
    pico_default_asm_volatile ("dmb" : : : "memory");
1000202a:	f3bf 8f5f 	dmb	sy
}
1000202e:	bf00      	nop
}
10002030:	bf00      	nop
}
10002032:	bf00      	nop
    return save;
10002034:	6a3b      	ldr	r3, [r7, #32]
10002036:	67bb      	str	r3, [r7, #120]	@ 0x78
    entry->next = pool->new_head;
10002038:	68fb      	ldr	r3, [r7, #12]
1000203a:	889b      	ldrh	r3, [r3, #4]
1000203c:	b21a      	sxth	r2, r3
1000203e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10002040:	801a      	strh	r2, [r3, #0]
    pool->new_head = index;
10002042:	68fb      	ldr	r3, [r7, #12]
10002044:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
10002048:	809a      	strh	r2, [r3, #4]
    spin_unlock(pool->lock, save);
1000204a:	68fb      	ldr	r3, [r7, #12]
1000204c:	691b      	ldr	r3, [r3, #16]
1000204e:	63fb      	str	r3, [r7, #60]	@ 0x3c
10002050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10002052:	63bb      	str	r3, [r7, #56]	@ 0x38
10002054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10002056:	637b      	str	r3, [r7, #52]	@ 0x34
    SW_SPIN_LOCK_UNLOCK(lock);
10002058:	2300      	movs	r3, #0
1000205a:	633b      	str	r3, [r7, #48]	@ 0x30
1000205c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000205e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10002060:	e8c2 3f8f 	stlb	r3, [r2]
}
10002064:	bf00      	nop
10002066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
1000206a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000206c:	f383 8810 	msr	PRIMASK, r3
}
10002070:	bf00      	nop
}
10002072:	bf00      	nop

    // force the IRQ
    ta_force_irq(pool->timer, pool->timer_alarm_num);
10002074:	68fb      	ldr	r3, [r7, #12]
10002076:	68da      	ldr	r2, [r3, #12]
10002078:	68fb      	ldr	r3, [r7, #12]
1000207a:	781b      	ldrb	r3, [r3, #0]
1000207c:	4619      	mov	r1, r3
1000207e:	4610      	mov	r0, r2
10002080:	f7ff fa96 	bl	100015b0 <ta_force_irq>
    return id;
10002084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
10002086:	4618      	mov	r0, r3
10002088:	3780      	adds	r7, #128	@ 0x80
1000208a:	46bd      	mov	sp, r7
1000208c:	bd80      	pop	{r7, pc}

1000208e <alarm_pool_cancel_alarm>:

bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
1000208e:	b580      	push	{r7, lr}
10002090:	b092      	sub	sp, #72	@ 0x48
10002092:	af00      	add	r7, sp, #0
10002094:	6078      	str	r0, [r7, #4]
10002096:	6039      	str	r1, [r7, #0]
    int16_t index = alarm_index(alarm_id);
10002098:	6838      	ldr	r0, [r7, #0]
1000209a:	f7ff fb5b 	bl	10001754 <alarm_index>
1000209e:	4603      	mov	r3, r0
100020a0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    if (index >= pool->num_entries) return false;
100020a4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
100020a8:	687a      	ldr	r2, [r7, #4]
100020aa:	8952      	ldrh	r2, [r2, #10]
100020ac:	4293      	cmp	r3, r2
100020ae:	db01      	blt.n	100020b4 <alarm_pool_cancel_alarm+0x26>
100020b0:	2300      	movs	r3, #0
100020b2:	e06c      	b.n	1000218e <alarm_pool_cancel_alarm+0x100>
    uint16_t sequence = alarm_sequence(alarm_id);
100020b4:	6838      	ldr	r0, [r7, #0]
100020b6:	f7ff fb5a 	bl	1000176e <alarm_sequence>
100020ba:	4603      	mov	r3, r0
100020bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    bool canceled = false;
100020c0:	2300      	movs	r3, #0
100020c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    alarm_pool_entry_t *entry = &pool->entries[index];
100020c6:	687b      	ldr	r3, [r7, #4]
100020c8:	6959      	ldr	r1, [r3, #20]
100020ca:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
100020ce:	4613      	mov	r3, r2
100020d0:	005b      	lsls	r3, r3, #1
100020d2:	4413      	add	r3, r2
100020d4:	00db      	lsls	r3, r3, #3
100020d6:	440b      	add	r3, r1
100020d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t save = spin_lock_blocking(pool->lock);
100020da:	687b      	ldr	r3, [r7, #4]
100020dc:	691b      	ldr	r3, [r3, #16]
100020de:	633b      	str	r3, [r7, #48]	@ 0x30
    pico_default_asm_volatile (
100020e0:	f3ef 8310 	mrs	r3, PRIMASK
100020e4:	b672      	cpsid	i
100020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return status;
100020e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    uint32_t save = save_and_disable_interrupts();
100020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
100020ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100020ee:	627b      	str	r3, [r7, #36]	@ 0x24
    SW_SPIN_LOCK_LOCK(lock);
100020f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
100020f2:	e8d1 3fcf 	ldaexb	r3, [r1]
100020f6:	2201      	movs	r2, #1
100020f8:	2b00      	cmp	r3, #0
100020fa:	d1fa      	bne.n	100020f2 <alarm_pool_cancel_alarm+0x64>
100020fc:	e8c1 2f43 	strexb	r3, r2, [r1]
10002100:	2b00      	cmp	r3, #0
10002102:	d1f6      	bne.n	100020f2 <alarm_pool_cancel_alarm+0x64>
10002104:	623a      	str	r2, [r7, #32]
10002106:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile ("dmb" : : : "memory");
10002108:	f3bf 8f5f 	dmb	sy
}
1000210c:	bf00      	nop
}
1000210e:	bf00      	nop
}
10002110:	bf00      	nop
    return save;
10002112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10002114:	63bb      	str	r3, [r7, #56]	@ 0x38
    // note this will not be true if the entry is already canceled (as the entry->sequence
    // will have the top bit set)
    uint current_sequence = entry->sequence;
10002116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10002118:	885b      	ldrh	r3, [r3, #2]
1000211a:	b29b      	uxth	r3, r3
1000211c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (sequence == current_sequence) {
1000211e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
10002122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10002124:	429a      	cmp	r2, r3
10002126:	d10f      	bne.n	10002148 <alarm_pool_cancel_alarm+0xba>
        entry->sequence = (uint16_t)(current_sequence | 0x8000);
10002128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000212a:	b29b      	uxth	r3, r3
1000212c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
10002130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
10002134:	b29a      	uxth	r2, r3
10002136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10002138:	805a      	strh	r2, [r3, #2]
1000213a:	bf00      	nop
        __compiler_memory_barrier();
        pool->has_pending_cancellations = true;
1000213c:	687b      	ldr	r3, [r7, #4]
1000213e:	2201      	movs	r2, #1
10002140:	719a      	strb	r2, [r3, #6]
        canceled = true;
10002142:	2301      	movs	r3, #1
10002144:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    spin_unlock(pool->lock, save);
10002148:	687b      	ldr	r3, [r7, #4]
1000214a:	691b      	ldr	r3, [r3, #16]
1000214c:	61bb      	str	r3, [r7, #24]
1000214e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10002150:	617b      	str	r3, [r7, #20]
10002152:	69bb      	ldr	r3, [r7, #24]
10002154:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_UNLOCK(lock);
10002156:	2300      	movs	r3, #0
10002158:	60fb      	str	r3, [r7, #12]
1000215a:	68fb      	ldr	r3, [r7, #12]
1000215c:	693a      	ldr	r2, [r7, #16]
1000215e:	e8c2 3f8f 	stlb	r3, [r2]
}
10002162:	bf00      	nop
10002164:	697b      	ldr	r3, [r7, #20]
10002166:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10002168:	68bb      	ldr	r3, [r7, #8]
1000216a:	f383 8810 	msr	PRIMASK, r3
}
1000216e:	bf00      	nop
}
10002170:	bf00      	nop
    // force the IRQ if we need to clean up an alarm id
    if (canceled) ta_force_irq(pool->timer, pool->timer_alarm_num);
10002172:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
10002176:	2b00      	cmp	r3, #0
10002178:	d007      	beq.n	1000218a <alarm_pool_cancel_alarm+0xfc>
1000217a:	687b      	ldr	r3, [r7, #4]
1000217c:	68da      	ldr	r2, [r3, #12]
1000217e:	687b      	ldr	r3, [r7, #4]
10002180:	781b      	ldrb	r3, [r3, #0]
10002182:	4619      	mov	r1, r3
10002184:	4610      	mov	r0, r2
10002186:	f7ff fa13 	bl	100015b0 <ta_force_irq>
    return canceled;
1000218a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
1000218e:	4618      	mov	r0, r3
10002190:	3748      	adds	r7, #72	@ 0x48
10002192:	46bd      	mov	sp, r7
10002194:	bd80      	pop	{r7, pc}
	...

10002198 <sleep_until_callback>:
uint alarm_pool_core_num(alarm_pool_t *pool) {
    return pool->core_num;
}

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sleep_until_callback(__unused alarm_id_t id, __unused void *user_data) {
10002198:	b480      	push	{r7}
1000219a:	b08f      	sub	sp, #60	@ 0x3c
1000219c:	af00      	add	r7, sp, #0
1000219e:	6078      	str	r0, [r7, #4]
100021a0:	6039      	str	r1, [r7, #0]
    uint32_t save = spin_lock_blocking(sleep_notifier.spin_lock);
100021a2:	4b20      	ldr	r3, [pc, #128]	@ (10002224 <sleep_until_callback+0x8c>)
100021a4:	681b      	ldr	r3, [r3, #0]
100021a6:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile (
100021a8:	f3ef 8310 	mrs	r3, PRIMASK
100021ac:	b672      	cpsid	i
100021ae:	61bb      	str	r3, [r7, #24]
    return status;
100021b0:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = save_and_disable_interrupts();
100021b2:	617b      	str	r3, [r7, #20]
100021b4:	69fb      	ldr	r3, [r7, #28]
100021b6:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_LOCK(lock);
100021b8:	6939      	ldr	r1, [r7, #16]
100021ba:	e8d1 3fcf 	ldaexb	r3, [r1]
100021be:	2201      	movs	r2, #1
100021c0:	2b00      	cmp	r3, #0
100021c2:	d1fa      	bne.n	100021ba <sleep_until_callback+0x22>
100021c4:	e8c1 2f43 	strexb	r3, r2, [r1]
100021c8:	2b00      	cmp	r3, #0
100021ca:	d1f6      	bne.n	100021ba <sleep_until_callback+0x22>
100021cc:	60fa      	str	r2, [r7, #12]
100021ce:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("dmb" : : : "memory");
100021d0:	f3bf 8f5f 	dmb	sy
}
100021d4:	bf00      	nop
}
100021d6:	bf00      	nop
}
100021d8:	bf00      	nop
    return save;
100021da:	697b      	ldr	r3, [r7, #20]
100021dc:	637b      	str	r3, [r7, #52]	@ 0x34
    lock_internal_spin_unlock_with_notify(&sleep_notifier, save);
100021de:	4b11      	ldr	r3, [pc, #68]	@ (10002224 <sleep_until_callback+0x8c>)
100021e0:	681b      	ldr	r3, [r3, #0]
100021e2:	633b      	str	r3, [r7, #48]	@ 0x30
100021e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
100021e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100021ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    SW_SPIN_LOCK_UNLOCK(lock);
100021ec:	2300      	movs	r3, #0
100021ee:	627b      	str	r3, [r7, #36]	@ 0x24
100021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100021f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100021f4:	e8c2 3f8f 	stlb	r3, [r2]
}
100021f8:	bf00      	nop
100021fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100021fc:	623b      	str	r3, [r7, #32]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
100021fe:	6a3b      	ldr	r3, [r7, #32]
10002200:	f383 8810 	msr	PRIMASK, r3
}
10002204:	bf00      	nop
}
10002206:	bf00      	nop
    pico_default_asm_volatile ("sev");
10002208:	bf40      	sev
}
1000220a:	bf00      	nop
    return 0;
1000220c:	f04f 0200 	mov.w	r2, #0
10002210:	f04f 0300 	mov.w	r3, #0
}
10002214:	4610      	mov	r0, r2
10002216:	4619      	mov	r1, r3
10002218:	373c      	adds	r7, #60	@ 0x3c
1000221a:	46bd      	mov	sp, r7
1000221c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002220:	4770      	bx	lr
10002222:	bf00      	nop
10002224:	200009a8 	.word	0x200009a8

10002228 <sleep_until>:
#endif

void sleep_until(absolute_time_t t) {
10002228:	b5b0      	push	{r4, r5, r7, lr}
1000222a:	b098      	sub	sp, #96	@ 0x60
1000222c:	af02      	add	r7, sp, #8
1000222e:	e9c7 0100 	strd	r0, r1, [r7]
    pico_default_asm_volatile (
10002232:	f3ef 8305 	mrs	r3, IPSR
10002236:	b2db      	uxtb	r3, r3
10002238:	643b      	str	r3, [r7, #64]	@ 0x40
    return exception;
1000223a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
#if PICO_ON_DEVICE && !defined(NDEBUG)
    if (__get_current_exception()) {
1000223c:	2b00      	cmp	r3, #0
1000223e:	d002      	beq.n	10002246 <sleep_until+0x1e>
        panic("Attempted to sleep inside of an exception handler; use busy_wait if you must");
10002240:	4842      	ldr	r0, [pc, #264]	@ (1000234c <sleep_until+0x124>)
10002242:	f7fe fa93 	bl	1000076c <panic>
    }
#endif
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    uint64_t t_us = to_us_since_boot(t);
10002246:	e9d7 0100 	ldrd	r0, r1, [r7]
1000224a:	f7ff f85a 	bl	10001302 <to_us_since_boot>
1000224e:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
    uint64_t t_before_us = t_us - PICO_TIME_SLEEP_OVERHEAD_ADJUST_US;
10002252:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
10002256:	1f94      	subs	r4, r2, #6
10002258:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
1000225c:	e9c7 4514 	strd	r4, r5, [r7, #80]	@ 0x50
    // needs to work in the first PICO_TIME_SLEEP_OVERHEAD_ADJUST_US of boot
    if (t_before_us > t_us) t_before_us = 0;
10002260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
10002264:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
10002268:	4290      	cmp	r0, r2
1000226a:	eb71 0303 	sbcs.w	r3, r1, r3
1000226e:	d205      	bcs.n	1000227c <sleep_until+0x54>
10002270:	f04f 0200 	mov.w	r2, #0
10002274:	f04f 0300 	mov.w	r3, #0
10002278:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    absolute_time_t t_before;
    update_us_since_boot(&t_before, t_before_us);
1000227c:	f107 0108 	add.w	r1, r7, #8
10002280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
10002284:	4608      	mov	r0, r1
10002286:	f7ff f84a 	bl	1000131e <update_us_since_boot>
    if (absolute_time_diff_us(get_absolute_time(), t_before) > 0) {
1000228a:	f7ff f8e5 	bl	10001458 <get_absolute_time>
1000228e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
10002292:	f7ff f933 	bl	100014fc <absolute_time_diff_us>
10002296:	4602      	mov	r2, r0
10002298:	460b      	mov	r3, r1
1000229a:	2a01      	cmp	r2, #1
1000229c:	f173 0300 	sbcs.w	r3, r3, #0
100022a0:	db4c      	blt.n	1000233c <sleep_until+0x114>
        if (add_alarm_at(t_before, sleep_until_callback, NULL, false) >= 0) {
100022a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
100022a6:	2300      	movs	r3, #0
100022a8:	9300      	str	r3, [sp, #0]
100022aa:	2300      	movs	r3, #0
100022ac:	4a28      	ldr	r2, [pc, #160]	@ (10002350 <sleep_until+0x128>)
100022ae:	f7ff f945 	bl	1000153c <add_alarm_at>
100022b2:	4603      	mov	r3, r0
100022b4:	2b00      	cmp	r3, #0
100022b6:	db41      	blt.n	1000233c <sleep_until+0x114>
            // able to add alarm for just before the time
            while (!time_reached(t_before)) {
100022b8:	e034      	b.n	10002324 <sleep_until+0xfc>
                uint32_t save = spin_lock_blocking(sleep_notifier.spin_lock);
100022ba:	4b26      	ldr	r3, [pc, #152]	@ (10002354 <sleep_until+0x12c>)
100022bc:	681b      	ldr	r3, [r3, #0]
100022be:	62bb      	str	r3, [r7, #40]	@ 0x28
    pico_default_asm_volatile (
100022c0:	f3ef 8310 	mrs	r3, PRIMASK
100022c4:	b672      	cpsid	i
100022c6:	627b      	str	r3, [r7, #36]	@ 0x24
    return status;
100022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    uint32_t save = save_and_disable_interrupts();
100022ca:	623b      	str	r3, [r7, #32]
100022cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100022ce:	61fb      	str	r3, [r7, #28]
    SW_SPIN_LOCK_LOCK(lock);
100022d0:	69f9      	ldr	r1, [r7, #28]
100022d2:	e8d1 3fcf 	ldaexb	r3, [r1]
100022d6:	2201      	movs	r2, #1
100022d8:	2b00      	cmp	r3, #0
100022da:	d1fa      	bne.n	100022d2 <sleep_until+0xaa>
100022dc:	e8c1 2f43 	strexb	r3, r2, [r1]
100022e0:	2b00      	cmp	r3, #0
100022e2:	d1f6      	bne.n	100022d2 <sleep_until+0xaa>
100022e4:	61ba      	str	r2, [r7, #24]
100022e6:	617b      	str	r3, [r7, #20]
    pico_default_asm_volatile ("dmb" : : : "memory");
100022e8:	f3bf 8f5f 	dmb	sy
}
100022ec:	bf00      	nop
}
100022ee:	bf00      	nop
}
100022f0:	bf00      	nop
    return save;
100022f2:	6a3b      	ldr	r3, [r7, #32]
100022f4:	647b      	str	r3, [r7, #68]	@ 0x44
                lock_internal_spin_unlock_with_wait(&sleep_notifier, save);
100022f6:	4b17      	ldr	r3, [pc, #92]	@ (10002354 <sleep_until+0x12c>)
100022f8:	681b      	ldr	r3, [r3, #0]
100022fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
100022fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
10002300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10002302:	637b      	str	r3, [r7, #52]	@ 0x34
    SW_SPIN_LOCK_UNLOCK(lock);
10002304:	2300      	movs	r3, #0
10002306:	633b      	str	r3, [r7, #48]	@ 0x30
10002308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000230a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000230c:	e8c2 3f8f 	stlb	r3, [r2]
}
10002310:	bf00      	nop
10002312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10002314:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10002316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10002318:	f383 8810 	msr	PRIMASK, r3
}
1000231c:	bf00      	nop
}
1000231e:	bf00      	nop
    pico_default_asm_volatile ("wfe");
10002320:	bf20      	wfe
}
10002322:	bf00      	nop
            while (!time_reached(t_before)) {
10002324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
10002328:	4610      	mov	r0, r2
1000232a:	4619      	mov	r1, r3
1000232c:	f7ff f842 	bl	100013b4 <time_reached>
10002330:	4603      	mov	r3, r0
10002332:	f083 0301 	eor.w	r3, r3, #1
10002336:	b2db      	uxtb	r3, r3
10002338:	2b00      	cmp	r3, #0
1000233a:	d1be      	bne.n	100022ba <sleep_until+0x92>
#else
    // hook in case we're in RTOS; note we assume using the alarm pool is better always if available.
    sync_internal_yield_until_before(t);
#endif
    // now wait until the exact time
    busy_wait_until(t);
1000233c:	e9d7 0100 	ldrd	r0, r1, [r7]
10002340:	f000 f9b4 	bl	100026ac <busy_wait_until>
}
10002344:	bf00      	nop
10002346:	3758      	adds	r7, #88	@ 0x58
10002348:	46bd      	mov	sp, r7
1000234a:	bdb0      	pop	{r4, r5, r7, pc}
1000234c:	100069dc 	.word	0x100069dc
10002350:	10002199 	.word	0x10002199
10002354:	200009a8 	.word	0x200009a8

10002358 <sleep_us>:

void sleep_us(uint64_t us) {
10002358:	b580      	push	{r7, lr}
1000235a:	b082      	sub	sp, #8
1000235c:	af00      	add	r7, sp, #0
1000235e:	e9c7 0100 	strd	r0, r1, [r7]
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    sleep_until(make_timeout_time_us(us));
10002362:	e9d7 0100 	ldrd	r0, r1, [r7]
10002366:	f7ff f8b7 	bl	100014d8 <make_timeout_time_us>
1000236a:	4602      	mov	r2, r0
1000236c:	460b      	mov	r3, r1
1000236e:	4610      	mov	r0, r2
10002370:	4619      	mov	r1, r3
10002372:	f7ff ff59 	bl	10002228 <sleep_until>

        // then wait the rest of the way
        busy_wait_until(t);
    }
#endif
}
10002376:	bf00      	nop
10002378:	3708      	adds	r7, #8
1000237a:	46bd      	mov	sp, r7
1000237c:	bd80      	pop	{r7, pc}

1000237e <sleep_ms>:

void sleep_ms(uint32_t ms) {
1000237e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10002382:	b082      	sub	sp, #8
10002384:	af00      	add	r7, sp, #0
10002386:	6078      	str	r0, [r7, #4]
    sleep_us(ms * 1000ull);
10002388:	6879      	ldr	r1, [r7, #4]
1000238a:	2000      	movs	r0, #0
1000238c:	460c      	mov	r4, r1
1000238e:	4605      	mov	r5, r0
10002390:	4620      	mov	r0, r4
10002392:	4629      	mov	r1, r5
10002394:	f04f 0a00 	mov.w	sl, #0
10002398:	f04f 0b00 	mov.w	fp, #0
1000239c:	ea4f 1b41 	mov.w	fp, r1, lsl #5
100023a0:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
100023a4:	ea4f 1a40 	mov.w	sl, r0, lsl #5
100023a8:	4650      	mov	r0, sl
100023aa:	4659      	mov	r1, fp
100023ac:	1b02      	subs	r2, r0, r4
100023ae:	eb61 0305 	sbc.w	r3, r1, r5
100023b2:	f04f 0000 	mov.w	r0, #0
100023b6:	f04f 0100 	mov.w	r1, #0
100023ba:	0099      	lsls	r1, r3, #2
100023bc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
100023c0:	0090      	lsls	r0, r2, #2
100023c2:	4602      	mov	r2, r0
100023c4:	460b      	mov	r3, r1
100023c6:	eb12 0804 	adds.w	r8, r2, r4
100023ca:	eb43 0905 	adc.w	r9, r3, r5
100023ce:	f04f 0200 	mov.w	r2, #0
100023d2:	f04f 0300 	mov.w	r3, #0
100023d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
100023da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
100023de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
100023e2:	4690      	mov	r8, r2
100023e4:	4699      	mov	r9, r3
100023e6:	4642      	mov	r2, r8
100023e8:	464b      	mov	r3, r9
100023ea:	4610      	mov	r0, r2
100023ec:	4619      	mov	r1, r3
100023ee:	f7ff ffb3 	bl	10002358 <sleep_us>
}
100023f2:	bf00      	nop
100023f4:	3708      	adds	r7, #8
100023f6:	46bd      	mov	sp, r7
100023f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

100023fc <best_effort_wfe_or_timeout>:

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100023fc:	b580      	push	{r7, lr}
100023fe:	b086      	sub	sp, #24
10002400:	af02      	add	r7, sp, #8
10002402:	e9c7 0100 	strd	r0, r1, [r7]
    pico_default_asm_volatile (
10002406:	f3ef 8305 	mrs	r3, IPSR
1000240a:	b2db      	uxtb	r3, r3
1000240c:	60bb      	str	r3, [r7, #8]
    return exception;
1000240e:	68bb      	ldr	r3, [r7, #8]
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    if (__get_current_exception()) {
10002410:	2b00      	cmp	r3, #0
10002412:	d006      	beq.n	10002422 <best_effort_wfe_or_timeout+0x26>
static __force_inline void tight_loop_contents(void) {}
10002414:	bf00      	nop
        tight_loop_contents();
        return time_reached(timeout_timestamp);
10002416:	e9d7 0100 	ldrd	r0, r1, [r7]
1000241a:	f7fe ffcb 	bl	100013b4 <time_reached>
1000241e:	4603      	mov	r3, r0
10002420:	e02a      	b.n	10002478 <best_effort_wfe_or_timeout+0x7c>
    } else {
        alarm_id_t id;
        id = add_alarm_at(timeout_timestamp, sleep_until_callback, NULL, false);
10002422:	2300      	movs	r3, #0
10002424:	9300      	str	r3, [sp, #0]
10002426:	2300      	movs	r3, #0
10002428:	4a15      	ldr	r2, [pc, #84]	@ (10002480 <best_effort_wfe_or_timeout+0x84>)
1000242a:	e9d7 0100 	ldrd	r0, r1, [r7]
1000242e:	f7ff f885 	bl	1000153c <add_alarm_at>
10002432:	60f8      	str	r0, [r7, #12]
        if (id <= 0) {
10002434:	68fb      	ldr	r3, [r7, #12]
10002436:	2b00      	cmp	r3, #0
10002438:	dc06      	bgt.n	10002448 <best_effort_wfe_or_timeout+0x4c>
1000243a:	bf00      	nop
            tight_loop_contents();
            return time_reached(timeout_timestamp);
1000243c:	e9d7 0100 	ldrd	r0, r1, [r7]
10002440:	f7fe ffb8 	bl	100013b4 <time_reached>
10002444:	4603      	mov	r3, r0
10002446:	e017      	b.n	10002478 <best_effort_wfe_or_timeout+0x7c>
    pico_default_asm_volatile ("sev");
10002448:	bf40      	sev
}
1000244a:	bf00      	nop
    pico_default_asm_volatile ("wfe");
1000244c:	bf20      	wfe
}
1000244e:	bf00      	nop
            // the above alarm add now may force an IRQ which will wake us up,
            // so we want to consume one __wfe.. we do an explicit __sev
            // just to make sure there is one
            __sev(); // make sure there is an event sow ee don't block
            __wfe();
            if (!time_reached(timeout_timestamp))
10002450:	e9d7 0100 	ldrd	r0, r1, [r7]
10002454:	f7fe ffae 	bl	100013b4 <time_reached>
10002458:	4603      	mov	r3, r0
1000245a:	f083 0301 	eor.w	r3, r3, #1
1000245e:	b2db      	uxtb	r3, r3
10002460:	2b00      	cmp	r3, #0
10002462:	d001      	beq.n	10002468 <best_effort_wfe_or_timeout+0x6c>
    pico_default_asm_volatile ("wfe");
10002464:	bf20      	wfe
}
10002466:	bf00      	nop
                // to wait; the event will happen due to IRQ at some point between
                // then and the correct wakeup time
                __wfe();
            }
            // we need to clean up if it wasn't us that caused the wfe; if it was this will be a noop.
            cancel_alarm(id);
10002468:	68f8      	ldr	r0, [r7, #12]
1000246a:	f7ff f881 	bl	10001570 <cancel_alarm>
            return time_reached(timeout_timestamp);
1000246e:	e9d7 0100 	ldrd	r0, r1, [r7]
10002472:	f7fe ff9f 	bl	100013b4 <time_reached>
10002476:	4603      	mov	r3, r0
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
10002478:	4618      	mov	r0, r3
1000247a:	3710      	adds	r7, #16
1000247c:	46bd      	mov	sp, r7
1000247e:	bd80      	pop	{r7, pc}
10002480:	10002199 	.word	0x10002199

10002484 <alarm_pool_get_default_timer>:

alarm_pool_timer_t *alarm_pool_timer_for_timer_num(uint timer_num) {
    return ta_timer_instance(timer_num);
}

alarm_pool_timer_t *alarm_pool_get_default_timer(void) {
10002484:	b580      	push	{r7, lr}
10002486:	af00      	add	r7, sp, #0
    return ta_default_timer_instance();
10002488:	f7ff f95a 	bl	10001740 <ta_default_timer_instance>
1000248c:	4603      	mov	r3, r0
}
1000248e:	4618      	mov	r0, r3
10002490:	bd80      	pop	{r7, pc}

10002492 <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10002492:	b480      	push	{r7}
10002494:	b083      	sub	sp, #12
10002496:	af00      	add	r7, sp, #0
10002498:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
1000249c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
100024a0:	4610      	mov	r0, r2
100024a2:	4619      	mov	r1, r3
100024a4:	370c      	adds	r7, #12
100024a6:	46bd      	mov	sp, r7
100024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100024ac:	4770      	bx	lr

100024ae <update_us_since_boot>:
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
100024ae:	b480      	push	{r7}
100024b0:	b085      	sub	sp, #20
100024b2:	af00      	add	r7, sp, #0
100024b4:	60f8      	str	r0, [r7, #12]
100024b6:	e9c7 2300 	strd	r2, r3, [r7]
    *t = us_since_boot;
100024ba:	68f9      	ldr	r1, [r7, #12]
100024bc:	e9d7 2300 	ldrd	r2, r3, [r7]
100024c0:	e9c1 2300 	strd	r2, r3, [r1]
}
100024c4:	bf00      	nop
100024c6:	3714      	adds	r7, #20
100024c8:	46bd      	mov	sp, r7
100024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100024ce:	4770      	bx	lr

100024d0 <check_hardware_alarm_num_param>:
static inline void check_hardware_alarm_num_param(__unused uint alarm_num) {
100024d0:	b480      	push	{r7}
100024d2:	b083      	sub	sp, #12
100024d4:	af00      	add	r7, sp, #0
100024d6:	6078      	str	r0, [r7, #4]
}
100024d8:	bf00      	nop
100024da:	370c      	adds	r7, #12
100024dc:	46bd      	mov	sp, r7
100024de:	f85d 7b04 	ldr.w	r7, [sp], #4
100024e2:	4770      	bx	lr

100024e4 <timer_get_index>:
static inline uint timer_get_index(timer_hw_t *timer) {
100024e4:	b480      	push	{r7}
100024e6:	b083      	sub	sp, #12
100024e8:	af00      	add	r7, sp, #0
100024ea:	6078      	str	r0, [r7, #4]
    return TIMER_NUM(timer);
100024ec:	687b      	ldr	r3, [r7, #4]
100024ee:	4a06      	ldr	r2, [pc, #24]	@ (10002508 <timer_get_index+0x24>)
100024f0:	4293      	cmp	r3, r2
100024f2:	bf0c      	ite	eq
100024f4:	2301      	moveq	r3, #1
100024f6:	2300      	movne	r3, #0
100024f8:	b2db      	uxtb	r3, r3
}
100024fa:	4618      	mov	r0, r3
100024fc:	370c      	adds	r7, #12
100024fe:	46bd      	mov	sp, r7
10002500:	f85d 7b04 	ldr.w	r7, [sp], #4
10002504:	4770      	bx	lr
10002506:	bf00      	nop
10002508:	400b8000 	.word	0x400b8000

1000250c <timer_hardware_alarm_claim>:
static uint8_t timer_callbacks_pending[NUM_GENERIC_TIMERS];

static_assert(NUM_ALARMS * NUM_GENERIC_TIMERS <= 8, "");
static uint8_t claimed[NUM_GENERIC_TIMERS];

void timer_hardware_alarm_claim(timer_hw_t *timer, uint alarm_num) {
1000250c:	b580      	push	{r7, lr}
1000250e:	b082      	sub	sp, #8
10002510:	af00      	add	r7, sp, #0
10002512:	6078      	str	r0, [r7, #4]
10002514:	6039      	str	r1, [r7, #0]
    check_hardware_alarm_num_param(alarm_num);
10002516:	6838      	ldr	r0, [r7, #0]
10002518:	f7ff ffda 	bl	100024d0 <check_hardware_alarm_num_param>
    hw_claim_or_assert(&claimed[timer_get_index(timer)], alarm_num, "Hardware alarm %d already claimed");
1000251c:	6878      	ldr	r0, [r7, #4]
1000251e:	f7ff ffe1 	bl	100024e4 <timer_get_index>
10002522:	4603      	mov	r3, r0
10002524:	4a05      	ldr	r2, [pc, #20]	@ (1000253c <timer_hardware_alarm_claim+0x30>)
10002526:	4413      	add	r3, r2
10002528:	4a05      	ldr	r2, [pc, #20]	@ (10002540 <timer_hardware_alarm_claim+0x34>)
1000252a:	6839      	ldr	r1, [r7, #0]
1000252c:	4618      	mov	r0, r3
1000252e:	f7fe f9a8 	bl	10000882 <hw_claim_or_assert>
}
10002532:	bf00      	nop
10002534:	3708      	adds	r7, #8
10002536:	46bd      	mov	sp, r7
10002538:	bd80      	pop	{r7, pc}
1000253a:	bf00      	nop
1000253c:	20000938 	.word	0x20000938
10002540:	10006a5c 	.word	0x10006a5c

10002544 <timer_time_us_64>:
int hardware_alarm_claim_unused(bool required) {
    return timer_hardware_alarm_claim_unused(PICO_DEFAULT_TIMER_INSTANCE(), required);
}

/// tag::time_us_64[]
uint64_t timer_time_us_64(timer_hw_t *timer) {
10002544:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
10002548:	b087      	sub	sp, #28
1000254a:	af00      	add	r7, sp, #0
1000254c:	6078      	str	r0, [r7, #4]
    // Need to make sure that the upper 32 bits of the timer
    // don't change, so read that first
    uint32_t hi = timer->timerawh;
1000254e:	687b      	ldr	r3, [r7, #4]
10002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002552:	617b      	str	r3, [r7, #20]
    uint32_t lo;
    do {
        // Read the lower 32 bits
        lo = timer->timerawl;
10002554:	687b      	ldr	r3, [r7, #4]
10002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002558:	613b      	str	r3, [r7, #16]
        // Now read the upper 32 bits again and
        // check that it hasn't incremented. If it has loop around
        // and read the lower 32 bits again to get an accurate value
        uint32_t next_hi = timer->timerawh;
1000255a:	687b      	ldr	r3, [r7, #4]
1000255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000255e:	60fb      	str	r3, [r7, #12]
        if (hi == next_hi) break;
10002560:	697a      	ldr	r2, [r7, #20]
10002562:	68fb      	ldr	r3, [r7, #12]
10002564:	429a      	cmp	r2, r3
10002566:	d002      	beq.n	1000256e <timer_time_us_64+0x2a>
        hi = next_hi;
10002568:	68fb      	ldr	r3, [r7, #12]
1000256a:	617b      	str	r3, [r7, #20]
    do {
1000256c:	e7f2      	b.n	10002554 <timer_time_us_64+0x10>
        if (hi == next_hi) break;
1000256e:	bf00      	nop
    } while (true);
    return ((uint64_t) hi << 32u) | lo;
10002570:	697b      	ldr	r3, [r7, #20]
10002572:	2200      	movs	r2, #0
10002574:	469a      	mov	sl, r3
10002576:	4693      	mov	fp, r2
10002578:	f04f 0200 	mov.w	r2, #0
1000257c:	f04f 0300 	mov.w	r3, #0
10002580:	4653      	mov	r3, sl
10002582:	2200      	movs	r2, #0
10002584:	6939      	ldr	r1, [r7, #16]
10002586:	2000      	movs	r0, #0
10002588:	460c      	mov	r4, r1
1000258a:	4605      	mov	r5, r0
1000258c:	ea42 0804 	orr.w	r8, r2, r4
10002590:	ea43 0905 	orr.w	r9, r3, r5
10002594:	4642      	mov	r2, r8
10002596:	464b      	mov	r3, r9
}
10002598:	4610      	mov	r0, r2
1000259a:	4619      	mov	r1, r3
1000259c:	371c      	adds	r7, #28
1000259e:	46bd      	mov	sp, r7
100025a0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
100025a4:	4770      	bx	lr

100025a6 <timer_busy_wait_us>:
    } else {
        busy_wait_us(delay_us);
    }
}

void timer_busy_wait_us(timer_hw_t *timer, uint64_t delay_us) {
100025a6:	b5b0      	push	{r4, r5, r7, lr}
100025a8:	b08a      	sub	sp, #40	@ 0x28
100025aa:	af00      	add	r7, sp, #0
100025ac:	60f8      	str	r0, [r7, #12]
100025ae:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t base = timer_time_us_64(timer);
100025b2:	68f8      	ldr	r0, [r7, #12]
100025b4:	f7ff ffc6 	bl	10002544 <timer_time_us_64>
100025b8:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t target = base + delay_us;
100025bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
100025c0:	e9d7 2300 	ldrd	r2, r3, [r7]
100025c4:	1884      	adds	r4, r0, r2
100025c6:	eb41 0503 	adc.w	r5, r1, r3
100025ca:	e9c7 4508 	strd	r4, r5, [r7, #32]
    if (target < base) {
100025ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
100025d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
100025d6:	4290      	cmp	r0, r2
100025d8:	eb71 0303 	sbcs.w	r3, r1, r3
100025dc:	d205      	bcs.n	100025ea <timer_busy_wait_us+0x44>
        target = (uint64_t)-1;
100025de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100025e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100025e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    absolute_time_t t;
    update_us_since_boot(&t, target);
100025ea:	f107 0110 	add.w	r1, r7, #16
100025ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100025f2:	4608      	mov	r0, r1
100025f4:	f7ff ff5b 	bl	100024ae <update_us_since_boot>
    timer_busy_wait_until(timer, t);
100025f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
100025fc:	68f8      	ldr	r0, [r7, #12]
100025fe:	f000 f804 	bl	1000260a <timer_busy_wait_until>
}
10002602:	bf00      	nop
10002604:	3728      	adds	r7, #40	@ 0x28
10002606:	46bd      	mov	sp, r7
10002608:	bdb0      	pop	{r4, r5, r7, pc}

1000260a <timer_busy_wait_until>:
    } else {
        timer_busy_wait_us(timer, delay_ms * 1000ull);
    }
}

void timer_busy_wait_until(timer_hw_t *timer, absolute_time_t t) {
1000260a:	b580      	push	{r7, lr}
1000260c:	b08a      	sub	sp, #40	@ 0x28
1000260e:	af00      	add	r7, sp, #0
10002610:	60f8      	str	r0, [r7, #12]
10002612:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t target = to_us_since_boot(t);
10002616:	e9d7 0100 	ldrd	r0, r1, [r7]
1000261a:	f7ff ff3a 	bl	10002492 <to_us_since_boot>
1000261e:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint32_t hi_target = (uint32_t)(target >> 32u);
10002622:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
10002626:	f04f 0200 	mov.w	r2, #0
1000262a:	f04f 0300 	mov.w	r3, #0
1000262e:	000a      	movs	r2, r1
10002630:	2300      	movs	r3, #0
10002632:	4613      	mov	r3, r2
10002634:	617b      	str	r3, [r7, #20]
    uint32_t hi = timer->timerawh;
10002636:	68fb      	ldr	r3, [r7, #12]
10002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1000263a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (hi < hi_target) {
1000263c:	e003      	b.n	10002646 <timer_busy_wait_until+0x3c>
        hi = timer->timerawh;
1000263e:	68fb      	ldr	r3, [r7, #12]
10002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002642:	627b      	str	r3, [r7, #36]	@ 0x24
10002644:	bf00      	nop
    while (hi < hi_target) {
10002646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10002648:	697b      	ldr	r3, [r7, #20]
1000264a:	429a      	cmp	r2, r3
1000264c:	d3f7      	bcc.n	1000263e <timer_busy_wait_until+0x34>
        tight_loop_contents();
    }
    while (hi == hi_target && timer->timerawl < (uint32_t) target) {
1000264e:	e003      	b.n	10002658 <timer_busy_wait_until+0x4e>
        hi = timer->timerawh;
10002650:	68fb      	ldr	r3, [r7, #12]
10002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002654:	627b      	str	r3, [r7, #36]	@ 0x24
10002656:	bf00      	nop
    while (hi == hi_target && timer->timerawl < (uint32_t) target) {
10002658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000265a:	697b      	ldr	r3, [r7, #20]
1000265c:	429a      	cmp	r2, r3
1000265e:	d104      	bne.n	1000266a <timer_busy_wait_until+0x60>
10002660:	68fb      	ldr	r3, [r7, #12]
10002662:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10002664:	69bb      	ldr	r3, [r7, #24]
10002666:	429a      	cmp	r2, r3
10002668:	d3f2      	bcc.n	10002650 <timer_busy_wait_until+0x46>
        tight_loop_contents();
    }
}
1000266a:	bf00      	nop
1000266c:	3728      	adds	r7, #40	@ 0x28
1000266e:	46bd      	mov	sp, r7
10002670:	bd80      	pop	{r7, pc}
	...

10002674 <time_us_64>:
/// \end::busy_wait[]

uint64_t time_us_64(void) {
10002674:	b580      	push	{r7, lr}
10002676:	af00      	add	r7, sp, #0
    return timer_time_us_64(PICO_DEFAULT_TIMER_INSTANCE());
10002678:	4803      	ldr	r0, [pc, #12]	@ (10002688 <time_us_64+0x14>)
1000267a:	f7ff ff63 	bl	10002544 <timer_time_us_64>
1000267e:	4602      	mov	r2, r0
10002680:	460b      	mov	r3, r1
}
10002682:	4610      	mov	r0, r2
10002684:	4619      	mov	r1, r3
10002686:	bd80      	pop	{r7, pc}
10002688:	400b0000 	.word	0x400b0000

1000268c <busy_wait_us>:

void busy_wait_us_32(uint32_t delay_us) {
    timer_busy_wait_us_32(PICO_DEFAULT_TIMER_INSTANCE(), delay_us);
}

void busy_wait_us(uint64_t delay_us) {
1000268c:	b580      	push	{r7, lr}
1000268e:	b082      	sub	sp, #8
10002690:	af00      	add	r7, sp, #0
10002692:	e9c7 0100 	strd	r0, r1, [r7]
    timer_busy_wait_us(PICO_DEFAULT_TIMER_INSTANCE(), delay_us);
10002696:	e9d7 2300 	ldrd	r2, r3, [r7]
1000269a:	4803      	ldr	r0, [pc, #12]	@ (100026a8 <busy_wait_us+0x1c>)
1000269c:	f7ff ff83 	bl	100025a6 <timer_busy_wait_us>
}
100026a0:	bf00      	nop
100026a2:	3708      	adds	r7, #8
100026a4:	46bd      	mov	sp, r7
100026a6:	bd80      	pop	{r7, pc}
100026a8:	400b0000 	.word	0x400b0000

100026ac <busy_wait_until>:
void busy_wait_ms(uint32_t delay_ms)
{
    timer_busy_wait_ms(PICO_DEFAULT_TIMER_INSTANCE(), delay_ms);
}

void busy_wait_until(absolute_time_t t) {
100026ac:	b580      	push	{r7, lr}
100026ae:	b082      	sub	sp, #8
100026b0:	af00      	add	r7, sp, #0
100026b2:	e9c7 0100 	strd	r0, r1, [r7]
    timer_busy_wait_until(PICO_DEFAULT_TIMER_INSTANCE(), t);
100026b6:	e9d7 2300 	ldrd	r2, r3, [r7]
100026ba:	4803      	ldr	r0, [pc, #12]	@ (100026c8 <busy_wait_until+0x1c>)
100026bc:	f7ff ffa5 	bl	1000260a <timer_busy_wait_until>
}
100026c0:	bf00      	nop
100026c2:	3708      	adds	r7, #8
100026c4:	46bd      	mov	sp, r7
100026c6:	bd80      	pop	{r7, pc}
100026c8:	400b0000 	.word	0x400b0000

100026cc <reset_block_num>:
/*! \brief Reset the specified HW block
 *  \ingroup hardware_resets
 *
 * \param block_num the block number
 */
static inline void reset_block_num(uint32_t block_num) {
100026cc:	b480      	push	{r7}
100026ce:	b087      	sub	sp, #28
100026d0:	af00      	add	r7, sp, #0
100026d2:	6078      	str	r0, [r7, #4]
    reset_block_reg_mask(&resets_hw->reset, 1u << block_num);
100026d4:	2201      	movs	r2, #1
100026d6:	687b      	ldr	r3, [r7, #4]
100026d8:	fa02 f303 	lsl.w	r3, r2, r3
100026dc:	4a0a      	ldr	r2, [pc, #40]	@ (10002708 <reset_block_num+0x3c>)
100026de:	617a      	str	r2, [r7, #20]
100026e0:	613b      	str	r3, [r7, #16]
100026e2:	697b      	ldr	r3, [r7, #20]
100026e4:	60fb      	str	r3, [r7, #12]
100026e6:	693b      	ldr	r3, [r7, #16]
100026e8:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100026ea:	68fb      	ldr	r3, [r7, #12]
100026ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100026f0:	461a      	mov	r2, r3
100026f2:	68bb      	ldr	r3, [r7, #8]
100026f4:	6013      	str	r3, [r2, #0]
}
100026f6:	bf00      	nop
}
100026f8:	bf00      	nop
}
100026fa:	bf00      	nop
100026fc:	371c      	adds	r7, #28
100026fe:	46bd      	mov	sp, r7
10002700:	f85d 7b04 	ldr.w	r7, [sp], #4
10002704:	4770      	bx	lr
10002706:	bf00      	nop
10002708:	40020000 	.word	0x40020000

1000270c <unreset_block_num_wait_blocking>:
/*! \brief Bring specified HW block out of reset and wait for completion
 *  \ingroup hardware_resets
 *
 * \param block_num the block number
 */
static inline void unreset_block_num_wait_blocking(uint block_num) {
1000270c:	b480      	push	{r7}
1000270e:	b089      	sub	sp, #36	@ 0x24
10002710:	af00      	add	r7, sp, #0
10002712:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_RESETS, block_num > NUM_RESETS);
    unreset_block_reg_mask_wait_blocking(&resets_hw->reset, &resets_hw->reset_done, 1u << block_num);
10002714:	2201      	movs	r2, #1
10002716:	687b      	ldr	r3, [r7, #4]
10002718:	fa02 f303 	lsl.w	r3, r2, r3
1000271c:	4a0f      	ldr	r2, [pc, #60]	@ (1000275c <unreset_block_num_wait_blocking+0x50>)
1000271e:	61fa      	str	r2, [r7, #28]
10002720:	4a0f      	ldr	r2, [pc, #60]	@ (10002760 <unreset_block_num_wait_blocking+0x54>)
10002722:	61ba      	str	r2, [r7, #24]
10002724:	617b      	str	r3, [r7, #20]
10002726:	69fb      	ldr	r3, [r7, #28]
10002728:	613b      	str	r3, [r7, #16]
1000272a:	697b      	ldr	r3, [r7, #20]
1000272c:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000272e:	693b      	ldr	r3, [r7, #16]
10002730:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002734:	461a      	mov	r2, r3
10002736:	68fb      	ldr	r3, [r7, #12]
10002738:	6013      	str	r3, [r2, #0]
}
1000273a:	bf00      	nop
    while (~*reset_done & mask)
1000273c:	e000      	b.n	10002740 <unreset_block_num_wait_blocking+0x34>
1000273e:	bf00      	nop
10002740:	69bb      	ldr	r3, [r7, #24]
10002742:	681b      	ldr	r3, [r3, #0]
10002744:	43da      	mvns	r2, r3
10002746:	697b      	ldr	r3, [r7, #20]
10002748:	4013      	ands	r3, r2
1000274a:	2b00      	cmp	r3, #0
1000274c:	d1f7      	bne.n	1000273e <unreset_block_num_wait_blocking+0x32>
}
1000274e:	bf00      	nop
}
10002750:	bf00      	nop
10002752:	3724      	adds	r7, #36	@ 0x24
10002754:	46bd      	mov	sp, r7
10002756:	f85d 7b04 	ldr.w	r7, [sp], #4
1000275a:	4770      	bx	lr
1000275c:	40020000 	.word	0x40020000
10002760:	40020008 	.word	0x40020008

10002764 <uart_get_index>:
 *  \ingroup hardware_uart
 *
 * \param uart UART instance
 * \return Number of UART, 0 or 1.
 */
static inline uint uart_get_index(uart_inst_t *uart) {
10002764:	b480      	push	{r7}
10002766:	b083      	sub	sp, #12
10002768:	af00      	add	r7, sp, #0
1000276a:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_UART, uart != uart0 && uart != uart1);
    return UART_NUM(uart);
1000276c:	687b      	ldr	r3, [r7, #4]
1000276e:	4a06      	ldr	r2, [pc, #24]	@ (10002788 <uart_get_index+0x24>)
10002770:	4293      	cmp	r3, r2
10002772:	bf0c      	ite	eq
10002774:	2301      	moveq	r3, #1
10002776:	2300      	movne	r3, #0
10002778:	b2db      	uxtb	r3, r3
}
1000277a:	4618      	mov	r0, r3
1000277c:	370c      	adds	r7, #12
1000277e:	46bd      	mov	sp, r7
10002780:	f85d 7b04 	ldr.w	r7, [sp], #4
10002784:	4770      	bx	lr
10002786:	bf00      	nop
10002788:	40078000 	.word	0x40078000

1000278c <uart_get_hw>:
 * It currently does nothing, and costs nothing.
 *
 * \param uart UART instance
 * \return The uart_hw_t pointer to the UART instance registers
 */
static inline uart_hw_t *uart_get_hw(uart_inst_t *uart) {
1000278c:	b580      	push	{r7, lr}
1000278e:	b082      	sub	sp, #8
10002790:	af00      	add	r7, sp, #0
10002792:	6078      	str	r0, [r7, #4]
    uart_get_index(uart); // check it is a hw uart
10002794:	6878      	ldr	r0, [r7, #4]
10002796:	f7ff ffe5 	bl	10002764 <uart_get_index>
    return (uart_hw_t *)uart;
1000279a:	687b      	ldr	r3, [r7, #4]
}
1000279c:	4618      	mov	r0, r3
1000279e:	3708      	adds	r7, #8
100027a0:	46bd      	mov	sp, r7
100027a2:	bd80      	pop	{r7, pc}

100027a4 <uart_get_reset_num>:
 *  \ingroup hardware_uart
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param is_tx true for sending data to the UART instance, false for receiving data from the UART instance
 */
static inline uint uart_get_reset_num(uart_inst_t *uart) {
100027a4:	b580      	push	{r7, lr}
100027a6:	b082      	sub	sp, #8
100027a8:	af00      	add	r7, sp, #0
100027aa:	6078      	str	r0, [r7, #4]
    return UART_RESET_NUM(uart);
100027ac:	6878      	ldr	r0, [r7, #4]
100027ae:	f7ff ffd9 	bl	10002764 <uart_get_index>
100027b2:	4603      	mov	r3, r0
100027b4:	2b00      	cmp	r3, #0
100027b6:	d001      	beq.n	100027bc <uart_get_reset_num+0x18>
100027b8:	231b      	movs	r3, #27
100027ba:	e000      	b.n	100027be <uart_get_reset_num+0x1a>
100027bc:	231a      	movs	r3, #26
}
100027be:	4618      	mov	r0, r3
100027c0:	3708      	adds	r7, #8
100027c2:	46bd      	mov	sp, r7
100027c4:	bd80      	pop	{r7, pc}

100027c6 <uart_clock_get_hz>:

#include "hardware/structs/uart.h"
#include "hardware/resets.h"
#include "hardware/clocks.h"

static inline uint32_t uart_clock_get_hz(__unused uart_inst_t *inst) {
100027c6:	b580      	push	{r7, lr}
100027c8:	b082      	sub	sp, #8
100027ca:	af00      	add	r7, sp, #0
100027cc:	6078      	str	r0, [r7, #4]
    return clock_get_hz(UART_CLOCK_NUM(inst));
100027ce:	2006      	movs	r0, #6
100027d0:	f000 fa62 	bl	10002c98 <clock_get_hz>
100027d4:	4603      	mov	r3, r0
}
100027d6:	4618      	mov	r0, r3
100027d8:	3708      	adds	r7, #8
100027da:	46bd      	mov	sp, r7
100027dc:	bd80      	pop	{r7, pc}

100027de <uart_reset>:
#if PICO_UART_ENABLE_CRLF_SUPPORT
short uart_char_to_line_feed[NUM_UARTS];
#endif

/// \tag::uart_reset[]
static inline void uart_reset(uart_inst_t *uart) {
100027de:	b580      	push	{r7, lr}
100027e0:	b082      	sub	sp, #8
100027e2:	af00      	add	r7, sp, #0
100027e4:	6078      	str	r0, [r7, #4]
    reset_block_num(uart_get_reset_num(uart));
100027e6:	6878      	ldr	r0, [r7, #4]
100027e8:	f7ff ffdc 	bl	100027a4 <uart_get_reset_num>
100027ec:	4603      	mov	r3, r0
100027ee:	4618      	mov	r0, r3
100027f0:	f7ff ff6c 	bl	100026cc <reset_block_num>
}
100027f4:	bf00      	nop
100027f6:	3708      	adds	r7, #8
100027f8:	46bd      	mov	sp, r7
100027fa:	bd80      	pop	{r7, pc}

100027fc <uart_unreset>:

static inline void uart_unreset(uart_inst_t *uart) {
100027fc:	b580      	push	{r7, lr}
100027fe:	b082      	sub	sp, #8
10002800:	af00      	add	r7, sp, #0
10002802:	6078      	str	r0, [r7, #4]
    unreset_block_num_wait_blocking(uart_get_reset_num(uart));
10002804:	6878      	ldr	r0, [r7, #4]
10002806:	f7ff ffcd 	bl	100027a4 <uart_get_reset_num>
1000280a:	4603      	mov	r3, r0
1000280c:	4618      	mov	r0, r3
1000280e:	f7ff ff7d 	bl	1000270c <unreset_block_num_wait_blocking>
}
10002812:	bf00      	nop
10002814:	3708      	adds	r7, #8
10002816:	46bd      	mov	sp, r7
10002818:	bd80      	pop	{r7, pc}

1000281a <uart_init>:
/// \end::uart_reset[]

/// \tag::uart_init[]
uint uart_init(uart_inst_t *uart, uint baudrate) {
1000281a:	b580      	push	{r7, lr}
1000281c:	b08c      	sub	sp, #48	@ 0x30
1000281e:	af00      	add	r7, sp, #0
10002820:	6078      	str	r0, [r7, #4]
10002822:	6039      	str	r1, [r7, #0]
    invalid_params_if(HARDWARE_UART, uart != uart0 && uart != uart1);

    if (uart_clock_get_hz(uart) == 0) {
10002824:	6878      	ldr	r0, [r7, #4]
10002826:	f7ff ffce 	bl	100027c6 <uart_clock_get_hz>
1000282a:	4603      	mov	r3, r0
1000282c:	2b00      	cmp	r3, #0
1000282e:	d101      	bne.n	10002834 <uart_init+0x1a>
        return 0;
10002830:	2300      	movs	r3, #0
10002832:	e054      	b.n	100028de <uart_init+0xc4>
    }

    uart_reset(uart);
10002834:	6878      	ldr	r0, [r7, #4]
10002836:	f7ff ffd2 	bl	100027de <uart_reset>
    uart_unreset(uart);
1000283a:	6878      	ldr	r0, [r7, #4]
1000283c:	f7ff ffde 	bl	100027fc <uart_unreset>

#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_set_translate_crlf(uart, PICO_UART_DEFAULT_CRLF);
10002840:	2100      	movs	r1, #0
10002842:	6878      	ldr	r0, [r7, #4]
10002844:	f000 f91a 	bl	10002a7c <uart_set_translate_crlf>
#endif

    // Any LCR writes need to take place before enabling the UART
    uint baud = uart_set_baudrate(uart, baudrate);
10002848:	6839      	ldr	r1, [r7, #0]
1000284a:	6878      	ldr	r0, [r7, #4]
1000284c:	f000 f8cb 	bl	100029e6 <uart_set_baudrate>
10002850:	62f8      	str	r0, [r7, #44]	@ 0x2c
#if 0
    uart_set_format(uart, 8, 1, UART_PARITY_NONE);
    // Enable FIFOs (must be before setting UARTEN, as this is an LCR access)
    hw_set_bits(&uart_get_hw(uart)->lcr_h, UART_UARTLCR_H_FEN_BITS);
#else
    uint data_bits = 8;
10002852:	2308      	movs	r3, #8
10002854:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint stop_bits = 1;
10002856:	2301      	movs	r3, #1
10002858:	627b      	str	r3, [r7, #36]	@ 0x24
    uint parity = UART_PARITY_NONE;
1000285a:	2300      	movs	r3, #0
1000285c:	623b      	str	r3, [r7, #32]
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
1000285e:	6878      	ldr	r0, [r7, #4]
10002860:	f7ff ff94 	bl	1000278c <uart_get_hw>
10002864:	4603      	mov	r3, r0
10002866:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
        ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
1000286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000286c:	3b05      	subs	r3, #5
1000286e:	0159      	lsls	r1, r3, #5
            ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002872:	3b01      	subs	r3, #1
10002874:	00db      	lsls	r3, r3, #3
        ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002876:	430b      	orrs	r3, r1
            (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002878:	6a39      	ldr	r1, [r7, #32]
1000287a:	2900      	cmp	r1, #0
1000287c:	d001      	beq.n	10002882 <uart_init+0x68>
1000287e:	2102      	movs	r1, #2
10002880:	e000      	b.n	10002884 <uart_init+0x6a>
10002882:	2100      	movs	r1, #0
            ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002884:	430b      	orrs	r3, r1
            (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB) |
10002886:	6a39      	ldr	r1, [r7, #32]
10002888:	2901      	cmp	r1, #1
1000288a:	d101      	bne.n	10002890 <uart_init+0x76>
1000288c:	2104      	movs	r1, #4
1000288e:	e000      	b.n	10002892 <uart_init+0x78>
10002890:	2100      	movs	r1, #0
            (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002892:	430b      	orrs	r3, r1
            (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB) |
10002894:	f043 0310 	orr.w	r3, r3, #16
10002898:	61fa      	str	r2, [r7, #28]
1000289a:	61bb      	str	r3, [r7, #24]
1000289c:	237e      	movs	r3, #126	@ 0x7e
1000289e:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100028a0:	69fb      	ldr	r3, [r7, #28]
100028a2:	681a      	ldr	r2, [r3, #0]
100028a4:	69bb      	ldr	r3, [r7, #24]
100028a6:	405a      	eors	r2, r3
100028a8:	697b      	ldr	r3, [r7, #20]
100028aa:	4013      	ands	r3, r2
100028ac:	69fa      	ldr	r2, [r7, #28]
100028ae:	613a      	str	r2, [r7, #16]
100028b0:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100028b2:	693b      	ldr	r3, [r7, #16]
100028b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100028b8:	461a      	mov	r2, r3
100028ba:	68fb      	ldr	r3, [r7, #12]
100028bc:	6013      	str	r3, [r2, #0]
}
100028be:	bf00      	nop
}
100028c0:	bf00      	nop
            UART_UARTLCR_H_PEN_BITS | UART_UARTLCR_H_EPS_BITS |
            UART_UARTLCR_H_FEN_BITS);
#endif

    // Enable the UART, both TX and RX
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
100028c2:	6878      	ldr	r0, [r7, #4]
100028c4:	f7ff ff62 	bl	1000278c <uart_get_hw>
100028c8:	4603      	mov	r3, r0
100028ca:	f240 3201 	movw	r2, #769	@ 0x301
100028ce:	631a      	str	r2, [r3, #48]	@ 0x30
#if !PICO_UART_NO_DMACR_ENABLE
    // Always enable DREQ signals -- no harm in this if DMA is not listening
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
100028d0:	6878      	ldr	r0, [r7, #4]
100028d2:	f7ff ff5b 	bl	1000278c <uart_get_hw>
100028d6:	4603      	mov	r3, r0
100028d8:	2203      	movs	r2, #3
100028da:	649a      	str	r2, [r3, #72]	@ 0x48
#endif

    return baud;
100028dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
100028de:	4618      	mov	r0, r3
100028e0:	3730      	adds	r7, #48	@ 0x30
100028e2:	46bd      	mov	sp, r7
100028e4:	bd80      	pop	{r7, pc}
	...

100028e8 <uart_disable_before_lcr_write>:
void uart_deinit(uart_inst_t *uart) {
    invalid_params_if(HARDWARE_UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

static uint32_t uart_disable_before_lcr_write(uart_inst_t *uart) {
100028e8:	b5b0      	push	{r4, r5, r7, lr}
100028ea:	b08a      	sub	sp, #40	@ 0x28
100028ec:	af00      	add	r7, sp, #0
100028ee:	6078      	str	r0, [r7, #4]
    //
    // So, insert a 15 Baud period delay before changing the settings.
    // 15 Baud is comfortably higher than start + max data + parity + stop.
    // Anything else would require API changes to permit a non-enabled UART
    // state after init() where settings can be changed safely.
    uint32_t cr_save = uart_get_hw(uart)->cr;
100028f0:	6878      	ldr	r0, [r7, #4]
100028f2:	f7ff ff4b 	bl	1000278c <uart_get_hw>
100028f6:	4603      	mov	r3, r0
100028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100028fa:	627b      	str	r3, [r7, #36]	@ 0x24

    if (cr_save & UART_UARTCR_UARTEN_BITS) {
100028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100028fe:	f003 0301 	and.w	r3, r3, #1
10002902:	2b00      	cmp	r3, #0
10002904:	d039      	beq.n	1000297a <uart_disable_before_lcr_write+0x92>
        hw_clear_bits(&uart_get_hw(uart)->cr,
10002906:	6878      	ldr	r0, [r7, #4]
10002908:	f7ff ff40 	bl	1000278c <uart_get_hw>
1000290c:	4603      	mov	r3, r0
1000290e:	3330      	adds	r3, #48	@ 0x30
10002910:	60fb      	str	r3, [r7, #12]
10002912:	f240 3301 	movw	r3, #769	@ 0x301
10002916:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002918:	68fb      	ldr	r3, [r7, #12]
1000291a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
1000291e:	461a      	mov	r2, r3
10002920:	68bb      	ldr	r3, [r7, #8]
10002922:	6013      	str	r3, [r2, #0]
}
10002924:	bf00      	nop
            UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS);

        uint32_t current_ibrd = uart_get_hw(uart)->ibrd;
10002926:	6878      	ldr	r0, [r7, #4]
10002928:	f7ff ff30 	bl	1000278c <uart_get_hw>
1000292c:	4603      	mov	r3, r0
1000292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002930:	623b      	str	r3, [r7, #32]
        uint32_t current_fbrd = uart_get_hw(uart)->fbrd;
10002932:	6878      	ldr	r0, [r7, #4]
10002934:	f7ff ff2a 	bl	1000278c <uart_get_hw>
10002938:	4603      	mov	r3, r0
1000293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1000293c:	61fb      	str	r3, [r7, #28]

        // Note: Maximise precision here. Show working, the compiler will mop this up.
        // Create a 16.6 fixed-point fractional division ratio; then scale to 32-bits.
        uint32_t brdiv_ratio = 64u * current_ibrd + current_fbrd;
1000293e:	6a3b      	ldr	r3, [r7, #32]
10002940:	019b      	lsls	r3, r3, #6
10002942:	69fa      	ldr	r2, [r7, #28]
10002944:	4413      	add	r3, r2
10002946:	61bb      	str	r3, [r7, #24]
        brdiv_ratio <<= 10;
10002948:	69bb      	ldr	r3, [r7, #24]
1000294a:	029b      	lsls	r3, r3, #10
1000294c:	61bb      	str	r3, [r7, #24]
        // 3662 is ~(15 * 244.14) where 244.14 is 16e6 / 2^16
        uint32_t scaled_freq = uart_clock_get_hz(uart) / 3662ul;
1000294e:	6878      	ldr	r0, [r7, #4]
10002950:	f7ff ff39 	bl	100027c6 <uart_clock_get_hz>
10002954:	4603      	mov	r3, r0
10002956:	4a0b      	ldr	r2, [pc, #44]	@ (10002984 <uart_disable_before_lcr_write+0x9c>)
10002958:	fba2 2303 	umull	r2, r3, r2, r3
1000295c:	0adb      	lsrs	r3, r3, #11
1000295e:	617b      	str	r3, [r7, #20]
        uint32_t wait_time_us = brdiv_ratio / scaled_freq;
10002960:	69ba      	ldr	r2, [r7, #24]
10002962:	697b      	ldr	r3, [r7, #20]
10002964:	fbb2 f3f3 	udiv	r3, r2, r3
10002968:	613b      	str	r3, [r7, #16]
        busy_wait_us(wait_time_us);
1000296a:	693b      	ldr	r3, [r7, #16]
1000296c:	2200      	movs	r2, #0
1000296e:	461c      	mov	r4, r3
10002970:	4615      	mov	r5, r2
10002972:	4620      	mov	r0, r4
10002974:	4629      	mov	r1, r5
10002976:	f7ff fe89 	bl	1000268c <busy_wait_us>
    }

    return cr_save;
1000297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1000297c:	4618      	mov	r0, r3
1000297e:	3728      	adds	r7, #40	@ 0x28
10002980:	46bd      	mov	sp, r7
10002982:	bdb0      	pop	{r4, r5, r7, pc}
10002984:	8f2b7b75 	.word	0x8f2b7b75

10002988 <uart_write_lcr_bits_masked>:

static void uart_write_lcr_bits_masked(uart_inst_t *uart, uint32_t values, uint32_t write_mask) {
10002988:	b580      	push	{r7, lr}
1000298a:	b08a      	sub	sp, #40	@ 0x28
1000298c:	af00      	add	r7, sp, #0
1000298e:	60f8      	str	r0, [r7, #12]
10002990:	60b9      	str	r1, [r7, #8]
10002992:	607a      	str	r2, [r7, #4]
    invalid_params_if(HARDWARE_UART, uart != uart0 && uart != uart1);

    // (Potentially) Cleanly handle disabling the UART before touching LCR
    uint32_t cr_save = uart_disable_before_lcr_write(uart);
10002994:	68f8      	ldr	r0, [r7, #12]
10002996:	f7ff ffa7 	bl	100028e8 <uart_disable_before_lcr_write>
1000299a:	6278      	str	r0, [r7, #36]	@ 0x24

    hw_write_masked(&uart_get_hw(uart)->lcr_h, values, write_mask);
1000299c:	68f8      	ldr	r0, [r7, #12]
1000299e:	f7ff fef5 	bl	1000278c <uart_get_hw>
100029a2:	4603      	mov	r3, r0
100029a4:	332c      	adds	r3, #44	@ 0x2c
100029a6:	623b      	str	r3, [r7, #32]
100029a8:	68bb      	ldr	r3, [r7, #8]
100029aa:	61fb      	str	r3, [r7, #28]
100029ac:	687b      	ldr	r3, [r7, #4]
100029ae:	61bb      	str	r3, [r7, #24]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100029b0:	6a3b      	ldr	r3, [r7, #32]
100029b2:	681a      	ldr	r2, [r3, #0]
100029b4:	69fb      	ldr	r3, [r7, #28]
100029b6:	405a      	eors	r2, r3
100029b8:	69bb      	ldr	r3, [r7, #24]
100029ba:	4013      	ands	r3, r2
100029bc:	6a3a      	ldr	r2, [r7, #32]
100029be:	617a      	str	r2, [r7, #20]
100029c0:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100029c2:	697b      	ldr	r3, [r7, #20]
100029c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100029c8:	461a      	mov	r2, r3
100029ca:	693b      	ldr	r3, [r7, #16]
100029cc:	6013      	str	r3, [r2, #0]
}
100029ce:	bf00      	nop
}
100029d0:	bf00      	nop

    uart_get_hw(uart)->cr = cr_save;
100029d2:	68f8      	ldr	r0, [r7, #12]
100029d4:	f7ff feda 	bl	1000278c <uart_get_hw>
100029d8:	4602      	mov	r2, r0
100029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100029dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
100029de:	bf00      	nop
100029e0:	3728      	adds	r7, #40	@ 0x28
100029e2:	46bd      	mov	sp, r7
100029e4:	bd80      	pop	{r7, pc}

100029e6 <uart_set_baudrate>:

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
100029e6:	b580      	push	{r7, lr}
100029e8:	b086      	sub	sp, #24
100029ea:	af00      	add	r7, sp, #0
100029ec:	6078      	str	r0, [r7, #4]
100029ee:	6039      	str	r1, [r7, #0]
    invalid_params_if(HARDWARE_UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * uart_clock_get_hz(uart) / baudrate) + 1;
100029f0:	6878      	ldr	r0, [r7, #4]
100029f2:	f7ff fee8 	bl	100027c6 <uart_clock_get_hz>
100029f6:	4603      	mov	r3, r0
100029f8:	00da      	lsls	r2, r3, #3
100029fa:	683b      	ldr	r3, [r7, #0]
100029fc:	fbb2 f3f3 	udiv	r3, r2, r3
10002a00:	3301      	adds	r3, #1
10002a02:	60fb      	str	r3, [r7, #12]
    uint32_t baud_ibrd = baud_rate_div >> 7;
10002a04:	68fb      	ldr	r3, [r7, #12]
10002a06:	09db      	lsrs	r3, r3, #7
10002a08:	617b      	str	r3, [r7, #20]
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
10002a0a:	697b      	ldr	r3, [r7, #20]
10002a0c:	2b00      	cmp	r3, #0
10002a0e:	d104      	bne.n	10002a1a <uart_set_baudrate+0x34>
        baud_ibrd = 1;
10002a10:	2301      	movs	r3, #1
10002a12:	617b      	str	r3, [r7, #20]
        baud_fbrd = 0;
10002a14:	2300      	movs	r3, #0
10002a16:	613b      	str	r3, [r7, #16]
10002a18:	e00f      	b.n	10002a3a <uart_set_baudrate+0x54>
    } else if (baud_ibrd >= 65535) {
10002a1a:	697b      	ldr	r3, [r7, #20]
10002a1c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
10002a20:	4293      	cmp	r3, r2
10002a22:	d905      	bls.n	10002a30 <uart_set_baudrate+0x4a>
        baud_ibrd = 65535;
10002a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10002a28:	617b      	str	r3, [r7, #20]
        baud_fbrd = 0;
10002a2a:	2300      	movs	r3, #0
10002a2c:	613b      	str	r3, [r7, #16]
10002a2e:	e004      	b.n	10002a3a <uart_set_baudrate+0x54>
    }  else {
        baud_fbrd = (baud_rate_div & 0x7f) >> 1;
10002a30:	68fb      	ldr	r3, [r7, #12]
10002a32:	085b      	lsrs	r3, r3, #1
10002a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10002a38:	613b      	str	r3, [r7, #16]
    }

    uart_get_hw(uart)->ibrd = baud_ibrd;
10002a3a:	6878      	ldr	r0, [r7, #4]
10002a3c:	f7ff fea6 	bl	1000278c <uart_get_hw>
10002a40:	4602      	mov	r2, r0
10002a42:	697b      	ldr	r3, [r7, #20]
10002a44:	6253      	str	r3, [r2, #36]	@ 0x24
    uart_get_hw(uart)->fbrd = baud_fbrd;
10002a46:	6878      	ldr	r0, [r7, #4]
10002a48:	f7ff fea0 	bl	1000278c <uart_get_hw>
10002a4c:	4602      	mov	r2, r0
10002a4e:	693b      	ldr	r3, [r7, #16]
10002a50:	6293      	str	r3, [r2, #40]	@ 0x28

    // PL011 needs a (dummy) LCR_H write to latch in the divisors.
    // We don't want to actually change LCR_H contents here.
    uart_write_lcr_bits_masked(uart, 0, 0);
10002a52:	2200      	movs	r2, #0
10002a54:	2100      	movs	r1, #0
10002a56:	6878      	ldr	r0, [r7, #4]
10002a58:	f7ff ff96 	bl	10002988 <uart_write_lcr_bits_masked>

    // See datasheet
    return (4 * uart_clock_get_hz(uart)) / (64 * baud_ibrd + baud_fbrd);
10002a5c:	6878      	ldr	r0, [r7, #4]
10002a5e:	f7ff feb2 	bl	100027c6 <uart_clock_get_hz>
10002a62:	4603      	mov	r3, r0
10002a64:	009a      	lsls	r2, r3, #2
10002a66:	697b      	ldr	r3, [r7, #20]
10002a68:	0199      	lsls	r1, r3, #6
10002a6a:	693b      	ldr	r3, [r7, #16]
10002a6c:	440b      	add	r3, r1
10002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
}
10002a72:	4618      	mov	r0, r3
10002a74:	3718      	adds	r7, #24
10002a76:	46bd      	mov	sp, r7
10002a78:	bd80      	pop	{r7, pc}
	...

10002a7c <uart_set_translate_crlf>:
    }

    uart_write_lcr_bits_masked(uart, lcr_h_brk_bits, UART_UARTLCR_H_BRK_BITS);
}

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
10002a7c:	b590      	push	{r4, r7, lr}
10002a7e:	b083      	sub	sp, #12
10002a80:	af00      	add	r7, sp, #0
10002a82:	6078      	str	r0, [r7, #4]
10002a84:	460b      	mov	r3, r1
10002a86:	70fb      	strb	r3, [r7, #3]
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
10002a88:	78fb      	ldrb	r3, [r7, #3]
10002a8a:	2b00      	cmp	r3, #0
10002a8c:	d001      	beq.n	10002a92 <uart_set_translate_crlf+0x16>
10002a8e:	240a      	movs	r4, #10
10002a90:	e001      	b.n	10002a96 <uart_set_translate_crlf+0x1a>
10002a92:	f44f 7480 	mov.w	r4, #256	@ 0x100
10002a96:	6878      	ldr	r0, [r7, #4]
10002a98:	f7ff fe64 	bl	10002764 <uart_get_index>
10002a9c:	4603      	mov	r3, r0
10002a9e:	4a04      	ldr	r2, [pc, #16]	@ (10002ab0 <uart_set_translate_crlf+0x34>)
10002aa0:	4621      	mov	r1, r4
10002aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#else
    panic_unsupported();
#endif
}
10002aa6:	bf00      	nop
10002aa8:	370c      	adds	r7, #12
10002aaa:	46bd      	mov	sp, r7
10002aac:	bd90      	pop	{r4, r7, pc}
10002aae:	bf00      	nop
10002ab0:	200009ac 	.word	0x200009ac

10002ab4 <busy_wait_at_least_cycles>:
static inline void busy_wait_at_least_cycles(uint32_t minimum_cycles) {
10002ab4:	b480      	push	{r7}
10002ab6:	b083      	sub	sp, #12
10002ab8:	af00      	add	r7, sp, #0
10002aba:	6078      	str	r0, [r7, #4]
    pico_default_asm_volatile (
10002abc:	687b      	ldr	r3, [r7, #4]
10002abe:	3b03      	subs	r3, #3
10002ac0:	d2fd      	bcs.n	10002abe <busy_wait_at_least_cycles+0xa>
10002ac2:	607b      	str	r3, [r7, #4]
}
10002ac4:	bf00      	nop
10002ac6:	370c      	adds	r7, #12
10002ac8:	46bd      	mov	sp, r7
10002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ace:	4770      	bx	lr

10002ad0 <has_glitchless_mux>:
// - A glitchless mux, which can be switched freely, but whose inputs must be
//   free-running
// - An auxiliary (glitchy) mux, whose output glitches when switched, but has
//   no constraints on its inputs
// Not all clocks have both types of mux.
static inline bool has_glitchless_mux(clock_handle_t clock) {
10002ad0:	b480      	push	{r7}
10002ad2:	b083      	sub	sp, #12
10002ad4:	af00      	add	r7, sp, #0
10002ad6:	4603      	mov	r3, r0
10002ad8:	71fb      	strb	r3, [r7, #7]
    return clock == clk_sys || clock == clk_ref;
10002ada:	79fb      	ldrb	r3, [r7, #7]
10002adc:	2b05      	cmp	r3, #5
10002ade:	d002      	beq.n	10002ae6 <has_glitchless_mux+0x16>
10002ae0:	79fb      	ldrb	r3, [r7, #7]
10002ae2:	2b04      	cmp	r3, #4
10002ae4:	d101      	bne.n	10002aea <has_glitchless_mux+0x1a>
10002ae6:	2301      	movs	r3, #1
10002ae8:	e000      	b.n	10002aec <has_glitchless_mux+0x1c>
10002aea:	2300      	movs	r3, #0
10002aec:	f003 0301 	and.w	r3, r3, #1
10002af0:	b2db      	uxtb	r3, r3
}
10002af2:	4618      	mov	r0, r3
10002af4:	370c      	adds	r7, #12
10002af6:	46bd      	mov	sp, r7
10002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
10002afc:	4770      	bx	lr
	...

10002b00 <clock_configure_internal>:
    hw_clear_bits(&clock_hw->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clock] = 0;
}

/// \tag::clock_configure[]
static void clock_configure_internal(clock_handle_t clock, uint32_t src, uint32_t auxsrc, uint32_t actual_freq, uint32_t div) {
10002b00:	b580      	push	{r7, lr}
10002b02:	b096      	sub	sp, #88	@ 0x58
10002b04:	af00      	add	r7, sp, #0
10002b06:	60b9      	str	r1, [r7, #8]
10002b08:	607a      	str	r2, [r7, #4]
10002b0a:	603b      	str	r3, [r7, #0]
10002b0c:	4603      	mov	r3, r0
10002b0e:	73fb      	strb	r3, [r7, #15]
    clock_hw_t *clock_hw = &clocks_hw->clk[clock];
10002b10:	7bfa      	ldrb	r2, [r7, #15]
10002b12:	4613      	mov	r3, r2
10002b14:	005b      	lsls	r3, r3, #1
10002b16:	4413      	add	r3, r2
10002b18:	009b      	lsls	r3, r3, #2
10002b1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
10002b1e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
10002b22:	657b      	str	r3, [r7, #84]	@ 0x54

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock_hw->div)
10002b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002b26:	685b      	ldr	r3, [r3, #4]
10002b28:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10002b2a:	429a      	cmp	r2, r3
10002b2c:	d902      	bls.n	10002b34 <clock_configure_internal+0x34>
        clock_hw->div = div;
10002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002b30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10002b32:	605a      	str	r2, [r3, #4]

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clock) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10002b34:	7bfb      	ldrb	r3, [r7, #15]
10002b36:	4618      	mov	r0, r3
10002b38:	f7ff ffca 	bl	10002ad0 <has_glitchless_mux>
10002b3c:	4603      	mov	r3, r0
10002b3e:	2b00      	cmp	r3, #0
10002b40:	d016      	beq.n	10002b70 <clock_configure_internal+0x70>
10002b42:	68bb      	ldr	r3, [r7, #8]
10002b44:	2b01      	cmp	r3, #1
10002b46:	d113      	bne.n	10002b70 <clock_configure_internal+0x70>
        hw_clear_bits(&clock_hw->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
10002b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
10002b4c:	2303      	movs	r3, #3
10002b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10002b52:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002b56:	461a      	mov	r2, r3
10002b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10002b5a:	6013      	str	r3, [r2, #0]
}
10002b5c:	bf00      	nop
        while (!(clock_hw->selected & 1u))
10002b5e:	e000      	b.n	10002b62 <clock_configure_internal+0x62>
static __force_inline void tight_loop_contents(void) {}
10002b60:	bf00      	nop
10002b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002b64:	689b      	ldr	r3, [r3, #8]
10002b66:	f003 0301 	and.w	r3, r3, #1
10002b6a:	2b00      	cmp	r3, #0
10002b6c:	d0f8      	beq.n	10002b60 <clock_configure_internal+0x60>
    if (has_glitchless_mux(clock) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10002b6e:	e022      	b.n	10002bb6 <clock_configure_internal+0xb6>
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        // Disable clock. On clk_ref and clk_sys this does nothing,
        // all other clocks have the ENABLE bit in the same position.
        hw_clear_bits(&clock_hw->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
10002b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002b72:	647b      	str	r3, [r7, #68]	@ 0x44
10002b74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
10002b78:	643b      	str	r3, [r7, #64]	@ 0x40
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10002b7c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002b80:	461a      	mov	r2, r3
10002b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10002b84:	6013      	str	r3, [r2, #0]
}
10002b86:	bf00      	nop
        if (configured_freq[clock] > 0) {
10002b88:	7bfb      	ldrb	r3, [r7, #15]
10002b8a:	4a37      	ldr	r2, [pc, #220]	@ (10002c68 <clock_configure_internal+0x168>)
10002b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10002b90:	2b00      	cmp	r3, #0
10002b92:	d010      	beq.n	10002bb6 <clock_configure_internal+0xb6>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer...
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clock] + 1;
10002b94:	4b34      	ldr	r3, [pc, #208]	@ (10002c68 <clock_configure_internal+0x168>)
10002b96:	695a      	ldr	r2, [r3, #20]
10002b98:	7bfb      	ldrb	r3, [r7, #15]
10002b9a:	4933      	ldr	r1, [pc, #204]	@ (10002c68 <clock_configure_internal+0x168>)
10002b9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
10002ba4:	3301      	adds	r3, #1
10002ba6:	653b      	str	r3, [r7, #80]	@ 0x50
            busy_wait_at_least_cycles(delay_cyc * 3);
10002ba8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10002baa:	4613      	mov	r3, r2
10002bac:	005b      	lsls	r3, r3, #1
10002bae:	4413      	add	r3, r2
10002bb0:	4618      	mov	r0, r3
10002bb2:	f7ff ff7f 	bl	10002ab4 <busy_wait_at_least_cycles>
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock_hw->ctrl,
10002bb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10002bb8:	687b      	ldr	r3, [r7, #4]
10002bba:	015b      	lsls	r3, r3, #5
10002bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
10002bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
10002bc0:	23e0      	movs	r3, #224	@ 0xe0
10002bc2:	637b      	str	r3, [r7, #52]	@ 0x34
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10002bc6:	681a      	ldr	r2, [r3, #0]
10002bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10002bca:	405a      	eors	r2, r3
10002bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10002bce:	4013      	ands	r3, r2
10002bd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10002bd2:	633a      	str	r2, [r7, #48]	@ 0x30
10002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10002bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10002bdc:	461a      	mov	r2, r3
10002bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10002be0:	6013      	str	r3, [r2, #0]
}
10002be2:	bf00      	nop
}
10002be4:	bf00      	nop
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clock)) {
10002be6:	7bfb      	ldrb	r3, [r7, #15]
10002be8:	4618      	mov	r0, r3
10002bea:	f7ff ff71 	bl	10002ad0 <has_glitchless_mux>
10002bee:	4603      	mov	r3, r0
10002bf0:	2b00      	cmp	r3, #0
10002bf2:	d021      	beq.n	10002c38 <clock_configure_internal+0x138>
        hw_write_masked(&clock_hw->ctrl,
10002bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
10002bf8:	68bb      	ldr	r3, [r7, #8]
10002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
10002bfc:	2303      	movs	r3, #3
10002bfe:	623b      	str	r3, [r7, #32]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10002c02:	681a      	ldr	r2, [r3, #0]
10002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002c06:	405a      	eors	r2, r3
10002c08:	6a3b      	ldr	r3, [r7, #32]
10002c0a:	4013      	ands	r3, r2
10002c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10002c0e:	61fa      	str	r2, [r7, #28]
10002c10:	61bb      	str	r3, [r7, #24]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002c12:	69fb      	ldr	r3, [r7, #28]
10002c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10002c18:	461a      	mov	r2, r3
10002c1a:	69bb      	ldr	r3, [r7, #24]
10002c1c:	6013      	str	r3, [r2, #0]
}
10002c1e:	bf00      	nop
}
10002c20:	bf00      	nop
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock_hw->selected & (1u << src)))
10002c22:	e000      	b.n	10002c26 <clock_configure_internal+0x126>
10002c24:	bf00      	nop
10002c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002c28:	689a      	ldr	r2, [r3, #8]
10002c2a:	2101      	movs	r1, #1
10002c2c:	68bb      	ldr	r3, [r7, #8]
10002c2e:	fa01 f303 	lsl.w	r3, r1, r3
10002c32:	4013      	ands	r3, r2
10002c34:	2b00      	cmp	r3, #0
10002c36:	d0f5      	beq.n	10002c24 <clock_configure_internal+0x124>
            tight_loop_contents();
    }

    // Enable clock. On clk_ref and clk_sys this does nothing,
    // all other clocks have the ENABLE bit in the same position.
    hw_set_bits(&clock_hw->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
10002c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002c3a:	617b      	str	r3, [r7, #20]
10002c3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
10002c40:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002c42:	697b      	ldr	r3, [r7, #20]
10002c44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10002c48:	461a      	mov	r2, r3
10002c4a:	693b      	ldr	r3, [r7, #16]
10002c4c:	6013      	str	r3, [r2, #0]
}
10002c4e:	bf00      	nop

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock_hw->div = div;
10002c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10002c52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10002c54:	605a      	str	r2, [r3, #4]
    configured_freq[clock] = actual_freq;
10002c56:	7bfb      	ldrb	r3, [r7, #15]
10002c58:	4903      	ldr	r1, [pc, #12]	@ (10002c68 <clock_configure_internal+0x168>)
10002c5a:	683a      	ldr	r2, [r7, #0]
10002c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
10002c60:	bf00      	nop
10002c62:	3758      	adds	r7, #88	@ 0x58
10002c64:	46bd      	mov	sp, r7
10002c66:	bd80      	pop	{r7, pc}
10002c68:	2000093c 	.word	0x2000093c

10002c6c <clock_configure_undivided>:

void clock_configure_int_divider(clock_handle_t clock, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t int_divider) {
    clock_configure_internal(clock, src, auxsrc, src_freq / int_divider, int_divider << CLOCKS_CLK_GPOUT0_DIV_INT_LSB);
}

void clock_configure_undivided(clock_handle_t clock, uint32_t src, uint32_t auxsrc, uint32_t src_freq) {
10002c6c:	b580      	push	{r7, lr}
10002c6e:	b086      	sub	sp, #24
10002c70:	af02      	add	r7, sp, #8
10002c72:	60b9      	str	r1, [r7, #8]
10002c74:	607a      	str	r2, [r7, #4]
10002c76:	603b      	str	r3, [r7, #0]
10002c78:	4603      	mov	r3, r0
10002c7a:	73fb      	strb	r3, [r7, #15]
    clock_configure_internal(clock, src, auxsrc, src_freq, 1u << CLOCKS_CLK_GPOUT0_DIV_INT_LSB);
10002c7c:	7bf8      	ldrb	r0, [r7, #15]
10002c7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
10002c82:	9300      	str	r3, [sp, #0]
10002c84:	683b      	ldr	r3, [r7, #0]
10002c86:	687a      	ldr	r2, [r7, #4]
10002c88:	68b9      	ldr	r1, [r7, #8]
10002c8a:	f7ff ff39 	bl	10002b00 <clock_configure_internal>
}
10002c8e:	bf00      	nop
10002c90:	3710      	adds	r7, #16
10002c92:	46bd      	mov	sp, r7
10002c94:	bd80      	pop	{r7, pc}
	...

10002c98 <clock_get_hz>:

/// \end::clock_configure[]

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(clock_handle_t clock) {
10002c98:	b480      	push	{r7}
10002c9a:	b083      	sub	sp, #12
10002c9c:	af00      	add	r7, sp, #0
10002c9e:	4603      	mov	r3, r0
10002ca0:	71fb      	strb	r3, [r7, #7]
    return configured_freq[clock];
10002ca2:	79fb      	ldrb	r3, [r7, #7]
10002ca4:	4a04      	ldr	r2, [pc, #16]	@ (10002cb8 <clock_get_hz+0x20>)
10002ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
10002caa:	4618      	mov	r0, r3
10002cac:	370c      	adds	r7, #12
10002cae:	46bd      	mov	sp, r7
10002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
10002cb4:	4770      	bx	lr
10002cb6:	bf00      	nop
10002cb8:	2000093c 	.word	0x2000093c

10002cbc <clock_set_reported_hz>:
/// \end::clock_get_hz[]

void clock_set_reported_hz(clock_handle_t clock, uint hz) {
10002cbc:	b480      	push	{r7}
10002cbe:	b083      	sub	sp, #12
10002cc0:	af00      	add	r7, sp, #0
10002cc2:	4603      	mov	r3, r0
10002cc4:	6039      	str	r1, [r7, #0]
10002cc6:	71fb      	strb	r3, [r7, #7]
    configured_freq[clock] = hz;
10002cc8:	79fb      	ldrb	r3, [r7, #7]
10002cca:	4905      	ldr	r1, [pc, #20]	@ (10002ce0 <clock_set_reported_hz+0x24>)
10002ccc:	683a      	ldr	r2, [r7, #0]
10002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
10002cd2:	bf00      	nop
10002cd4:	370c      	adds	r7, #12
10002cd6:	46bd      	mov	sp, r7
10002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
10002cdc:	4770      	bx	lr
10002cde:	bf00      	nop
10002ce0:	2000093c 	.word	0x2000093c

10002ce4 <reset_unreset_block_num_wait_blocking>:
/*! \brief Reset the specified HW block, and then bring at back out of reset and wait for completion
 *  \ingroup hardware_resets
 *
 * \param block_num the block number
 */
static inline void reset_unreset_block_num_wait_blocking(uint block_num) {
10002ce4:	b480      	push	{r7}
10002ce6:	b08d      	sub	sp, #52	@ 0x34
10002ce8:	af00      	add	r7, sp, #0
10002cea:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_RESETS, block_num > NUM_RESETS);
    reset_block_reg_mask(&resets_hw->reset, 1u << block_num);
10002cec:	2201      	movs	r2, #1
10002cee:	687b      	ldr	r3, [r7, #4]
10002cf0:	fa02 f303 	lsl.w	r3, r2, r3
10002cf4:	4a19      	ldr	r2, [pc, #100]	@ (10002d5c <reset_unreset_block_num_wait_blocking+0x78>)
10002cf6:	61ba      	str	r2, [r7, #24]
10002cf8:	617b      	str	r3, [r7, #20]
10002cfa:	69bb      	ldr	r3, [r7, #24]
10002cfc:	613b      	str	r3, [r7, #16]
10002cfe:	697b      	ldr	r3, [r7, #20]
10002d00:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002d02:	693b      	ldr	r3, [r7, #16]
10002d04:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10002d08:	461a      	mov	r2, r3
10002d0a:	68fb      	ldr	r3, [r7, #12]
10002d0c:	6013      	str	r3, [r2, #0]
}
10002d0e:	bf00      	nop
}
10002d10:	bf00      	nop
    unreset_block_reg_mask_wait_blocking(&resets_hw->reset, &resets_hw->reset_done, 1u << block_num);
10002d12:	2201      	movs	r2, #1
10002d14:	687b      	ldr	r3, [r7, #4]
10002d16:	fa02 f303 	lsl.w	r3, r2, r3
10002d1a:	4a10      	ldr	r2, [pc, #64]	@ (10002d5c <reset_unreset_block_num_wait_blocking+0x78>)
10002d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
10002d1e:	4a10      	ldr	r2, [pc, #64]	@ (10002d60 <reset_unreset_block_num_wait_blocking+0x7c>)
10002d20:	62ba      	str	r2, [r7, #40]	@ 0x28
10002d22:	627b      	str	r3, [r7, #36]	@ 0x24
10002d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10002d26:	623b      	str	r3, [r7, #32]
10002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002d2a:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002d2c:	6a3b      	ldr	r3, [r7, #32]
10002d2e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002d32:	461a      	mov	r2, r3
10002d34:	69fb      	ldr	r3, [r7, #28]
10002d36:	6013      	str	r3, [r2, #0]
}
10002d38:	bf00      	nop
    while (~*reset_done & mask)
10002d3a:	e000      	b.n	10002d3e <reset_unreset_block_num_wait_blocking+0x5a>
10002d3c:	bf00      	nop
10002d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10002d40:	681b      	ldr	r3, [r3, #0]
10002d42:	43da      	mvns	r2, r3
10002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002d46:	4013      	ands	r3, r2
10002d48:	2b00      	cmp	r3, #0
10002d4a:	d1f7      	bne.n	10002d3c <reset_unreset_block_num_wait_blocking+0x58>
}
10002d4c:	bf00      	nop
}
10002d4e:	bf00      	nop
10002d50:	3734      	adds	r7, #52	@ 0x34
10002d52:	46bd      	mov	sp, r7
10002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d58:	4770      	bx	lr
10002d5a:	bf00      	nop
10002d5c:	40020000 	.word	0x40020000
10002d60:	40020008 	.word	0x40020008

10002d64 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10002d64:	b580      	push	{r7, lr}
10002d66:	b08c      	sub	sp, #48	@ 0x30
10002d68:	af00      	add	r7, sp, #0
10002d6a:	60f8      	str	r0, [r7, #12]
10002d6c:	60b9      	str	r1, [r7, #8]
10002d6e:	607a      	str	r2, [r7, #4]
10002d70:	603b      	str	r3, [r7, #0]
    uint32_t ref_freq = XOSC_HZ / refdiv;
10002d72:	4a4c      	ldr	r2, [pc, #304]	@ (10002ea4 <pll_init+0x140>)
10002d74:	68bb      	ldr	r3, [r7, #8]
10002d76:	fbb2 f3f3 	udiv	r3, r2, r3
10002d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Check vco freq is in an acceptable range
    assert(vco_freq >= PICO_PLL_VCO_MIN_FREQ_HZ && vco_freq <= PICO_PLL_VCO_MAX_FREQ_HZ);
10002d7c:	687b      	ldr	r3, [r7, #4]
10002d7e:	4a4a      	ldr	r2, [pc, #296]	@ (10002ea8 <pll_init+0x144>)
10002d80:	4293      	cmp	r3, r2
10002d82:	d903      	bls.n	10002d8c <pll_init+0x28>
10002d84:	687b      	ldr	r3, [r7, #4]
10002d86:	4a49      	ldr	r2, [pc, #292]	@ (10002eac <pll_init+0x148>)
10002d88:	4293      	cmp	r3, r2
10002d8a:	d905      	bls.n	10002d98 <pll_init+0x34>
10002d8c:	4b48      	ldr	r3, [pc, #288]	@ (10002eb0 <pll_init+0x14c>)
10002d8e:	4a49      	ldr	r2, [pc, #292]	@ (10002eb4 <pll_init+0x150>)
10002d90:	2111      	movs	r1, #17
10002d92:	4849      	ldr	r0, [pc, #292]	@ (10002eb8 <pll_init+0x154>)
10002d94:	f002 f9ca 	bl	1000512c <__assert_func>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / ref_freq;
10002d98:	687a      	ldr	r2, [r7, #4]
10002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
10002da0:	62bb      	str	r3, [r7, #40]	@ 0x28
/// \end::pll_init_calculations[]

    // fbdiv
    assert(fbdiv >= 16 && fbdiv <= 320);
10002da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10002da4:	2b0f      	cmp	r3, #15
10002da6:	d903      	bls.n	10002db0 <pll_init+0x4c>
10002da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10002daa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
10002dae:	d905      	bls.n	10002dbc <pll_init+0x58>
10002db0:	4b42      	ldr	r3, [pc, #264]	@ (10002ebc <pll_init+0x158>)
10002db2:	4a40      	ldr	r2, [pc, #256]	@ (10002eb4 <pll_init+0x150>)
10002db4:	2119      	movs	r1, #25
10002db6:	4840      	ldr	r0, [pc, #256]	@ (10002eb8 <pll_init+0x154>)
10002db8:	f002 f9b8 	bl	1000512c <__assert_func>

    // Check divider ranges
    assert((post_div1 >= 1 && post_div1 <= 7) && (post_div2 >= 1 && post_div2 <= 7));
10002dbc:	683b      	ldr	r3, [r7, #0]
10002dbe:	2b00      	cmp	r3, #0
10002dc0:	d008      	beq.n	10002dd4 <pll_init+0x70>
10002dc2:	683b      	ldr	r3, [r7, #0]
10002dc4:	2b07      	cmp	r3, #7
10002dc6:	d805      	bhi.n	10002dd4 <pll_init+0x70>
10002dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10002dca:	2b00      	cmp	r3, #0
10002dcc:	d002      	beq.n	10002dd4 <pll_init+0x70>
10002dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10002dd0:	2b07      	cmp	r3, #7
10002dd2:	d905      	bls.n	10002de0 <pll_init+0x7c>
10002dd4:	4b3a      	ldr	r3, [pc, #232]	@ (10002ec0 <pll_init+0x15c>)
10002dd6:	4a37      	ldr	r2, [pc, #220]	@ (10002eb4 <pll_init+0x150>)
10002dd8:	211c      	movs	r1, #28
10002dda:	4837      	ldr	r0, [pc, #220]	@ (10002eb8 <pll_init+0x154>)
10002ddc:	f002 f9a6 	bl	1000512c <__assert_func>
    // post_div1 should be >= post_div2
    // from appnote page 11
    // postdiv1 is designed to operate with a higher input frequency than postdiv2

    // Check that reference frequency is no greater than vco / 16
    assert(ref_freq <= (vco_freq / 16));
10002de0:	687b      	ldr	r3, [r7, #4]
10002de2:	091b      	lsrs	r3, r3, #4
10002de4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10002de6:	429a      	cmp	r2, r3
10002de8:	d905      	bls.n	10002df6 <pll_init+0x92>
10002dea:	4b36      	ldr	r3, [pc, #216]	@ (10002ec4 <pll_init+0x160>)
10002dec:	4a31      	ldr	r2, [pc, #196]	@ (10002eb4 <pll_init+0x150>)
10002dee:	2123      	movs	r1, #35	@ 0x23
10002df0:	4831      	ldr	r0, [pc, #196]	@ (10002eb8 <pll_init+0x154>)
10002df2:	f002 f99b 	bl	1000512c <__assert_func>

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002df6:	683b      	ldr	r3, [r7, #0]
10002df8:	041a      	lsls	r2, r3, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10002dfc:	031b      	lsls	r3, r3, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10002dfe:	4313      	orrs	r3, r2
10002e00:	627b      	str	r3, [r7, #36]	@ 0x24

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002e02:	68fb      	ldr	r3, [r7, #12]
10002e04:	681b      	ldr	r3, [r3, #0]
10002e06:	2b00      	cmp	r3, #0
10002e08:	da14      	bge.n	10002e34 <pll_init+0xd0>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10002e0a:	68fb      	ldr	r3, [r7, #12]
10002e0c:	681b      	ldr	r3, [r3, #0]
10002e0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
10002e12:	68ba      	ldr	r2, [r7, #8]
10002e14:	429a      	cmp	r2, r3
10002e16:	d10d      	bne.n	10002e34 <pll_init+0xd0>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002e18:	68fb      	ldr	r3, [r7, #12]
10002e1a:	689b      	ldr	r3, [r3, #8]
10002e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10002e20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10002e22:	429a      	cmp	r2, r3
10002e24:	d106      	bne.n	10002e34 <pll_init+0xd0>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10002e26:	68fb      	ldr	r3, [r7, #12]
10002e28:	68db      	ldr	r3, [r3, #12]
10002e2a:	f403 23ee 	and.w	r3, r3, #487424	@ 0x77000
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10002e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10002e30:	429a      	cmp	r2, r3
10002e32:	d032      	beq.n	10002e9a <pll_init+0x136>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    reset_unreset_block_num_wait_blocking(PLL_RESET_NUM(pll));
10002e34:	68fb      	ldr	r3, [r7, #12]
10002e36:	4a24      	ldr	r2, [pc, #144]	@ (10002ec8 <pll_init+0x164>)
10002e38:	4293      	cmp	r3, r2
10002e3a:	d101      	bne.n	10002e40 <pll_init+0xdc>
10002e3c:	230f      	movs	r3, #15
10002e3e:	e000      	b.n	10002e42 <pll_init+0xde>
10002e40:	230e      	movs	r3, #14
10002e42:	4618      	mov	r0, r3
10002e44:	f7ff ff4e 	bl	10002ce4 <reset_unreset_block_num_wait_blocking>

    // Load VCO-related dividers before starting VCO
    pll->cs = refdiv;
10002e48:	68fb      	ldr	r3, [r7, #12]
10002e4a:	68ba      	ldr	r2, [r7, #8]
10002e4c:	601a      	str	r2, [r3, #0]
    pll->fbdiv_int = fbdiv;
10002e4e:	68fb      	ldr	r3, [r7, #12]
10002e50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10002e52:	609a      	str	r2, [r3, #8]

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
10002e54:	2321      	movs	r3, #33	@ 0x21
10002e56:	623b      	str	r3, [r7, #32]
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10002e58:	68fb      	ldr	r3, [r7, #12]
10002e5a:	3304      	adds	r3, #4
10002e5c:	61fb      	str	r3, [r7, #28]
10002e5e:	6a3b      	ldr	r3, [r7, #32]
10002e60:	61bb      	str	r3, [r7, #24]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002e62:	69fb      	ldr	r3, [r7, #28]
10002e64:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002e68:	461a      	mov	r2, r3
10002e6a:	69bb      	ldr	r3, [r7, #24]
10002e6c:	6013      	str	r3, [r2, #0]
}
10002e6e:	bf00      	nop

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
10002e70:	e000      	b.n	10002e74 <pll_init+0x110>
10002e72:	bf00      	nop
10002e74:	68fb      	ldr	r3, [r7, #12]
10002e76:	681b      	ldr	r3, [r3, #0]
10002e78:	2b00      	cmp	r3, #0
10002e7a:	dafa      	bge.n	10002e72 <pll_init+0x10e>

    // Set up post dividers
    pll->prim = pdiv;
10002e7c:	68fb      	ldr	r3, [r7, #12]
10002e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10002e80:	60da      	str	r2, [r3, #12]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
10002e82:	68fb      	ldr	r3, [r7, #12]
10002e84:	3304      	adds	r3, #4
10002e86:	617b      	str	r3, [r7, #20]
10002e88:	2308      	movs	r3, #8
10002e8a:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002e8c:	697b      	ldr	r3, [r7, #20]
10002e8e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002e92:	461a      	mov	r2, r3
10002e94:	693b      	ldr	r3, [r7, #16]
10002e96:	6013      	str	r3, [r2, #0]
}
10002e98:	e000      	b.n	10002e9c <pll_init+0x138>
        return;
10002e9a:	bf00      	nop
/// \end::pll_init_finish[]
}
10002e9c:	3730      	adds	r7, #48	@ 0x30
10002e9e:	46bd      	mov	sp, r7
10002ea0:	bd80      	pop	{r7, pc}
10002ea2:	bf00      	nop
10002ea4:	00b71b00 	.word	0x00b71b00
10002ea8:	2cb4177f 	.word	0x2cb4177f
10002eac:	5f5e1000 	.word	0x5f5e1000
10002eb0:	10006af8 	.word	0x10006af8
10002eb4:	10006c0c 	.word	0x10006c0c
10002eb8:	10006b48 	.word	0x10006b48
10002ebc:	10006b88 	.word	0x10006b88
10002ec0:	10006ba4 	.word	0x10006ba4
10002ec4:	10006bf0 	.word	0x10006bf0
10002ec8:	40058000 	.word	0x40058000

10002ecc <watchdog_update>:
// Value to load when updating the watchdog

// tag::watchdog_update[]
static uint32_t load_value;

void watchdog_update(void) {
10002ecc:	b480      	push	{r7}
10002ece:	af00      	add	r7, sp, #0
    watchdog_hw->load = load_value;
10002ed0:	4a04      	ldr	r2, [pc, #16]	@ (10002ee4 <watchdog_update+0x18>)
10002ed2:	4b05      	ldr	r3, [pc, #20]	@ (10002ee8 <watchdog_update+0x1c>)
10002ed4:	681b      	ldr	r3, [r3, #0]
10002ed6:	6053      	str	r3, [r2, #4]
}
10002ed8:	bf00      	nop
10002eda:	46bd      	mov	sp, r7
10002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
10002ee0:	4770      	bx	lr
10002ee2:	bf00      	nop
10002ee4:	400d8000 	.word	0x400d8000
10002ee8:	2000096c 	.word	0x2000096c

10002eec <_watchdog_enable>:
#else
#define WATCHDOG_XFACTOR 1
#endif
// tag::watchdog_enable[]
// Helper function used by both watchdog_enable and watchdog_reboot
void _watchdog_enable(uint32_t delay_ms, bool pause_on_debug) {
10002eec:	b580      	push	{r7, lr}
10002eee:	b090      	sub	sp, #64	@ 0x40
10002ef0:	af00      	add	r7, sp, #0
10002ef2:	6078      	str	r0, [r7, #4]
10002ef4:	460b      	mov	r3, r1
10002ef6:	70fb      	strb	r3, [r7, #3]
10002ef8:	4b31      	ldr	r3, [pc, #196]	@ (10002fc0 <_watchdog_enable+0xd4>)
10002efa:	633b      	str	r3, [r7, #48]	@ 0x30
10002efc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
10002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10002f04:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002f08:	461a      	mov	r2, r3
10002f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10002f0c:	6013      	str	r3, [r2, #0]
}
10002f0e:	bf00      	nop
10002f10:	4b2c      	ldr	r3, [pc, #176]	@ (10002fc4 <_watchdog_enable+0xd8>)
10002f12:	63bb      	str	r3, [r7, #56]	@ 0x38
10002f14:	4b2c      	ldr	r3, [pc, #176]	@ (10002fc8 <_watchdog_enable+0xdc>)
10002f16:	637b      	str	r3, [r7, #52]	@ 0x34
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10002f1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10002f1e:	461a      	mov	r2, r3
10002f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10002f22:	6013      	str	r3, [r2, #0]
}
10002f24:	bf00      	nop
    hw_clear_bits(&watchdog_hw->ctrl, WATCHDOG_CTRL_ENABLE_BITS);

    // Reset everything apart from ROSC and XOSC
    hw_set_bits(&psm_hw->wdsel, PSM_WDSEL_BITS & ~(PSM_WDSEL_ROSC_BITS | PSM_WDSEL_XOSC_BITS));

    uint32_t dbg_bits = WATCHDOG_CTRL_PAUSE_DBG0_BITS |
10002f26:	f04f 63e0 	mov.w	r3, #117440512	@ 0x7000000
10002f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        WATCHDOG_CTRL_PAUSE_DBG1_BITS |
                        WATCHDOG_CTRL_PAUSE_JTAG_BITS;

    if (pause_on_debug) {
10002f2c:	78fb      	ldrb	r3, [r7, #3]
10002f2e:	2b00      	cmp	r3, #0
10002f30:	d00a      	beq.n	10002f48 <_watchdog_enable+0x5c>
10002f32:	4b23      	ldr	r3, [pc, #140]	@ (10002fc0 <_watchdog_enable+0xd4>)
10002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
10002f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10002f38:	627b      	str	r3, [r7, #36]	@ 0x24
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10002f3c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10002f40:	461a      	mov	r2, r3
10002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002f44:	6013      	str	r3, [r2, #0]
}
10002f46:	e00a      	b.n	10002f5e <_watchdog_enable+0x72>
10002f48:	4b1d      	ldr	r3, [pc, #116]	@ (10002fc0 <_watchdog_enable+0xd4>)
10002f4a:	623b      	str	r3, [r7, #32]
10002f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10002f4e:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002f50:	6a3b      	ldr	r3, [r7, #32]
10002f52:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002f56:	461a      	mov	r2, r3
10002f58:	69fb      	ldr	r3, [r7, #28]
10002f5a:	6013      	str	r3, [r2, #0]
}
10002f5c:	bf00      	nop
        hw_set_bits(&watchdog_hw->ctrl, dbg_bits);
    } else {
        hw_clear_bits(&watchdog_hw->ctrl, dbg_bits);
    }

    if (!delay_ms) {
10002f5e:	687b      	ldr	r3, [r7, #4]
10002f60:	2b00      	cmp	r3, #0
10002f62:	d10b      	bne.n	10002f7c <_watchdog_enable+0x90>
10002f64:	4b16      	ldr	r3, [pc, #88]	@ (10002fc0 <_watchdog_enable+0xd4>)
10002f66:	61bb      	str	r3, [r7, #24]
10002f68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
10002f6c:	617b      	str	r3, [r7, #20]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002f6e:	69bb      	ldr	r3, [r7, #24]
10002f70:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10002f74:	461a      	mov	r2, r3
10002f76:	697b      	ldr	r3, [r7, #20]
10002f78:	6013      	str	r3, [r2, #0]
}
10002f7a:	e01d      	b.n	10002fb8 <_watchdog_enable+0xcc>
        hw_set_bits(&watchdog_hw->ctrl, WATCHDOG_CTRL_TRIGGER_BITS);
    } else {
        load_value = delay_ms * 1000;
10002f7c:	687b      	ldr	r3, [r7, #4]
10002f7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
10002f82:	fb02 f303 	mul.w	r3, r2, r3
10002f86:	4a11      	ldr	r2, [pc, #68]	@ (10002fcc <_watchdog_enable+0xe0>)
10002f88:	6013      	str	r3, [r2, #0]
#if PICO_RP2040
        load_value *= 2;
#endif
        if (load_value > WATCHDOG_LOAD_BITS)
10002f8a:	4b10      	ldr	r3, [pc, #64]	@ (10002fcc <_watchdog_enable+0xe0>)
10002f8c:	681b      	ldr	r3, [r3, #0]
10002f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
10002f92:	d303      	bcc.n	10002f9c <_watchdog_enable+0xb0>
            load_value = WATCHDOG_LOAD_BITS;
10002f94:	4b0d      	ldr	r3, [pc, #52]	@ (10002fcc <_watchdog_enable+0xe0>)
10002f96:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
10002f9a:	601a      	str	r2, [r3, #0]

        watchdog_update();
10002f9c:	f7ff ff96 	bl	10002ecc <watchdog_update>
10002fa0:	4b07      	ldr	r3, [pc, #28]	@ (10002fc0 <_watchdog_enable+0xd4>)
10002fa2:	613b      	str	r3, [r7, #16]
10002fa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
10002fa8:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002faa:	693b      	ldr	r3, [r7, #16]
10002fac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10002fb0:	461a      	mov	r2, r3
10002fb2:	68fb      	ldr	r3, [r7, #12]
10002fb4:	6013      	str	r3, [r2, #0]
}
10002fb6:	bf00      	nop

        hw_set_bits(&watchdog_hw->ctrl, WATCHDOG_CTRL_ENABLE_BITS);
    }
}
10002fb8:	bf00      	nop
10002fba:	3740      	adds	r7, #64	@ 0x40
10002fbc:	46bd      	mov	sp, r7
10002fbe:	bd80      	pop	{r7, pc}
10002fc0:	400d8000 	.word	0x400d8000
10002fc4:	40018008 	.word	0x40018008
10002fc8:	01fffff3 	.word	0x01fffff3
10002fcc:	2000096c 	.word	0x2000096c

10002fd0 <watchdog_enable>:
// end::watchdog_enable[]

#define WATCHDOG_NON_REBOOT_MAGIC 0x6ab73121

void watchdog_enable(uint32_t delay_ms, bool pause_on_debug) {
10002fd0:	b580      	push	{r7, lr}
10002fd2:	b082      	sub	sp, #8
10002fd4:	af00      	add	r7, sp, #0
10002fd6:	6078      	str	r0, [r7, #4]
10002fd8:	460b      	mov	r3, r1
10002fda:	70fb      	strb	r3, [r7, #3]
    // update scratch[4] to distinguish from magic used for reboot to specific address, or 0 used to reboot
    // into regular flash path
    watchdog_hw->scratch[4] = WATCHDOG_NON_REBOOT_MAGIC;
10002fdc:	4b05      	ldr	r3, [pc, #20]	@ (10002ff4 <watchdog_enable+0x24>)
10002fde:	4a06      	ldr	r2, [pc, #24]	@ (10002ff8 <watchdog_enable+0x28>)
10002fe0:	61da      	str	r2, [r3, #28]
    _watchdog_enable(delay_ms, pause_on_debug);
10002fe2:	78fb      	ldrb	r3, [r7, #3]
10002fe4:	4619      	mov	r1, r3
10002fe6:	6878      	ldr	r0, [r7, #4]
10002fe8:	f7ff ff80 	bl	10002eec <_watchdog_enable>
}
10002fec:	bf00      	nop
10002fee:	3708      	adds	r7, #8
10002ff0:	46bd      	mov	sp, r7
10002ff2:	bd80      	pop	{r7, pc}
10002ff4:	400d8000 	.word	0x400d8000
10002ff8:	6ab73121 	.word	0x6ab73121

10002ffc <tick_start>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "hardware/ticks.h"

void tick_start(tick_gen_num_t tick, uint cycles) {
10002ffc:	b480      	push	{r7}
10002ffe:	b083      	sub	sp, #12
10003000:	af00      	add	r7, sp, #0
10003002:	4603      	mov	r3, r0
10003004:	6039      	str	r1, [r7, #0]
10003006:	71fb      	strb	r3, [r7, #7]
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
#else
    cycles <<= TICKS_WATCHDOG_CYCLES_LSB;
    valid_params_if(HARDWARE_TICKS, cycles <= TICKS_WATCHDOG_CYCLES_BITS);
    // On later hardware, separate tick generators for every tick destination.
    ticks_hw->ticks[tick].cycles = cycles;
10003008:	490c      	ldr	r1, [pc, #48]	@ (1000303c <tick_start+0x40>)
1000300a:	79fa      	ldrb	r2, [r7, #7]
1000300c:	4613      	mov	r3, r2
1000300e:	005b      	lsls	r3, r3, #1
10003010:	4413      	add	r3, r2
10003012:	009b      	lsls	r3, r3, #2
10003014:	440b      	add	r3, r1
10003016:	3304      	adds	r3, #4
10003018:	683a      	ldr	r2, [r7, #0]
1000301a:	601a      	str	r2, [r3, #0]
    ticks_hw->ticks[tick].ctrl = TICKS_WATCHDOG_CTRL_ENABLE_BITS;
1000301c:	4907      	ldr	r1, [pc, #28]	@ (1000303c <tick_start+0x40>)
1000301e:	79fa      	ldrb	r2, [r7, #7]
10003020:	4613      	mov	r3, r2
10003022:	005b      	lsls	r3, r3, #1
10003024:	4413      	add	r3, r2
10003026:	009b      	lsls	r3, r3, #2
10003028:	440b      	add	r3, r1
1000302a:	2201      	movs	r2, #1
1000302c:	601a      	str	r2, [r3, #0]
#endif
}
1000302e:	bf00      	nop
10003030:	370c      	adds	r7, #12
10003032:	46bd      	mov	sp, r7
10003034:	f85d 7b04 	ldr.w	r7, [sp], #4
10003038:	4770      	bx	lr
1000303a:	bf00      	nop
1000303c:	40108000 	.word	0x40108000

10003040 <xosc_init>:
// The DELAY field in xosc_hw->startup is 14 bits wide.
#if STARTUP_DELAY >= (1 << 13)
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
10003040:	b480      	push	{r7}
10003042:	b083      	sub	sp, #12
10003044:	af00      	add	r7, sp, #0
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
10003046:	4b0f      	ldr	r3, [pc, #60]	@ (10003084 <xosc_init+0x44>)
10003048:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
1000304c:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
1000304e:	4b0d      	ldr	r3, [pc, #52]	@ (10003084 <xosc_init+0x44>)
10003050:	222f      	movs	r2, #47	@ 0x2f
10003052:	60da      	str	r2, [r3, #12]
10003054:	4b0b      	ldr	r3, [pc, #44]	@ (10003084 <xosc_init+0x44>)
10003056:	607b      	str	r3, [r7, #4]
10003058:	4b0b      	ldr	r3, [pc, #44]	@ (10003088 <xosc_init+0x48>)
1000305a:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000305c:	687b      	ldr	r3, [r7, #4]
1000305e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10003062:	461a      	mov	r2, r3
10003064:	683b      	ldr	r3, [r7, #0]
10003066:	6013      	str	r3, [r2, #0]
}
10003068:	bf00      	nop

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS)) {
1000306a:	e000      	b.n	1000306e <xosc_init+0x2e>
1000306c:	bf00      	nop
1000306e:	4b05      	ldr	r3, [pc, #20]	@ (10003084 <xosc_init+0x44>)
10003070:	685b      	ldr	r3, [r3, #4]
10003072:	2b00      	cmp	r3, #0
10003074:	dafa      	bge.n	1000306c <xosc_init+0x2c>
        tight_loop_contents();
    }
}
10003076:	bf00      	nop
10003078:	bf00      	nop
1000307a:	370c      	adds	r7, #12
1000307c:	46bd      	mov	sp, r7
1000307e:	f85d 7b04 	ldr.w	r7, [sp], #4
10003082:	4770      	bx	lr
10003084:	40048000 	.word	0x40048000
10003088:	00fab000 	.word	0x00fab000

1000308c <runtime_run_initializers_from>:

void __weak hard_assertion_failure(void) {
    panic("Hard assert");
}

static void runtime_run_initializers_from(uintptr_t *from) {
1000308c:	b580      	push	{r7, lr}
1000308e:	b084      	sub	sp, #16
10003090:	af00      	add	r7, sp, #0
10003092:	6078      	str	r0, [r7, #4]
    extern uintptr_t __preinit_array_end;

    // Call each function in the list, based on the mask
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function value, not the address of it.
    for (uintptr_t *p = from; p < &__preinit_array_end; p++) {
10003094:	687b      	ldr	r3, [r7, #4]
10003096:	60fb      	str	r3, [r7, #12]
10003098:	e007      	b.n	100030aa <runtime_run_initializers_from+0x1e>
        uintptr_t val = *p;
1000309a:	68fb      	ldr	r3, [r7, #12]
1000309c:	681b      	ldr	r3, [r3, #0]
1000309e:	60bb      	str	r3, [r7, #8]
        ((void (*)(void))val)();
100030a0:	68bb      	ldr	r3, [r7, #8]
100030a2:	4798      	blx	r3
    for (uintptr_t *p = from; p < &__preinit_array_end; p++) {
100030a4:	68fb      	ldr	r3, [r7, #12]
100030a6:	3304      	adds	r3, #4
100030a8:	60fb      	str	r3, [r7, #12]
100030aa:	68fb      	ldr	r3, [r7, #12]
100030ac:	4a03      	ldr	r2, [pc, #12]	@ (100030bc <runtime_run_initializers_from+0x30>)
100030ae:	4293      	cmp	r3, r2
100030b0:	d3f3      	bcc.n	1000309a <runtime_run_initializers_from+0xe>
    }
}
100030b2:	bf00      	nop
100030b4:	bf00      	nop
100030b6:	3710      	adds	r7, #16
100030b8:	46bd      	mov	sp, r7
100030ba:	bd80      	pop	{r7, pc}
100030bc:	100064e8 	.word	0x100064e8

100030c0 <runtime_run_initializers>:

void runtime_run_initializers(void) {
100030c0:	b580      	push	{r7, lr}
100030c2:	af00      	add	r7, sp, #0
    extern uintptr_t __preinit_array_start;
    runtime_run_initializers_from(&__preinit_array_start);
100030c4:	4802      	ldr	r0, [pc, #8]	@ (100030d0 <runtime_run_initializers+0x10>)
100030c6:	f7ff ffe1 	bl	1000308c <runtime_run_initializers_from>
}
100030ca:	bf00      	nop
100030cc:	bd80      	pop	{r7, pc}
100030ce:	bf00      	nop
100030d0:	100064a8 	.word	0x100064a8

100030d4 <first_per_core_initializer>:
//
// We create a dummy initializer in __preinit_array.YYYYY (between the standard initializers
// and the per core initializers), so we find the first per core initializer. Whilst we could
// have done this via an entry in the linker script, we want to preserve backwards compatibility
// with RP2040 custom linker scripts.
static void first_per_core_initializer(void) {}
100030d4:	b480      	push	{r7}
100030d6:	af00      	add	r7, sp, #0
100030d8:	bf00      	nop
100030da:	46bd      	mov	sp, r7
100030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
100030e0:	4770      	bx	lr

100030e2 <runtime_init_bootrom_reset>:
// -------------------------------------
// 00050 PICO_RUNTIME_INIT_BOOTROM_RESET
// -------------------------------------
#if !PICO_RUNTIME_NO_INIT_BOOTROM_RESET
#include "pico/bootrom.h"
void __weak runtime_init_bootrom_reset(void) {
100030e2:	b580      	push	{r7, lr}
100030e4:	b082      	sub	sp, #8
100030e6:	af00      	add	r7, sp, #0
    // todo can we tell if we came in thru the bootrom where this is not necessary (this is necessary for debugger)
    rom_bootrom_state_reset_fn state_reset = rom_func_lookup(ROM_FUNC_BOOTROM_STATE_RESET);
100030e8:	f245 2053 	movw	r0, #21075	@ 0x5253
100030ec:	f000 f9a2 	bl	10003434 <rom_func_lookup>
100030f0:	4603      	mov	r3, r0
100030f2:	607b      	str	r3, [r7, #4]
    state_reset(BOOTROM_STATE_RESET_GLOBAL_STATE);
100030f4:	687b      	ldr	r3, [r7, #4]
100030f6:	2004      	movs	r0, #4
100030f8:	4798      	blx	r3
}
100030fa:	bf00      	nop
100030fc:	3708      	adds	r7, #8
100030fe:	46bd      	mov	sp, r7
10003100:	bd80      	pop	{r7, pc}

10003102 <runtime_init_per_core_bootrom_reset>:
// ----------------------------------------------
// 00051 PICO_RUNTIME_INIT_PER_CORE_BOOTROM_RESET
// ----------------------------------------------
#if !PICO_RUNTIME_NO_INIT_PER_CORE_BOOTROM_RESET
#include "pico/bootrom.h"
void __weak runtime_init_per_core_bootrom_reset(void) {
10003102:	b580      	push	{r7, lr}
10003104:	b082      	sub	sp, #8
10003106:	af00      	add	r7, sp, #0
    // todo can we tell if we came in thru the bootrom where this is not necessary (this is necessary for debugger)
    rom_bootrom_state_reset_fn state_reset = rom_func_lookup(ROM_FUNC_BOOTROM_STATE_RESET);
10003108:	f245 2053 	movw	r0, #21075	@ 0x5253
1000310c:	f000 f992 	bl	10003434 <rom_func_lookup>
10003110:	4603      	mov	r3, r0
10003112:	607b      	str	r3, [r7, #4]
    state_reset(BOOTROM_STATE_RESET_CURRENT_CORE);
10003114:	687b      	ldr	r3, [r7, #4]
10003116:	2001      	movs	r0, #1
10003118:	4798      	blx	r3
}
1000311a:	bf00      	nop
1000311c:	3708      	adds	r7, #8
1000311e:	46bd      	mov	sp, r7
10003120:	bd80      	pop	{r7, pc}
	...

10003124 <runtime_init_early_resets>:
// ------------------------------------
// 00100 PICO_RUNTIME_INIT_EARLY_RESETS
// ------------------------------------
#if !PICO_RUNTIME_NO_INIT_EARLY_RESETS
#include "hardware/resets.h"
void __weak runtime_init_early_resets(void) {
10003124:	b480      	push	{r7}
10003126:	b08d      	sub	sp, #52	@ 0x34
10003128:	af00      	add	r7, sp, #0
1000312a:	4b1b      	ldr	r3, [pc, #108]	@ (10003198 <runtime_init_early_resets+0x74>)
1000312c:	617b      	str	r3, [r7, #20]
1000312e:	4b1b      	ldr	r3, [pc, #108]	@ (1000319c <runtime_init_early_resets+0x78>)
10003130:	613b      	str	r3, [r7, #16]
10003132:	697b      	ldr	r3, [r7, #20]
10003134:	60fb      	str	r3, [r7, #12]
10003136:	693b      	ldr	r3, [r7, #16]
10003138:	60bb      	str	r3, [r7, #8]
1000313a:	68fb      	ldr	r3, [r7, #12]
1000313c:	607b      	str	r3, [r7, #4]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000313e:	68bb      	ldr	r3, [r7, #8]
10003140:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10003144:	461a      	mov	r2, r3
10003146:	687b      	ldr	r3, [r7, #4]
10003148:	6013      	str	r3, [r2, #0]
}
1000314a:	bf00      	nop
}
1000314c:	bf00      	nop
}
1000314e:	bf00      	nop
10003150:	4b13      	ldr	r3, [pc, #76]	@ (100031a0 <runtime_init_early_resets+0x7c>)
10003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
10003154:	4b11      	ldr	r3, [pc, #68]	@ (1000319c <runtime_init_early_resets+0x78>)
10003156:	62bb      	str	r3, [r7, #40]	@ 0x28
10003158:	4b12      	ldr	r3, [pc, #72]	@ (100031a4 <runtime_init_early_resets+0x80>)
1000315a:	627b      	str	r3, [r7, #36]	@ 0x24
1000315c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000315e:	623b      	str	r3, [r7, #32]
10003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10003162:	61fb      	str	r3, [r7, #28]
10003164:	6a3b      	ldr	r3, [r7, #32]
10003166:	61bb      	str	r3, [r7, #24]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003168:	69fb      	ldr	r3, [r7, #28]
1000316a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
1000316e:	461a      	mov	r2, r3
10003170:	69bb      	ldr	r3, [r7, #24]
10003172:	6013      	str	r3, [r2, #0]
}
10003174:	bf00      	nop
    while (~*reset_done & mask)
10003176:	e000      	b.n	1000317a <runtime_init_early_resets+0x56>
10003178:	bf00      	nop
1000317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000317c:	681b      	ldr	r3, [r3, #0]
1000317e:	43da      	mvns	r2, r3
10003180:	6a3b      	ldr	r3, [r7, #32]
10003182:	4013      	ands	r3, r2
10003184:	2b00      	cmp	r3, #0
10003186:	d1f7      	bne.n	10003178 <runtime_init_early_resets+0x54>
}
10003188:	bf00      	nop
}
1000318a:	bf00      	nop
            (1u << RESET_UART0) |
            (1u << RESET_UART1) |
            (1u << RESET_USBCTRL)
    ));

}
1000318c:	bf00      	nop
1000318e:	3734      	adds	r7, #52	@ 0x34
10003190:	46bd      	mov	sp, r7
10003192:	f85d 7b04 	ldr.w	r7, [sp], #4
10003196:	4770      	bx	lr
10003198:	efef3b7f 	.word	0xefef3b7f
1000319c:	40020000 	.word	0x40020000
100031a0:	03f3fff6 	.word	0x03f3fff6
100031a4:	40020008 	.word	0x40020008

100031a8 <runtime_init_usb_power_down>:
PICO_RUNTIME_INIT_FUNC_HW(runtime_init_early_resets, PICO_RUNTIME_INIT_EARLY_RESETS);
#endif

#if !PICO_RUNTIME_NO_INIT_USB_POWER_DOWN
#include "hardware/structs/usb.h"
void __weak runtime_init_usb_power_down(void) {
100031a8:	b480      	push	{r7}
100031aa:	b083      	sub	sp, #12
100031ac:	af00      	add	r7, sp, #0
    // Ensure USB PHY is in low-power state -- must be cleared before beginning USB operations. Only
    // do this if USB appears to be in the reset state, to avoid breaking core1-as-debugger.
    if (usb_hw->sie_ctrl == USB_SIE_CTRL_RESET) {
100031ae:	4b0b      	ldr	r3, [pc, #44]	@ (100031dc <runtime_init_usb_power_down+0x34>)
100031b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100031b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
100031b6:	d10b      	bne.n	100031d0 <runtime_init_usb_power_down+0x28>
100031b8:	4b09      	ldr	r3, [pc, #36]	@ (100031e0 <runtime_init_usb_power_down+0x38>)
100031ba:	607b      	str	r3, [r7, #4]
100031bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
100031c0:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100031c2:	687b      	ldr	r3, [r7, #4]
100031c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100031c8:	461a      	mov	r2, r3
100031ca:	683b      	ldr	r3, [r7, #0]
100031cc:	6013      	str	r3, [r2, #0]
}
100031ce:	bf00      	nop
        hw_set_bits(&usb_hw->sie_ctrl, USB_SIE_CTRL_TRANSCEIVER_PD_BITS);
    }
}
100031d0:	bf00      	nop
100031d2:	370c      	adds	r7, #12
100031d4:	46bd      	mov	sp, r7
100031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
100031da:	4770      	bx	lr
100031dc:	50110000 	.word	0x50110000
100031e0:	5011004c 	.word	0x5011004c

100031e4 <runtime_init_per_core_enable_coprocessors>:
#include "hardware/gpio.h" // PICO_USE_GPIO_COPROCESSOR is defined here
#include "hardware/structs/m33.h"
// ----------------------------------------------------
// 00200 PICO_RUNTIME_INIT_PER_CORE_ENABLE_COPROCESSORS
// ----------------------------------------------------
void __weak runtime_init_per_core_enable_coprocessors(void) {
100031e4:	b480      	push	{r7}
100031e6:	b083      	sub	sp, #12
100031e8:	af00      	add	r7, sp, #0
    // VFP copro (float)
    uint32_t cpacr = M33_CPACR_CP10_BITS;
100031ea:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
100031ee:	607b      	str	r3, [r7, #4]
#if HAS_DOUBLE_COPROCESSOR
    cpacr |= M33_CPACR_CP4_BITS;
100031f0:	687b      	ldr	r3, [r7, #4]
100031f2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
100031f6:	607b      	str	r3, [r7, #4]
#endif
#if PICO_USE_GPIO_COPROCESSOR
    cpacr |= M33_CPACR_CP0_BITS;
100031f8:	687b      	ldr	r3, [r7, #4]
100031fa:	f043 0303 	orr.w	r3, r3, #3
100031fe:	607b      	str	r3, [r7, #4]
#endif
    arm_cpu_hw->cpacr |= cpacr;
10003200:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
10003204:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
10003208:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
1000320c:	f04f 4160 	mov.w	r1, #3758096384	@ 0xe0000000
10003210:	687b      	ldr	r3, [r7, #4]
10003212:	4313      	orrs	r3, r2
10003214:	f501 4260 	add.w	r2, r1, #57344	@ 0xe000
10003218:	f8c2 3d88 	str.w	r3, [r2, #3464]	@ 0xd88
#if HAS_DOUBLE_COPROCESSOR
    asm volatile ("mrc p4,#0,r0,c0,c0,#1" : : : "r0"); // clear engaged flag via RCMP
1000321c:	ee10 0430 	cfmvrdh	r0, mvd0
#endif
}
10003220:	bf00      	nop
10003222:	370c      	adds	r7, #12
10003224:	46bd      	mov	sp, r7
10003226:	f85d 7b04 	ldr.w	r7, [sp], #4
1000322a:	4770      	bx	lr

1000322c <runtime_init_post_clock_resets>:
// ----------------------------------------------------
// 00600 PICO_RUNTIME_INIT_POST_CLOCK_RESETS
// ----------------------------------------------------
#if !PICO_RUNTIME_NO_INIT_POST_CLOCK_RESETS
#include "hardware/resets.h"
void __weak runtime_init_post_clock_resets(void) {
1000322c:	b480      	push	{r7}
1000322e:	b087      	sub	sp, #28
10003230:	af00      	add	r7, sp, #0
10003232:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
10003236:	617b      	str	r3, [r7, #20]
10003238:	4b10      	ldr	r3, [pc, #64]	@ (1000327c <runtime_init_post_clock_resets+0x50>)
1000323a:	613b      	str	r3, [r7, #16]
1000323c:	4b10      	ldr	r3, [pc, #64]	@ (10003280 <runtime_init_post_clock_resets+0x54>)
1000323e:	60fb      	str	r3, [r7, #12]
10003240:	697b      	ldr	r3, [r7, #20]
10003242:	60bb      	str	r3, [r7, #8]
10003244:	693b      	ldr	r3, [r7, #16]
10003246:	607b      	str	r3, [r7, #4]
10003248:	68bb      	ldr	r3, [r7, #8]
1000324a:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000324c:	687b      	ldr	r3, [r7, #4]
1000324e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003252:	461a      	mov	r2, r3
10003254:	683b      	ldr	r3, [r7, #0]
10003256:	6013      	str	r3, [r2, #0]
}
10003258:	bf00      	nop
    while (~*reset_done & mask)
1000325a:	e000      	b.n	1000325e <runtime_init_post_clock_resets+0x32>
1000325c:	bf00      	nop
1000325e:	68fb      	ldr	r3, [r7, #12]
10003260:	681b      	ldr	r3, [r3, #0]
10003262:	43da      	mvns	r2, r3
10003264:	68bb      	ldr	r3, [r7, #8]
10003266:	4013      	ands	r3, r2
10003268:	2b00      	cmp	r3, #0
1000326a:	d1f7      	bne.n	1000325c <runtime_init_post_clock_resets+0x30>
}
1000326c:	bf00      	nop
}
1000326e:	bf00      	nop
    // Peripheral clocks should now all be running
    static_assert(NUM_RESETS <= 32, "");
    unreset_block_mask_wait_blocking(RESETS_RESET_BITS);
}
10003270:	bf00      	nop
10003272:	371c      	adds	r7, #28
10003274:	46bd      	mov	sp, r7
10003276:	f85d 7b04 	ldr.w	r7, [sp], #4
1000327a:	4770      	bx	lr
1000327c:	40020000 	.word	0x40020000
10003280:	40020008 	.word	0x40020008

10003284 <runtime_init_spin_locks_reset>:
PICO_RUNTIME_INIT_FUNC_HW(runtime_init_rp2040_gpio_ie_disable, PICO_RUNTIME_INIT_RP2040_GPIO_IE_DISABLE);
#endif

#if !PICO_RUNTIME_NO_INIT_SPIN_LOCKS_RESET
#include "hardware/sync.h"
void __weak runtime_init_spin_locks_reset(void) {
10003284:	b580      	push	{r7, lr}
10003286:	af00      	add	r7, sp, #0
    spin_locks_reset();
10003288:	f7fd fb44 	bl	10000914 <spin_locks_reset>
}
1000328c:	bf00      	nop
1000328e:	bd80      	pop	{r7, pc}

10003290 <runtime_init_install_ram_vector_table>:

#if !PICO_RUNTIME_NO_INIT_INSTALL_RAM_VECTOR_TABLE
uint32_t __attribute__((section(".ram_vector_table"))) ram_vector_table[PICO_RAM_VECTOR_TABLE_SIZE];

#include "hardware/structs/scb.h"
void runtime_init_install_ram_vector_table(void) {
10003290:	b580      	push	{r7, lr}
10003292:	af00      	add	r7, sp, #0
    // Note on RISC-V the RAM vector table is initialised during crt0
#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH) && !defined(__riscv)
#if !PICO_NO_STORED_VECTOR_TABLE
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10003294:	4b07      	ldr	r3, [pc, #28]	@ (100032b4 <runtime_init_install_ram_vector_table+0x24>)
10003296:	689b      	ldr	r3, [r3, #8]
10003298:	461a      	mov	r2, r3
1000329a:	4b07      	ldr	r3, [pc, #28]	@ (100032b8 <runtime_init_install_ram_vector_table+0x28>)
1000329c:	4618      	mov	r0, r3
1000329e:	4611      	mov	r1, r2
100032a0:	f44f 7388 	mov.w	r3, #272	@ 0x110
100032a4:	461a      	mov	r2, r3
100032a6:	f003 f84b 	bl	10006340 <memcpy>
    for(uint i = VTABLE_FIRST_IRQ; i<count_of(ram_vector_table); i++) {
        ram_vector_table[i] = (uintptr_t)__unhandled_user_irq;
    }
#endif

    scb_hw->vtor = (uintptr_t) ram_vector_table;
100032aa:	4b02      	ldr	r3, [pc, #8]	@ (100032b4 <runtime_init_install_ram_vector_table+0x24>)
100032ac:	4a02      	ldr	r2, [pc, #8]	@ (100032b8 <runtime_init_install_ram_vector_table+0x28>)
100032ae:	609a      	str	r2, [r3, #8]
#endif
}
100032b0:	bf00      	nop
100032b2:	bd80      	pop	{r7, pc}
100032b4:	e000ed00 	.word	0xe000ed00
100032b8:	20000000 	.word	0x20000000

100032bc <running_on_fpga>:
static inline bool running_on_fpga(void) {return false;}
100032bc:	b480      	push	{r7}
100032be:	af00      	add	r7, sp, #0
100032c0:	2300      	movs	r3, #0
100032c2:	4618      	mov	r0, r3
100032c4:	46bd      	mov	sp, r7
100032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
100032ca:	4770      	bx	lr

100032cc <start_all_ticks>:
// an RTC clock tick of 46875Hz.  This frequency is relatively close to the
// customary 32 or 32.768kHz 'slow clock' crystals and provides good timing resolution.
#define RTC_CLOCK_FREQ_HZ       (USB_CLK_HZ / 1024)
#endif

static void start_all_ticks(void) {
100032cc:	b580      	push	{r7, lr}
100032ce:	b082      	sub	sp, #8
100032d0:	af00      	add	r7, sp, #0
    uint32_t cycles = clock_get_hz(clk_ref) / MHZ;
100032d2:	2004      	movs	r0, #4
100032d4:	f7ff fce0 	bl	10002c98 <clock_get_hz>
100032d8:	4603      	mov	r3, r0
100032da:	4a0c      	ldr	r2, [pc, #48]	@ (1000330c <start_all_ticks+0x40>)
100032dc:	fba2 2303 	umull	r2, r3, r2, r3
100032e0:	0c9b      	lsrs	r3, r3, #18
100032e2:	603b      	str	r3, [r7, #0]
    // Note RP2040 has a single tick generator in the watchdog which serves
    // watchdog, system timer and M0+ SysTick; The tick generator is clocked from clk_ref
    // but is now adapted by the hardware_ticks library for compatibility with RP2350
    // npte: hardware_ticks library now provides an adapter for RP2040

    for (int i = 0; i < (int)TICK_COUNT; ++i) {
100032e4:	2300      	movs	r3, #0
100032e6:	607b      	str	r3, [r7, #4]
100032e8:	e008      	b.n	100032fc <start_all_ticks+0x30>
        tick_start((tick_gen_num_t)i, cycles);
100032ea:	687b      	ldr	r3, [r7, #4]
100032ec:	b2db      	uxtb	r3, r3
100032ee:	6839      	ldr	r1, [r7, #0]
100032f0:	4618      	mov	r0, r3
100032f2:	f7ff fe83 	bl	10002ffc <tick_start>
    for (int i = 0; i < (int)TICK_COUNT; ++i) {
100032f6:	687b      	ldr	r3, [r7, #4]
100032f8:	3301      	adds	r3, #1
100032fa:	607b      	str	r3, [r7, #4]
100032fc:	687b      	ldr	r3, [r7, #4]
100032fe:	2b05      	cmp	r3, #5
10003300:	ddf3      	ble.n	100032ea <start_all_ticks+0x1e>
    }
}
10003302:	bf00      	nop
10003304:	bf00      	nop
10003306:	3708      	adds	r7, #8
10003308:	46bd      	mov	sp, r7
1000330a:	bd80      	pop	{r7, pc}
1000330c:	431bde83 	.word	0x431bde83

10003310 <runtime_init_clocks>:

void __weak runtime_init_clocks(void) {
10003310:	b580      	push	{r7, lr}
10003312:	b088      	sub	sp, #32
10003314:	af02      	add	r7, sp, #8
    // Note: These need setting *before* the ticks are started
    if (running_on_fpga()) {
10003316:	f7ff ffd1 	bl	100032bc <running_on_fpga>
1000331a:	4603      	mov	r3, r0
1000331c:	2b00      	cmp	r3, #0
1000331e:	d013      	beq.n	10003348 <runtime_init_clocks+0x38>
        for (uint i = 0; i < CLK_COUNT; i++) {
10003320:	2300      	movs	r3, #0
10003322:	617b      	str	r3, [r7, #20]
10003324:	e008      	b.n	10003338 <runtime_init_clocks+0x28>
            clock_set_reported_hz(i, 48 * MHZ);
10003326:	697b      	ldr	r3, [r7, #20]
10003328:	b2db      	uxtb	r3, r3
1000332a:	4938      	ldr	r1, [pc, #224]	@ (1000340c <runtime_init_clocks+0xfc>)
1000332c:	4618      	mov	r0, r3
1000332e:	f7ff fcc5 	bl	10002cbc <clock_set_reported_hz>
        for (uint i = 0; i < CLK_COUNT; i++) {
10003332:	697b      	ldr	r3, [r7, #20]
10003334:	3301      	adds	r3, #1
10003336:	617b      	str	r3, [r7, #20]
10003338:	697b      	ldr	r3, [r7, #20]
1000333a:	2b09      	cmp	r3, #9
1000333c:	d9f3      	bls.n	10003326 <runtime_init_clocks+0x16>
        }
        // clk_ref is 12MHz in both RP2040 and RP2350 FPGA
        clock_set_reported_hz(clk_ref, 12 * MHZ);
1000333e:	4934      	ldr	r1, [pc, #208]	@ (10003410 <runtime_init_clocks+0x100>)
10003340:	2004      	movs	r0, #4
10003342:	f7ff fcbb 	bl	10002cbc <clock_set_reported_hz>
10003346:	e05b      	b.n	10003400 <runtime_init_clocks+0xf0>
#if HAS_RP2040_RTC
        clock_set_reported_hz(clk_rtc, RTC_CLOCK_FREQ_HZ);
#endif
    } else {
        // Disable resus that may be enabled from previous software
        clocks_hw->resus.ctrl = 0;
10003348:	4b32      	ldr	r3, [pc, #200]	@ (10003414 <runtime_init_clocks+0x104>)
1000334a:	2200      	movs	r2, #0
1000334c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        // Enable the xosc
        xosc_init();
10003350:	f7ff fe76 	bl	10003040 <xosc_init>
10003354:	4b30      	ldr	r3, [pc, #192]	@ (10003418 <runtime_init_clocks+0x108>)
10003356:	613b      	str	r3, [r7, #16]
10003358:	2301      	movs	r3, #1
1000335a:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000335c:	693b      	ldr	r3, [r7, #16]
1000335e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003362:	461a      	mov	r2, r3
10003364:	68fb      	ldr	r3, [r7, #12]
10003366:	6013      	str	r3, [r2, #0]
}
10003368:	bf00      	nop

        // Before we touch PLLs, switch sys and ref cleanly away from their aux sources.
        hw_clear_bits(&clocks_hw->clk[clk_sys].ctrl, CLOCKS_CLK_SYS_CTRL_SRC_BITS);
        while (clocks_hw->clk[clk_sys].selected != 0x1)
1000336a:	e000      	b.n	1000336e <runtime_init_clocks+0x5e>
static __force_inline void tight_loop_contents(void) {}
1000336c:	bf00      	nop
1000336e:	4b29      	ldr	r3, [pc, #164]	@ (10003414 <runtime_init_clocks+0x104>)
10003370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10003372:	2b01      	cmp	r3, #1
10003374:	d1fa      	bne.n	1000336c <runtime_init_clocks+0x5c>
10003376:	4b29      	ldr	r3, [pc, #164]	@ (1000341c <runtime_init_clocks+0x10c>)
10003378:	60bb      	str	r3, [r7, #8]
1000337a:	2303      	movs	r3, #3
1000337c:	607b      	str	r3, [r7, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000337e:	68bb      	ldr	r3, [r7, #8]
10003380:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003384:	461a      	mov	r2, r3
10003386:	687b      	ldr	r3, [r7, #4]
10003388:	6013      	str	r3, [r2, #0]
}
1000338a:	bf00      	nop
            tight_loop_contents();
        hw_clear_bits(&clocks_hw->clk[clk_ref].ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (clocks_hw->clk[clk_ref].selected != 0x1)
1000338c:	e000      	b.n	10003390 <runtime_init_clocks+0x80>
1000338e:	bf00      	nop
10003390:	4b20      	ldr	r3, [pc, #128]	@ (10003414 <runtime_init_clocks+0x104>)
10003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003394:	2b01      	cmp	r3, #1
10003396:	d1fa      	bne.n	1000338e <runtime_init_clocks+0x7e>
            tight_loop_contents();

        /// \tag::pll_init[]
        pll_init(pll_sys, PLL_SYS_REFDIV, PLL_SYS_VCO_FREQ_HZ, PLL_SYS_POSTDIV1, PLL_SYS_POSTDIV2);
10003398:	2302      	movs	r3, #2
1000339a:	9300      	str	r3, [sp, #0]
1000339c:	2305      	movs	r3, #5
1000339e:	4a20      	ldr	r2, [pc, #128]	@ (10003420 <runtime_init_clocks+0x110>)
100033a0:	2101      	movs	r1, #1
100033a2:	4820      	ldr	r0, [pc, #128]	@ (10003424 <runtime_init_clocks+0x114>)
100033a4:	f7ff fcde 	bl	10002d64 <pll_init>
        pll_init(pll_usb, PLL_USB_REFDIV, PLL_USB_VCO_FREQ_HZ, PLL_USB_POSTDIV1, PLL_USB_POSTDIV2);
100033a8:	2305      	movs	r3, #5
100033aa:	9300      	str	r3, [sp, #0]
100033ac:	2305      	movs	r3, #5
100033ae:	4a1e      	ldr	r2, [pc, #120]	@ (10003428 <runtime_init_clocks+0x118>)
100033b0:	2101      	movs	r1, #1
100033b2:	481e      	ldr	r0, [pc, #120]	@ (1000342c <runtime_init_clocks+0x11c>)
100033b4:	f7ff fcd6 	bl	10002d64 <pll_init>
        //
        // - RP2350: there is an aux mux, but we are selecting one of the
        //   non-aux inputs to the glitchless mux, so the aux select doesn't
        //   matter. The value of 0 here happens to be the sys PLL.

        clock_configure_undivided(clk_ref,
100033b8:	4b15      	ldr	r3, [pc, #84]	@ (10003410 <runtime_init_clocks+0x100>)
100033ba:	2200      	movs	r2, #0
100033bc:	2102      	movs	r1, #2
100033be:	2004      	movs	r0, #4
100033c0:	f7ff fc54 	bl	10002c6c <clock_configure_undivided>
                        0,
                        XOSC_HZ);

        /// \tag::configure_clk_sys[]
        // CLK SYS = PLL SYS (usually) 125MHz / 1 = 125MHz
        clock_configure_undivided(clk_sys,
100033c4:	4b1a      	ldr	r3, [pc, #104]	@ (10003430 <runtime_init_clocks+0x120>)
100033c6:	2200      	movs	r2, #0
100033c8:	2101      	movs	r1, #1
100033ca:	2005      	movs	r0, #5
100033cc:	f7ff fc4e 	bl	10002c6c <clock_configure_undivided>
                        CLOCKS_CLK_SYS_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS,
                        SYS_CLK_HZ);
        /// \end::configure_clk_sys[]

        // CLK USB = PLL USB 48MHz / 1 = 48MHz
        clock_configure_undivided(clk_usb,
100033d0:	4b0e      	ldr	r3, [pc, #56]	@ (1000340c <runtime_init_clocks+0xfc>)
100033d2:	2200      	movs	r2, #0
100033d4:	2100      	movs	r1, #0
100033d6:	2008      	movs	r0, #8
100033d8:	f7ff fc48 	bl	10002c6c <clock_configure_undivided>
                        0, // No GLMUX
                        CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        USB_CLK_HZ);

        // CLK ADC = PLL USB 48MHZ / 1 = 48MHz
        clock_configure_undivided(clk_adc,
100033dc:	4b0b      	ldr	r3, [pc, #44]	@ (1000340c <runtime_init_clocks+0xfc>)
100033de:	2200      	movs	r2, #0
100033e0:	2100      	movs	r1, #0
100033e2:	2009      	movs	r0, #9
100033e4:	f7ff fc42 	bl	10002c6c <clock_configure_undivided>

#endif
#endif

        // CLK PERI = clk_sys. Used as reference clock for UART and SPI serial.
        clock_configure_undivided(clk_peri,
100033e8:	4b11      	ldr	r3, [pc, #68]	@ (10003430 <runtime_init_clocks+0x120>)
100033ea:	2200      	movs	r2, #0
100033ec:	2100      	movs	r1, #0
100033ee:	2006      	movs	r0, #6
100033f0:	f7ff fc3c 	bl	10002c6c <clock_configure_undivided>
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                        SYS_CLK_HZ);

#if HAS_HSTX
        // CLK_HSTX = clk_sys. Transmit bit clock for the HSTX peripheral.
        clock_configure_undivided(clk_hstx,
100033f4:	4b0e      	ldr	r3, [pc, #56]	@ (10003430 <runtime_init_clocks+0x120>)
100033f6:	2200      	movs	r2, #0
100033f8:	2100      	movs	r1, #0
100033fa:	2007      	movs	r0, #7
100033fc:	f7ff fc36 	bl	10002c6c <clock_configure_undivided>
#endif
    }

    // Finally, all clocks are configured so start the ticks
    // The ticks use clk_ref so now that is configured we can start them
    start_all_ticks();
10003400:	f7ff ff64 	bl	100032cc <start_all_ticks>
}
10003404:	bf00      	nop
10003406:	3718      	adds	r7, #24
10003408:	46bd      	mov	sp, r7
1000340a:	bd80      	pop	{r7, pc}
1000340c:	02dc6c00 	.word	0x02dc6c00
10003410:	00b71b00 	.word	0x00b71b00
10003414:	40010000 	.word	0x40010000
10003418:	4001003c 	.word	0x4001003c
1000341c:	40010030 	.word	0x40010030
10003420:	59682f00 	.word	0x59682f00
10003424:	40050000 	.word	0x40050000
10003428:	47868c00 	.word	0x47868c00
1000342c:	40058000 	.word	0x40058000
10003430:	08f0d180 	.word	0x08f0d180

10003434 <rom_func_lookup>:
#include "boot/picoboot.h"
#include "boot/picobin.h"

/// \tag::table_lookup[]

void *rom_func_lookup(uint32_t code) {
10003434:	b580      	push	{r7, lr}
10003436:	b086      	sub	sp, #24
10003438:	af00      	add	r7, sp, #0
1000343a:	6078      	str	r0, [r7, #4]
1000343c:	687b      	ldr	r3, [r7, #4]
1000343e:	617b      	str	r3, [r7, #20]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) (uintptr_t)*(uint16_t*)(BOOTROM_TABLE_LOOKUP_ENTRY_OFFSET + rom_offset_adjust);
    return rom_table_lookup(code, RT_FLAG_FUNC_RISCV);
#else
    // on ARM the function pointer is stored in the table, so we dereference it
    // via lookup() rather than lookup_entry()
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) (uintptr_t)*(uint16_t*)(BOOTROM_TABLE_LOOKUP_OFFSET);
10003440:	2313      	movs	r3, #19
10003442:	781b      	ldrb	r3, [r3, #0]
10003444:	b2db      	uxtb	r3, r3
10003446:	2b02      	cmp	r3, #2
10003448:	d101      	bne.n	1000344e <rom_func_lookup+0x1a>
1000344a:	2316      	movs	r3, #22
1000344c:	e000      	b.n	10003450 <rom_func_lookup+0x1c>
1000344e:	2318      	movs	r3, #24
10003450:	881b      	ldrh	r3, [r3, #0]
10003452:	613b      	str	r3, [r7, #16]
#ifndef __riscv
    // todo add a define to disable NS checking at all?
    // IDAU-Exempt addresses return S=1 when tested in the Secure state,
    // whereas executing a tt in the NonSecure state will always return S=0.
    uint32_t tt;
    pico_default_asm_volatile (
10003454:	2300      	movs	r3, #0
10003456:	e843 f300 	tt	r3, r3
1000345a:	60fb      	str	r3, [r7, #12]
        "movs %0, #0\n"
        "tt %0, %0\n"
        : "=r" (tt) : : "cc"
    );
    return !(tt & (1u << 22));
1000345c:	68fb      	ldr	r3, [r7, #12]
1000345e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
10003462:	2b00      	cmp	r3, #0
10003464:	bf0c      	ite	eq
10003466:	2301      	moveq	r3, #1
10003468:	2300      	movne	r3, #0
1000346a:	b2db      	uxtb	r3, r3
    if (pico_processor_state_is_nonsecure()) {
1000346c:	2b00      	cmp	r3, #0
1000346e:	d005      	beq.n	1000347c <rom_func_lookup+0x48>
        return rom_table_lookup(code, RT_FLAG_FUNC_ARM_NONSEC);
10003470:	693b      	ldr	r3, [r7, #16]
10003472:	2110      	movs	r1, #16
10003474:	6978      	ldr	r0, [r7, #20]
10003476:	4798      	blx	r3
10003478:	4603      	mov	r3, r0
1000347a:	e004      	b.n	10003486 <rom_func_lookup+0x52>
    } else {
        return rom_table_lookup(code, RT_FLAG_FUNC_ARM_SEC);
1000347c:	693b      	ldr	r3, [r7, #16]
1000347e:	2104      	movs	r1, #4
10003480:	6978      	ldr	r0, [r7, #20]
10003482:	4798      	blx	r3
10003484:	4603      	mov	r3, r0
    return rom_func_lookup_inline(code);
}
10003486:	4618      	mov	r0, r3
10003488:	3718      	adds	r7, #24
1000348a:	46bd      	mov	sp, r7
1000348c:	bd80      	pop	{r7, pc}
	...

10003490 <bootrom_acquire_lock_blocking>:
 *
 * If PICO_BOOTROM_LOCKING_ENABLED is false, this method does nothing
 *
 * \param lock_num the lock numbers - BOOTROM_LOCK_SHA_256, BOOTROM_LOCK_FLASH_OP or BOOTROM_LOCK_OTP
 */
static inline void bootrom_acquire_lock_blocking(uint lock_num) {
10003490:	b480      	push	{r7}
10003492:	b085      	sub	sp, #20
10003494:	af00      	add	r7, sp, #0
10003496:	6078      	str	r0, [r7, #4]
10003498:	687b      	ldr	r3, [r7, #4]
1000349a:	60bb      	str	r3, [r7, #8]
 * \param lock_num Bootlock ID
 * \return The bootlock instance
 */
__force_inline static boot_lock_t *boot_lock_instance(uint lock_num) {
    invalid_params_if(HARDWARE_BOOT_LOCK, lock_num >= NUM_BOOT_LOCKS);
    return (boot_lock_t *) (BOOTRAM_BASE + BOOTRAM_BOOTLOCK0_OFFSET + lock_num * 4);
1000349c:	68ba      	ldr	r2, [r7, #8]
1000349e:	4b0d      	ldr	r3, [pc, #52]	@ (100034d4 <bootrom_acquire_lock_blocking+0x44>)
100034a0:	4413      	add	r3, r2
100034a2:	009b      	lsls	r3, r3, #2
100034a4:	60fb      	str	r3, [r7, #12]
 */
__force_inline static void boot_lock_unsafe_blocking(boot_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these boot_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0)) { // read from bootlock register (tries to acquire the lock)
100034a6:	e000      	b.n	100034aa <bootrom_acquire_lock_blocking+0x1a>
static __force_inline void tight_loop_contents(void) {}
100034a8:	bf00      	nop
100034aa:	68fb      	ldr	r3, [r7, #12]
100034ac:	681b      	ldr	r3, [r3, #0]
100034ae:	2b00      	cmp	r3, #0
100034b0:	bf0c      	ite	eq
100034b2:	2301      	moveq	r3, #1
100034b4:	2300      	movne	r3, #0
100034b6:	b2db      	uxtb	r3, r3
100034b8:	2b00      	cmp	r3, #0
100034ba:	d1f5      	bne.n	100034a8 <bootrom_acquire_lock_blocking+0x18>
    pico_default_asm_volatile ("dmb" : : : "memory");
100034bc:	f3bf 8f5f 	dmb	sy
}
100034c0:	bf00      	nop
}
100034c2:	bf00      	nop
        tight_loop_contents();
    }
    __mem_fence_acquire();
}
100034c4:	bf00      	nop
    // unsafe as this is a long term lock (so no irq disable)
    boot_lock_unsafe_blocking(boot_lock_instance(lock_num));
#else
    (void)lock_num;
#endif
}
100034c6:	bf00      	nop
100034c8:	3714      	adds	r7, #20
100034ca:	46bd      	mov	sp, r7
100034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
100034d0:	4770      	bx	lr
100034d2:	bf00      	nop
100034d4:	10038203 	.word	0x10038203

100034d8 <runtime_init_bootrom_locking_enable>:
#include "pico/runtime_init.h"

#if PICO_BOOTROM_LOCKING_ENABLED
#if !PICO_RUNTIME_NO_INIT_BOOTROM_LOCKING_ENABLE
#include "hardware/sync.h"
void __weak runtime_init_bootrom_locking_enable(void) {
100034d8:	b580      	push	{r7, lr}
100034da:	af00      	add	r7, sp, #0
    bootrom_acquire_lock_blocking(BOOTROM_LOCK_ENABLE);
100034dc:	2007      	movs	r0, #7
100034de:	f7ff ffd7 	bl	10003490 <bootrom_acquire_lock_blocking>
}
100034e2:	bf00      	nop
100034e4:	bd80      	pop	{r7, pc}
	...

100034e8 <boot_locks_reset>:
 */
#include "hardware/boot_lock.h"
#include "pico/runtime_init.h"

#if NUM_BOOT_LOCKS > 0
void boot_locks_reset(void) {
100034e8:	b480      	push	{r7}
100034ea:	b085      	sub	sp, #20
100034ec:	af00      	add	r7, sp, #0
    GCC_Pragma("GCC unroll 1") // prevent GCC unrolling this loop which is 8 bytes per
    for (uint i = 0; i < NUM_BOOT_LOCKS; i++) {
100034ee:	2300      	movs	r3, #0
100034f0:	60fb      	str	r3, [r7, #12]
100034f2:	e011      	b.n	10003518 <boot_locks_reset+0x30>
100034f4:	68fb      	ldr	r3, [r7, #12]
100034f6:	607b      	str	r3, [r7, #4]
    return (boot_lock_t *) (BOOTRAM_BASE + BOOTRAM_BOOTLOCK0_OFFSET + lock_num * 4);
100034f8:	687a      	ldr	r2, [r7, #4]
100034fa:	4b0f      	ldr	r3, [pc, #60]	@ (10003538 <boot_locks_reset+0x50>)
100034fc:	4413      	add	r3, r2
100034fe:	009b      	lsls	r3, r3, #2
10003500:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("dmb" : : : "memory");
10003502:	f3bf 8f5f 	dmb	sy
}
10003506:	bf00      	nop
}
10003508:	bf00      	nop
 *
 * \param lock Bootlock instance
 */
__force_inline static void boot_unlock_unsafe(boot_lock_t *lock) {
    __mem_fence_release();
    *lock = 0; // write to bootlock register (release lock)
1000350a:	68bb      	ldr	r3, [r7, #8]
1000350c:	2200      	movs	r2, #0
1000350e:	601a      	str	r2, [r3, #0]
}
10003510:	bf00      	nop
10003512:	68fb      	ldr	r3, [r7, #12]
10003514:	3301      	adds	r3, #1
10003516:	60fb      	str	r3, [r7, #12]
10003518:	68fb      	ldr	r3, [r7, #12]
1000351a:	2b07      	cmp	r3, #7
1000351c:	bf94      	ite	ls
1000351e:	2301      	movls	r3, #1
10003520:	2300      	movhi	r3, #0
10003522:	b2db      	uxtb	r3, r3
10003524:	2b00      	cmp	r3, #0
10003526:	d1e5      	bne.n	100034f4 <boot_locks_reset+0xc>
        boot_unlock_unsafe(boot_lock_instance(i));
    }
}
10003528:	bf00      	nop
1000352a:	bf00      	nop
1000352c:	3714      	adds	r7, #20
1000352e:	46bd      	mov	sp, r7
10003530:	f85d 7b04 	ldr.w	r7, [sp], #4
10003534:	4770      	bx	lr
10003536:	bf00      	nop
10003538:	10038203 	.word	0x10038203

1000353c <runtime_init_boot_locks_reset>:
    return lock;
}

#if !PICO_RUNTIME_NO_INIT_BOOT_LOCKS_RESET
#include "hardware/sync.h"
void __weak runtime_init_boot_locks_reset(void) {
1000353c:	b580      	push	{r7, lr}
1000353e:	af00      	add	r7, sp, #0
    boot_locks_reset();
10003540:	f7ff ffd2 	bl	100034e8 <boot_locks_reset>
}
10003544:	bf00      	nop
10003546:	bd80      	pop	{r7, pc}

10003548 <generic_save_state>:
.endm

double_section __rp2350_dcp_engaged_state_save_restore
.thumb_func
generic_save_state:
  sub sp, #24
10003548:	b086      	sub	sp, #24
  push {r0, r1}
1000354a:	b403      	push	{r0, r1}
  // do save here
  PXMD r0, r1
1000354c:	fc51 0408 	mrrc2	4, 0, r0, r1, cr8
  strd r0, r1, [sp, #8 + 0]
10003550:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PYMD r0, r1
10003554:	fc51 0409 	mrrc2	4, 0, r0, r1, cr9
  strd r0, r1, [sp, #8 + 8]
10003558:	e9cd 0104 	strd	r0, r1, [sp, #16]
  REFD r0, r1
1000355c:	ec51 040a 	cfldrd	mvd0, [r1], {10}
  strd r0, r1, [sp, #8 + 16]
10003560:	e9cd 0106 	strd	r0, r1, [sp, #24]
  pop {r0, r1}
10003564:	bc03      	pop	{r0, r1}
  blx lr
10003566:	47f0      	blx	lr

10003568 <generic_restore_state>:
  // <- wrapped function returns here
  // fall through into restore:
.thumb_func
generic_restore_state:
  // do restore here
  pop {r12, r14}
10003568:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
  WXMD r12, r14
1000356c:	ec4e c400 	cfstrd	mvd12, [lr], {-0}
  pop {r12, r14}
10003570:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
  WYMD r12, r14
10003574:	ec4e c401 	cfstrd	mvd12, [lr], {1}
  pop {r12, r14}
10003578:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
  WEFD r12, r14
1000357c:	ec4e c402 	cfstrd	mvd12, [lr], {2}
  pop {pc}
10003580:	bd00      	pop	{pc}
10003582:	0000      	movs	r0, r0

// ============== ARITHMETIC FUNCTIONS ===============

double_wrapper_section __aeabi_dadd
saving_func wrapper __aeabi_dadd
10003584:	b500      	push	{lr}
10003586:	f7ff ffdf 	bl	10003548 <generic_save_state>
1000358a:	e002      	b.n	10003592 <__wrap___aeabi_dadd+0x6>

1000358c <__wrap___aeabi_dadd>:
1000358c:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003590:	d4f8      	bmi.n	10003584 <generic_restore_state+0x1c>
  dcp_dadd_m r0,r1,r0,r1,r2,r3
10003592:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003596:	ec43 2411 	cfstrd	mvd2, [r3], {17}
1000359a:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
1000359e:	ee10 0401 	cfmuls	mvf0, mvf0, mvf1
100035a2:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
100035a6:	ec51 0410 	cfldrd	mvd0, [r1], {16}
  saving_func_return
100035aa:	4770      	bx	lr

double_wrapper_section __aeabi_dsub
saving_func wrapper __aeabi_dsub
100035ac:	b500      	push	{lr}
100035ae:	f7ff ffcb 	bl	10003548 <generic_save_state>
100035b2:	e002      	b.n	100035ba <__wrap___aeabi_dsub+0x6>

100035b4 <__wrap___aeabi_dsub>:
100035b4:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
100035b8:	d4f8      	bmi.n	100035ac <__wrap___aeabi_dadd+0x20>
  dcp_dsub_m r0,r1,r0,r1,r2,r3
100035ba:	ec41 0410 	cfstrd	mvd0, [r1], {16}
100035be:	ec43 2411 	cfstrd	mvd2, [r3], {17}
100035c2:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
100035c6:	ee10 0421 	cfmuld	mvd0, mvd0, mvd1
100035ca:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
100035ce:	ec51 0430 	cfldrd	mvd0, [r1], {48}	@ 0x30
  saving_func_return
100035d2:	4770      	bx	lr
saving_func wrapper __aeabi_drsub
  dcp_dsub_m r0,r1,r2,r3,r0,r1
  saving_func_return

double_wrapper_section __aeabi_dmul
saving_func wrapper __aeabi_dmul
100035d4:	b500      	push	{lr}
100035d6:	f7ff ffb7 	bl	10003548 <generic_save_state>
100035da:	e002      	b.n	100035e2 <__wrap___aeabi_dmul+0x6>

100035dc <__wrap___aeabi_dmul>:
100035dc:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
100035e0:	d4f8      	bmi.n	100035d4 <__wrap___aeabi_dsub+0x20>

 // todo optimize this based on final decision on saving_func_entry
  push {r4,r14}
100035e2:	b510      	push	{r4, lr}
  dcp_dmul_m r0,r1,r0,r1,r2,r3,r0,r1,r2,r3,r4,r12,r14
100035e4:	ec41 0410 	cfstrd	mvd0, [r1], {16}
100035e8:	ec43 2411 	cfstrd	mvd2, [r3], {17}
100035ec:	ec51 0404 	cfldrd	mvd0, [r1], {4}
100035f0:	ec53 2405 	cfldrd	mvd2, [r3], {5}
100035f4:	fba0 4c02 	umull	r4, ip, r0, r2
100035f8:	f05f 0e00 	movs.w	lr, #0
100035fc:	fbe0 ce03 	umlal	ip, lr, r0, r3
10003600:	fbe1 ce02 	umlal	ip, lr, r1, r2
10003604:	ec4c 4420 	cfstrd	mvd4, [ip], {32}
10003608:	2400      	movs	r4, #0
1000360a:	fbe1 e403 	umlal	lr, r4, r1, r3
1000360e:	ec44 e430 	cfstrd	mvd14, [r4], {48}	@ 0x30
10003612:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
10003616:	ec51 0450 	cfldrd	mvd0, [r1], {80}	@ 0x50
 // todo optimize this based on final decision on saving_func_entry
  pop {r4,lr}
1000361a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  saving_func_return
1000361e:	4770      	bx	lr
saving_func regular ddiv_fast
  dcp_ddiv_fast_m r0,r1,r0,r1,r2,r3,r0,r1,r2,r3,r12
  saving_func_return

double_wrapper_section __aeabi_ddiv
saving_func wrapper __aeabi_ddiv
10003620:	b500      	push	{lr}
10003622:	f7ff ff91 	bl	10003548 <generic_save_state>
10003626:	e002      	b.n	1000362e <__wrap___aeabi_ddiv+0x6>

10003628 <__wrap___aeabi_ddiv>:
10003628:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
1000362c:	d4f8      	bmi.n	10003620 <__wrap___aeabi_dmul+0x44>
@ with correct rounding
  dcp_ddiv_m r0,r1,r0,r1,r2,r3,r0,r1,r2,r3,r12
1000362e:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003632:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003636:	ec51 0421 	cfldrd	mvd0, [r1], {33}	@ 0x21
1000363a:	fba0 1201 	umull	r1, r2, r0, r1
1000363e:	ea6f 0282 	mvn.w	r2, r2, lsl #2
10003642:	fb52 0010 	smmlar	r0, r2, r0, r0
10003646:	fb52 f212 	smmulr	r2, r2, r2
1000364a:	fb52 0010 	smmlar	r0, r2, r0, r0
1000364e:	eba0 7cd0 	sub.w	ip, r0, r0, lsr #31
10003652:	ec53 2404 	cfldrd	mvd2, [r3], {4}
10003656:	fb5c f113 	smmulr	r1, ip, r3
1000365a:	ec53 2415 	cfldrd	mvd2, [r3], {21}
1000365e:	fba1 2002 	umull	r2, r0, r1, r2
10003662:	fb01 0003 	mla	r0, r1, r3, r0
10003666:	ec53 2444 	cfldrd	mvd2, [r3], {68}	@ 0x44
1000366a:	eba2 0000 	sub.w	r0, r2, r0
1000366e:	fb50 f21c 	smmulr	r2, r0, ip
10003672:	ea4f 1311 	mov.w	r3, r1, lsr #4
10003676:	eb12 7001 	adds.w	r0, r2, r1, lsl #28
1000367a:	eb43 71e2 	adc.w	r1, r3, r2, asr #31
1000367e:	ea40 5051 	orr.w	r0, r0, r1, lsr #21
10003682:	ea20 5091 	bic.w	r0, r0, r1, lsr #22
10003686:	f020 0007 	bic.w	r0, r0, #7
1000368a:	ec53 2475 	cfldrd	mvd2, [r3], {117}	@ 0x75
1000368e:	fba0 3c02 	umull	r3, ip, r0, r2
10003692:	ec53 2475 	cfldrd	mvd2, [r3], {117}	@ 0x75
10003696:	fb00 cc03 	mla	ip, r0, r3, ip
1000369a:	fb01 cc02 	mla	ip, r1, r2, ip
1000369e:	ec53 2404 	cfldrd	mvd2, [r3], {4}
100036a2:	ebac 4c82 	sub.w	ip, ip, r2, lsl #18
100036a6:	ea40 705c 	orr.w	r0, r0, ip, lsr #29
100036aa:	f1a0 0001 	sub.w	r0, r0, #1
100036ae:	ec41 0440 	cfstrd	mvd0, [r1], {64}	@ 0x40
100036b2:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
100036b6:	ec51 0470 	cfldrd	mvd0, [r1], {112}	@ 0x70
  saving_func_return
100036ba:	4770      	bx	lr
@ with rounding
  dcp_double2float_m r0,r0,r1
  saving_func_return

double_wrapper_section __aeabi_i2d
saving_func wrapper __aeabi_i2d
100036bc:	b500      	push	{lr}
100036be:	f7ff ff43 	bl	10003548 <generic_save_state>
100036c2:	e002      	b.n	100036ca <__wrap___aeabi_i2d+0x6>

100036c4 <__wrap___aeabi_i2d>:
100036c4:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
100036c8:	d4f8      	bmi.n	100036bc <__wrap___aeabi_ddiv+0x94>
  dcp_int2double_m r0,r1,r0
100036ca:	ec40 0470 	cfstrd	mvd0, [r0], {112}	@ 0x70
100036ce:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
100036d2:	ee10 0421 	cfmuld	mvd0, mvd0, mvd1
100036d6:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
100036da:	ec51 0430 	cfldrd	mvd0, [r1], {48}	@ 0x30
  saving_func_return
100036de:	4770      	bx	lr

double_wrapper_section __aeabi_ui2d
saving_func wrapper __aeabi_ui2d
100036e0:	b500      	push	{lr}
100036e2:	f7ff ff31 	bl	10003548 <generic_save_state>
100036e6:	e002      	b.n	100036ee <__wrap___aeabi_ui2d+0x6>

100036e8 <__wrap___aeabi_ui2d>:
100036e8:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
100036ec:	d4f8      	bmi.n	100036e0 <__wrap___aeabi_i2d+0x1c>
  dcp_uint2double_m r0,r1,r0
100036ee:	ec40 0460 	cfstrd	mvd0, [r0], {96}	@ 0x60
100036f2:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
100036f6:	ee10 0421 	cfmuld	mvd0, mvd0, mvd1
100036fa:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
100036fe:	ec51 0430 	cfldrd	mvd0, [r1], {48}	@ 0x30
  saving_func_return
10003702:	4770      	bx	lr

double_wrapper_section __aeabi_d2iz
saving_func wrapper __aeabi_d2iz
10003704:	b500      	push	{lr}
10003706:	f7ff ff1f 	bl	10003548 <generic_save_state>
1000370a:	e002      	b.n	10003712 <__wrap___aeabi_d2iz+0x6>

1000370c <__wrap___aeabi_d2iz>:
1000370c:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003710:	d4f8      	bmi.n	10003704 <__wrap___aeabi_ui2d+0x1c>
@ with truncation towards 0
  dcp_double2int_m r0,r0,r1
10003712:	ec41 0480 	cfstrd	mvd0, [r1], {128}	@ 0x80
10003716:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
1000371a:	ee10 0401 	cfmuls	mvf0, mvf0, mvf1
1000371e:	ee80 0440 	cdp	4, 8, cr0, cr0, cr0, {2}
10003722:	ee10 0413 	cfmvrdl	r0, mvd0
  saving_func_return
10003726:	4770      	bx	lr

double_wrapper_section __aeabi_d2uiz
saving_func wrapper __aeabi_d2uiz
10003728:	b500      	push	{lr}
1000372a:	f7ff ff0d 	bl	10003548 <generic_save_state>
1000372e:	e002      	b.n	10003736 <__wrap___aeabi_d2uiz+0x6>

10003730 <__wrap___aeabi_d2uiz>:
10003730:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003734:	d4f8      	bmi.n	10003728 <__wrap___aeabi_d2iz+0x1c>
@ with truncation towards 0
  dcp_double2uint_m r0,r0,r1
10003736:	ec41 0480 	cfstrd	mvd0, [r1], {128}	@ 0x80
1000373a:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
1000373e:	ee10 0401 	cfmuls	mvf0, mvf0, mvf1
10003742:	ee80 0440 	cdp	4, 8, cr0, cr0, cr0, {2}
10003746:	ee10 0433 	mrc	4, 0, r0, cr0, cr3, {1}
  saving_func_return
1000374a:	4770      	bx	lr
  saving_func_return

// ============== COMPARISON FUNCTIONS ===============

double_wrapper_section __aeabi_dcmpun
saving_func wrapper __aeabi_dcmpun
1000374c:	b500      	push	{lr}
1000374e:	f7ff fefb 	bl	10003548 <generic_save_state>
10003752:	e002      	b.n	1000375a <__wrap___aeabi_dcmpun+0x6>

10003754 <__wrap___aeabi_dcmpun>:
10003754:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003758:	d4f8      	bmi.n	1000374c <__wrap___aeabi_d2uiz+0x1c>
  dcp_dcmp_m r0,r0,r1,r2,r3
1000375a:	ec41 0410 	cfstrd	mvd0, [r1], {16}
1000375e:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003762:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003766:	ee10 0430 	cfmvrdh	r0, mvd0
  // extract unordered bit
  ubfx r0, r0, #28, #1
1000376a:	f3c0 7000 	ubfx	r0, r0, #28, #1
  saving_func_return
1000376e:	4770      	bx	lr
  ubfx r0, r0, #30, #1
  saving_func_return

// int FUNC_NAME(__aeabi_dcmplt)(double, double)         result (1, 0) denotes (<, ?>=) [2], use for C <
double_wrapper_section __aeabi_dcmplt
saving_func wrapper __aeabi_dcmplt
10003770:	b500      	push	{lr}
10003772:	f7ff fee9 	bl	10003548 <generic_save_state>
10003776:	e002      	b.n	1000377e <__wrap___aeabi_dcmplt+0x6>

10003778 <__wrap___aeabi_dcmplt>:
10003778:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
1000377c:	d4f8      	bmi.n	10003770 <__wrap___aeabi_dcmpun+0x1c>
  dcp_dcmp_m apsr_nzcv,r2,r3,r0,r1
1000377e:	ec43 2410 	cfstrd	mvd2, [r3], {16}
10003782:	ec41 0411 	cfstrd	mvd0, [r1], {17}
10003786:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
1000378a:	ee10 f430 	cfmvrdh	pc, mvd0
  ite hi
1000378e:	bf8c      	ite	hi
  movhi r0,#1
10003790:	2001      	movhi	r0, #1
  movls r0,#0
10003792:	2000      	movls	r0, #0
  saving_func_return
10003794:	4770      	bx	lr
10003796:	bf00      	nop
  movlo r0,#0
  saving_func_return

// int FUNC_NAME(__aeabi_dcmpge)(double, double)         result (1, 0) denotes (>=, ?<) [2], use for C >=
double_wrapper_section __aeabi_dcmpge
saving_func wrapper __aeabi_dcmpge
10003798:	b500      	push	{lr}
1000379a:	f7ff fed5 	bl	10003548 <generic_save_state>
1000379e:	e002      	b.n	100037a6 <__wrap___aeabi_dcmpge+0x6>

100037a0 <__wrap___aeabi_dcmpge>:
100037a0:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
100037a4:	d4f8      	bmi.n	10003798 <__wrap___aeabi_dcmplt+0x20>
  dcp_dcmp_m apsr_nzcv,r0,r1,r2,r3
100037a6:	ec41 0410 	cfstrd	mvd0, [r1], {16}
100037aa:	ec43 2411 	cfstrd	mvd2, [r3], {17}
100037ae:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
100037b2:	ee10 f430 	cfmvrdh	pc, mvd0
  ite hs
100037b6:	bf2c      	ite	cs
  movhs r0,#1
100037b8:	2001      	movcs	r0, #1
  movlo r0,#0
100037ba:	2000      	movcc	r0, #0
  saving_func_return
100037bc:	4770      	bx	lr
100037be:	bf00      	nop

// int FUNC_NAME(__aeabi_dcmpgt)(double, double)         result (1, 0) denotes (>, ?<=) [2], use for C >
double_wrapper_section __aeabi_dcmpgt
saving_func wrapper __aeabi_dcmpgt
100037c0:	b500      	push	{lr}
100037c2:	f7ff fec1 	bl	10003548 <generic_save_state>
100037c6:	e002      	b.n	100037ce <__wrap___aeabi_dcmpgt+0x6>

100037c8 <__wrap___aeabi_dcmpgt>:
100037c8:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
100037cc:	d4f8      	bmi.n	100037c0 <__wrap___aeabi_dcmpge+0x20>
  dcp_dcmp_m apsr_nzcv,r0,r1,r2,r3
100037ce:	ec41 0410 	cfstrd	mvd0, [r1], {16}
100037d2:	ec43 2411 	cfstrd	mvd2, [r3], {17}
100037d6:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
100037da:	ee10 f430 	cfmvrdh	pc, mvd0
  ite hi
100037de:	bf8c      	ite	hi
  movhi r0,#1
100037e0:	2001      	movhi	r0, #1
  movls r0,#0
100037e2:	2000      	movls	r0, #0
  saving_func_return
100037e4:	4770      	bx	lr
100037e6:	bf00      	nop

100037e8 <_out_null>:
        ((char *) buffer)[idx] = character;
    }
}

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
100037e8:	b480      	push	{r7}
100037ea:	b085      	sub	sp, #20
100037ec:	af00      	add	r7, sp, #0
100037ee:	60b9      	str	r1, [r7, #8]
100037f0:	607a      	str	r2, [r7, #4]
100037f2:	603b      	str	r3, [r7, #0]
100037f4:	4603      	mov	r3, r0
100037f6:	73fb      	strb	r3, [r7, #15]
    (void) character;
    (void) buffer;
    (void) idx;
    (void) maxlen;
}
100037f8:	bf00      	nop
100037fa:	3714      	adds	r7, #20
100037fc:	46bd      	mov	sp, r7
100037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
10003802:	4770      	bx	lr

10003804 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx, size_t maxlen) {
10003804:	b580      	push	{r7, lr}
10003806:	b084      	sub	sp, #16
10003808:	af00      	add	r7, sp, #0
1000380a:	60b9      	str	r1, [r7, #8]
1000380c:	607a      	str	r2, [r7, #4]
1000380e:	603b      	str	r3, [r7, #0]
10003810:	4603      	mov	r3, r0
10003812:	73fb      	strb	r3, [r7, #15]
    (void) idx;
    (void) maxlen;
    if (character) {
10003814:	7bfb      	ldrb	r3, [r7, #15]
10003816:	2b00      	cmp	r3, #0
10003818:	d006      	beq.n	10003828 <_out_fct+0x24>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *) buffer)->fct(character, ((out_fct_wrap_type *) buffer)->arg);
1000381a:	68bb      	ldr	r3, [r7, #8]
1000381c:	681b      	ldr	r3, [r3, #0]
1000381e:	68ba      	ldr	r2, [r7, #8]
10003820:	6851      	ldr	r1, [r2, #4]
10003822:	7bfa      	ldrb	r2, [r7, #15]
10003824:	4610      	mov	r0, r2
10003826:	4798      	blx	r3
    }
}
10003828:	bf00      	nop
1000382a:	3710      	adds	r7, #16
1000382c:	46bd      	mov	sp, r7
1000382e:	bd80      	pop	{r7, pc}

10003830 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize) {
10003830:	b480      	push	{r7}
10003832:	b085      	sub	sp, #20
10003834:	af00      	add	r7, sp, #0
10003836:	6078      	str	r0, [r7, #4]
10003838:	6039      	str	r1, [r7, #0]
    const char *s;
    for (s = str; *s && maxsize--; ++s);
1000383a:	687b      	ldr	r3, [r7, #4]
1000383c:	60fb      	str	r3, [r7, #12]
1000383e:	e002      	b.n	10003846 <_strnlen_s+0x16>
10003840:	68fb      	ldr	r3, [r7, #12]
10003842:	3301      	adds	r3, #1
10003844:	60fb      	str	r3, [r7, #12]
10003846:	68fb      	ldr	r3, [r7, #12]
10003848:	781b      	ldrb	r3, [r3, #0]
1000384a:	2b00      	cmp	r3, #0
1000384c:	d004      	beq.n	10003858 <_strnlen_s+0x28>
1000384e:	683b      	ldr	r3, [r7, #0]
10003850:	1e5a      	subs	r2, r3, #1
10003852:	603a      	str	r2, [r7, #0]
10003854:	2b00      	cmp	r3, #0
10003856:	d1f3      	bne.n	10003840 <_strnlen_s+0x10>
    return (unsigned int) (s - str);
10003858:	68fa      	ldr	r2, [r7, #12]
1000385a:	687b      	ldr	r3, [r7, #4]
1000385c:	1ad3      	subs	r3, r2, r3
}
1000385e:	4618      	mov	r0, r3
10003860:	3714      	adds	r7, #20
10003862:	46bd      	mov	sp, r7
10003864:	f85d 7b04 	ldr.w	r7, [sp], #4
10003868:	4770      	bx	lr

1000386a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) {
1000386a:	b480      	push	{r7}
1000386c:	b083      	sub	sp, #12
1000386e:	af00      	add	r7, sp, #0
10003870:	4603      	mov	r3, r0
10003872:	71fb      	strb	r3, [r7, #7]
    return (ch >= '0') && (ch <= '9');
10003874:	79fb      	ldrb	r3, [r7, #7]
10003876:	2b2f      	cmp	r3, #47	@ 0x2f
10003878:	d904      	bls.n	10003884 <_is_digit+0x1a>
1000387a:	79fb      	ldrb	r3, [r7, #7]
1000387c:	2b39      	cmp	r3, #57	@ 0x39
1000387e:	d801      	bhi.n	10003884 <_is_digit+0x1a>
10003880:	2301      	movs	r3, #1
10003882:	e000      	b.n	10003886 <_is_digit+0x1c>
10003884:	2300      	movs	r3, #0
10003886:	f003 0301 	and.w	r3, r3, #1
1000388a:	b2db      	uxtb	r3, r3
}
1000388c:	4618      	mov	r0, r3
1000388e:	370c      	adds	r7, #12
10003890:	46bd      	mov	sp, r7
10003892:	f85d 7b04 	ldr.w	r7, [sp], #4
10003896:	4770      	bx	lr

10003898 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str) {
10003898:	b580      	push	{r7, lr}
1000389a:	b084      	sub	sp, #16
1000389c:	af00      	add	r7, sp, #0
1000389e:	6078      	str	r0, [r7, #4]
    unsigned int i = 0U;
100038a0:	2300      	movs	r3, #0
100038a2:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
100038a4:	e00e      	b.n	100038c4 <_atoi+0x2c>
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
100038a6:	68fa      	ldr	r2, [r7, #12]
100038a8:	4613      	mov	r3, r2
100038aa:	009b      	lsls	r3, r3, #2
100038ac:	4413      	add	r3, r2
100038ae:	005b      	lsls	r3, r3, #1
100038b0:	4618      	mov	r0, r3
100038b2:	687b      	ldr	r3, [r7, #4]
100038b4:	681b      	ldr	r3, [r3, #0]
100038b6:	1c59      	adds	r1, r3, #1
100038b8:	687a      	ldr	r2, [r7, #4]
100038ba:	6011      	str	r1, [r2, #0]
100038bc:	781b      	ldrb	r3, [r3, #0]
100038be:	4403      	add	r3, r0
100038c0:	3b30      	subs	r3, #48	@ 0x30
100038c2:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
100038c4:	687b      	ldr	r3, [r7, #4]
100038c6:	681b      	ldr	r3, [r3, #0]
100038c8:	781b      	ldrb	r3, [r3, #0]
100038ca:	4618      	mov	r0, r3
100038cc:	f7ff ffcd 	bl	1000386a <_is_digit>
100038d0:	4603      	mov	r3, r0
100038d2:	2b00      	cmp	r3, #0
100038d4:	d1e7      	bne.n	100038a6 <_atoi+0xe>
    }
    return i;
100038d6:	68fb      	ldr	r3, [r7, #12]
}
100038d8:	4618      	mov	r0, r3
100038da:	3710      	adds	r7, #16
100038dc:	46bd      	mov	sp, r7
100038de:	bd80      	pop	{r7, pc}

100038e0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
100038e0:	b590      	push	{r4, r7, lr}
100038e2:	b087      	sub	sp, #28
100038e4:	af00      	add	r7, sp, #0
100038e6:	60f8      	str	r0, [r7, #12]
100038e8:	60b9      	str	r1, [r7, #8]
100038ea:	607a      	str	r2, [r7, #4]
100038ec:	603b      	str	r3, [r7, #0]
    const size_t start_idx = idx;
100038ee:	687b      	ldr	r3, [r7, #4]
100038f0:	613b      	str	r3, [r7, #16]

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
100038f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100038f4:	f003 0302 	and.w	r3, r3, #2
100038f8:	2b00      	cmp	r3, #0
100038fa:	d125      	bne.n	10003948 <_out_rev+0x68>
100038fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100038fe:	f003 0301 	and.w	r3, r3, #1
10003902:	2b00      	cmp	r3, #0
10003904:	d120      	bne.n	10003948 <_out_rev+0x68>
        for (size_t i = len; i < width; i++) {
10003906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10003908:	617b      	str	r3, [r7, #20]
1000390a:	e00a      	b.n	10003922 <_out_rev+0x42>
            out(' ', buffer, idx++, maxlen);
1000390c:	687a      	ldr	r2, [r7, #4]
1000390e:	1c53      	adds	r3, r2, #1
10003910:	607b      	str	r3, [r7, #4]
10003912:	68fc      	ldr	r4, [r7, #12]
10003914:	683b      	ldr	r3, [r7, #0]
10003916:	68b9      	ldr	r1, [r7, #8]
10003918:	2020      	movs	r0, #32
1000391a:	47a0      	blx	r4
        for (size_t i = len; i < width; i++) {
1000391c:	697b      	ldr	r3, [r7, #20]
1000391e:	3301      	adds	r3, #1
10003920:	617b      	str	r3, [r7, #20]
10003922:	697a      	ldr	r2, [r7, #20]
10003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003926:	429a      	cmp	r2, r3
10003928:	d3f0      	bcc.n	1000390c <_out_rev+0x2c>
        }
    }

    // reverse string
    while (len) {
1000392a:	e00d      	b.n	10003948 <_out_rev+0x68>
        out(buf[--len], buffer, idx++, maxlen);
1000392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000392e:	3b01      	subs	r3, #1
10003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
10003932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10003936:	4413      	add	r3, r2
10003938:	7818      	ldrb	r0, [r3, #0]
1000393a:	687a      	ldr	r2, [r7, #4]
1000393c:	1c53      	adds	r3, r2, #1
1000393e:	607b      	str	r3, [r7, #4]
10003940:	68fc      	ldr	r4, [r7, #12]
10003942:	683b      	ldr	r3, [r7, #0]
10003944:	68b9      	ldr	r1, [r7, #8]
10003946:	47a0      	blx	r4
    while (len) {
10003948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000394a:	2b00      	cmp	r3, #0
1000394c:	d1ee      	bne.n	1000392c <_out_rev+0x4c>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
1000394e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10003950:	f003 0302 	and.w	r3, r3, #2
10003954:	2b00      	cmp	r3, #0
10003956:	d00e      	beq.n	10003976 <_out_rev+0x96>
        while (idx - start_idx < width) {
10003958:	e007      	b.n	1000396a <_out_rev+0x8a>
            out(' ', buffer, idx++, maxlen);
1000395a:	687a      	ldr	r2, [r7, #4]
1000395c:	1c53      	adds	r3, r2, #1
1000395e:	607b      	str	r3, [r7, #4]
10003960:	68fc      	ldr	r4, [r7, #12]
10003962:	683b      	ldr	r3, [r7, #0]
10003964:	68b9      	ldr	r1, [r7, #8]
10003966:	2020      	movs	r0, #32
10003968:	47a0      	blx	r4
        while (idx - start_idx < width) {
1000396a:	687a      	ldr	r2, [r7, #4]
1000396c:	693b      	ldr	r3, [r7, #16]
1000396e:	1ad3      	subs	r3, r2, r3
10003970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10003972:	429a      	cmp	r2, r3
10003974:	d8f1      	bhi.n	1000395a <_out_rev+0x7a>
        }
    }

    return idx;
10003976:	687b      	ldr	r3, [r7, #4]
}
10003978:	4618      	mov	r0, r3
1000397a:	371c      	adds	r7, #28
1000397c:	46bd      	mov	sp, r7
1000397e:	bd90      	pop	{r4, r7, pc}

10003980 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
10003980:	b580      	push	{r7, lr}
10003982:	b088      	sub	sp, #32
10003984:	af04      	add	r7, sp, #16
10003986:	60f8      	str	r0, [r7, #12]
10003988:	60b9      	str	r1, [r7, #8]
1000398a:	607a      	str	r2, [r7, #4]
1000398c:	603b      	str	r3, [r7, #0]
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
1000398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003990:	f003 0302 	and.w	r3, r3, #2
10003994:	2b00      	cmp	r3, #0
10003996:	d136      	bne.n	10003a06 <_ntoa_format+0x86>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000399a:	2b00      	cmp	r3, #0
1000399c:	d018      	beq.n	100039d0 <_ntoa_format+0x50>
1000399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100039a0:	f003 0301 	and.w	r3, r3, #1
100039a4:	2b00      	cmp	r3, #0
100039a6:	d013      	beq.n	100039d0 <_ntoa_format+0x50>
100039a8:	f897 3020 	ldrb.w	r3, [r7, #32]
100039ac:	2b00      	cmp	r3, #0
100039ae:	d104      	bne.n	100039ba <_ntoa_format+0x3a>
100039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100039b2:	f003 030c 	and.w	r3, r3, #12
100039b6:	2b00      	cmp	r3, #0
100039b8:	d00a      	beq.n	100039d0 <_ntoa_format+0x50>
            width--;
100039ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100039bc:	3b01      	subs	r3, #1
100039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100039c0:	e006      	b.n	100039d0 <_ntoa_format+0x50>
            buf[len++] = '0';
100039c2:	69fb      	ldr	r3, [r7, #28]
100039c4:	1c5a      	adds	r2, r3, #1
100039c6:	61fa      	str	r2, [r7, #28]
100039c8:	69ba      	ldr	r2, [r7, #24]
100039ca:	4413      	add	r3, r2
100039cc:	2230      	movs	r2, #48	@ 0x30
100039ce:	701a      	strb	r2, [r3, #0]
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100039d0:	69fa      	ldr	r2, [r7, #28]
100039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100039d4:	429a      	cmp	r2, r3
100039d6:	d20a      	bcs.n	100039ee <_ntoa_format+0x6e>
100039d8:	69fb      	ldr	r3, [r7, #28]
100039da:	2b1f      	cmp	r3, #31
100039dc:	d9f1      	bls.n	100039c2 <_ntoa_format+0x42>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100039de:	e006      	b.n	100039ee <_ntoa_format+0x6e>
            buf[len++] = '0';
100039e0:	69fb      	ldr	r3, [r7, #28]
100039e2:	1c5a      	adds	r2, r3, #1
100039e4:	61fa      	str	r2, [r7, #28]
100039e6:	69ba      	ldr	r2, [r7, #24]
100039e8:	4413      	add	r3, r2
100039ea:	2230      	movs	r2, #48	@ 0x30
100039ec:	701a      	strb	r2, [r3, #0]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100039f0:	f003 0301 	and.w	r3, r3, #1
100039f4:	2b00      	cmp	r3, #0
100039f6:	d006      	beq.n	10003a06 <_ntoa_format+0x86>
100039f8:	69fa      	ldr	r2, [r7, #28]
100039fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100039fc:	429a      	cmp	r2, r3
100039fe:	d202      	bcs.n	10003a06 <_ntoa_format+0x86>
10003a00:	69fb      	ldr	r3, [r7, #28]
10003a02:	2b1f      	cmp	r3, #31
10003a04:	d9ec      	bls.n	100039e0 <_ntoa_format+0x60>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
10003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003a08:	f003 0310 	and.w	r3, r3, #16
10003a0c:	2b00      	cmp	r3, #0
10003a0e:	d058      	beq.n	10003ac2 <_ntoa_format+0x142>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
10003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10003a16:	2b00      	cmp	r3, #0
10003a18:	d116      	bne.n	10003a48 <_ntoa_format+0xc8>
10003a1a:	69fb      	ldr	r3, [r7, #28]
10003a1c:	2b00      	cmp	r3, #0
10003a1e:	d013      	beq.n	10003a48 <_ntoa_format+0xc8>
10003a20:	69fa      	ldr	r2, [r7, #28]
10003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10003a24:	429a      	cmp	r2, r3
10003a26:	d003      	beq.n	10003a30 <_ntoa_format+0xb0>
10003a28:	69fa      	ldr	r2, [r7, #28]
10003a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10003a2c:	429a      	cmp	r2, r3
10003a2e:	d10b      	bne.n	10003a48 <_ntoa_format+0xc8>
            len--;
10003a30:	69fb      	ldr	r3, [r7, #28]
10003a32:	3b01      	subs	r3, #1
10003a34:	61fb      	str	r3, [r7, #28]
            if (len && (base == 16U)) {
10003a36:	69fb      	ldr	r3, [r7, #28]
10003a38:	2b00      	cmp	r3, #0
10003a3a:	d005      	beq.n	10003a48 <_ntoa_format+0xc8>
10003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10003a3e:	2b10      	cmp	r3, #16
10003a40:	d102      	bne.n	10003a48 <_ntoa_format+0xc8>
                len--;
10003a42:	69fb      	ldr	r3, [r7, #28]
10003a44:	3b01      	subs	r3, #1
10003a46:	61fb      	str	r3, [r7, #28]
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10003a4a:	2b10      	cmp	r3, #16
10003a4c:	d10f      	bne.n	10003a6e <_ntoa_format+0xee>
10003a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003a50:	f003 0320 	and.w	r3, r3, #32
10003a54:	2b00      	cmp	r3, #0
10003a56:	d10a      	bne.n	10003a6e <_ntoa_format+0xee>
10003a58:	69fb      	ldr	r3, [r7, #28]
10003a5a:	2b1f      	cmp	r3, #31
10003a5c:	d807      	bhi.n	10003a6e <_ntoa_format+0xee>
            buf[len++] = 'x';
10003a5e:	69fb      	ldr	r3, [r7, #28]
10003a60:	1c5a      	adds	r2, r3, #1
10003a62:	61fa      	str	r2, [r7, #28]
10003a64:	69ba      	ldr	r2, [r7, #24]
10003a66:	4413      	add	r3, r2
10003a68:	2278      	movs	r2, #120	@ 0x78
10003a6a:	701a      	strb	r2, [r3, #0]
10003a6c:	e01f      	b.n	10003aae <_ntoa_format+0x12e>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10003a70:	2b10      	cmp	r3, #16
10003a72:	d10f      	bne.n	10003a94 <_ntoa_format+0x114>
10003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003a76:	f003 0320 	and.w	r3, r3, #32
10003a7a:	2b00      	cmp	r3, #0
10003a7c:	d00a      	beq.n	10003a94 <_ntoa_format+0x114>
10003a7e:	69fb      	ldr	r3, [r7, #28]
10003a80:	2b1f      	cmp	r3, #31
10003a82:	d807      	bhi.n	10003a94 <_ntoa_format+0x114>
            buf[len++] = 'X';
10003a84:	69fb      	ldr	r3, [r7, #28]
10003a86:	1c5a      	adds	r2, r3, #1
10003a88:	61fa      	str	r2, [r7, #28]
10003a8a:	69ba      	ldr	r2, [r7, #24]
10003a8c:	4413      	add	r3, r2
10003a8e:	2258      	movs	r2, #88	@ 0x58
10003a90:	701a      	strb	r2, [r3, #0]
10003a92:	e00c      	b.n	10003aae <_ntoa_format+0x12e>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10003a96:	2b02      	cmp	r3, #2
10003a98:	d109      	bne.n	10003aae <_ntoa_format+0x12e>
10003a9a:	69fb      	ldr	r3, [r7, #28]
10003a9c:	2b1f      	cmp	r3, #31
10003a9e:	d806      	bhi.n	10003aae <_ntoa_format+0x12e>
            buf[len++] = 'b';
10003aa0:	69fb      	ldr	r3, [r7, #28]
10003aa2:	1c5a      	adds	r2, r3, #1
10003aa4:	61fa      	str	r2, [r7, #28]
10003aa6:	69ba      	ldr	r2, [r7, #24]
10003aa8:	4413      	add	r3, r2
10003aaa:	2262      	movs	r2, #98	@ 0x62
10003aac:	701a      	strb	r2, [r3, #0]
        }
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10003aae:	69fb      	ldr	r3, [r7, #28]
10003ab0:	2b1f      	cmp	r3, #31
10003ab2:	d806      	bhi.n	10003ac2 <_ntoa_format+0x142>
            buf[len++] = '0';
10003ab4:	69fb      	ldr	r3, [r7, #28]
10003ab6:	1c5a      	adds	r2, r3, #1
10003ab8:	61fa      	str	r2, [r7, #28]
10003aba:	69ba      	ldr	r2, [r7, #24]
10003abc:	4413      	add	r3, r2
10003abe:	2230      	movs	r2, #48	@ 0x30
10003ac0:	701a      	strb	r2, [r3, #0]
        }
    }

    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
10003ac2:	69fb      	ldr	r3, [r7, #28]
10003ac4:	2b1f      	cmp	r3, #31
10003ac6:	d824      	bhi.n	10003b12 <_ntoa_format+0x192>
        if (negative) {
10003ac8:	f897 3020 	ldrb.w	r3, [r7, #32]
10003acc:	2b00      	cmp	r3, #0
10003ace:	d007      	beq.n	10003ae0 <_ntoa_format+0x160>
            buf[len++] = '-';
10003ad0:	69fb      	ldr	r3, [r7, #28]
10003ad2:	1c5a      	adds	r2, r3, #1
10003ad4:	61fa      	str	r2, [r7, #28]
10003ad6:	69ba      	ldr	r2, [r7, #24]
10003ad8:	4413      	add	r3, r2
10003ada:	222d      	movs	r2, #45	@ 0x2d
10003adc:	701a      	strb	r2, [r3, #0]
10003ade:	e018      	b.n	10003b12 <_ntoa_format+0x192>
        } else if (flags & FLAGS_PLUS) {
10003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003ae2:	f003 0304 	and.w	r3, r3, #4
10003ae6:	2b00      	cmp	r3, #0
10003ae8:	d007      	beq.n	10003afa <_ntoa_format+0x17a>
            buf[len++] = '+';  // ignore the space if the '+' exists
10003aea:	69fb      	ldr	r3, [r7, #28]
10003aec:	1c5a      	adds	r2, r3, #1
10003aee:	61fa      	str	r2, [r7, #28]
10003af0:	69ba      	ldr	r2, [r7, #24]
10003af2:	4413      	add	r3, r2
10003af4:	222b      	movs	r2, #43	@ 0x2b
10003af6:	701a      	strb	r2, [r3, #0]
10003af8:	e00b      	b.n	10003b12 <_ntoa_format+0x192>
        } else if (flags & FLAGS_SPACE) {
10003afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003afc:	f003 0308 	and.w	r3, r3, #8
10003b00:	2b00      	cmp	r3, #0
10003b02:	d006      	beq.n	10003b12 <_ntoa_format+0x192>
            buf[len++] = ' ';
10003b04:	69fb      	ldr	r3, [r7, #28]
10003b06:	1c5a      	adds	r2, r3, #1
10003b08:	61fa      	str	r2, [r7, #28]
10003b0a:	69ba      	ldr	r2, [r7, #24]
10003b0c:	4413      	add	r3, r2
10003b0e:	2220      	movs	r2, #32
10003b10:	701a      	strb	r2, [r3, #0]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003b14:	9303      	str	r3, [sp, #12]
10003b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10003b18:	9302      	str	r3, [sp, #8]
10003b1a:	69fb      	ldr	r3, [r7, #28]
10003b1c:	9301      	str	r3, [sp, #4]
10003b1e:	69bb      	ldr	r3, [r7, #24]
10003b20:	9300      	str	r3, [sp, #0]
10003b22:	683b      	ldr	r3, [r7, #0]
10003b24:	687a      	ldr	r2, [r7, #4]
10003b26:	68b9      	ldr	r1, [r7, #8]
10003b28:	68f8      	ldr	r0, [r7, #12]
10003b2a:	f7ff fed9 	bl	100038e0 <_out_rev>
10003b2e:	4603      	mov	r3, r0
}
10003b30:	4618      	mov	r0, r3
10003b32:	3710      	adds	r7, #16
10003b34:	46bd      	mov	sp, r7
10003b36:	bd80      	pop	{r7, pc}

10003b38 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags) {
10003b38:	b580      	push	{r7, lr}
10003b3a:	b096      	sub	sp, #88	@ 0x58
10003b3c:	af08      	add	r7, sp, #32
10003b3e:	60f8      	str	r0, [r7, #12]
10003b40:	60b9      	str	r1, [r7, #8]
10003b42:	607a      	str	r2, [r7, #4]
10003b44:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
10003b46:	2300      	movs	r3, #0
10003b48:	637b      	str	r3, [r7, #52]	@ 0x34

    // no hash for 0 values
    if (!value) {
10003b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10003b4c:	2b00      	cmp	r3, #0
10003b4e:	d103      	bne.n	10003b58 <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
10003b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003b52:	f023 0310 	bic.w	r3, r3, #16
10003b56:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
10003b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10003b5e:	2b00      	cmp	r3, #0
10003b60:	d002      	beq.n	10003b68 <_ntoa_long+0x30>
10003b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10003b64:	2b00      	cmp	r3, #0
10003b66:	d032      	beq.n	10003bce <_ntoa_long+0x96>
        do {
            const char digit = (char) (value % base);
10003b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10003b6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10003b6c:	fbb3 f2f2 	udiv	r2, r3, r2
10003b70:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
10003b72:	fb01 f202 	mul.w	r2, r1, r2
10003b76:	1a9b      	subs	r3, r3, r2
10003b78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
10003b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
10003b80:	2b09      	cmp	r3, #9
10003b82:	d804      	bhi.n	10003b8e <_ntoa_long+0x56>
10003b84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
10003b88:	3330      	adds	r3, #48	@ 0x30
10003b8a:	b2da      	uxtb	r2, r3
10003b8c:	e00d      	b.n	10003baa <_ntoa_long+0x72>
10003b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003b90:	f003 0320 	and.w	r3, r3, #32
10003b94:	2b00      	cmp	r3, #0
10003b96:	d001      	beq.n	10003b9c <_ntoa_long+0x64>
10003b98:	2241      	movs	r2, #65	@ 0x41
10003b9a:	e000      	b.n	10003b9e <_ntoa_long+0x66>
10003b9c:	2261      	movs	r2, #97	@ 0x61
10003b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
10003ba2:	4413      	add	r3, r2
10003ba4:	b2db      	uxtb	r3, r3
10003ba6:	3b0a      	subs	r3, #10
10003ba8:	b2da      	uxtb	r2, r3
10003baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10003bac:	1c59      	adds	r1, r3, #1
10003bae:	6379      	str	r1, [r7, #52]	@ 0x34
10003bb0:	3338      	adds	r3, #56	@ 0x38
10003bb2:	443b      	add	r3, r7
10003bb4:	f803 2c28 	strb.w	r2, [r3, #-40]
            value /= base;
10003bb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10003bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
10003bc0:	643b      	str	r3, [r7, #64]	@ 0x40
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10003bc4:	2b00      	cmp	r3, #0
10003bc6:	d002      	beq.n	10003bce <_ntoa_long+0x96>
10003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10003bca:	2b1f      	cmp	r3, #31
10003bcc:	d9cc      	bls.n	10003b68 <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003bd0:	9306      	str	r3, [sp, #24]
10003bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10003bd4:	9305      	str	r3, [sp, #20]
10003bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10003bd8:	9304      	str	r3, [sp, #16]
10003bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10003bdc:	9303      	str	r3, [sp, #12]
10003bde:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
10003be2:	9302      	str	r3, [sp, #8]
10003be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10003be6:	9301      	str	r3, [sp, #4]
10003be8:	f107 0310 	add.w	r3, r7, #16
10003bec:	9300      	str	r3, [sp, #0]
10003bee:	683b      	ldr	r3, [r7, #0]
10003bf0:	687a      	ldr	r2, [r7, #4]
10003bf2:	68b9      	ldr	r1, [r7, #8]
10003bf4:	68f8      	ldr	r0, [r7, #12]
10003bf6:	f7ff fec3 	bl	10003980 <_ntoa_format>
10003bfa:	4603      	mov	r3, r0
}
10003bfc:	4618      	mov	r0, r3
10003bfe:	3738      	adds	r7, #56	@ 0x38
10003c00:	46bd      	mov	sp, r7
10003c02:	bd80      	pop	{r7, pc}

10003c04 <_ntoa_long_long>:
// internal itoa for 'long long' type
#if PICO_PRINTF_SUPPORT_LONG_LONG

static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width,
                              unsigned int flags) {
10003c04:	b580      	push	{r7, lr}
10003c06:	b096      	sub	sp, #88	@ 0x58
10003c08:	af08      	add	r7, sp, #32
10003c0a:	60f8      	str	r0, [r7, #12]
10003c0c:	60b9      	str	r1, [r7, #8]
10003c0e:	607a      	str	r2, [r7, #4]
10003c10:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
10003c12:	2300      	movs	r3, #0
10003c14:	637b      	str	r3, [r7, #52]	@ 0x34

    // no hash for 0 values
    if (!value) {
10003c16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
10003c1a:	4313      	orrs	r3, r2
10003c1c:	d103      	bne.n	10003c26 <_ntoa_long_long+0x22>
        flags &= ~FLAGS_HASH;
10003c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10003c20:	f023 0310 	bic.w	r3, r3, #16
10003c24:	663b      	str	r3, [r7, #96]	@ 0x60
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
10003c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10003c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10003c2c:	2b00      	cmp	r3, #0
10003c2e:	d003      	beq.n	10003c38 <_ntoa_long_long+0x34>
10003c30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
10003c34:	4313      	orrs	r3, r2
10003c36:	d037      	beq.n	10003ca8 <_ntoa_long_long+0xa4>
        do {
            const char digit = (char) (value % base);
10003c38:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
10003c3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
10003c40:	f002 fc26 	bl	10006490 <____aeabi_uldivmod_veneer>
10003c44:	4613      	mov	r3, r2
10003c46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
10003c4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
10003c4e:	2b09      	cmp	r3, #9
10003c50:	d804      	bhi.n	10003c5c <_ntoa_long_long+0x58>
10003c52:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
10003c56:	3330      	adds	r3, #48	@ 0x30
10003c58:	b2da      	uxtb	r2, r3
10003c5a:	e00d      	b.n	10003c78 <_ntoa_long_long+0x74>
10003c5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10003c5e:	f003 0320 	and.w	r3, r3, #32
10003c62:	2b00      	cmp	r3, #0
10003c64:	d001      	beq.n	10003c6a <_ntoa_long_long+0x66>
10003c66:	2241      	movs	r2, #65	@ 0x41
10003c68:	e000      	b.n	10003c6c <_ntoa_long_long+0x68>
10003c6a:	2261      	movs	r2, #97	@ 0x61
10003c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
10003c70:	4413      	add	r3, r2
10003c72:	b2db      	uxtb	r3, r3
10003c74:	3b0a      	subs	r3, #10
10003c76:	b2da      	uxtb	r2, r3
10003c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10003c7a:	1c59      	adds	r1, r3, #1
10003c7c:	6379      	str	r1, [r7, #52]	@ 0x34
10003c7e:	3338      	adds	r3, #56	@ 0x38
10003c80:	443b      	add	r3, r7
10003c82:	f803 2c28 	strb.w	r2, [r3, #-40]
            value /= base;
10003c86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
10003c8a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
10003c8e:	f002 fbff 	bl	10006490 <____aeabi_uldivmod_veneer>
10003c92:	4602      	mov	r2, r0
10003c94:	460b      	mov	r3, r1
10003c96:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
10003c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
10003c9e:	4313      	orrs	r3, r2
10003ca0:	d002      	beq.n	10003ca8 <_ntoa_long_long+0xa4>
10003ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10003ca4:	2b1f      	cmp	r3, #31
10003ca6:	d9c7      	bls.n	10003c38 <_ntoa_long_long+0x34>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10003ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10003caa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10003cac:	9206      	str	r2, [sp, #24]
10003cae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
10003cb0:	9205      	str	r2, [sp, #20]
10003cb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
10003cb4:	9204      	str	r2, [sp, #16]
10003cb6:	9303      	str	r3, [sp, #12]
10003cb8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
10003cbc:	9302      	str	r3, [sp, #8]
10003cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10003cc0:	9301      	str	r3, [sp, #4]
10003cc2:	f107 0310 	add.w	r3, r7, #16
10003cc6:	9300      	str	r3, [sp, #0]
10003cc8:	683b      	ldr	r3, [r7, #0]
10003cca:	687a      	ldr	r2, [r7, #4]
10003ccc:	68b9      	ldr	r1, [r7, #8]
10003cce:	68f8      	ldr	r0, [r7, #12]
10003cd0:	f7ff fe56 	bl	10003980 <_ntoa_format>
10003cd4:	4603      	mov	r3, r0
}
10003cd6:	4618      	mov	r0, r3
10003cd8:	3738      	adds	r7, #56	@ 0x38
10003cda:	46bd      	mov	sp, r7
10003cdc:	bd80      	pop	{r7, pc}
	...

10003ce0 <_ftoa>:

#define is_nan __builtin_isnan

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
10003ce0:	b590      	push	{r4, r7, lr}
10003ce2:	b09d      	sub	sp, #116	@ 0x74
10003ce4:	af06      	add	r7, sp, #24
10003ce6:	60f8      	str	r0, [r7, #12]
10003ce8:	60b9      	str	r1, [r7, #8]
10003cea:	607a      	str	r2, [r7, #4]
10003cec:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_FTOA_BUFFER_SIZE];
    size_t len = 0U;
10003cee:	2300      	movs	r3, #0
10003cf0:	657b      	str	r3, [r7, #84]	@ 0x54
    double diff = 0.0;
10003cf2:	f04f 0200 	mov.w	r2, #0
10003cf6:	f04f 0300 	mov.w	r3, #0
10003cfa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // powers of 10
    static const double pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

    // test for special values
    if (is_nan(value))
10003cfe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
10003d02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003d06:	f7ff fd25 	bl	10003754 <__wrap___aeabi_dcmpun>
10003d0a:	4603      	mov	r3, r0
10003d0c:	2b00      	cmp	r3, #0
10003d0e:	d00f      	beq.n	10003d30 <_ftoa+0x50>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
10003d10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10003d12:	9303      	str	r3, [sp, #12]
10003d14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10003d16:	9302      	str	r3, [sp, #8]
10003d18:	2303      	movs	r3, #3
10003d1a:	9301      	str	r3, [sp, #4]
10003d1c:	4b82      	ldr	r3, [pc, #520]	@ (10003f28 <_ftoa+0x248>)
10003d1e:	9300      	str	r3, [sp, #0]
10003d20:	683b      	ldr	r3, [r7, #0]
10003d22:	687a      	ldr	r2, [r7, #4]
10003d24:	68b9      	ldr	r1, [r7, #8]
10003d26:	68f8      	ldr	r0, [r7, #12]
10003d28:	f7ff fdda 	bl	100038e0 <_out_rev>
10003d2c:	4603      	mov	r3, r0
10003d2e:	e22f      	b.n	10004190 <_ftoa+0x4b0>
    if (value < -DBL_MAX)
10003d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10003d34:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
10003d38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003d3c:	f7ff fd1c 	bl	10003778 <__wrap___aeabi_dcmplt>
10003d40:	4603      	mov	r3, r0
10003d42:	2b00      	cmp	r3, #0
10003d44:	d00f      	beq.n	10003d66 <_ftoa+0x86>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
10003d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10003d48:	9303      	str	r3, [sp, #12]
10003d4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10003d4c:	9302      	str	r3, [sp, #8]
10003d4e:	2304      	movs	r3, #4
10003d50:	9301      	str	r3, [sp, #4]
10003d52:	4b76      	ldr	r3, [pc, #472]	@ (10003f2c <_ftoa+0x24c>)
10003d54:	9300      	str	r3, [sp, #0]
10003d56:	683b      	ldr	r3, [r7, #0]
10003d58:	687a      	ldr	r2, [r7, #4]
10003d5a:	68b9      	ldr	r1, [r7, #8]
10003d5c:	68f8      	ldr	r0, [r7, #12]
10003d5e:	f7ff fdbf 	bl	100038e0 <_out_rev>
10003d62:	4603      	mov	r3, r0
10003d64:	e214      	b.n	10004190 <_ftoa+0x4b0>
    if (value > DBL_MAX)
10003d66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10003d6a:	4b71      	ldr	r3, [pc, #452]	@ (10003f30 <_ftoa+0x250>)
10003d6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003d70:	f7ff fd2a 	bl	100037c8 <__wrap___aeabi_dcmpgt>
10003d74:	4603      	mov	r3, r0
10003d76:	2b00      	cmp	r3, #0
10003d78:	d01d      	beq.n	10003db6 <_ftoa+0xd6>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
10003d7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10003d7c:	f003 0304 	and.w	r3, r3, #4
10003d80:	2b00      	cmp	r3, #0
10003d82:	d001      	beq.n	10003d88 <_ftoa+0xa8>
10003d84:	4b6b      	ldr	r3, [pc, #428]	@ (10003f34 <_ftoa+0x254>)
10003d86:	e000      	b.n	10003d8a <_ftoa+0xaa>
10003d88:	4b6b      	ldr	r3, [pc, #428]	@ (10003f38 <_ftoa+0x258>)
10003d8a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
10003d8c:	f002 0204 	and.w	r2, r2, #4
10003d90:	2a00      	cmp	r2, #0
10003d92:	d001      	beq.n	10003d98 <_ftoa+0xb8>
10003d94:	2204      	movs	r2, #4
10003d96:	e000      	b.n	10003d9a <_ftoa+0xba>
10003d98:	2203      	movs	r2, #3
10003d9a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
10003d9c:	9103      	str	r1, [sp, #12]
10003d9e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10003da0:	9102      	str	r1, [sp, #8]
10003da2:	9201      	str	r2, [sp, #4]
10003da4:	9300      	str	r3, [sp, #0]
10003da6:	683b      	ldr	r3, [r7, #0]
10003da8:	687a      	ldr	r2, [r7, #4]
10003daa:	68b9      	ldr	r1, [r7, #8]
10003dac:	68f8      	ldr	r0, [r7, #12]
10003dae:	f7ff fd97 	bl	100038e0 <_out_rev>
10003db2:	4603      	mov	r3, r0
10003db4:	e1ec      	b.n	10004190 <_ftoa+0x4b0>
                        width, flags);

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
    if ((value > PICO_PRINTF_MAX_FLOAT) || (value < -PICO_PRINTF_MAX_FLOAT)) {
10003db6:	a358      	add	r3, pc, #352	@ (adr r3, 10003f18 <_ftoa+0x238>)
10003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
10003dbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003dc0:	f7ff fd02 	bl	100037c8 <__wrap___aeabi_dcmpgt>
10003dc4:	4603      	mov	r3, r0
10003dc6:	2b00      	cmp	r3, #0
10003dc8:	d109      	bne.n	10003dde <_ftoa+0xfe>
10003dca:	a355      	add	r3, pc, #340	@ (adr r3, 10003f20 <_ftoa+0x240>)
10003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
10003dd0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003dd4:	f7ff fcd0 	bl	10003778 <__wrap___aeabi_dcmplt>
10003dd8:	4603      	mov	r3, r0
10003dda:	2b00      	cmp	r3, #0
10003ddc:	d011      	beq.n	10003e02 <_ftoa+0x122>
#if PICO_PRINTF_SUPPORT_EXPONENTIAL
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
10003dde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10003de0:	9304      	str	r3, [sp, #16]
10003de2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10003de4:	9303      	str	r3, [sp, #12]
10003de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10003de8:	9302      	str	r3, [sp, #8]
10003dea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
10003dee:	e9cd 2300 	strd	r2, r3, [sp]
10003df2:	683b      	ldr	r3, [r7, #0]
10003df4:	687a      	ldr	r2, [r7, #4]
10003df6:	68b9      	ldr	r1, [r7, #8]
10003df8:	68f8      	ldr	r0, [r7, #12]
10003dfa:	f000 f9d5 	bl	100041a8 <_etoa>
10003dfe:	4603      	mov	r3, r0
10003e00:	e1c6      	b.n	10004190 <_ftoa+0x4b0>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
10003e02:	2300      	movs	r3, #0
10003e04:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (value < 0) {
10003e08:	f04f 0200 	mov.w	r2, #0
10003e0c:	f04f 0300 	mov.w	r3, #0
10003e10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003e14:	f7ff fcb0 	bl	10003778 <__wrap___aeabi_dcmplt>
10003e18:	4603      	mov	r3, r0
10003e1a:	2b00      	cmp	r3, #0
10003e1c:	d00e      	beq.n	10003e3c <_ftoa+0x15c>
        negative = true;
10003e1e:	2301      	movs	r3, #1
10003e20:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        value = 0 - value;
10003e24:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
10003e28:	f04f 0000 	mov.w	r0, #0
10003e2c:	f04f 0100 	mov.w	r1, #0
10003e30:	f7ff fbc0 	bl	100035b4 <__wrap___aeabi_dsub>
10003e34:	4602      	mov	r2, r0
10003e36:	460b      	mov	r3, r1
10003e38:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
10003e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10003e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10003e42:	2b00      	cmp	r3, #0
10003e44:	d10d      	bne.n	10003e62 <_ftoa+0x182>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
10003e46:	2306      	movs	r3, #6
10003e48:	673b      	str	r3, [r7, #112]	@ 0x70
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10003e4a:	e00a      	b.n	10003e62 <_ftoa+0x182>
        buf[len++] = '0';
10003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003e4e:	1c5a      	adds	r2, r3, #1
10003e50:	657a      	str	r2, [r7, #84]	@ 0x54
10003e52:	3358      	adds	r3, #88	@ 0x58
10003e54:	443b      	add	r3, r7
10003e56:	2230      	movs	r2, #48	@ 0x30
10003e58:	f803 2c48 	strb.w	r2, [r3, #-72]
        prec--;
10003e5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10003e5e:	3b01      	subs	r3, #1
10003e60:	673b      	str	r3, [r7, #112]	@ 0x70
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10003e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003e64:	2b1f      	cmp	r3, #31
10003e66:	d802      	bhi.n	10003e6e <_ftoa+0x18e>
10003e68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10003e6a:	2b09      	cmp	r3, #9
10003e6c:	d8ee      	bhi.n	10003e4c <_ftoa+0x16c>
    }

    int whole = (int) value;
10003e6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003e72:	f7ff fc4b 	bl	1000370c <__wrap___aeabi_d2iz>
10003e76:	4603      	mov	r3, r0
10003e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    double tmp = (value - whole) * pow10[prec];
10003e7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10003e7c:	f7ff fc22 	bl	100036c4 <__wrap___aeabi_i2d>
10003e80:	4602      	mov	r2, r0
10003e82:	460b      	mov	r3, r1
10003e84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003e88:	f7ff fb94 	bl	100035b4 <__wrap___aeabi_dsub>
10003e8c:	4602      	mov	r2, r0
10003e8e:	460b      	mov	r3, r1
10003e90:	4610      	mov	r0, r2
10003e92:	4619      	mov	r1, r3
10003e94:	4a29      	ldr	r2, [pc, #164]	@ (10003f3c <_ftoa+0x25c>)
10003e96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10003e98:	00db      	lsls	r3, r3, #3
10003e9a:	4413      	add	r3, r2
10003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
10003ea0:	f7ff fb9c 	bl	100035dc <__wrap___aeabi_dmul>
10003ea4:	4602      	mov	r2, r0
10003ea6:	460b      	mov	r3, r1
10003ea8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    unsigned long frac = (unsigned long) tmp;
10003eac:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
10003eb0:	f7ff fc3e 	bl	10003730 <__wrap___aeabi_d2uiz>
10003eb4:	4603      	mov	r3, r0
10003eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
    diff = tmp - frac;
10003eb8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10003eba:	f7ff fc15 	bl	100036e8 <__wrap___aeabi_ui2d>
10003ebe:	4602      	mov	r2, r0
10003ec0:	460b      	mov	r3, r1
10003ec2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
10003ec6:	f7ff fb75 	bl	100035b4 <__wrap___aeabi_dsub>
10003eca:	4602      	mov	r2, r0
10003ecc:	460b      	mov	r3, r1
10003ece:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    if (diff > 0.5) {
10003ed2:	f04f 0200 	mov.w	r2, #0
10003ed6:	4b1a      	ldr	r3, [pc, #104]	@ (10003f40 <_ftoa+0x260>)
10003ed8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10003edc:	f7ff fc74 	bl	100037c8 <__wrap___aeabi_dcmpgt>
10003ee0:	4603      	mov	r3, r0
10003ee2:	2b00      	cmp	r3, #0
10003ee4:	d02e      	beq.n	10003f44 <_ftoa+0x264>
        ++frac;
10003ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10003ee8:	3301      	adds	r3, #1
10003eea:	64bb      	str	r3, [r7, #72]	@ 0x48
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
10003eec:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10003eee:	f7ff fbfb 	bl	100036e8 <__wrap___aeabi_ui2d>
10003ef2:	4a12      	ldr	r2, [pc, #72]	@ (10003f3c <_ftoa+0x25c>)
10003ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10003ef6:	00db      	lsls	r3, r3, #3
10003ef8:	4413      	add	r3, r2
10003efa:	e9d3 2300 	ldrd	r2, r3, [r3]
10003efe:	f7ff fc4f 	bl	100037a0 <__wrap___aeabi_dcmpge>
10003f02:	4603      	mov	r3, r0
10003f04:	2b00      	cmp	r3, #0
10003f06:	d032      	beq.n	10003f6e <_ftoa+0x28e>
            frac = 0;
10003f08:	2300      	movs	r3, #0
10003f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
            ++whole;
10003f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10003f0e:	3301      	adds	r3, #1
10003f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
10003f12:	e02c      	b.n	10003f6e <_ftoa+0x28e>
10003f14:	f3af 8000 	nop.w
10003f18:	00000000 	.word	0x00000000
10003f1c:	41cdcd65 	.word	0x41cdcd65
10003f20:	00000000 	.word	0x00000000
10003f24:	c1cdcd65 	.word	0xc1cdcd65
10003f28:	10006cb0 	.word	0x10006cb0
10003f2c:	10006cb4 	.word	0x10006cb4
10003f30:	7fefffff 	.word	0x7fefffff
10003f34:	10006cbc 	.word	0x10006cbc
10003f38:	10006cc4 	.word	0x10006cc4
10003f3c:	10006cc8 	.word	0x10006cc8
10003f40:	3fe00000 	.word	0x3fe00000
        }
    } else if (diff < 0.5) {
10003f44:	f04f 0200 	mov.w	r2, #0
10003f48:	4b93      	ldr	r3, [pc, #588]	@ (10004198 <_ftoa+0x4b8>)
10003f4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10003f4e:	f7ff fc13 	bl	10003778 <__wrap___aeabi_dcmplt>
10003f52:	4603      	mov	r3, r0
10003f54:	2b00      	cmp	r3, #0
10003f56:	d10a      	bne.n	10003f6e <_ftoa+0x28e>
    } else if ((frac == 0U) || (frac & 1U)) {
10003f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10003f5a:	2b00      	cmp	r3, #0
10003f5c:	d004      	beq.n	10003f68 <_ftoa+0x288>
10003f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10003f60:	f003 0301 	and.w	r3, r3, #1
10003f64:	2b00      	cmp	r3, #0
10003f66:	d002      	beq.n	10003f6e <_ftoa+0x28e>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
10003f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10003f6a:	3301      	adds	r3, #1
10003f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (prec == 0U) {
10003f6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10003f70:	2b00      	cmp	r3, #0
10003f72:	d13e      	bne.n	10003ff2 <_ftoa+0x312>
        diff = value - (double) whole;
10003f74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10003f76:	f7ff fba5 	bl	100036c4 <__wrap___aeabi_i2d>
10003f7a:	4602      	mov	r2, r0
10003f7c:	460b      	mov	r3, r1
10003f7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10003f82:	f7ff fb17 	bl	100035b4 <__wrap___aeabi_dsub>
10003f86:	4602      	mov	r2, r0
10003f88:	460b      	mov	r3, r1
10003f8a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
10003f8e:	2301      	movs	r3, #1
10003f90:	461c      	mov	r4, r3
10003f92:	f04f 0200 	mov.w	r2, #0
10003f96:	4b80      	ldr	r3, [pc, #512]	@ (10004198 <_ftoa+0x4b8>)
10003f98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10003f9c:	f7ff fbec 	bl	10003778 <__wrap___aeabi_dcmplt>
10003fa0:	4603      	mov	r3, r0
10003fa2:	2b00      	cmp	r3, #0
10003fa4:	d101      	bne.n	10003faa <_ftoa+0x2ca>
10003fa6:	2300      	movs	r3, #0
10003fa8:	461c      	mov	r4, r3
10003faa:	b2e3      	uxtb	r3, r4
10003fac:	f083 0301 	eor.w	r3, r3, #1
10003fb0:	b2db      	uxtb	r3, r3
10003fb2:	2b00      	cmp	r3, #0
10003fb4:	f000 8083 	beq.w	100040be <_ftoa+0x3de>
10003fb8:	2301      	movs	r3, #1
10003fba:	461c      	mov	r4, r3
10003fbc:	f04f 0200 	mov.w	r2, #0
10003fc0:	4b75      	ldr	r3, [pc, #468]	@ (10004198 <_ftoa+0x4b8>)
10003fc2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10003fc6:	f7ff fbff 	bl	100037c8 <__wrap___aeabi_dcmpgt>
10003fca:	4603      	mov	r3, r0
10003fcc:	2b00      	cmp	r3, #0
10003fce:	d101      	bne.n	10003fd4 <_ftoa+0x2f4>
10003fd0:	2300      	movs	r3, #0
10003fd2:	461c      	mov	r4, r3
10003fd4:	b2e3      	uxtb	r3, r4
10003fd6:	f083 0301 	eor.w	r3, r3, #1
10003fda:	b2db      	uxtb	r3, r3
10003fdc:	2b00      	cmp	r3, #0
10003fde:	d06e      	beq.n	100040be <_ftoa+0x3de>
10003fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10003fe2:	f003 0301 	and.w	r3, r3, #1
10003fe6:	2b00      	cmp	r3, #0
10003fe8:	d069      	beq.n	100040be <_ftoa+0x3de>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
10003fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10003fec:	3301      	adds	r3, #1
10003fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
10003ff0:	e065      	b.n	100040be <_ftoa+0x3de>
        }
    } else {
        unsigned int count = prec;
10003ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10003ff4:	647b      	str	r3, [r7, #68]	@ 0x44
        // now do fractional part, as an unsigned number
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10003ff6:	e01f      	b.n	10004038 <_ftoa+0x358>
            --count;
10003ff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10003ffa:	3b01      	subs	r3, #1
10003ffc:	647b      	str	r3, [r7, #68]	@ 0x44
            buf[len++] = (char) (48U + (frac % 10U));
10003ffe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
10004000:	4b66      	ldr	r3, [pc, #408]	@ (1000419c <_ftoa+0x4bc>)
10004002:	fba3 2301 	umull	r2, r3, r3, r1
10004006:	08da      	lsrs	r2, r3, #3
10004008:	4613      	mov	r3, r2
1000400a:	009b      	lsls	r3, r3, #2
1000400c:	4413      	add	r3, r2
1000400e:	005b      	lsls	r3, r3, #1
10004010:	1aca      	subs	r2, r1, r3
10004012:	b2d2      	uxtb	r2, r2
10004014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004016:	1c59      	adds	r1, r3, #1
10004018:	6579      	str	r1, [r7, #84]	@ 0x54
1000401a:	3230      	adds	r2, #48	@ 0x30
1000401c:	b2d2      	uxtb	r2, r2
1000401e:	3358      	adds	r3, #88	@ 0x58
10004020:	443b      	add	r3, r7
10004022:	f803 2c48 	strb.w	r2, [r3, #-72]
            if (!(frac /= 10U)) {
10004026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004028:	4a5c      	ldr	r2, [pc, #368]	@ (1000419c <_ftoa+0x4bc>)
1000402a:	fba2 2303 	umull	r2, r3, r2, r3
1000402e:	08db      	lsrs	r3, r3, #3
10004030:	64bb      	str	r3, [r7, #72]	@ 0x48
10004032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004034:	2b00      	cmp	r3, #0
10004036:	d003      	beq.n	10004040 <_ftoa+0x360>
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10004038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000403a:	2b1f      	cmp	r3, #31
1000403c:	d9dc      	bls.n	10003ff8 <_ftoa+0x318>
1000403e:	e009      	b.n	10004054 <_ftoa+0x374>
                break;
10004040:	bf00      	nop
            }
        }
        // add extra 0s
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10004042:	e007      	b.n	10004054 <_ftoa+0x374>
            buf[len++] = '0';
10004044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004046:	1c5a      	adds	r2, r3, #1
10004048:	657a      	str	r2, [r7, #84]	@ 0x54
1000404a:	3358      	adds	r3, #88	@ 0x58
1000404c:	443b      	add	r3, r7
1000404e:	2230      	movs	r2, #48	@ 0x30
10004050:	f803 2c48 	strb.w	r2, [r3, #-72]
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
10004054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004056:	2b1f      	cmp	r3, #31
10004058:	d804      	bhi.n	10004064 <_ftoa+0x384>
1000405a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000405c:	1e5a      	subs	r2, r3, #1
1000405e:	647a      	str	r2, [r7, #68]	@ 0x44
10004060:	2b00      	cmp	r3, #0
10004062:	d1ef      	bne.n	10004044 <_ftoa+0x364>
        }
        if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10004064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004066:	2b1f      	cmp	r3, #31
10004068:	d829      	bhi.n	100040be <_ftoa+0x3de>
            // add decimal
            buf[len++] = '.';
1000406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000406c:	1c5a      	adds	r2, r3, #1
1000406e:	657a      	str	r2, [r7, #84]	@ 0x54
10004070:	3358      	adds	r3, #88	@ 0x58
10004072:	443b      	add	r3, r7
10004074:	222e      	movs	r2, #46	@ 0x2e
10004076:	f803 2c48 	strb.w	r2, [r3, #-72]
        }
    }

    // do whole part, number is reversed
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
1000407a:	e020      	b.n	100040be <_ftoa+0x3de>
        buf[len++] = (char) (48 + (whole % 10));
1000407c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
1000407e:	4b48      	ldr	r3, [pc, #288]	@ (100041a0 <_ftoa+0x4c0>)
10004080:	fb83 1302 	smull	r1, r3, r3, r2
10004084:	1099      	asrs	r1, r3, #2
10004086:	17d3      	asrs	r3, r2, #31
10004088:	1ac9      	subs	r1, r1, r3
1000408a:	460b      	mov	r3, r1
1000408c:	009b      	lsls	r3, r3, #2
1000408e:	440b      	add	r3, r1
10004090:	005b      	lsls	r3, r3, #1
10004092:	1ad1      	subs	r1, r2, r3
10004094:	b2ca      	uxtb	r2, r1
10004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004098:	1c59      	adds	r1, r3, #1
1000409a:	6579      	str	r1, [r7, #84]	@ 0x54
1000409c:	3230      	adds	r2, #48	@ 0x30
1000409e:	b2d2      	uxtb	r2, r2
100040a0:	3358      	adds	r3, #88	@ 0x58
100040a2:	443b      	add	r3, r7
100040a4:	f803 2c48 	strb.w	r2, [r3, #-72]
        if (!(whole /= 10)) {
100040a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100040aa:	4a3d      	ldr	r2, [pc, #244]	@ (100041a0 <_ftoa+0x4c0>)
100040ac:	fb82 1203 	smull	r1, r2, r2, r3
100040b0:	1092      	asrs	r2, r2, #2
100040b2:	17db      	asrs	r3, r3, #31
100040b4:	1ad3      	subs	r3, r2, r3
100040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
100040b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100040ba:	2b00      	cmp	r3, #0
100040bc:	d003      	beq.n	100040c6 <_ftoa+0x3e6>
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
100040be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100040c0:	2b1f      	cmp	r3, #31
100040c2:	d9db      	bls.n	1000407c <_ftoa+0x39c>
100040c4:	e000      	b.n	100040c8 <_ftoa+0x3e8>
            break;
100040c6:	bf00      	nop
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
100040c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100040ca:	f003 0302 	and.w	r3, r3, #2
100040ce:	2b00      	cmp	r3, #0
100040d0:	d123      	bne.n	1000411a <_ftoa+0x43a>
100040d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100040d4:	f003 0301 	and.w	r3, r3, #1
100040d8:	2b00      	cmp	r3, #0
100040da:	d01e      	beq.n	1000411a <_ftoa+0x43a>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
100040dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
100040de:	2b00      	cmp	r3, #0
100040e0:	d014      	beq.n	1000410c <_ftoa+0x42c>
100040e2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
100040e6:	2b00      	cmp	r3, #0
100040e8:	d104      	bne.n	100040f4 <_ftoa+0x414>
100040ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100040ec:	f003 030c 	and.w	r3, r3, #12
100040f0:	2b00      	cmp	r3, #0
100040f2:	d00b      	beq.n	1000410c <_ftoa+0x42c>
            width--;
100040f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
100040f6:	3b01      	subs	r3, #1
100040f8:	677b      	str	r3, [r7, #116]	@ 0x74
        }
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
100040fa:	e007      	b.n	1000410c <_ftoa+0x42c>
            buf[len++] = '0';
100040fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100040fe:	1c5a      	adds	r2, r3, #1
10004100:	657a      	str	r2, [r7, #84]	@ 0x54
10004102:	3358      	adds	r3, #88	@ 0x58
10004104:	443b      	add	r3, r7
10004106:	2230      	movs	r2, #48	@ 0x30
10004108:	f803 2c48 	strb.w	r2, [r3, #-72]
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
1000410c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
1000410e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10004110:	429a      	cmp	r2, r3
10004112:	d202      	bcs.n	1000411a <_ftoa+0x43a>
10004114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004116:	2b1f      	cmp	r3, #31
10004118:	d9f0      	bls.n	100040fc <_ftoa+0x41c>
        }
    }

    if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
1000411a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000411c:	2b1f      	cmp	r3, #31
1000411e:	d827      	bhi.n	10004170 <_ftoa+0x490>
        if (negative) {
10004120:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
10004124:	2b00      	cmp	r3, #0
10004126:	d008      	beq.n	1000413a <_ftoa+0x45a>
            buf[len++] = '-';
10004128:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000412a:	1c5a      	adds	r2, r3, #1
1000412c:	657a      	str	r2, [r7, #84]	@ 0x54
1000412e:	3358      	adds	r3, #88	@ 0x58
10004130:	443b      	add	r3, r7
10004132:	222d      	movs	r2, #45	@ 0x2d
10004134:	f803 2c48 	strb.w	r2, [r3, #-72]
10004138:	e01a      	b.n	10004170 <_ftoa+0x490>
        } else if (flags & FLAGS_PLUS) {
1000413a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
1000413c:	f003 0304 	and.w	r3, r3, #4
10004140:	2b00      	cmp	r3, #0
10004142:	d008      	beq.n	10004156 <_ftoa+0x476>
            buf[len++] = '+';  // ignore the space if the '+' exists
10004144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004146:	1c5a      	adds	r2, r3, #1
10004148:	657a      	str	r2, [r7, #84]	@ 0x54
1000414a:	3358      	adds	r3, #88	@ 0x58
1000414c:	443b      	add	r3, r7
1000414e:	222b      	movs	r2, #43	@ 0x2b
10004150:	f803 2c48 	strb.w	r2, [r3, #-72]
10004154:	e00c      	b.n	10004170 <_ftoa+0x490>
        } else if (flags & FLAGS_SPACE) {
10004156:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10004158:	f003 0308 	and.w	r3, r3, #8
1000415c:	2b00      	cmp	r3, #0
1000415e:	d007      	beq.n	10004170 <_ftoa+0x490>
            buf[len++] = ' ';
10004160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004162:	1c5a      	adds	r2, r3, #1
10004164:	657a      	str	r2, [r7, #84]	@ 0x54
10004166:	3358      	adds	r3, #88	@ 0x58
10004168:	443b      	add	r3, r7
1000416a:	2220      	movs	r2, #32
1000416c:	f803 2c48 	strb.w	r2, [r3, #-72]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
10004170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10004172:	9303      	str	r3, [sp, #12]
10004174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10004176:	9302      	str	r3, [sp, #8]
10004178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000417a:	9301      	str	r3, [sp, #4]
1000417c:	f107 0310 	add.w	r3, r7, #16
10004180:	9300      	str	r3, [sp, #0]
10004182:	683b      	ldr	r3, [r7, #0]
10004184:	687a      	ldr	r2, [r7, #4]
10004186:	68b9      	ldr	r1, [r7, #8]
10004188:	68f8      	ldr	r0, [r7, #12]
1000418a:	f7ff fba9 	bl	100038e0 <_out_rev>
1000418e:	4603      	mov	r3, r0
}
10004190:	4618      	mov	r0, r3
10004192:	375c      	adds	r7, #92	@ 0x5c
10004194:	46bd      	mov	sp, r7
10004196:	bd90      	pop	{r4, r7, pc}
10004198:	3fe00000 	.word	0x3fe00000
1000419c:	cccccccd 	.word	0xcccccccd
100041a0:	66666667 	.word	0x66666667
100041a4:	00000000 	.word	0x00000000

100041a8 <_etoa>:

#if PICO_PRINTF_SUPPORT_EXPONENTIAL

// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
100041a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100041ac:	b09d      	sub	sp, #116	@ 0x74
100041ae:	af06      	add	r7, sp, #24
100041b0:	61f8      	str	r0, [r7, #28]
100041b2:	61b9      	str	r1, [r7, #24]
100041b4:	617a      	str	r2, [r7, #20]
100041b6:	613b      	str	r3, [r7, #16]
    // check for NaN and special values
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
100041b8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
100041bc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
100041c0:	f7ff fac8 	bl	10003754 <__wrap___aeabi_dcmpun>
100041c4:	4603      	mov	r3, r0
100041c6:	2b00      	cmp	r3, #0
100041c8:	d114      	bne.n	100041f4 <_etoa+0x4c>
100041ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100041ce:	4bc8      	ldr	r3, [pc, #800]	@ (100044f0 <_etoa+0x348>)
100041d0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
100041d4:	f7ff faf8 	bl	100037c8 <__wrap___aeabi_dcmpgt>
100041d8:	4603      	mov	r3, r0
100041da:	2b00      	cmp	r3, #0
100041dc:	d10a      	bne.n	100041f4 <_etoa+0x4c>
100041de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100041e2:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
100041e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
100041ea:	f7ff fac5 	bl	10003778 <__wrap___aeabi_dcmplt>
100041ee:	4603      	mov	r3, r0
100041f0:	2b00      	cmp	r3, #0
100041f2:	d014      	beq.n	1000421e <_etoa+0x76>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
100041f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
100041f8:	9304      	str	r3, [sp, #16]
100041fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
100041fe:	9303      	str	r3, [sp, #12]
10004200:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004204:	9302      	str	r3, [sp, #8]
10004206:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
1000420a:	e9cd 2300 	strd	r2, r3, [sp]
1000420e:	693b      	ldr	r3, [r7, #16]
10004210:	697a      	ldr	r2, [r7, #20]
10004212:	69b9      	ldr	r1, [r7, #24]
10004214:	69f8      	ldr	r0, [r7, #28]
10004216:	f7ff fd63 	bl	10003ce0 <_ftoa>
1000421a:	4603      	mov	r3, r0
1000421c:	e253      	b.n	100046c6 <_etoa+0x51e>
    }

    // determine the sign
    const bool negative = value < 0;
1000421e:	2301      	movs	r3, #1
10004220:	461e      	mov	r6, r3
10004222:	f04f 0200 	mov.w	r2, #0
10004226:	f04f 0300 	mov.w	r3, #0
1000422a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
1000422e:	f7ff faa3 	bl	10003778 <__wrap___aeabi_dcmplt>
10004232:	4603      	mov	r3, r0
10004234:	2b00      	cmp	r3, #0
10004236:	d101      	bne.n	1000423c <_etoa+0x94>
10004238:	2300      	movs	r3, #0
1000423a:	461e      	mov	r6, r3
1000423c:	f887 604b 	strb.w	r6, [r7, #75]	@ 0x4b
    if (negative) {
10004240:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
10004244:	2b00      	cmp	r3, #0
10004246:	d00b      	beq.n	10004260 <_etoa+0xb8>
        value = -value;
10004248:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
1000424c:	603b      	str	r3, [r7, #0]
1000424e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
10004252:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
10004256:	607b      	str	r3, [r7, #4]
10004258:	ed97 7b00 	vldr	d7, [r7]
1000425c:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
10004260:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10004268:	2b00      	cmp	r3, #0
1000426a:	d102      	bne.n	10004272 <_etoa+0xca>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
1000426c:	2306      	movs	r3, #6
1000426e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
10004272:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
10004276:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int expval;
    if (conv.U) {
1000427a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
1000427e:	4313      	orrs	r3, r2
10004280:	f000 8111 	beq.w	100044a6 <_etoa+0x2fe>
        int exp2 = (int) ((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
10004284:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
10004288:	f04f 0200 	mov.w	r2, #0
1000428c:	f04f 0300 	mov.w	r3, #0
10004290:	0d0a      	lsrs	r2, r1, #20
10004292:	2300      	movs	r3, #0
10004294:	4613      	mov	r3, r2
10004296:	f3c3 030a 	ubfx	r3, r3, #0, #11
1000429a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
1000429e:	647b      	str	r3, [r7, #68]	@ 0x44
        conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
100042a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100042a4:	4690      	mov	r8, r2
100042a6:	f3c3 0913 	ubfx	r9, r3, #0, #20
100042aa:	4644      	mov	r4, r8
100042ac:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
100042b0:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
100042b4:	e9c7 4508 	strd	r4, r5, [r7, #32]
        // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
        expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
100042b8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
100042ba:	f7ff fa03 	bl	100036c4 <__wrap___aeabi_i2d>
100042be:	a380      	add	r3, pc, #512	@ (adr r3, 100044c0 <_etoa+0x318>)
100042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100042c4:	f7ff f98a 	bl	100035dc <__wrap___aeabi_dmul>
100042c8:	4602      	mov	r2, r0
100042ca:	460b      	mov	r3, r1
100042cc:	4610      	mov	r0, r2
100042ce:	4619      	mov	r1, r3
100042d0:	a37d      	add	r3, pc, #500	@ (adr r3, 100044c8 <_etoa+0x320>)
100042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
100042d6:	f7ff f959 	bl	1000358c <__wrap___aeabi_dadd>
100042da:	4602      	mov	r2, r0
100042dc:	460b      	mov	r3, r1
100042de:	4614      	mov	r4, r2
100042e0:	461d      	mov	r5, r3
100042e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
100042e6:	f04f 0200 	mov.w	r2, #0
100042ea:	4b82      	ldr	r3, [pc, #520]	@ (100044f4 <_etoa+0x34c>)
100042ec:	f7ff f962 	bl	100035b4 <__wrap___aeabi_dsub>
100042f0:	4602      	mov	r2, r0
100042f2:	460b      	mov	r3, r1
100042f4:	4610      	mov	r0, r2
100042f6:	4619      	mov	r1, r3
100042f8:	a375      	add	r3, pc, #468	@ (adr r3, 100044d0 <_etoa+0x328>)
100042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
100042fe:	f7ff f96d 	bl	100035dc <__wrap___aeabi_dmul>
10004302:	4602      	mov	r2, r0
10004304:	460b      	mov	r3, r1
10004306:	4620      	mov	r0, r4
10004308:	4629      	mov	r1, r5
1000430a:	f7ff f93f 	bl	1000358c <__wrap___aeabi_dadd>
1000430e:	4602      	mov	r2, r0
10004310:	460b      	mov	r3, r1
10004312:	4610      	mov	r0, r2
10004314:	4619      	mov	r1, r3
10004316:	f7ff f9f9 	bl	1000370c <__wrap___aeabi_d2iz>
1000431a:	4603      	mov	r3, r0
1000431c:	657b      	str	r3, [r7, #84]	@ 0x54
        // now we want to compute 10^expval but we want to be sure it won't overflow
        exp2 = (int) (expval * 3.321928094887362 + 0.5);
1000431e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
10004320:	f7ff f9d0 	bl	100036c4 <__wrap___aeabi_i2d>
10004324:	a36c      	add	r3, pc, #432	@ (adr r3, 100044d8 <_etoa+0x330>)
10004326:	e9d3 2300 	ldrd	r2, r3, [r3]
1000432a:	f7ff f957 	bl	100035dc <__wrap___aeabi_dmul>
1000432e:	4602      	mov	r2, r0
10004330:	460b      	mov	r3, r1
10004332:	4610      	mov	r0, r2
10004334:	4619      	mov	r1, r3
10004336:	f04f 0200 	mov.w	r2, #0
1000433a:	4b6f      	ldr	r3, [pc, #444]	@ (100044f8 <_etoa+0x350>)
1000433c:	f7ff f926 	bl	1000358c <__wrap___aeabi_dadd>
10004340:	4602      	mov	r2, r0
10004342:	460b      	mov	r3, r1
10004344:	4610      	mov	r0, r2
10004346:	4619      	mov	r1, r3
10004348:	f7ff f9e0 	bl	1000370c <__wrap___aeabi_d2iz>
1000434c:	4603      	mov	r3, r0
1000434e:	647b      	str	r3, [r7, #68]	@ 0x44
        const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
10004350:	6d78      	ldr	r0, [r7, #84]	@ 0x54
10004352:	f7ff f9b7 	bl	100036c4 <__wrap___aeabi_i2d>
10004356:	a362      	add	r3, pc, #392	@ (adr r3, 100044e0 <_etoa+0x338>)
10004358:	e9d3 2300 	ldrd	r2, r3, [r3]
1000435c:	f7ff f93e 	bl	100035dc <__wrap___aeabi_dmul>
10004360:	4602      	mov	r2, r0
10004362:	460b      	mov	r3, r1
10004364:	4614      	mov	r4, r2
10004366:	461d      	mov	r5, r3
10004368:	6c78      	ldr	r0, [r7, #68]	@ 0x44
1000436a:	f7ff f9ab 	bl	100036c4 <__wrap___aeabi_i2d>
1000436e:	a35e      	add	r3, pc, #376	@ (adr r3, 100044e8 <_etoa+0x340>)
10004370:	e9d3 2300 	ldrd	r2, r3, [r3]
10004374:	f7ff f932 	bl	100035dc <__wrap___aeabi_dmul>
10004378:	4602      	mov	r2, r0
1000437a:	460b      	mov	r3, r1
1000437c:	4620      	mov	r0, r4
1000437e:	4629      	mov	r1, r5
10004380:	f7ff f918 	bl	100035b4 <__wrap___aeabi_dsub>
10004384:	4602      	mov	r2, r0
10004386:	460b      	mov	r3, r1
10004388:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        const double z2 = z * z;
1000438c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
10004390:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10004394:	f7ff f922 	bl	100035dc <__wrap___aeabi_dmul>
10004398:	4602      	mov	r2, r0
1000439a:	460b      	mov	r3, r1
1000439c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        conv.U = (uint64_t) (exp2 + 1023) << 52U;
100043a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100043a2:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
100043a6:	17da      	asrs	r2, r3, #31
100043a8:	469a      	mov	sl, r3
100043aa:	4693      	mov	fp, r2
100043ac:	f04f 0200 	mov.w	r2, #0
100043b0:	f04f 0300 	mov.w	r3, #0
100043b4:	ea4f 530a 	mov.w	r3, sl, lsl #20
100043b8:	2200      	movs	r2, #0
100043ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
        // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
        conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
100043be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
100043c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
100043c6:	4602      	mov	r2, r0
100043c8:	460b      	mov	r3, r1
100043ca:	f7ff f8df 	bl	1000358c <__wrap___aeabi_dadd>
100043ce:	4602      	mov	r2, r0
100043d0:	460b      	mov	r3, r1
100043d2:	4690      	mov	r8, r2
100043d4:	4699      	mov	r9, r3
100043d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
100043da:	f04f 0000 	mov.w	r0, #0
100043de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
100043e2:	f7ff f8e7 	bl	100035b4 <__wrap___aeabi_dsub>
100043e6:	4602      	mov	r2, r0
100043e8:	460b      	mov	r3, r1
100043ea:	4692      	mov	sl, r2
100043ec:	469b      	mov	fp, r3
100043ee:	f04f 0200 	mov.w	r2, #0
100043f2:	4b42      	ldr	r3, [pc, #264]	@ (100044fc <_etoa+0x354>)
100043f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
100043f8:	f7ff f916 	bl	10003628 <__wrap___aeabi_ddiv>
100043fc:	4602      	mov	r2, r0
100043fe:	460b      	mov	r3, r1
10004400:	4610      	mov	r0, r2
10004402:	4619      	mov	r1, r3
10004404:	f04f 0200 	mov.w	r2, #0
10004408:	4b3d      	ldr	r3, [pc, #244]	@ (10004500 <_etoa+0x358>)
1000440a:	f7ff f8bf 	bl	1000358c <__wrap___aeabi_dadd>
1000440e:	4602      	mov	r2, r0
10004410:	460b      	mov	r3, r1
10004412:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
10004416:	f7ff f907 	bl	10003628 <__wrap___aeabi_ddiv>
1000441a:	4602      	mov	r2, r0
1000441c:	460b      	mov	r3, r1
1000441e:	4610      	mov	r0, r2
10004420:	4619      	mov	r1, r3
10004422:	f04f 0200 	mov.w	r2, #0
10004426:	4b37      	ldr	r3, [pc, #220]	@ (10004504 <_etoa+0x35c>)
10004428:	f7ff f8b0 	bl	1000358c <__wrap___aeabi_dadd>
1000442c:	4602      	mov	r2, r0
1000442e:	460b      	mov	r3, r1
10004430:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
10004434:	f7ff f8f8 	bl	10003628 <__wrap___aeabi_ddiv>
10004438:	4602      	mov	r2, r0
1000443a:	460b      	mov	r3, r1
1000443c:	4650      	mov	r0, sl
1000443e:	4659      	mov	r1, fp
10004440:	f7ff f8a4 	bl	1000358c <__wrap___aeabi_dadd>
10004444:	4602      	mov	r2, r0
10004446:	460b      	mov	r3, r1
10004448:	4640      	mov	r0, r8
1000444a:	4649      	mov	r1, r9
1000444c:	f7ff f8ec 	bl	10003628 <__wrap___aeabi_ddiv>
10004450:	4602      	mov	r2, r0
10004452:	460b      	mov	r3, r1
10004454:	4610      	mov	r0, r2
10004456:	4619      	mov	r1, r3
10004458:	f04f 0200 	mov.w	r2, #0
1000445c:	4b2a      	ldr	r3, [pc, #168]	@ (10004508 <_etoa+0x360>)
1000445e:	f7ff f895 	bl	1000358c <__wrap___aeabi_dadd>
10004462:	4602      	mov	r2, r0
10004464:	460b      	mov	r3, r1
10004466:	4620      	mov	r0, r4
10004468:	4629      	mov	r1, r5
1000446a:	f7ff f8b7 	bl	100035dc <__wrap___aeabi_dmul>
1000446e:	4602      	mov	r2, r0
10004470:	460b      	mov	r3, r1
10004472:	e9c7 2308 	strd	r2, r3, [r7, #32]
        // correct for rounding errors
        if (value < conv.F) {
10004476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
1000447a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
1000447e:	f7ff f97b 	bl	10003778 <__wrap___aeabi_dcmplt>
10004482:	4603      	mov	r3, r0
10004484:	2b00      	cmp	r3, #0
10004486:	d010      	beq.n	100044aa <_etoa+0x302>
            expval--;
10004488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000448a:	3b01      	subs	r3, #1
1000448c:	657b      	str	r3, [r7, #84]	@ 0x54
            conv.F /= 10;
1000448e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
10004492:	f04f 0200 	mov.w	r2, #0
10004496:	4b1a      	ldr	r3, [pc, #104]	@ (10004500 <_etoa+0x358>)
10004498:	f7ff f8c6 	bl	10003628 <__wrap___aeabi_ddiv>
1000449c:	4602      	mov	r2, r0
1000449e:	460b      	mov	r3, r1
100044a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
100044a4:	e001      	b.n	100044aa <_etoa+0x302>
        }
    } else {
        expval = 0;
100044a6:	2300      	movs	r3, #0
100044a8:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
100044aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100044ac:	2b63      	cmp	r3, #99	@ 0x63
100044ae:	dc2d      	bgt.n	1000450c <_etoa+0x364>
100044b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100044b2:	f113 0f63 	cmn.w	r3, #99	@ 0x63
100044b6:	db29      	blt.n	1000450c <_etoa+0x364>
100044b8:	2304      	movs	r3, #4
100044ba:	e028      	b.n	1000450e <_etoa+0x366>
100044bc:	f3af 8000 	nop.w
100044c0:	509f79fb 	.word	0x509f79fb
100044c4:	3fd34413 	.word	0x3fd34413
100044c8:	8b60c8b3 	.word	0x8b60c8b3
100044cc:	3fc68a28 	.word	0x3fc68a28
100044d0:	636f4361 	.word	0x636f4361
100044d4:	3fd287a7 	.word	0x3fd287a7
100044d8:	0979a371 	.word	0x0979a371
100044dc:	400a934f 	.word	0x400a934f
100044e0:	bbb55516 	.word	0xbbb55516
100044e4:	40026bb1 	.word	0x40026bb1
100044e8:	fefa39ef 	.word	0xfefa39ef
100044ec:	3fe62e42 	.word	0x3fe62e42
100044f0:	7fefffff 	.word	0x7fefffff
100044f4:	3ff80000 	.word	0x3ff80000
100044f8:	3fe00000 	.word	0x3fe00000
100044fc:	402c0000 	.word	0x402c0000
10004500:	40240000 	.word	0x40240000
10004504:	40180000 	.word	0x40180000
10004508:	3ff00000 	.word	0x3ff00000
1000450c:	2305      	movs	r3, #5
1000450e:	653b      	str	r3, [r7, #80]	@ 0x50

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
10004510:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
10004518:	2b00      	cmp	r3, #0
1000451a:	d041      	beq.n	100045a0 <_etoa+0x3f8>
        // do we want to fall-back to "%f" mode?
        if ((conv.U == 0) || ((value >= 1e-4) && (value < 1e6))) {
1000451c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10004520:	4313      	orrs	r3, r2
10004522:	d013      	beq.n	1000454c <_etoa+0x3a4>
10004524:	a36a      	add	r3, pc, #424	@ (adr r3, 100046d0 <_etoa+0x528>)
10004526:	e9d3 2300 	ldrd	r2, r3, [r3]
1000452a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
1000452e:	f7ff f937 	bl	100037a0 <__wrap___aeabi_dcmpge>
10004532:	4603      	mov	r3, r0
10004534:	2b00      	cmp	r3, #0
10004536:	d024      	beq.n	10004582 <_etoa+0x3da>
10004538:	a367      	add	r3, pc, #412	@ (adr r3, 100046d8 <_etoa+0x530>)
1000453a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000453e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
10004542:	f7ff f919 	bl	10003778 <__wrap___aeabi_dcmplt>
10004546:	4603      	mov	r3, r0
10004548:	2b00      	cmp	r3, #0
1000454a:	d01a      	beq.n	10004582 <_etoa+0x3da>
            if ((int) prec > expval) {
1000454c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004550:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004552:	429a      	cmp	r2, r3
10004554:	da07      	bge.n	10004566 <_etoa+0x3be>
                prec = (unsigned) ((int) prec - expval - 1);
10004556:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
1000455a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000455c:	1ad3      	subs	r3, r2, r3
1000455e:	3b01      	subs	r3, #1
10004560:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
10004564:	e002      	b.n	1000456c <_etoa+0x3c4>
            } else {
                prec = 0;
10004566:	2300      	movs	r3, #0
10004568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
1000456c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004570:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10004574:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            // no characters in exponent
            minwidth = 0U;
10004578:	2300      	movs	r3, #0
1000457a:	653b      	str	r3, [r7, #80]	@ 0x50
            expval = 0;
1000457c:	2300      	movs	r3, #0
1000457e:	657b      	str	r3, [r7, #84]	@ 0x54
10004580:	e00e      	b.n	100045a0 <_etoa+0x3f8>
        } else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
10004582:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004586:	2b00      	cmp	r3, #0
10004588:	d00a      	beq.n	100045a0 <_etoa+0x3f8>
1000458a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
1000458e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10004592:	2b00      	cmp	r3, #0
10004594:	d004      	beq.n	100045a0 <_etoa+0x3f8>
                --prec;
10004596:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
1000459a:	3b01      	subs	r3, #1
1000459c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
100045a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
100045a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (width > minwidth) {
100045a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
100045aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
100045ac:	429a      	cmp	r2, r3
100045ae:	d904      	bls.n	100045ba <_etoa+0x412>
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
100045b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
100045b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
100045b4:	1ad3      	subs	r3, r2, r3
100045b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
100045b8:	e001      	b.n	100045be <_etoa+0x416>
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
100045ba:	2300      	movs	r3, #0
100045bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
100045be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
100045c2:	f003 0302 	and.w	r3, r3, #2
100045c6:	2b00      	cmp	r3, #0
100045c8:	d004      	beq.n	100045d4 <_etoa+0x42c>
100045ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
100045cc:	2b00      	cmp	r3, #0
100045ce:	d001      	beq.n	100045d4 <_etoa+0x42c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
100045d0:	2300      	movs	r3, #0
100045d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    // rescale the float value
    if (expval) {
100045d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100045d6:	2b00      	cmp	r3, #0
100045d8:	d009      	beq.n	100045ee <_etoa+0x446>
        value /= conv.F;
100045da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100045de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
100045e2:	f7ff f821 	bl	10003628 <__wrap___aeabi_ddiv>
100045e6:	4602      	mov	r2, r0
100045e8:	460b      	mov	r3, r1
100045ea:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    }

    // output the floating part
    const size_t start_idx = idx;
100045ee:	697b      	ldr	r3, [r7, #20]
100045f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
100045f2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
100045f6:	2b00      	cmp	r3, #0
100045f8:	d008      	beq.n	1000460c <_etoa+0x464>
100045fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
100045fe:	60bb      	str	r3, [r7, #8]
10004600:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
10004604:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
10004608:	60fb      	str	r3, [r7, #12]
1000460a:	e003      	b.n	10004614 <_etoa+0x46c>
1000460c:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
10004610:	ed87 7b02 	vstr	d7, [r7, #8]
10004614:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004618:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
1000461c:	9304      	str	r3, [sp, #16]
1000461e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10004620:	9303      	str	r3, [sp, #12]
10004622:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004626:	9302      	str	r3, [sp, #8]
10004628:	ed97 7b02 	vldr	d7, [r7, #8]
1000462c:	ed8d 7b00 	vstr	d7, [sp]
10004630:	693b      	ldr	r3, [r7, #16]
10004632:	697a      	ldr	r2, [r7, #20]
10004634:	69b9      	ldr	r1, [r7, #24]
10004636:	69f8      	ldr	r0, [r7, #28]
10004638:	f7ff fb52 	bl	10003ce0 <_ftoa>
1000463c:	6178      	str	r0, [r7, #20]

    // output the exponent part
    if (minwidth) {
1000463e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10004640:	2b00      	cmp	r3, #0
10004642:	d03f      	beq.n	100046c4 <_etoa+0x51c>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
10004644:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004648:	f003 0320 	and.w	r3, r3, #32
1000464c:	2b00      	cmp	r3, #0
1000464e:	d001      	beq.n	10004654 <_etoa+0x4ac>
10004650:	2045      	movs	r0, #69	@ 0x45
10004652:	e000      	b.n	10004656 <_etoa+0x4ae>
10004654:	2065      	movs	r0, #101	@ 0x65
10004656:	697a      	ldr	r2, [r7, #20]
10004658:	1c53      	adds	r3, r2, #1
1000465a:	617b      	str	r3, [r7, #20]
1000465c:	69fc      	ldr	r4, [r7, #28]
1000465e:	693b      	ldr	r3, [r7, #16]
10004660:	69b9      	ldr	r1, [r7, #24]
10004662:	47a0      	blx	r4
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (uint)((expval < 0) ? -expval : expval), expval < 0, 10, 0, minwidth - 1,
10004664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004666:	2b00      	cmp	r3, #0
10004668:	bfb8      	it	lt
1000466a:	425b      	neglt	r3, r3
1000466c:	4618      	mov	r0, r3
1000466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004670:	0fdb      	lsrs	r3, r3, #31
10004672:	b2db      	uxtb	r3, r3
10004674:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10004676:	3a01      	subs	r2, #1
10004678:	2105      	movs	r1, #5
1000467a:	9105      	str	r1, [sp, #20]
1000467c:	9204      	str	r2, [sp, #16]
1000467e:	2200      	movs	r2, #0
10004680:	9203      	str	r2, [sp, #12]
10004682:	220a      	movs	r2, #10
10004684:	9202      	str	r2, [sp, #8]
10004686:	9301      	str	r3, [sp, #4]
10004688:	9000      	str	r0, [sp, #0]
1000468a:	693b      	ldr	r3, [r7, #16]
1000468c:	697a      	ldr	r2, [r7, #20]
1000468e:	69b9      	ldr	r1, [r7, #24]
10004690:	69f8      	ldr	r0, [r7, #28]
10004692:	f7ff fa51 	bl	10003b38 <_ntoa_long>
10004696:	6178      	str	r0, [r7, #20]
                         FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
10004698:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
1000469c:	f003 0302 	and.w	r3, r3, #2
100046a0:	2b00      	cmp	r3, #0
100046a2:	d00f      	beq.n	100046c4 <_etoa+0x51c>
            while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
100046a4:	e007      	b.n	100046b6 <_etoa+0x50e>
100046a6:	697a      	ldr	r2, [r7, #20]
100046a8:	1c53      	adds	r3, r2, #1
100046aa:	617b      	str	r3, [r7, #20]
100046ac:	69fc      	ldr	r4, [r7, #28]
100046ae:	693b      	ldr	r3, [r7, #16]
100046b0:	69b9      	ldr	r1, [r7, #24]
100046b2:	2020      	movs	r0, #32
100046b4:	47a0      	blx	r4
100046b6:	697a      	ldr	r2, [r7, #20]
100046b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100046ba:	1ad3      	subs	r3, r2, r3
100046bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
100046c0:	429a      	cmp	r2, r3
100046c2:	d8f0      	bhi.n	100046a6 <_etoa+0x4fe>
        }
    }
    return idx;
100046c4:	697b      	ldr	r3, [r7, #20]
}
100046c6:	4618      	mov	r0, r3
100046c8:	375c      	adds	r7, #92	@ 0x5c
100046ca:	46bd      	mov	sp, r7
100046cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100046d0:	eb1c432d 	.word	0xeb1c432d
100046d4:	3f1a36e2 	.word	0x3f1a36e2
100046d8:	00000000 	.word	0x00000000
100046dc:	412e8480 	.word	0x412e8480

100046e0 <_vsnprintf>:

#endif  // PICO_PRINTF_SUPPORT_EXPONENTIAL
#endif  // PICO_PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
100046e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
100046e4:	b0a4      	sub	sp, #144	@ 0x90
100046e6:	af0a      	add	r7, sp, #40	@ 0x28
100046e8:	61f8      	str	r0, [r7, #28]
100046ea:	61b9      	str	r1, [r7, #24]
100046ec:	617a      	str	r2, [r7, #20]
100046ee:	613b      	str	r3, [r7, #16]
#if !PICO_PRINTF_ALWAYS_INCLUDED
    lazy_vsnprintf = _vsnprintf;
#endif
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
100046f0:	2300      	movs	r3, #0
100046f2:	657b      	str	r3, [r7, #84]	@ 0x54

    if (!buffer) {
100046f4:	69bb      	ldr	r3, [r7, #24]
100046f6:	2b00      	cmp	r3, #0
100046f8:	f040 84d5 	bne.w	100050a6 <_vsnprintf+0x9c6>
        // use null output function
        out = _out_null;
100046fc:	4ba8      	ldr	r3, [pc, #672]	@ (100049a0 <_vsnprintf+0x2c0>)
100046fe:	61fb      	str	r3, [r7, #28]
    }

    while (*format) {
10004700:	f000 bcd1 	b.w	100050a6 <_vsnprintf+0x9c6>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
10004704:	693b      	ldr	r3, [r7, #16]
10004706:	781b      	ldrb	r3, [r3, #0]
10004708:	2b25      	cmp	r3, #37	@ 0x25
1000470a:	d00d      	beq.n	10004728 <_vsnprintf+0x48>
            // no
            out(*format, buffer, idx++, maxlen);
1000470c:	693b      	ldr	r3, [r7, #16]
1000470e:	7818      	ldrb	r0, [r3, #0]
10004710:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004712:	1c53      	adds	r3, r2, #1
10004714:	657b      	str	r3, [r7, #84]	@ 0x54
10004716:	69fc      	ldr	r4, [r7, #28]
10004718:	697b      	ldr	r3, [r7, #20]
1000471a:	69b9      	ldr	r1, [r7, #24]
1000471c:	47a0      	blx	r4
            format++;
1000471e:	693b      	ldr	r3, [r7, #16]
10004720:	3301      	adds	r3, #1
10004722:	613b      	str	r3, [r7, #16]
            continue;
10004724:	f000 bcbf 	b.w	100050a6 <_vsnprintf+0x9c6>
        } else {
            // yes, evaluate it
            format++;
10004728:	693b      	ldr	r3, [r7, #16]
1000472a:	3301      	adds	r3, #1
1000472c:	613b      	str	r3, [r7, #16]
        }

        // evaluate flags
        flags = 0U;
1000472e:	2300      	movs	r3, #0
10004730:	667b      	str	r3, [r7, #100]	@ 0x64
        do {
            switch (*format) {
10004732:	693b      	ldr	r3, [r7, #16]
10004734:	781b      	ldrb	r3, [r3, #0]
10004736:	3b20      	subs	r3, #32
10004738:	2b10      	cmp	r3, #16
1000473a:	d857      	bhi.n	100047ec <_vsnprintf+0x10c>
1000473c:	a201      	add	r2, pc, #4	@ (adr r2, 10004744 <_vsnprintf+0x64>)
1000473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004742:	bf00      	nop
10004744:	100047c5 	.word	0x100047c5
10004748:	100047ed 	.word	0x100047ed
1000474c:	100047ed 	.word	0x100047ed
10004750:	100047d9 	.word	0x100047d9
10004754:	100047ed 	.word	0x100047ed
10004758:	100047ed 	.word	0x100047ed
1000475c:	100047ed 	.word	0x100047ed
10004760:	100047ed 	.word	0x100047ed
10004764:	100047ed 	.word	0x100047ed
10004768:	100047ed 	.word	0x100047ed
1000476c:	100047ed 	.word	0x100047ed
10004770:	100047b1 	.word	0x100047b1
10004774:	100047ed 	.word	0x100047ed
10004778:	1000479d 	.word	0x1000479d
1000477c:	100047ed 	.word	0x100047ed
10004780:	100047ed 	.word	0x100047ed
10004784:	10004789 	.word	0x10004789
                case '0':
                    flags |= FLAGS_ZEROPAD;
10004788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000478a:	f043 0301 	orr.w	r3, r3, #1
1000478e:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
10004790:	693b      	ldr	r3, [r7, #16]
10004792:	3301      	adds	r3, #1
10004794:	613b      	str	r3, [r7, #16]
                    n = 1U;
10004796:	2301      	movs	r3, #1
10004798:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
1000479a:	e02a      	b.n	100047f2 <_vsnprintf+0x112>
                case '-':
                    flags |= FLAGS_LEFT;
1000479c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000479e:	f043 0302 	orr.w	r3, r3, #2
100047a2:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
100047a4:	693b      	ldr	r3, [r7, #16]
100047a6:	3301      	adds	r3, #1
100047a8:	613b      	str	r3, [r7, #16]
                    n = 1U;
100047aa:	2301      	movs	r3, #1
100047ac:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
100047ae:	e020      	b.n	100047f2 <_vsnprintf+0x112>
                case '+':
                    flags |= FLAGS_PLUS;
100047b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100047b2:	f043 0304 	orr.w	r3, r3, #4
100047b6:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
100047b8:	693b      	ldr	r3, [r7, #16]
100047ba:	3301      	adds	r3, #1
100047bc:	613b      	str	r3, [r7, #16]
                    n = 1U;
100047be:	2301      	movs	r3, #1
100047c0:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
100047c2:	e016      	b.n	100047f2 <_vsnprintf+0x112>
                case ' ':
                    flags |= FLAGS_SPACE;
100047c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100047c6:	f043 0308 	orr.w	r3, r3, #8
100047ca:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
100047cc:	693b      	ldr	r3, [r7, #16]
100047ce:	3301      	adds	r3, #1
100047d0:	613b      	str	r3, [r7, #16]
                    n = 1U;
100047d2:	2301      	movs	r3, #1
100047d4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
100047d6:	e00c      	b.n	100047f2 <_vsnprintf+0x112>
                case '#':
                    flags |= FLAGS_HASH;
100047d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100047da:	f043 0310 	orr.w	r3, r3, #16
100047de:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
100047e0:	693b      	ldr	r3, [r7, #16]
100047e2:	3301      	adds	r3, #1
100047e4:	613b      	str	r3, [r7, #16]
                    n = 1U;
100047e6:	2301      	movs	r3, #1
100047e8:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
100047ea:	e002      	b.n	100047f2 <_vsnprintf+0x112>
                default :
                    n = 0U;
100047ec:	2300      	movs	r3, #0
100047ee:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
100047f0:	bf00      	nop
            }
        } while (n);
100047f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
100047f4:	2b00      	cmp	r3, #0
100047f6:	d19c      	bne.n	10004732 <_vsnprintf+0x52>

        // evaluate width field
        width = 0U;
100047f8:	2300      	movs	r3, #0
100047fa:	663b      	str	r3, [r7, #96]	@ 0x60
        if (_is_digit(*format)) {
100047fc:	693b      	ldr	r3, [r7, #16]
100047fe:	781b      	ldrb	r3, [r3, #0]
10004800:	4618      	mov	r0, r3
10004802:	f7ff f832 	bl	1000386a <_is_digit>
10004806:	4603      	mov	r3, r0
10004808:	2b00      	cmp	r3, #0
1000480a:	d006      	beq.n	1000481a <_vsnprintf+0x13a>
            width = _atoi(&format);
1000480c:	f107 0310 	add.w	r3, r7, #16
10004810:	4618      	mov	r0, r3
10004812:	f7ff f841 	bl	10003898 <_atoi>
10004816:	6638      	str	r0, [r7, #96]	@ 0x60
10004818:	e01a      	b.n	10004850 <_vsnprintf+0x170>
        } else if (*format == '*') {
1000481a:	693b      	ldr	r3, [r7, #16]
1000481c:	781b      	ldrb	r3, [r3, #0]
1000481e:	2b2a      	cmp	r3, #42	@ 0x2a
10004820:	d116      	bne.n	10004850 <_vsnprintf+0x170>
            const int w = va_arg(va, int);
10004822:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004826:	1d1a      	adds	r2, r3, #4
10004828:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
1000482c:	681b      	ldr	r3, [r3, #0]
1000482e:	643b      	str	r3, [r7, #64]	@ 0x40
            if (w < 0) {
10004830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004832:	2b00      	cmp	r3, #0
10004834:	da07      	bge.n	10004846 <_vsnprintf+0x166>
                flags |= FLAGS_LEFT;    // reverse padding
10004836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004838:	f043 0302 	orr.w	r3, r3, #2
1000483c:	667b      	str	r3, [r7, #100]	@ 0x64
                width = (unsigned int) -w;
1000483e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004840:	425b      	negs	r3, r3
10004842:	663b      	str	r3, [r7, #96]	@ 0x60
10004844:	e001      	b.n	1000484a <_vsnprintf+0x16a>
            } else {
                width = (unsigned int) w;
10004846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004848:	663b      	str	r3, [r7, #96]	@ 0x60
            }
            format++;
1000484a:	693b      	ldr	r3, [r7, #16]
1000484c:	3301      	adds	r3, #1
1000484e:	613b      	str	r3, [r7, #16]
        }

        // evaluate precision field
        precision = 0U;
10004850:	2300      	movs	r3, #0
10004852:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (*format == '.') {
10004854:	693b      	ldr	r3, [r7, #16]
10004856:	781b      	ldrb	r3, [r3, #0]
10004858:	2b2e      	cmp	r3, #46	@ 0x2e
1000485a:	d127      	bne.n	100048ac <_vsnprintf+0x1cc>
            flags |= FLAGS_PRECISION;
1000485c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000485e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10004862:	667b      	str	r3, [r7, #100]	@ 0x64
            format++;
10004864:	693b      	ldr	r3, [r7, #16]
10004866:	3301      	adds	r3, #1
10004868:	613b      	str	r3, [r7, #16]
            if (_is_digit(*format)) {
1000486a:	693b      	ldr	r3, [r7, #16]
1000486c:	781b      	ldrb	r3, [r3, #0]
1000486e:	4618      	mov	r0, r3
10004870:	f7fe fffb 	bl	1000386a <_is_digit>
10004874:	4603      	mov	r3, r0
10004876:	2b00      	cmp	r3, #0
10004878:	d006      	beq.n	10004888 <_vsnprintf+0x1a8>
                precision = _atoi(&format);
1000487a:	f107 0310 	add.w	r3, r7, #16
1000487e:	4618      	mov	r0, r3
10004880:	f7ff f80a 	bl	10003898 <_atoi>
10004884:	65f8      	str	r0, [r7, #92]	@ 0x5c
10004886:	e011      	b.n	100048ac <_vsnprintf+0x1cc>
            } else if (*format == '*') {
10004888:	693b      	ldr	r3, [r7, #16]
1000488a:	781b      	ldrb	r3, [r3, #0]
1000488c:	2b2a      	cmp	r3, #42	@ 0x2a
1000488e:	d10d      	bne.n	100048ac <_vsnprintf+0x1cc>
                const int prec = (int) va_arg(va, int);
10004890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004894:	1d1a      	adds	r2, r3, #4
10004896:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
1000489a:	681b      	ldr	r3, [r3, #0]
1000489c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                precision = prec > 0 ? (unsigned int) prec : 0U;
1000489e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100048a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
100048a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                format++;
100048a6:	693b      	ldr	r3, [r7, #16]
100048a8:	3301      	adds	r3, #1
100048aa:	613b      	str	r3, [r7, #16]
            }
        }

        // evaluate length field
        switch (*format) {
100048ac:	693b      	ldr	r3, [r7, #16]
100048ae:	781b      	ldrb	r3, [r3, #0]
100048b0:	3b68      	subs	r3, #104	@ 0x68
100048b2:	2b12      	cmp	r3, #18
100048b4:	d866      	bhi.n	10004984 <_vsnprintf+0x2a4>
100048b6:	a201      	add	r2, pc, #4	@ (adr r2, 100048bc <_vsnprintf+0x1dc>)
100048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100048bc:	1000492f 	.word	0x1000492f
100048c0:	10004985 	.word	0x10004985
100048c4:	10004965 	.word	0x10004965
100048c8:	10004985 	.word	0x10004985
100048cc:	10004909 	.word	0x10004909
100048d0:	10004985 	.word	0x10004985
100048d4:	10004985 	.word	0x10004985
100048d8:	10004985 	.word	0x10004985
100048dc:	10004985 	.word	0x10004985
100048e0:	10004985 	.word	0x10004985
100048e4:	10004985 	.word	0x10004985
100048e8:	10004985 	.word	0x10004985
100048ec:	10004955 	.word	0x10004955
100048f0:	10004985 	.word	0x10004985
100048f4:	10004985 	.word	0x10004985
100048f8:	10004985 	.word	0x10004985
100048fc:	10004985 	.word	0x10004985
10004900:	10004985 	.word	0x10004985
10004904:	10004975 	.word	0x10004975
            case 'l' :
                flags |= FLAGS_LONG;
10004908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000490a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000490e:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
10004910:	693b      	ldr	r3, [r7, #16]
10004912:	3301      	adds	r3, #1
10004914:	613b      	str	r3, [r7, #16]
                if (*format == 'l') {
10004916:	693b      	ldr	r3, [r7, #16]
10004918:	781b      	ldrb	r3, [r3, #0]
1000491a:	2b6c      	cmp	r3, #108	@ 0x6c
1000491c:	d134      	bne.n	10004988 <_vsnprintf+0x2a8>
                    flags |= FLAGS_LONG_LONG;
1000491e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004920:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
10004924:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
10004926:	693b      	ldr	r3, [r7, #16]
10004928:	3301      	adds	r3, #1
1000492a:	613b      	str	r3, [r7, #16]
                }
                break;
1000492c:	e02c      	b.n	10004988 <_vsnprintf+0x2a8>
            case 'h' :
                flags |= FLAGS_SHORT;
1000492e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
10004934:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
10004936:	693b      	ldr	r3, [r7, #16]
10004938:	3301      	adds	r3, #1
1000493a:	613b      	str	r3, [r7, #16]
                if (*format == 'h') {
1000493c:	693b      	ldr	r3, [r7, #16]
1000493e:	781b      	ldrb	r3, [r3, #0]
10004940:	2b68      	cmp	r3, #104	@ 0x68
10004942:	d123      	bne.n	1000498c <_vsnprintf+0x2ac>
                    flags |= FLAGS_CHAR;
10004944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1000494a:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
1000494c:	693b      	ldr	r3, [r7, #16]
1000494e:	3301      	adds	r3, #1
10004950:	613b      	str	r3, [r7, #16]
                }
                break;
10004952:	e01b      	b.n	1000498c <_vsnprintf+0x2ac>
#if PICO_PRINTF_SUPPORT_PTRDIFF_T
            case 't' :
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10004954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000495a:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
1000495c:	693b      	ldr	r3, [r7, #16]
1000495e:	3301      	adds	r3, #1
10004960:	613b      	str	r3, [r7, #16]
                break;
10004962:	e014      	b.n	1000498e <_vsnprintf+0x2ae>
#endif
            case 'j' :
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10004964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
1000496a:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
1000496c:	693b      	ldr	r3, [r7, #16]
1000496e:	3301      	adds	r3, #1
10004970:	613b      	str	r3, [r7, #16]
                break;
10004972:	e00c      	b.n	1000498e <_vsnprintf+0x2ae>
            case 'z' :
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
10004974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004976:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1000497a:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
1000497c:	693b      	ldr	r3, [r7, #16]
1000497e:	3301      	adds	r3, #1
10004980:	613b      	str	r3, [r7, #16]
                break;
10004982:	e004      	b.n	1000498e <_vsnprintf+0x2ae>
            default :
                break;
10004984:	bf00      	nop
10004986:	e002      	b.n	1000498e <_vsnprintf+0x2ae>
                break;
10004988:	bf00      	nop
1000498a:	e000      	b.n	1000498e <_vsnprintf+0x2ae>
                break;
1000498c:	bf00      	nop
        }

        // evaluate specifier
        switch (*format) {
1000498e:	693b      	ldr	r3, [r7, #16]
10004990:	781b      	ldrb	r3, [r3, #0]
10004992:	2b67      	cmp	r3, #103	@ 0x67
10004994:	f300 80b8 	bgt.w	10004b08 <_vsnprintf+0x428>
10004998:	2b25      	cmp	r3, #37	@ 0x25
1000499a:	da27      	bge.n	100049ec <_vsnprintf+0x30c>
1000499c:	e376      	b.n	1000508c <_vsnprintf+0x9ac>
1000499e:	bf00      	nop
100049a0:	100037e9 	.word	0x100037e9
100049a4:	3b69      	subs	r3, #105	@ 0x69
100049a6:	2201      	movs	r2, #1
100049a8:	fa02 f303 	lsl.w	r3, r2, r3
100049ac:	f249 0241 	movw	r2, #36929	@ 0x9041
100049b0:	401a      	ands	r2, r3
100049b2:	2a00      	cmp	r2, #0
100049b4:	bf14      	ite	ne
100049b6:	2201      	movne	r2, #1
100049b8:	2200      	moveq	r2, #0
100049ba:	b2d2      	uxtb	r2, r2
100049bc:	2a00      	cmp	r2, #0
100049be:	f040 80aa 	bne.w	10004b16 <_vsnprintf+0x436>
100049c2:	f003 0280 	and.w	r2, r3, #128	@ 0x80
100049c6:	2a00      	cmp	r2, #0
100049c8:	bf14      	ite	ne
100049ca:	2201      	movne	r2, #1
100049cc:	2200      	moveq	r2, #0
100049ce:	b2d2      	uxtb	r2, r2
100049d0:	2a00      	cmp	r2, #0
100049d2:	f040 8301 	bne.w	10004fd8 <_vsnprintf+0x8f8>
100049d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
100049da:	2b00      	cmp	r3, #0
100049dc:	bf14      	ite	ne
100049de:	2301      	movne	r3, #1
100049e0:	2300      	moveq	r3, #0
100049e2:	b2db      	uxtb	r3, r3
100049e4:	2b00      	cmp	r3, #0
100049e6:	f040 8293 	bne.w	10004f10 <_vsnprintf+0x830>
100049ea:	e34f      	b.n	1000508c <_vsnprintf+0x9ac>
100049ec:	3b25      	subs	r3, #37	@ 0x25
100049ee:	2b42      	cmp	r3, #66	@ 0x42
100049f0:	f200 834c 	bhi.w	1000508c <_vsnprintf+0x9ac>
100049f4:	a201      	add	r2, pc, #4	@ (adr r2, 100049fc <_vsnprintf+0x31c>)
100049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100049fa:	bf00      	nop
100049fc:	10005075 	.word	0x10005075
10004a00:	1000508d 	.word	0x1000508d
10004a04:	1000508d 	.word	0x1000508d
10004a08:	1000508d 	.word	0x1000508d
10004a0c:	1000508d 	.word	0x1000508d
10004a10:	1000508d 	.word	0x1000508d
10004a14:	1000508d 	.word	0x1000508d
10004a18:	1000508d 	.word	0x1000508d
10004a1c:	1000508d 	.word	0x1000508d
10004a20:	1000508d 	.word	0x1000508d
10004a24:	1000508d 	.word	0x1000508d
10004a28:	1000508d 	.word	0x1000508d
10004a2c:	1000508d 	.word	0x1000508d
10004a30:	1000508d 	.word	0x1000508d
10004a34:	1000508d 	.word	0x1000508d
10004a38:	1000508d 	.word	0x1000508d
10004a3c:	1000508d 	.word	0x1000508d
10004a40:	1000508d 	.word	0x1000508d
10004a44:	1000508d 	.word	0x1000508d
10004a48:	1000508d 	.word	0x1000508d
10004a4c:	1000508d 	.word	0x1000508d
10004a50:	1000508d 	.word	0x1000508d
10004a54:	1000508d 	.word	0x1000508d
10004a58:	1000508d 	.word	0x1000508d
10004a5c:	1000508d 	.word	0x1000508d
10004a60:	1000508d 	.word	0x1000508d
10004a64:	1000508d 	.word	0x1000508d
10004a68:	1000508d 	.word	0x1000508d
10004a6c:	1000508d 	.word	0x1000508d
10004a70:	1000508d 	.word	0x1000508d
10004a74:	1000508d 	.word	0x1000508d
10004a78:	1000508d 	.word	0x1000508d
10004a7c:	10004e2d 	.word	0x10004e2d
10004a80:	10004de1 	.word	0x10004de1
10004a84:	10004e2d 	.word	0x10004e2d
10004a88:	1000508d 	.word	0x1000508d
10004a8c:	1000508d 	.word	0x1000508d
10004a90:	1000508d 	.word	0x1000508d
10004a94:	1000508d 	.word	0x1000508d
10004a98:	1000508d 	.word	0x1000508d
10004a9c:	1000508d 	.word	0x1000508d
10004aa0:	1000508d 	.word	0x1000508d
10004aa4:	1000508d 	.word	0x1000508d
10004aa8:	1000508d 	.word	0x1000508d
10004aac:	1000508d 	.word	0x1000508d
10004ab0:	1000508d 	.word	0x1000508d
10004ab4:	1000508d 	.word	0x1000508d
10004ab8:	1000508d 	.word	0x1000508d
10004abc:	1000508d 	.word	0x1000508d
10004ac0:	1000508d 	.word	0x1000508d
10004ac4:	1000508d 	.word	0x1000508d
10004ac8:	10004b17 	.word	0x10004b17
10004acc:	1000508d 	.word	0x1000508d
10004ad0:	1000508d 	.word	0x1000508d
10004ad4:	1000508d 	.word	0x1000508d
10004ad8:	1000508d 	.word	0x1000508d
10004adc:	1000508d 	.word	0x1000508d
10004ae0:	1000508d 	.word	0x1000508d
10004ae4:	1000508d 	.word	0x1000508d
10004ae8:	1000508d 	.word	0x1000508d
10004aec:	1000508d 	.word	0x1000508d
10004af0:	10004b17 	.word	0x10004b17
10004af4:	10004e99 	.word	0x10004e99
10004af8:	10004b17 	.word	0x10004b17
10004afc:	10004e2d 	.word	0x10004e2d
10004b00:	10004de1 	.word	0x10004de1
10004b04:	10004e2d 	.word	0x10004e2d
10004b08:	2b78      	cmp	r3, #120	@ 0x78
10004b0a:	f300 82bf 	bgt.w	1000508c <_vsnprintf+0x9ac>
10004b0e:	2b69      	cmp	r3, #105	@ 0x69
10004b10:	f6bf af48 	bge.w	100049a4 <_vsnprintf+0x2c4>
10004b14:	e2ba      	b.n	1000508c <_vsnprintf+0x9ac>
            case 'X' :
            case 'o' :
            case 'b' : {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
10004b16:	693b      	ldr	r3, [r7, #16]
10004b18:	781b      	ldrb	r3, [r3, #0]
10004b1a:	2b78      	cmp	r3, #120	@ 0x78
10004b1c:	d003      	beq.n	10004b26 <_vsnprintf+0x446>
10004b1e:	693b      	ldr	r3, [r7, #16]
10004b20:	781b      	ldrb	r3, [r3, #0]
10004b22:	2b58      	cmp	r3, #88	@ 0x58
10004b24:	d102      	bne.n	10004b2c <_vsnprintf+0x44c>
                    base = 16U;
10004b26:	2310      	movs	r3, #16
10004b28:	653b      	str	r3, [r7, #80]	@ 0x50
10004b2a:	e013      	b.n	10004b54 <_vsnprintf+0x474>
                } else if (*format == 'o') {
10004b2c:	693b      	ldr	r3, [r7, #16]
10004b2e:	781b      	ldrb	r3, [r3, #0]
10004b30:	2b6f      	cmp	r3, #111	@ 0x6f
10004b32:	d102      	bne.n	10004b3a <_vsnprintf+0x45a>
                    base = 8U;
10004b34:	2308      	movs	r3, #8
10004b36:	653b      	str	r3, [r7, #80]	@ 0x50
10004b38:	e00c      	b.n	10004b54 <_vsnprintf+0x474>
                } else if (*format == 'b') {
10004b3a:	693b      	ldr	r3, [r7, #16]
10004b3c:	781b      	ldrb	r3, [r3, #0]
10004b3e:	2b62      	cmp	r3, #98	@ 0x62
10004b40:	d102      	bne.n	10004b48 <_vsnprintf+0x468>
                    base = 2U;
10004b42:	2302      	movs	r3, #2
10004b44:	653b      	str	r3, [r7, #80]	@ 0x50
10004b46:	e005      	b.n	10004b54 <_vsnprintf+0x474>
                } else {
                    base = 10U;
10004b48:	230a      	movs	r3, #10
10004b4a:	653b      	str	r3, [r7, #80]	@ 0x50
                    flags &= ~FLAGS_HASH;   // no hash for dec format
10004b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004b4e:	f023 0310 	bic.w	r3, r3, #16
10004b52:	667b      	str	r3, [r7, #100]	@ 0x64
                }
                // uppercase
                if (*format == 'X') {
10004b54:	693b      	ldr	r3, [r7, #16]
10004b56:	781b      	ldrb	r3, [r3, #0]
10004b58:	2b58      	cmp	r3, #88	@ 0x58
10004b5a:	d103      	bne.n	10004b64 <_vsnprintf+0x484>
                    flags |= FLAGS_UPPERCASE;
10004b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004b5e:	f043 0320 	orr.w	r3, r3, #32
10004b62:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
10004b64:	693b      	ldr	r3, [r7, #16]
10004b66:	781b      	ldrb	r3, [r3, #0]
10004b68:	2b69      	cmp	r3, #105	@ 0x69
10004b6a:	d007      	beq.n	10004b7c <_vsnprintf+0x49c>
10004b6c:	693b      	ldr	r3, [r7, #16]
10004b6e:	781b      	ldrb	r3, [r3, #0]
10004b70:	2b64      	cmp	r3, #100	@ 0x64
10004b72:	d003      	beq.n	10004b7c <_vsnprintf+0x49c>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
10004b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004b76:	f023 030c 	bic.w	r3, r3, #12
10004b7a:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
10004b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10004b82:	2b00      	cmp	r3, #0
10004b84:	d003      	beq.n	10004b8e <_vsnprintf+0x4ae>
                    flags &= ~FLAGS_ZEROPAD;
10004b86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004b88:	f023 0301 	bic.w	r3, r3, #1
10004b8c:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
10004b8e:	693b      	ldr	r3, [r7, #16]
10004b90:	781b      	ldrb	r3, [r3, #0]
10004b92:	2b69      	cmp	r3, #105	@ 0x69
10004b94:	d004      	beq.n	10004ba0 <_vsnprintf+0x4c0>
10004b96:	693b      	ldr	r3, [r7, #16]
10004b98:	781b      	ldrb	r3, [r3, #0]
10004b9a:	2b64      	cmp	r3, #100	@ 0x64
10004b9c:	f040 80a0 	bne.w	10004ce0 <_vsnprintf+0x600>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
10004ba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
10004ba6:	2b00      	cmp	r3, #0
10004ba8:	d039      	beq.n	10004c1e <_vsnprintf+0x53e>
#if PICO_PRINTF_SUPPORT_LONG_LONG
                        const long long value = va_arg(va, long long);
10004baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004bae:	3307      	adds	r3, #7
10004bb0:	f023 0307 	bic.w	r3, r3, #7
10004bb4:	f103 0208 	add.w	r2, r3, #8
10004bb8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
10004bc0:	e9c7 2308 	strd	r2, r3, [r7, #32]
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
10004bc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10004bc8:	2b00      	cmp	r3, #0
10004bca:	da06      	bge.n	10004bda <_vsnprintf+0x4fa>
10004bcc:	2100      	movs	r1, #0
10004bce:	f1d2 0800 	rsbs	r8, r2, #0
10004bd2:	eb61 0903 	sbc.w	r9, r1, r3
10004bd6:	4642      	mov	r2, r8
10004bd8:	464b      	mov	r3, r9
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
10004bda:	4614      	mov	r4, r2
10004bdc:	461d      	mov	r5, r3
10004bde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
10004be2:	f04f 0200 	mov.w	r2, #0
10004be6:	f04f 0300 	mov.w	r3, #0
10004bea:	0fca      	lsrs	r2, r1, #31
10004bec:	2300      	movs	r3, #0
10004bee:	b2d3      	uxtb	r3, r2
10004bf0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10004bf2:	2100      	movs	r1, #0
10004bf4:	4692      	mov	sl, r2
10004bf6:	468b      	mov	fp, r1
10004bf8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
10004bfa:	9208      	str	r2, [sp, #32]
10004bfc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10004bfe:	9207      	str	r2, [sp, #28]
10004c00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
10004c02:	9206      	str	r2, [sp, #24]
10004c04:	e9cd ab04 	strd	sl, fp, [sp, #16]
10004c08:	9302      	str	r3, [sp, #8]
10004c0a:	e9cd 4500 	strd	r4, r5, [sp]
10004c0e:	697b      	ldr	r3, [r7, #20]
10004c10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004c12:	69b9      	ldr	r1, [r7, #24]
10004c14:	69f8      	ldr	r0, [r7, #28]
10004c16:	f7fe fff5 	bl	10003c04 <_ntoa_long_long>
10004c1a:	6578      	str	r0, [r7, #84]	@ 0x54
                    if (flags & FLAGS_LONG_LONG) {
10004c1c:	e0dc      	b.n	10004dd8 <_vsnprintf+0x6f8>
                                              precision, width, flags);
#endif
                    } else if (flags & FLAGS_LONG) {
10004c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10004c24:	2b00      	cmp	r3, #0
10004c26:	d020      	beq.n	10004c6a <_vsnprintf+0x58a>
                        const long value = va_arg(va, long);
10004c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004c2c:	1d1a      	adds	r2, r3, #4
10004c2e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004c32:	681b      	ldr	r3, [r3, #0]
10004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
10004c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004c38:	2b00      	cmp	r3, #0
10004c3a:	bfb8      	it	lt
10004c3c:	425b      	neglt	r3, r3
10004c3e:	4619      	mov	r1, r3
10004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004c42:	0fdb      	lsrs	r3, r3, #31
10004c44:	b2db      	uxtb	r3, r3
10004c46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
10004c48:	9205      	str	r2, [sp, #20]
10004c4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10004c4c:	9204      	str	r2, [sp, #16]
10004c4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
10004c50:	9203      	str	r2, [sp, #12]
10004c52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10004c54:	9202      	str	r2, [sp, #8]
10004c56:	9301      	str	r3, [sp, #4]
10004c58:	9100      	str	r1, [sp, #0]
10004c5a:	697b      	ldr	r3, [r7, #20]
10004c5c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004c5e:	69b9      	ldr	r1, [r7, #24]
10004c60:	69f8      	ldr	r0, [r7, #28]
10004c62:	f7fe ff69 	bl	10003b38 <_ntoa_long>
10004c66:	6578      	str	r0, [r7, #84]	@ 0x54
                    if (flags & FLAGS_LONG_LONG) {
10004c68:	e0b6      	b.n	10004dd8 <_vsnprintf+0x6f8>
                                         value < 0, base, precision, width, flags);
                    } else {
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10004c6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
10004c70:	2b00      	cmp	r3, #0
10004c72:	d007      	beq.n	10004c84 <_vsnprintf+0x5a4>
10004c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004c78:	1d1a      	adds	r2, r3, #4
10004c7a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004c7e:	681b      	ldr	r3, [r3, #0]
10004c80:	b2db      	uxtb	r3, r3
10004c82:	e012      	b.n	10004caa <_vsnprintf+0x5ca>
10004c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                                                                                          ? (short int) va_arg(va, int)
                                                                                          : va_arg(va, int);
10004c8a:	2b00      	cmp	r3, #0
10004c8c:	d007      	beq.n	10004c9e <_vsnprintf+0x5be>
                                                                                          ? (short int) va_arg(va, int)
10004c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004c92:	1d1a      	adds	r2, r3, #4
10004c94:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004c98:	681b      	ldr	r3, [r3, #0]
10004c9a:	b21b      	sxth	r3, r3
10004c9c:	e005      	b.n	10004caa <_vsnprintf+0x5ca>
                                                                                          : va_arg(va, int);
10004c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004ca2:	1d1a      	adds	r2, r3, #4
10004ca4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004ca8:	681b      	ldr	r3, [r3, #0]
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
10004caa:	633b      	str	r3, [r7, #48]	@ 0x30
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
10004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10004cae:	2b00      	cmp	r3, #0
10004cb0:	bfb8      	it	lt
10004cb2:	425b      	neglt	r3, r3
10004cb4:	4619      	mov	r1, r3
10004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10004cb8:	0fdb      	lsrs	r3, r3, #31
10004cba:	b2db      	uxtb	r3, r3
10004cbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
10004cbe:	9205      	str	r2, [sp, #20]
10004cc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10004cc2:	9204      	str	r2, [sp, #16]
10004cc4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
10004cc6:	9203      	str	r2, [sp, #12]
10004cc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10004cca:	9202      	str	r2, [sp, #8]
10004ccc:	9301      	str	r3, [sp, #4]
10004cce:	9100      	str	r1, [sp, #0]
10004cd0:	697b      	ldr	r3, [r7, #20]
10004cd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004cd4:	69b9      	ldr	r1, [r7, #24]
10004cd6:	69f8      	ldr	r0, [r7, #28]
10004cd8:	f7fe ff2e 	bl	10003b38 <_ntoa_long>
10004cdc:	6578      	str	r0, [r7, #84]	@ 0x54
                    if (flags & FLAGS_LONG_LONG) {
10004cde:	e07b      	b.n	10004dd8 <_vsnprintf+0x6f8>
                                         value < 0, base, precision, width, flags);
                    }
                } else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
10004ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
10004ce6:	2b00      	cmp	r3, #0
10004ce8:	d024      	beq.n	10004d34 <_vsnprintf+0x654>
#if PICO_PRINTF_SUPPORT_LONG_LONG
                        idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
10004cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004cee:	3307      	adds	r3, #7
10004cf0:	f023 0307 	bic.w	r3, r3, #7
10004cf4:	f103 0208 	add.w	r2, r3, #8
10004cf8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
10004d00:	6d39      	ldr	r1, [r7, #80]	@ 0x50
10004d02:	2000      	movs	r0, #0
10004d04:	60b9      	str	r1, [r7, #8]
10004d06:	60f8      	str	r0, [r7, #12]
10004d08:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10004d0a:	9108      	str	r1, [sp, #32]
10004d0c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
10004d0e:	9107      	str	r1, [sp, #28]
10004d10:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
10004d12:	9106      	str	r1, [sp, #24]
10004d14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
10004d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
10004d1c:	2100      	movs	r1, #0
10004d1e:	9102      	str	r1, [sp, #8]
10004d20:	e9cd 2300 	strd	r2, r3, [sp]
10004d24:	697b      	ldr	r3, [r7, #20]
10004d26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004d28:	69b9      	ldr	r1, [r7, #24]
10004d2a:	69f8      	ldr	r0, [r7, #28]
10004d2c:	f7fe ff6a 	bl	10003c04 <_ntoa_long_long>
10004d30:	6578      	str	r0, [r7, #84]	@ 0x54
10004d32:	e051      	b.n	10004dd8 <_vsnprintf+0x6f8>
                                              precision, width, flags);
#endif
                    } else if (flags & FLAGS_LONG) {
10004d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10004d3a:	2b00      	cmp	r3, #0
10004d3c:	d018      	beq.n	10004d70 <_vsnprintf+0x690>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
10004d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004d42:	1d1a      	adds	r2, r3, #4
10004d44:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004d48:	681b      	ldr	r3, [r3, #0]
10004d4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
10004d4c:	9205      	str	r2, [sp, #20]
10004d4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10004d50:	9204      	str	r2, [sp, #16]
10004d52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
10004d54:	9203      	str	r2, [sp, #12]
10004d56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10004d58:	9202      	str	r2, [sp, #8]
10004d5a:	2200      	movs	r2, #0
10004d5c:	9201      	str	r2, [sp, #4]
10004d5e:	9300      	str	r3, [sp, #0]
10004d60:	697b      	ldr	r3, [r7, #20]
10004d62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004d64:	69b9      	ldr	r1, [r7, #24]
10004d66:	69f8      	ldr	r0, [r7, #28]
10004d68:	f7fe fee6 	bl	10003b38 <_ntoa_long>
10004d6c:	6578      	str	r0, [r7, #84]	@ 0x54
10004d6e:	e033      	b.n	10004dd8 <_vsnprintf+0x6f8>
                                         width, flags);
                    } else {
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
10004d70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
                                                                        : (flags & FLAGS_SHORT)
10004d76:	2b00      	cmp	r3, #0
10004d78:	d007      	beq.n	10004d8a <_vsnprintf+0x6aa>
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
10004d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004d7e:	1d1a      	adds	r2, r3, #4
10004d80:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004d84:	681b      	ldr	r3, [r3, #0]
10004d86:	b2db      	uxtb	r3, r3
10004d88:	e012      	b.n	10004db0 <_vsnprintf+0x6d0>
                                                                        : (flags & FLAGS_SHORT)
10004d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                                                                          ? (unsigned short int) va_arg(va,
                                                                                                        unsigned int)
                                                                          : va_arg(va, unsigned int);
10004d90:	2b00      	cmp	r3, #0
10004d92:	d007      	beq.n	10004da4 <_vsnprintf+0x6c4>
                                                                          ? (unsigned short int) va_arg(va,
10004d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004d98:	1d1a      	adds	r2, r3, #4
10004d9a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004d9e:	681b      	ldr	r3, [r3, #0]
10004da0:	b29b      	uxth	r3, r3
10004da2:	e005      	b.n	10004db0 <_vsnprintf+0x6d0>
                                                                          : va_arg(va, unsigned int);
10004da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004da8:	1d1a      	adds	r2, r3, #4
10004daa:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004dae:	681b      	ldr	r3, [r3, #0]
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
10004db0:	637b      	str	r3, [r7, #52]	@ 0x34
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
10004db2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004db4:	9305      	str	r3, [sp, #20]
10004db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10004db8:	9304      	str	r3, [sp, #16]
10004dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10004dbc:	9303      	str	r3, [sp, #12]
10004dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10004dc0:	9302      	str	r3, [sp, #8]
10004dc2:	2300      	movs	r3, #0
10004dc4:	9301      	str	r3, [sp, #4]
10004dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10004dc8:	9300      	str	r3, [sp, #0]
10004dca:	697b      	ldr	r3, [r7, #20]
10004dcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004dce:	69b9      	ldr	r1, [r7, #24]
10004dd0:	69f8      	ldr	r0, [r7, #28]
10004dd2:	f7fe feb1 	bl	10003b38 <_ntoa_long>
10004dd6:	6578      	str	r0, [r7, #84]	@ 0x54
                    }
                }
                format++;
10004dd8:	693b      	ldr	r3, [r7, #16]
10004dda:	3301      	adds	r3, #1
10004ddc:	613b      	str	r3, [r7, #16]
                break;
10004dde:	e162      	b.n	100050a6 <_vsnprintf+0x9c6>
            }
            case 'f' :
            case 'F' :
#if PICO_PRINTF_SUPPORT_FLOAT
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
10004de0:	693b      	ldr	r3, [r7, #16]
10004de2:	781b      	ldrb	r3, [r3, #0]
10004de4:	2b46      	cmp	r3, #70	@ 0x46
10004de6:	d103      	bne.n	10004df0 <_vsnprintf+0x710>
10004de8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004dea:	f043 0320 	orr.w	r3, r3, #32
10004dee:	667b      	str	r3, [r7, #100]	@ 0x64
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10004df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004df4:	3307      	adds	r3, #7
10004df6:	f023 0307 	bic.w	r3, r3, #7
10004dfa:	f103 0208 	add.w	r2, r3, #8
10004dfe:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004e02:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e06:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10004e08:	9104      	str	r1, [sp, #16]
10004e0a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
10004e0c:	9103      	str	r1, [sp, #12]
10004e0e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
10004e10:	9102      	str	r1, [sp, #8]
10004e12:	e9cd 2300 	strd	r2, r3, [sp]
10004e16:	697b      	ldr	r3, [r7, #20]
10004e18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004e1a:	69b9      	ldr	r1, [r7, #24]
10004e1c:	69f8      	ldr	r0, [r7, #28]
10004e1e:	f7fe ff5f 	bl	10003ce0 <_ftoa>
10004e22:	6578      	str	r0, [r7, #84]	@ 0x54
#else
                for(int i=0;i<2;i++) out('?', buffer, idx++, maxlen);
                va_arg(va, double);
#endif
                format++;
10004e24:	693b      	ldr	r3, [r7, #16]
10004e26:	3301      	adds	r3, #1
10004e28:	613b      	str	r3, [r7, #16]
                break;
10004e2a:	e13c      	b.n	100050a6 <_vsnprintf+0x9c6>
            case 'e':
            case 'E':
            case 'g':
            case 'G':
#if PICO_PRINTF_SUPPORT_FLOAT && PICO_PRINTF_SUPPORT_EXPONENTIAL
                if ((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
10004e2c:	693b      	ldr	r3, [r7, #16]
10004e2e:	781b      	ldrb	r3, [r3, #0]
10004e30:	2b67      	cmp	r3, #103	@ 0x67
10004e32:	d003      	beq.n	10004e3c <_vsnprintf+0x75c>
10004e34:	693b      	ldr	r3, [r7, #16]
10004e36:	781b      	ldrb	r3, [r3, #0]
10004e38:	2b47      	cmp	r3, #71	@ 0x47
10004e3a:	d103      	bne.n	10004e44 <_vsnprintf+0x764>
10004e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004e3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
10004e42:	667b      	str	r3, [r7, #100]	@ 0x64
                if ((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
10004e44:	693b      	ldr	r3, [r7, #16]
10004e46:	781b      	ldrb	r3, [r3, #0]
10004e48:	2b45      	cmp	r3, #69	@ 0x45
10004e4a:	d003      	beq.n	10004e54 <_vsnprintf+0x774>
10004e4c:	693b      	ldr	r3, [r7, #16]
10004e4e:	781b      	ldrb	r3, [r3, #0]
10004e50:	2b47      	cmp	r3, #71	@ 0x47
10004e52:	d103      	bne.n	10004e5c <_vsnprintf+0x77c>
10004e54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004e56:	f043 0320 	orr.w	r3, r3, #32
10004e5a:	667b      	str	r3, [r7, #100]	@ 0x64
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10004e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004e60:	3307      	adds	r3, #7
10004e62:	f023 0307 	bic.w	r3, r3, #7
10004e66:	f103 0208 	add.w	r2, r3, #8
10004e6a:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e72:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10004e74:	9104      	str	r1, [sp, #16]
10004e76:	6e39      	ldr	r1, [r7, #96]	@ 0x60
10004e78:	9103      	str	r1, [sp, #12]
10004e7a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
10004e7c:	9102      	str	r1, [sp, #8]
10004e7e:	e9cd 2300 	strd	r2, r3, [sp]
10004e82:	697b      	ldr	r3, [r7, #20]
10004e84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004e86:	69b9      	ldr	r1, [r7, #24]
10004e88:	69f8      	ldr	r0, [r7, #28]
10004e8a:	f7ff f98d 	bl	100041a8 <_etoa>
10004e8e:	6578      	str	r0, [r7, #84]	@ 0x54
#else
                for(int i=0;i<2;i++) out('?', buffer, idx++, maxlen);
                va_arg(va, double);
#endif
                format++;
10004e90:	693b      	ldr	r3, [r7, #16]
10004e92:	3301      	adds	r3, #1
10004e94:	613b      	str	r3, [r7, #16]
                break;
10004e96:	e106      	b.n	100050a6 <_vsnprintf+0x9c6>
            case 'c' : {
                unsigned int l = 1U;
10004e98:	2301      	movs	r3, #1
10004e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
10004e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004e9e:	f003 0302 	and.w	r3, r3, #2
10004ea2:	2b00      	cmp	r3, #0
10004ea4:	d10e      	bne.n	10004ec4 <_vsnprintf+0x7e4>
                    while (l++ < width) {
10004ea6:	e007      	b.n	10004eb8 <_vsnprintf+0x7d8>
                        out(' ', buffer, idx++, maxlen);
10004ea8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004eaa:	1c53      	adds	r3, r2, #1
10004eac:	657b      	str	r3, [r7, #84]	@ 0x54
10004eae:	69fc      	ldr	r4, [r7, #28]
10004eb0:	697b      	ldr	r3, [r7, #20]
10004eb2:	69b9      	ldr	r1, [r7, #24]
10004eb4:	2020      	movs	r0, #32
10004eb6:	47a0      	blx	r4
                    while (l++ < width) {
10004eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10004eba:	1c5a      	adds	r2, r3, #1
10004ebc:	64fa      	str	r2, [r7, #76]	@ 0x4c
10004ebe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10004ec0:	429a      	cmp	r2, r3
10004ec2:	d8f1      	bhi.n	10004ea8 <_vsnprintf+0x7c8>
                    }
                }
                // char output
                out((char) va_arg(va, int), buffer, idx++, maxlen);
10004ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004ec8:	1d1a      	adds	r2, r3, #4
10004eca:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004ece:	681b      	ldr	r3, [r3, #0]
10004ed0:	b2d8      	uxtb	r0, r3
10004ed2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004ed4:	1c53      	adds	r3, r2, #1
10004ed6:	657b      	str	r3, [r7, #84]	@ 0x54
10004ed8:	69fc      	ldr	r4, [r7, #28]
10004eda:	697b      	ldr	r3, [r7, #20]
10004edc:	69b9      	ldr	r1, [r7, #24]
10004ede:	47a0      	blx	r4
                // post padding
                if (flags & FLAGS_LEFT) {
10004ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004ee2:	f003 0302 	and.w	r3, r3, #2
10004ee6:	2b00      	cmp	r3, #0
10004ee8:	d00e      	beq.n	10004f08 <_vsnprintf+0x828>
                    while (l++ < width) {
10004eea:	e007      	b.n	10004efc <_vsnprintf+0x81c>
                        out(' ', buffer, idx++, maxlen);
10004eec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004eee:	1c53      	adds	r3, r2, #1
10004ef0:	657b      	str	r3, [r7, #84]	@ 0x54
10004ef2:	69fc      	ldr	r4, [r7, #28]
10004ef4:	697b      	ldr	r3, [r7, #20]
10004ef6:	69b9      	ldr	r1, [r7, #24]
10004ef8:	2020      	movs	r0, #32
10004efa:	47a0      	blx	r4
                    while (l++ < width) {
10004efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10004efe:	1c5a      	adds	r2, r3, #1
10004f00:	64fa      	str	r2, [r7, #76]	@ 0x4c
10004f02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10004f04:	429a      	cmp	r2, r3
10004f06:	d8f1      	bhi.n	10004eec <_vsnprintf+0x80c>
                    }
                }
                format++;
10004f08:	693b      	ldr	r3, [r7, #16]
10004f0a:	3301      	adds	r3, #1
10004f0c:	613b      	str	r3, [r7, #16]
                break;
10004f0e:	e0ca      	b.n	100050a6 <_vsnprintf+0x9c6>
            }

            case 's' : {
                const char *p = va_arg(va, char*);
10004f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004f14:	1d1a      	adds	r2, r3, #4
10004f16:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004f1a:	681b      	ldr	r3, [r3, #0]
10004f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
10004f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10004f20:	2b00      	cmp	r3, #0
10004f22:	d001      	beq.n	10004f28 <_vsnprintf+0x848>
10004f24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10004f26:	e001      	b.n	10004f2c <_vsnprintf+0x84c>
10004f28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10004f2c:	4619      	mov	r1, r3
10004f2e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10004f30:	f7fe fc7e 	bl	10003830 <_strnlen_s>
10004f34:	6478      	str	r0, [r7, #68]	@ 0x44
                // pre padding
                if (flags & FLAGS_PRECISION) {
10004f36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10004f3c:	2b00      	cmp	r3, #0
10004f3e:	d005      	beq.n	10004f4c <_vsnprintf+0x86c>
                    l = (l < precision ? l : precision);
10004f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10004f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10004f44:	4293      	cmp	r3, r2
10004f46:	bf28      	it	cs
10004f48:	4613      	movcs	r3, r2
10004f4a:	647b      	str	r3, [r7, #68]	@ 0x44
                }
                if (!(flags & FLAGS_LEFT)) {
10004f4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004f4e:	f003 0302 	and.w	r3, r3, #2
10004f52:	2b00      	cmp	r3, #0
10004f54:	d11a      	bne.n	10004f8c <_vsnprintf+0x8ac>
                    while (l++ < width) {
10004f56:	e007      	b.n	10004f68 <_vsnprintf+0x888>
                        out(' ', buffer, idx++, maxlen);
10004f58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004f5a:	1c53      	adds	r3, r2, #1
10004f5c:	657b      	str	r3, [r7, #84]	@ 0x54
10004f5e:	69fc      	ldr	r4, [r7, #28]
10004f60:	697b      	ldr	r3, [r7, #20]
10004f62:	69b9      	ldr	r1, [r7, #24]
10004f64:	2020      	movs	r0, #32
10004f66:	47a0      	blx	r4
                    while (l++ < width) {
10004f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10004f6a:	1c5a      	adds	r2, r3, #1
10004f6c:	647a      	str	r2, [r7, #68]	@ 0x44
10004f6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10004f70:	429a      	cmp	r2, r3
10004f72:	d8f1      	bhi.n	10004f58 <_vsnprintf+0x878>
                    }
                }
                // string output
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10004f74:	e00a      	b.n	10004f8c <_vsnprintf+0x8ac>
                    out(*(p++), buffer, idx++, maxlen);
10004f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004f78:	1c5a      	adds	r2, r3, #1
10004f7a:	64ba      	str	r2, [r7, #72]	@ 0x48
10004f7c:	7818      	ldrb	r0, [r3, #0]
10004f7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004f80:	1c53      	adds	r3, r2, #1
10004f82:	657b      	str	r3, [r7, #84]	@ 0x54
10004f84:	69fc      	ldr	r4, [r7, #28]
10004f86:	697b      	ldr	r3, [r7, #20]
10004f88:	69b9      	ldr	r1, [r7, #24]
10004f8a:	47a0      	blx	r4
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
10004f8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004f8e:	781b      	ldrb	r3, [r3, #0]
10004f90:	2b00      	cmp	r3, #0
10004f92:	d009      	beq.n	10004fa8 <_vsnprintf+0x8c8>
10004f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10004f9a:	2b00      	cmp	r3, #0
10004f9c:	d0eb      	beq.n	10004f76 <_vsnprintf+0x896>
10004f9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10004fa0:	1e5a      	subs	r2, r3, #1
10004fa2:	65fa      	str	r2, [r7, #92]	@ 0x5c
10004fa4:	2b00      	cmp	r3, #0
10004fa6:	d1e6      	bne.n	10004f76 <_vsnprintf+0x896>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
10004fa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004faa:	f003 0302 	and.w	r3, r3, #2
10004fae:	2b00      	cmp	r3, #0
10004fb0:	d00e      	beq.n	10004fd0 <_vsnprintf+0x8f0>
                    while (l++ < width) {
10004fb2:	e007      	b.n	10004fc4 <_vsnprintf+0x8e4>
                        out(' ', buffer, idx++, maxlen);
10004fb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004fb6:	1c53      	adds	r3, r2, #1
10004fb8:	657b      	str	r3, [r7, #84]	@ 0x54
10004fba:	69fc      	ldr	r4, [r7, #28]
10004fbc:	697b      	ldr	r3, [r7, #20]
10004fbe:	69b9      	ldr	r1, [r7, #24]
10004fc0:	2020      	movs	r0, #32
10004fc2:	47a0      	blx	r4
                    while (l++ < width) {
10004fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10004fc6:	1c5a      	adds	r2, r3, #1
10004fc8:	647a      	str	r2, [r7, #68]	@ 0x44
10004fca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10004fcc:	429a      	cmp	r2, r3
10004fce:	d8f1      	bhi.n	10004fb4 <_vsnprintf+0x8d4>
                    }
                }
                format++;
10004fd0:	693b      	ldr	r3, [r7, #16]
10004fd2:	3301      	adds	r3, #1
10004fd4:	613b      	str	r3, [r7, #16]
                break;
10004fd6:	e066      	b.n	100050a6 <_vsnprintf+0x9c6>
            }

            case 'p' : {
                width = sizeof(void *) * 2U;
10004fd8:	2308      	movs	r3, #8
10004fda:	663b      	str	r3, [r7, #96]	@ 0x60
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
10004fdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004fde:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
10004fe2:	667b      	str	r3, [r7, #100]	@ 0x64
#if PICO_PRINTF_SUPPORT_LONG_LONG
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
10004fe4:	2300      	movs	r3, #0
10004fe6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                if (is_ll) {
10004fea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
10004fee:	2b00      	cmp	r3, #0
10004ff0:	d023      	beq.n	1000503a <_vsnprintf+0x95a>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t) va_arg(va, void*), false, 16U,
10004ff2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004ff6:	1d1a      	adds	r2, r3, #4
10004ff8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004ffc:	681b      	ldr	r3, [r3, #0]
10004ffe:	461a      	mov	r2, r3
10005000:	2300      	movs	r3, #0
10005002:	603a      	str	r2, [r7, #0]
10005004:	607b      	str	r3, [r7, #4]
10005006:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005008:	9308      	str	r3, [sp, #32]
1000500a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
1000500c:	9307      	str	r3, [sp, #28]
1000500e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10005010:	9306      	str	r3, [sp, #24]
10005012:	f04f 0210 	mov.w	r2, #16
10005016:	f04f 0300 	mov.w	r3, #0
1000501a:	e9cd 2304 	strd	r2, r3, [sp, #16]
1000501e:	2300      	movs	r3, #0
10005020:	9302      	str	r3, [sp, #8]
10005022:	e9d7 3400 	ldrd	r3, r4, [r7]
10005026:	e9cd 3400 	strd	r3, r4, [sp]
1000502a:	697b      	ldr	r3, [r7, #20]
1000502c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
1000502e:	69b9      	ldr	r1, [r7, #24]
10005030:	69f8      	ldr	r0, [r7, #28]
10005032:	f7fe fde7 	bl	10003c04 <_ntoa_long_long>
10005036:	6578      	str	r0, [r7, #84]	@ 0x54
10005038:	e018      	b.n	1000506c <_vsnprintf+0x98c>
                                          precision, width, flags);
                } else {
#endif
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
1000503a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
1000503e:	1d1a      	adds	r2, r3, #4
10005040:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10005044:	681b      	ldr	r3, [r3, #0]
10005046:	461a      	mov	r2, r3
10005048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000504a:	9305      	str	r3, [sp, #20]
1000504c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
1000504e:	9304      	str	r3, [sp, #16]
10005050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10005052:	9303      	str	r3, [sp, #12]
10005054:	2310      	movs	r3, #16
10005056:	9302      	str	r3, [sp, #8]
10005058:	2300      	movs	r3, #0
1000505a:	9301      	str	r3, [sp, #4]
1000505c:	9200      	str	r2, [sp, #0]
1000505e:	697b      	ldr	r3, [r7, #20]
10005060:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005062:	69b9      	ldr	r1, [r7, #24]
10005064:	69f8      	ldr	r0, [r7, #28]
10005066:	f7fe fd67 	bl	10003b38 <_ntoa_long>
1000506a:	6578      	str	r0, [r7, #84]	@ 0x54
                                     16U, precision, width, flags);
#if PICO_PRINTF_SUPPORT_LONG_LONG
                }
#endif
                format++;
1000506c:	693b      	ldr	r3, [r7, #16]
1000506e:	3301      	adds	r3, #1
10005070:	613b      	str	r3, [r7, #16]
                break;
10005072:	e018      	b.n	100050a6 <_vsnprintf+0x9c6>
            }

            case '%' :
                out('%', buffer, idx++, maxlen);
10005074:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005076:	1c53      	adds	r3, r2, #1
10005078:	657b      	str	r3, [r7, #84]	@ 0x54
1000507a:	69fc      	ldr	r4, [r7, #28]
1000507c:	697b      	ldr	r3, [r7, #20]
1000507e:	69b9      	ldr	r1, [r7, #24]
10005080:	2025      	movs	r0, #37	@ 0x25
10005082:	47a0      	blx	r4
                format++;
10005084:	693b      	ldr	r3, [r7, #16]
10005086:	3301      	adds	r3, #1
10005088:	613b      	str	r3, [r7, #16]
                break;
1000508a:	e00c      	b.n	100050a6 <_vsnprintf+0x9c6>

            default :
                out(*format, buffer, idx++, maxlen);
1000508c:	693b      	ldr	r3, [r7, #16]
1000508e:	7818      	ldrb	r0, [r3, #0]
10005090:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005092:	1c53      	adds	r3, r2, #1
10005094:	657b      	str	r3, [r7, #84]	@ 0x54
10005096:	69fc      	ldr	r4, [r7, #28]
10005098:	697b      	ldr	r3, [r7, #20]
1000509a:	69b9      	ldr	r1, [r7, #24]
1000509c:	47a0      	blx	r4
                format++;
1000509e:	693b      	ldr	r3, [r7, #16]
100050a0:	3301      	adds	r3, #1
100050a2:	613b      	str	r3, [r7, #16]
                break;
100050a4:	bf00      	nop
    while (*format) {
100050a6:	693b      	ldr	r3, [r7, #16]
100050a8:	781b      	ldrb	r3, [r3, #0]
100050aa:	2b00      	cmp	r3, #0
100050ac:	f47f ab2a 	bne.w	10004704 <_vsnprintf+0x24>
        }
    }

    // termination
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
100050b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100050b2:	697b      	ldr	r3, [r7, #20]
100050b4:	429a      	cmp	r2, r3
100050b6:	d302      	bcc.n	100050be <_vsnprintf+0x9de>
100050b8:	697b      	ldr	r3, [r7, #20]
100050ba:	1e5a      	subs	r2, r3, #1
100050bc:	e000      	b.n	100050c0 <_vsnprintf+0x9e0>
100050be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100050c0:	69fc      	ldr	r4, [r7, #28]
100050c2:	697b      	ldr	r3, [r7, #20]
100050c4:	69b9      	ldr	r1, [r7, #24]
100050c6:	2000      	movs	r0, #0
100050c8:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int) idx;
100050ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
100050cc:	4618      	mov	r0, r3
100050ce:	3768      	adds	r7, #104	@ 0x68
100050d0:	46bd      	mov	sp, r7
100050d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
100050d6:	bf00      	nop

100050d8 <vfctprintf>:

int WRAPPER_FUNC(vsnprintf)(char *buffer, size_t count, const char *format, va_list va) {
    return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int vfctprintf(void (*out)(char character, void *arg), void *arg, const char *format, va_list va) {
100050d8:	b580      	push	{r7, lr}
100050da:	b088      	sub	sp, #32
100050dc:	af02      	add	r7, sp, #8
100050de:	60f8      	str	r0, [r7, #12]
100050e0:	60b9      	str	r1, [r7, #8]
100050e2:	607a      	str	r2, [r7, #4]
100050e4:	603b      	str	r3, [r7, #0]
    const out_fct_wrap_type out_fct_wrap = {out, arg};
100050e6:	68fb      	ldr	r3, [r7, #12]
100050e8:	613b      	str	r3, [r7, #16]
100050ea:	68bb      	ldr	r3, [r7, #8]
100050ec:	617b      	str	r3, [r7, #20]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
100050ee:	f107 0110 	add.w	r1, r7, #16
100050f2:	683b      	ldr	r3, [r7, #0]
100050f4:	9300      	str	r3, [sp, #0]
100050f6:	687b      	ldr	r3, [r7, #4]
100050f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100050fc:	4803      	ldr	r0, [pc, #12]	@ (1000510c <vfctprintf+0x34>)
100050fe:	f7ff faef 	bl	100046e0 <_vsnprintf>
10005102:	4603      	mov	r3, r0
}
10005104:	4618      	mov	r0, r3
10005106:	3718      	adds	r7, #24
10005108:	46bd      	mov	sp, r7
1000510a:	bd80      	pop	{r7, pc}
1000510c:	10003805 	.word	0x10003805

10005110 <_exit>:

#define STDIO_HANDLE_STDIN  0
#define STDIO_HANDLE_STDOUT 1
#define STDIO_HANDLE_STDERR 2

void __attribute__((noreturn)) __weak _exit(__unused int status) {
10005110:	b480      	push	{r7}
10005112:	b083      	sub	sp, #12
10005114:	af00      	add	r7, sp, #0
10005116:	6078      	str	r0, [r7, #4]
    pico_default_asm_volatile ("bkpt #0" : : : "memory");
10005118:	be00      	bkpt	0x0000
}
1000511a:	bf00      	nop
#if PICO_ENTER_USB_BOOT_ON_EXIT
    reset_usb_boot(0,0);
#else
    while (1) {
        __breakpoint();
1000511c:	e7fc      	b.n	10005118 <_exit+0x8>

1000511e <exit>:
int __attribute__((weak)) _isatty(int fd) {
    return fd == STDIO_HANDLE_STDIN || fd == STDIO_HANDLE_STDOUT || fd == STDIO_HANDLE_STDERR;
}

// exit is not useful... no desire to pull in __call_exitprocs
void exit(int status) {
1000511e:	b580      	push	{r7, lr}
10005120:	b082      	sub	sp, #8
10005122:	af00      	add	r7, sp, #0
10005124:	6078      	str	r0, [r7, #4]
    _exit(status);
10005126:	6878      	ldr	r0, [r7, #4]
10005128:	f7ff fff2 	bl	10005110 <_exit>

1000512c <__assert_func>:
}

// incorrect warning from GCC 6
GCC_Pragma("GCC diagnostic push")
GCC_Pragma("GCC diagnostic ignored \"-Wsuggest-attribute=format\"")
void __weak __assert_func(const char *file, int line, const char *func, const char *failedexpr) {
1000512c:	b580      	push	{r7, lr}
1000512e:	b086      	sub	sp, #24
10005130:	af02      	add	r7, sp, #8
10005132:	60f8      	str	r0, [r7, #12]
10005134:	60b9      	str	r1, [r7, #8]
10005136:	607a      	str	r2, [r7, #4]
10005138:	603b      	str	r3, [r7, #0]
    weak_raw_printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
1000513a:	687b      	ldr	r3, [r7, #4]
1000513c:	2b00      	cmp	r3, #0
1000513e:	d001      	beq.n	10005144 <__assert_func+0x18>
10005140:	4a09      	ldr	r2, [pc, #36]	@ (10005168 <__assert_func+0x3c>)
10005142:	e000      	b.n	10005146 <__assert_func+0x1a>
10005144:	4a09      	ldr	r2, [pc, #36]	@ (1000516c <__assert_func+0x40>)
10005146:	687b      	ldr	r3, [r7, #4]
10005148:	2b00      	cmp	r3, #0
1000514a:	d001      	beq.n	10005150 <__assert_func+0x24>
1000514c:	687b      	ldr	r3, [r7, #4]
1000514e:	e000      	b.n	10005152 <__assert_func+0x26>
10005150:	4b06      	ldr	r3, [pc, #24]	@ (1000516c <__assert_func+0x40>)
10005152:	9301      	str	r3, [sp, #4]
10005154:	9200      	str	r2, [sp, #0]
10005156:	68bb      	ldr	r3, [r7, #8]
10005158:	68fa      	ldr	r2, [r7, #12]
1000515a:	6839      	ldr	r1, [r7, #0]
1000515c:	4804      	ldr	r0, [pc, #16]	@ (10005170 <__assert_func+0x44>)
1000515e:	f000 fabf 	bl	100056e0 <__wrap_printf>
                    failedexpr, file, line, func ? ", function: " : "",
                    func ? func : "");

    _exit(1);
10005162:	2001      	movs	r0, #1
10005164:	f7ff ffd4 	bl	10005110 <_exit>
10005168:	10006d18 	.word	0x10006d18
1000516c:	10006d28 	.word	0x10006d28
10005170:	10006d2c 	.word	0x10006d2c

10005174 <runtime_init>:
}
GCC_Pragma("GCC diagnostic pop")

void runtime_init(void) {
10005174:	b580      	push	{r7, lr}
10005176:	b082      	sub	sp, #8
10005178:	af00      	add	r7, sp, #0
    pico_default_asm_volatile (
1000517a:	f3ef 8305 	mrs	r3, IPSR
1000517e:	b2db      	uxtb	r3, r3
10005180:	603b      	str	r3, [r7, #0]
    return exception;
10005182:	683b      	ldr	r3, [r7, #0]
#ifndef NDEBUG
    if (__get_current_exception()) {
10005184:	2b00      	cmp	r3, #0
10005186:	d001      	beq.n	1000518c <runtime_init+0x18>
    pico_default_asm_volatile ("bkpt #0" : : : "memory");
10005188:	be00      	bkpt	0x0000
}
1000518a:	bf00      	nop
    //      which we didn't do in previous SDKs
    //extern void __libc_init_array(void);
    //__libc_init_array();

    // ... so instead just do the __preinit_array
    runtime_run_initializers();
1000518c:	f7fd ff98 	bl	100030c0 <runtime_run_initializers>
    // ... and the __init_array
    extern void (*__init_array_start)(void);
    extern void (*__init_array_end)(void);
    for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
10005190:	4b08      	ldr	r3, [pc, #32]	@ (100051b4 <runtime_init+0x40>)
10005192:	607b      	str	r3, [r7, #4]
10005194:	e005      	b.n	100051a2 <runtime_init+0x2e>
        (*p)();
10005196:	687b      	ldr	r3, [r7, #4]
10005198:	681b      	ldr	r3, [r3, #0]
1000519a:	4798      	blx	r3
    for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
1000519c:	687b      	ldr	r3, [r7, #4]
1000519e:	3304      	adds	r3, #4
100051a0:	607b      	str	r3, [r7, #4]
100051a2:	687b      	ldr	r3, [r7, #4]
100051a4:	4a04      	ldr	r2, [pc, #16]	@ (100051b8 <runtime_init+0x44>)
100051a6:	4293      	cmp	r3, r2
100051a8:	d3f5      	bcc.n	10005196 <runtime_init+0x22>
    }
100051aa:	bf00      	nop
100051ac:	bf00      	nop
100051ae:	3708      	adds	r7, #8
100051b0:	46bd      	mov	sp, r7
100051b2:	bd80      	pop	{r7, pc}
100051b4:	100064e8 	.word	0x100064e8
100051b8:	100064ec 	.word	0x100064ec

100051bc <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
100051bc:	b480      	push	{r7}
100051be:	b083      	sub	sp, #12
100051c0:	af00      	add	r7, sp, #0
100051c2:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
100051c6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
100051ca:	4610      	mov	r0, r2
100051cc:	4619      	mov	r1, r3
100051ce:	370c      	adds	r7, #12
100051d0:	46bd      	mov	sp, r7
100051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
100051d6:	4770      	bx	lr

100051d8 <update_us_since_boot>:
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
100051d8:	b480      	push	{r7}
100051da:	b085      	sub	sp, #20
100051dc:	af00      	add	r7, sp, #0
100051de:	60f8      	str	r0, [r7, #12]
100051e0:	e9c7 2300 	strd	r2, r3, [r7]
    *t = us_since_boot;
100051e4:	68f9      	ldr	r1, [r7, #12]
100051e6:	e9d7 2300 	ldrd	r2, r3, [r7]
100051ea:	e9c1 2300 	strd	r2, r3, [r1]
}
100051ee:	bf00      	nop
100051f0:	3714      	adds	r7, #20
100051f2:	46bd      	mov	sp, r7
100051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100051f8:	4770      	bx	lr

100051fa <get_absolute_time>:
static inline absolute_time_t get_absolute_time(void) {
100051fa:	b580      	push	{r7, lr}
100051fc:	b082      	sub	sp, #8
100051fe:	af00      	add	r7, sp, #0
    update_us_since_boot(&t, time_us_64());
10005200:	f7fd fa38 	bl	10002674 <time_us_64>
10005204:	4602      	mov	r2, r0
10005206:	460b      	mov	r3, r1
10005208:	4639      	mov	r1, r7
1000520a:	4608      	mov	r0, r1
1000520c:	f7ff ffe4 	bl	100051d8 <update_us_since_boot>
    return t;
10005210:	e9d7 2300 	ldrd	r2, r3, [r7]
}
10005214:	4610      	mov	r0, r2
10005216:	4619      	mov	r1, r3
10005218:	3708      	adds	r7, #8
1000521a:	46bd      	mov	sp, r7
1000521c:	bd80      	pop	{r7, pc}

1000521e <delayed_by_ms>:
static inline absolute_time_t delayed_by_ms(const absolute_time_t t, uint32_t ms) {
1000521e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10005222:	b08c      	sub	sp, #48	@ 0x30
10005224:	af00      	add	r7, sp, #0
10005226:	e9c7 0104 	strd	r0, r1, [r7, #16]
1000522a:	60fa      	str	r2, [r7, #12]
    uint64_t base = to_us_since_boot(t);
1000522c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
10005230:	f7ff ffc4 	bl	100051bc <to_us_since_boot>
10005234:	e9c7 0108 	strd	r0, r1, [r7, #32]
    uint64_t delayed = base + ms * 1000ull;
10005238:	68fb      	ldr	r3, [r7, #12]
1000523a:	2200      	movs	r2, #0
1000523c:	4698      	mov	r8, r3
1000523e:	4691      	mov	r9, r2
10005240:	4642      	mov	r2, r8
10005242:	464b      	mov	r3, r9
10005244:	f04f 0000 	mov.w	r0, #0
10005248:	f04f 0100 	mov.w	r1, #0
1000524c:	0159      	lsls	r1, r3, #5
1000524e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
10005252:	0150      	lsls	r0, r2, #5
10005254:	4602      	mov	r2, r0
10005256:	460b      	mov	r3, r1
10005258:	ebb2 0408 	subs.w	r4, r2, r8
1000525c:	eb63 0509 	sbc.w	r5, r3, r9
10005260:	f04f 0200 	mov.w	r2, #0
10005264:	f04f 0300 	mov.w	r3, #0
10005268:	00ab      	lsls	r3, r5, #2
1000526a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
1000526e:	00a2      	lsls	r2, r4, #2
10005270:	4614      	mov	r4, r2
10005272:	461d      	mov	r5, r3
10005274:	eb14 0a08 	adds.w	sl, r4, r8
10005278:	eb45 0b09 	adc.w	fp, r5, r9
1000527c:	f04f 0200 	mov.w	r2, #0
10005280:	f04f 0300 	mov.w	r3, #0
10005284:	ea4f 03cb 	mov.w	r3, fp, lsl #3
10005288:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
1000528c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
10005290:	4692      	mov	sl, r2
10005292:	469b      	mov	fp, r3
10005294:	4650      	mov	r0, sl
10005296:	4659      	mov	r1, fp
10005298:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
1000529c:	1814      	adds	r4, r2, r0
1000529e:	603c      	str	r4, [r7, #0]
100052a0:	414b      	adcs	r3, r1
100052a2:	607b      	str	r3, [r7, #4]
100052a4:	e9d7 3400 	ldrd	r3, r4, [r7]
100052a8:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
    if ((int64_t)delayed < 0) {
100052ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
100052b0:	2b00      	cmp	r3, #0
100052b2:	da05      	bge.n	100052c0 <delayed_by_ms+0xa2>
        delayed = INT64_MAX;
100052b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100052b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
100052bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    update_us_since_boot(&t2, delayed);
100052c0:	f107 0118 	add.w	r1, r7, #24
100052c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
100052c8:	4608      	mov	r0, r1
100052ca:	f7ff ff85 	bl	100051d8 <update_us_since_boot>
    return t2;
100052ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
100052d2:	4610      	mov	r0, r2
100052d4:	4619      	mov	r1, r3
100052d6:	3730      	adds	r7, #48	@ 0x30
100052d8:	46bd      	mov	sp, r7
100052da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

100052de <make_timeout_time_ms>:
static inline absolute_time_t make_timeout_time_ms(uint32_t ms) {
100052de:	b580      	push	{r7, lr}
100052e0:	b082      	sub	sp, #8
100052e2:	af00      	add	r7, sp, #0
100052e4:	6078      	str	r0, [r7, #4]
    return delayed_by_ms(get_absolute_time(), ms);
100052e6:	f7ff ff88 	bl	100051fa <get_absolute_time>
100052ea:	687a      	ldr	r2, [r7, #4]
100052ec:	f7ff ff97 	bl	1000521e <delayed_by_ms>
100052f0:	4602      	mov	r2, r0
100052f2:	460b      	mov	r3, r1
}
100052f4:	4610      	mov	r0, r2
100052f6:	4619      	mov	r1, r3
100052f8:	3708      	adds	r7, #8
100052fa:	46bd      	mov	sp, r7
100052fc:	bd80      	pop	{r7, pc}
	...

10005300 <stdout_serialize_begin>:
static stdio_driver_t *filter;

#if PICO_STDOUT_MUTEX
auto_init_mutex(print_mutex);

bool stdout_serialize_begin(void) {
10005300:	b580      	push	{r7, lr}
10005302:	af00      	add	r7, sp, #0
    return mutex_try_enter_block_until(&print_mutex, make_timeout_time_ms(PICO_STDIO_DEADLOCK_TIMEOUT_MS));
10005304:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10005308:	f7ff ffe9 	bl	100052de <make_timeout_time_ms>
1000530c:	4602      	mov	r2, r0
1000530e:	460b      	mov	r3, r1
10005310:	4802      	ldr	r0, [pc, #8]	@ (1000531c <stdout_serialize_begin+0x1c>)
10005312:	f001 f8c5 	bl	100064a0 <__mutex_try_enter_block_until_veneer>
10005316:	4603      	mov	r3, r0
}
10005318:	4618      	mov	r0, r3
1000531a:	bd80      	pop	{r7, pc}
1000531c:	20000784 	.word	0x20000784

10005320 <stdout_serialize_end>:

void stdout_serialize_end(void) {
10005320:	b580      	push	{r7, lr}
10005322:	af00      	add	r7, sp, #0
    mutex_exit(&print_mutex);
10005324:	4802      	ldr	r0, [pc, #8]	@ (10005330 <stdout_serialize_end+0x10>)
10005326:	f001 f8b7 	bl	10006498 <__mutex_exit_veneer>
}
1000532a:	bf00      	nop
1000532c:	bd80      	pop	{r7, pc}
1000532e:	bf00      	nop
10005330:	20000784 	.word	0x20000784

10005334 <stdio_out_chars_no_crlf>:
    return true;
}
static void stdout_serialize_end(void) {
}
#endif
static void stdio_out_chars_no_crlf(stdio_driver_t *driver, const char *s, int len) {
10005334:	b580      	push	{r7, lr}
10005336:	b084      	sub	sp, #16
10005338:	af00      	add	r7, sp, #0
1000533a:	60f8      	str	r0, [r7, #12]
1000533c:	60b9      	str	r1, [r7, #8]
1000533e:	607a      	str	r2, [r7, #4]
    driver->out_chars(s, len);
10005340:	68fb      	ldr	r3, [r7, #12]
10005342:	681b      	ldr	r3, [r3, #0]
10005344:	6879      	ldr	r1, [r7, #4]
10005346:	68b8      	ldr	r0, [r7, #8]
10005348:	4798      	blx	r3
}
1000534a:	bf00      	nop
1000534c:	3710      	adds	r7, #16
1000534e:	46bd      	mov	sp, r7
10005350:	bd80      	pop	{r7, pc}
	...

10005354 <stdio_out_chars_crlf>:

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10005354:	b580      	push	{r7, lr}
10005356:	b088      	sub	sp, #32
10005358:	af00      	add	r7, sp, #0
1000535a:	60f8      	str	r0, [r7, #12]
1000535c:	60b9      	str	r1, [r7, #8]
1000535e:	607a      	str	r2, [r7, #4]
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    if (!driver->crlf_enabled) {
10005360:	68fb      	ldr	r3, [r7, #12]
10005362:	7d5b      	ldrb	r3, [r3, #21]
10005364:	f083 0301 	eor.w	r3, r3, #1
10005368:	b2db      	uxtb	r3, r3
1000536a:	2b00      	cmp	r3, #0
1000536c:	d005      	beq.n	1000537a <stdio_out_chars_crlf+0x26>
        driver->out_chars(s, len);
1000536e:	68fb      	ldr	r3, [r7, #12]
10005370:	681b      	ldr	r3, [r3, #0]
10005372:	6879      	ldr	r1, [r7, #4]
10005374:	68b8      	ldr	r0, [r7, #8]
10005376:	4798      	blx	r3
        return;
10005378:	e060      	b.n	1000543c <stdio_out_chars_crlf+0xe8>
    }
    int first_of_chunk = 0;
1000537a:	2300      	movs	r3, #0
1000537c:	61fb      	str	r3, [r7, #28]
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
1000537e:	2300      	movs	r3, #0
10005380:	61bb      	str	r3, [r7, #24]
10005382:	e03a      	b.n	100053fa <stdio_out_chars_crlf+0xa6>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10005384:	69bb      	ldr	r3, [r7, #24]
10005386:	2b00      	cmp	r3, #0
10005388:	dd0a      	ble.n	100053a0 <stdio_out_chars_crlf+0x4c>
1000538a:	69bb      	ldr	r3, [r7, #24]
1000538c:	3b01      	subs	r3, #1
1000538e:	68ba      	ldr	r2, [r7, #8]
10005390:	4413      	add	r3, r2
10005392:	781b      	ldrb	r3, [r3, #0]
10005394:	2b0d      	cmp	r3, #13
10005396:	bf0c      	ite	eq
10005398:	2301      	moveq	r3, #1
1000539a:	2300      	movne	r3, #0
1000539c:	b2db      	uxtb	r3, r3
1000539e:	e006      	b.n	100053ae <stdio_out_chars_crlf+0x5a>
100053a0:	68fb      	ldr	r3, [r7, #12]
100053a2:	7d1b      	ldrb	r3, [r3, #20]
100053a4:	2b00      	cmp	r3, #0
100053a6:	bf14      	ite	ne
100053a8:	2301      	movne	r3, #1
100053aa:	2300      	moveq	r3, #0
100053ac:	b2db      	uxtb	r3, r3
100053ae:	75fb      	strb	r3, [r7, #23]
        if (s[i] == '\n' && !prev_char_was_cr) {
100053b0:	69bb      	ldr	r3, [r7, #24]
100053b2:	68ba      	ldr	r2, [r7, #8]
100053b4:	4413      	add	r3, r2
100053b6:	781b      	ldrb	r3, [r3, #0]
100053b8:	2b0a      	cmp	r3, #10
100053ba:	d11b      	bne.n	100053f4 <stdio_out_chars_crlf+0xa0>
100053bc:	7dfb      	ldrb	r3, [r7, #23]
100053be:	f083 0301 	eor.w	r3, r3, #1
100053c2:	b2db      	uxtb	r3, r3
100053c4:	2b00      	cmp	r3, #0
100053c6:	d015      	beq.n	100053f4 <stdio_out_chars_crlf+0xa0>
            if (i > first_of_chunk) {
100053c8:	69ba      	ldr	r2, [r7, #24]
100053ca:	69fb      	ldr	r3, [r7, #28]
100053cc:	429a      	cmp	r2, r3
100053ce:	dd09      	ble.n	100053e4 <stdio_out_chars_crlf+0x90>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
100053d0:	68fb      	ldr	r3, [r7, #12]
100053d2:	681b      	ldr	r3, [r3, #0]
100053d4:	69fa      	ldr	r2, [r7, #28]
100053d6:	68b9      	ldr	r1, [r7, #8]
100053d8:	1888      	adds	r0, r1, r2
100053da:	69b9      	ldr	r1, [r7, #24]
100053dc:	69fa      	ldr	r2, [r7, #28]
100053de:	1a8a      	subs	r2, r1, r2
100053e0:	4611      	mov	r1, r2
100053e2:	4798      	blx	r3
            }
            driver->out_chars(crlf_str, 2);
100053e4:	68fb      	ldr	r3, [r7, #12]
100053e6:	681b      	ldr	r3, [r3, #0]
100053e8:	2102      	movs	r1, #2
100053ea:	4816      	ldr	r0, [pc, #88]	@ (10005444 <stdio_out_chars_crlf+0xf0>)
100053ec:	4798      	blx	r3
            first_of_chunk = i + 1;
100053ee:	69bb      	ldr	r3, [r7, #24]
100053f0:	3301      	adds	r3, #1
100053f2:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < len; i++) {
100053f4:	69bb      	ldr	r3, [r7, #24]
100053f6:	3301      	adds	r3, #1
100053f8:	61bb      	str	r3, [r7, #24]
100053fa:	69ba      	ldr	r2, [r7, #24]
100053fc:	687b      	ldr	r3, [r7, #4]
100053fe:	429a      	cmp	r2, r3
10005400:	dbc0      	blt.n	10005384 <stdio_out_chars_crlf+0x30>
        }
    }
    if (first_of_chunk < len) {
10005402:	69fa      	ldr	r2, [r7, #28]
10005404:	687b      	ldr	r3, [r7, #4]
10005406:	429a      	cmp	r2, r3
10005408:	da09      	bge.n	1000541e <stdio_out_chars_crlf+0xca>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
1000540a:	68fb      	ldr	r3, [r7, #12]
1000540c:	681b      	ldr	r3, [r3, #0]
1000540e:	69fa      	ldr	r2, [r7, #28]
10005410:	68b9      	ldr	r1, [r7, #8]
10005412:	1888      	adds	r0, r1, r2
10005414:	6879      	ldr	r1, [r7, #4]
10005416:	69fa      	ldr	r2, [r7, #28]
10005418:	1a8a      	subs	r2, r1, r2
1000541a:	4611      	mov	r1, r2
1000541c:	4798      	blx	r3
    }
    if (len > 0) {
1000541e:	687b      	ldr	r3, [r7, #4]
10005420:	2b00      	cmp	r3, #0
10005422:	dd0b      	ble.n	1000543c <stdio_out_chars_crlf+0xe8>
        driver->last_ended_with_cr = s[len - 1] == '\r';
10005424:	687b      	ldr	r3, [r7, #4]
10005426:	3b01      	subs	r3, #1
10005428:	68ba      	ldr	r2, [r7, #8]
1000542a:	4413      	add	r3, r2
1000542c:	781b      	ldrb	r3, [r3, #0]
1000542e:	2b0d      	cmp	r3, #13
10005430:	bf0c      	ite	eq
10005432:	2301      	moveq	r3, #1
10005434:	2300      	movne	r3, #0
10005436:	b2da      	uxtb	r2, r3
10005438:	68fb      	ldr	r3, [r7, #12]
1000543a:	751a      	strb	r2, [r3, #20]
    }
#else
    driver->out_chars(s, len);
#endif
}
1000543c:	3720      	adds	r7, #32
1000543e:	46bd      	mov	sp, r7
10005440:	bd80      	pop	{r7, pc}
10005442:	bf00      	nop
10005444:	10006d5c 	.word	0x10006d5c

10005448 <stdio_put_string>:

int stdio_put_string(const char *s, int len, bool newline, bool cr_translation) {
10005448:	b580      	push	{r7, lr}
1000544a:	b088      	sub	sp, #32
1000544c:	af00      	add	r7, sp, #0
1000544e:	60f8      	str	r0, [r7, #12]
10005450:	60b9      	str	r1, [r7, #8]
10005452:	4611      	mov	r1, r2
10005454:	461a      	mov	r2, r3
10005456:	460b      	mov	r3, r1
10005458:	71fb      	strb	r3, [r7, #7]
1000545a:	4613      	mov	r3, r2
1000545c:	71bb      	strb	r3, [r7, #6]
    bool serialized = stdout_serialize_begin();
1000545e:	f7ff ff4f 	bl	10005300 <stdout_serialize_begin>
10005462:	4603      	mov	r3, r0
10005464:	76fb      	strb	r3, [r7, #27]
    if (!serialized) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return 0;
#endif
    }
    if (len == -1) len = (int)strlen(s);
10005466:	68bb      	ldr	r3, [r7, #8]
10005468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
1000546c:	d104      	bne.n	10005478 <stdio_put_string+0x30>
1000546e:	68f8      	ldr	r0, [r7, #12]
10005470:	f000 ffdc 	bl	1000642c <strlen>
10005474:	4603      	mov	r3, r0
10005476:	60bb      	str	r3, [r7, #8]
    void (*out_func)(stdio_driver_t *, const char *, int) = cr_translation ? stdio_out_chars_crlf : stdio_out_chars_no_crlf;
10005478:	79bb      	ldrb	r3, [r7, #6]
1000547a:	2b00      	cmp	r3, #0
1000547c:	d001      	beq.n	10005482 <stdio_put_string+0x3a>
1000547e:	4b1c      	ldr	r3, [pc, #112]	@ (100054f0 <stdio_put_string+0xa8>)
10005480:	e000      	b.n	10005484 <stdio_put_string+0x3c>
10005482:	4b1c      	ldr	r3, [pc, #112]	@ (100054f4 <stdio_put_string+0xac>)
10005484:	617b      	str	r3, [r7, #20]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10005486:	4b1c      	ldr	r3, [pc, #112]	@ (100054f8 <stdio_put_string+0xb0>)
10005488:	681b      	ldr	r3, [r3, #0]
1000548a:	61fb      	str	r3, [r7, #28]
1000548c:	e023      	b.n	100054d6 <stdio_put_string+0x8e>
        if (!driver->out_chars) continue;
1000548e:	69fb      	ldr	r3, [r7, #28]
10005490:	681b      	ldr	r3, [r3, #0]
10005492:	2b00      	cmp	r3, #0
10005494:	d019      	beq.n	100054ca <stdio_put_string+0x82>
        if (filter && filter != driver) continue;
10005496:	4b19      	ldr	r3, [pc, #100]	@ (100054fc <stdio_put_string+0xb4>)
10005498:	681b      	ldr	r3, [r3, #0]
1000549a:	2b00      	cmp	r3, #0
1000549c:	d004      	beq.n	100054a8 <stdio_put_string+0x60>
1000549e:	4b17      	ldr	r3, [pc, #92]	@ (100054fc <stdio_put_string+0xb4>)
100054a0:	681b      	ldr	r3, [r3, #0]
100054a2:	69fa      	ldr	r2, [r7, #28]
100054a4:	429a      	cmp	r2, r3
100054a6:	d112      	bne.n	100054ce <stdio_put_string+0x86>
        out_func(driver, s, len);
100054a8:	697b      	ldr	r3, [r7, #20]
100054aa:	68ba      	ldr	r2, [r7, #8]
100054ac:	68f9      	ldr	r1, [r7, #12]
100054ae:	69f8      	ldr	r0, [r7, #28]
100054b0:	4798      	blx	r3
        if (newline) {
100054b2:	79fb      	ldrb	r3, [r7, #7]
100054b4:	2b00      	cmp	r3, #0
100054b6:	d00b      	beq.n	100054d0 <stdio_put_string+0x88>
            const char c = '\n';
100054b8:	230a      	movs	r3, #10
100054ba:	74fb      	strb	r3, [r7, #19]
            out_func(driver, &c, 1);
100054bc:	f107 0113 	add.w	r1, r7, #19
100054c0:	697b      	ldr	r3, [r7, #20]
100054c2:	2201      	movs	r2, #1
100054c4:	69f8      	ldr	r0, [r7, #28]
100054c6:	4798      	blx	r3
100054c8:	e002      	b.n	100054d0 <stdio_put_string+0x88>
        if (!driver->out_chars) continue;
100054ca:	bf00      	nop
100054cc:	e000      	b.n	100054d0 <stdio_put_string+0x88>
        if (filter && filter != driver) continue;
100054ce:	bf00      	nop
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
100054d0:	69fb      	ldr	r3, [r7, #28]
100054d2:	691b      	ldr	r3, [r3, #16]
100054d4:	61fb      	str	r3, [r7, #28]
100054d6:	69fb      	ldr	r3, [r7, #28]
100054d8:	2b00      	cmp	r3, #0
100054da:	d1d8      	bne.n	1000548e <stdio_put_string+0x46>
        }
    }
    if (serialized) {
100054dc:	7efb      	ldrb	r3, [r7, #27]
100054de:	2b00      	cmp	r3, #0
100054e0:	d001      	beq.n	100054e6 <stdio_put_string+0x9e>
        stdout_serialize_end();
100054e2:	f7ff ff1d 	bl	10005320 <stdout_serialize_end>
    }
    return len;
100054e6:	68bb      	ldr	r3, [r7, #8]
}
100054e8:	4618      	mov	r0, r3
100054ea:	3720      	adds	r7, #32
100054ec:	46bd      	mov	sp, r7
100054ee:	bd80      	pop	{r7, pc}
100054f0:	10005355 	.word	0x10005355
100054f4:	10005335 	.word	0x10005335
100054f8:	20000964 	.word	0x20000964
100054fc:	20000968 	.word	0x20000968

10005500 <stdio_set_driver_enabled>:
    stdio_put_string(s, len, true, false);
    stdio_flush();
    return len;
}

void stdio_set_driver_enabled(stdio_driver_t *driver, bool enable) {
10005500:	b480      	push	{r7}
10005502:	b085      	sub	sp, #20
10005504:	af00      	add	r7, sp, #0
10005506:	6078      	str	r0, [r7, #4]
10005508:	460b      	mov	r3, r1
1000550a:	70fb      	strb	r3, [r7, #3]
    stdio_driver_t **prev = &drivers;
1000550c:	4b15      	ldr	r3, [pc, #84]	@ (10005564 <stdio_set_driver_enabled+0x64>)
1000550e:	60fb      	str	r3, [r7, #12]
    while (*prev) {
10005510:	e016      	b.n	10005540 <stdio_set_driver_enabled+0x40>
        if (*prev == driver) {
10005512:	68fb      	ldr	r3, [r7, #12]
10005514:	681b      	ldr	r3, [r3, #0]
10005516:	687a      	ldr	r2, [r7, #4]
10005518:	429a      	cmp	r2, r3
1000551a:	d10d      	bne.n	10005538 <stdio_set_driver_enabled+0x38>
            if (!enable) {
1000551c:	78fb      	ldrb	r3, [r7, #3]
1000551e:	f083 0301 	eor.w	r3, r3, #1
10005522:	b2db      	uxtb	r3, r3
10005524:	2b00      	cmp	r3, #0
10005526:	d016      	beq.n	10005556 <stdio_set_driver_enabled+0x56>
                *prev = driver->next;
10005528:	687b      	ldr	r3, [r7, #4]
1000552a:	691a      	ldr	r2, [r3, #16]
1000552c:	68fb      	ldr	r3, [r7, #12]
1000552e:	601a      	str	r2, [r3, #0]
                driver->next = NULL;
10005530:	687b      	ldr	r3, [r7, #4]
10005532:	2200      	movs	r2, #0
10005534:	611a      	str	r2, [r3, #16]
            }
            return;
10005536:	e00e      	b.n	10005556 <stdio_set_driver_enabled+0x56>
        }
        prev = &(*prev)->next;
10005538:	68fb      	ldr	r3, [r7, #12]
1000553a:	681b      	ldr	r3, [r3, #0]
1000553c:	3310      	adds	r3, #16
1000553e:	60fb      	str	r3, [r7, #12]
    while (*prev) {
10005540:	68fb      	ldr	r3, [r7, #12]
10005542:	681b      	ldr	r3, [r3, #0]
10005544:	2b00      	cmp	r3, #0
10005546:	d1e4      	bne.n	10005512 <stdio_set_driver_enabled+0x12>
    }
    if (enable) {
10005548:	78fb      	ldrb	r3, [r7, #3]
1000554a:	2b00      	cmp	r3, #0
1000554c:	d004      	beq.n	10005558 <stdio_set_driver_enabled+0x58>
        *prev = driver;
1000554e:	68fb      	ldr	r3, [r7, #12]
10005550:	687a      	ldr	r2, [r7, #4]
10005552:	601a      	str	r2, [r3, #0]
10005554:	e000      	b.n	10005558 <stdio_set_driver_enabled+0x58>
            return;
10005556:	bf00      	nop
    }
}
10005558:	3714      	adds	r7, #20
1000555a:	46bd      	mov	sp, r7
1000555c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005560:	4770      	bx	lr
10005562:	bf00      	nop
10005564:	20000964 	.word	0x20000964

10005568 <stdio_flush>:

void stdio_flush(void) {
10005568:	b580      	push	{r7, lr}
1000556a:	b082      	sub	sp, #8
1000556c:	af00      	add	r7, sp, #0
    for (stdio_driver_t *d = drivers; d; d = d->next) {
1000556e:	4b0b      	ldr	r3, [pc, #44]	@ (1000559c <stdio_flush+0x34>)
10005570:	681b      	ldr	r3, [r3, #0]
10005572:	607b      	str	r3, [r7, #4]
10005574:	e009      	b.n	1000558a <stdio_flush+0x22>
        if (d->out_flush) d->out_flush();
10005576:	687b      	ldr	r3, [r7, #4]
10005578:	685b      	ldr	r3, [r3, #4]
1000557a:	2b00      	cmp	r3, #0
1000557c:	d002      	beq.n	10005584 <stdio_flush+0x1c>
1000557e:	687b      	ldr	r3, [r7, #4]
10005580:	685b      	ldr	r3, [r3, #4]
10005582:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10005584:	687b      	ldr	r3, [r7, #4]
10005586:	691b      	ldr	r3, [r3, #16]
10005588:	607b      	str	r3, [r7, #4]
1000558a:	687b      	ldr	r3, [r7, #4]
1000558c:	2b00      	cmp	r3, #0
1000558e:	d1f2      	bne.n	10005576 <stdio_flush+0xe>
    }
}
10005590:	bf00      	nop
10005592:	bf00      	nop
10005594:	3708      	adds	r7, #8
10005596:	46bd      	mov	sp, r7
10005598:	bd80      	pop	{r7, pc}
1000559a:	bf00      	nop
1000559c:	20000964 	.word	0x20000964

100055a0 <stdio_stack_buffer_flush>:
typedef struct stdio_stack_buffer {
    int used;
    char buf[PICO_STDIO_STACK_BUFFER_SIZE];
} stdio_stack_buffer_t;

static void stdio_stack_buffer_flush(stdio_stack_buffer_t *buffer) {
100055a0:	b580      	push	{r7, lr}
100055a2:	b084      	sub	sp, #16
100055a4:	af00      	add	r7, sp, #0
100055a6:	6078      	str	r0, [r7, #4]
    if (buffer->used) {
100055a8:	687b      	ldr	r3, [r7, #4]
100055aa:	681b      	ldr	r3, [r3, #0]
100055ac:	2b00      	cmp	r3, #0
100055ae:	d025      	beq.n	100055fc <stdio_stack_buffer_flush+0x5c>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
100055b0:	4b14      	ldr	r3, [pc, #80]	@ (10005604 <stdio_stack_buffer_flush+0x64>)
100055b2:	681b      	ldr	r3, [r3, #0]
100055b4:	60fb      	str	r3, [r7, #12]
100055b6:	e01b      	b.n	100055f0 <stdio_stack_buffer_flush+0x50>
            if (!d->out_chars) continue;
100055b8:	68fb      	ldr	r3, [r7, #12]
100055ba:	681b      	ldr	r3, [r3, #0]
100055bc:	2b00      	cmp	r3, #0
100055be:	d011      	beq.n	100055e4 <stdio_stack_buffer_flush+0x44>
            if (filter && filter != d) continue;
100055c0:	4b11      	ldr	r3, [pc, #68]	@ (10005608 <stdio_stack_buffer_flush+0x68>)
100055c2:	681b      	ldr	r3, [r3, #0]
100055c4:	2b00      	cmp	r3, #0
100055c6:	d004      	beq.n	100055d2 <stdio_stack_buffer_flush+0x32>
100055c8:	4b0f      	ldr	r3, [pc, #60]	@ (10005608 <stdio_stack_buffer_flush+0x68>)
100055ca:	681b      	ldr	r3, [r3, #0]
100055cc:	68fa      	ldr	r2, [r7, #12]
100055ce:	429a      	cmp	r2, r3
100055d0:	d10a      	bne.n	100055e8 <stdio_stack_buffer_flush+0x48>
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
100055d2:	687b      	ldr	r3, [r7, #4]
100055d4:	1d19      	adds	r1, r3, #4
100055d6:	687b      	ldr	r3, [r7, #4]
100055d8:	681b      	ldr	r3, [r3, #0]
100055da:	461a      	mov	r2, r3
100055dc:	68f8      	ldr	r0, [r7, #12]
100055de:	f7ff feb9 	bl	10005354 <stdio_out_chars_crlf>
100055e2:	e002      	b.n	100055ea <stdio_stack_buffer_flush+0x4a>
            if (!d->out_chars) continue;
100055e4:	bf00      	nop
100055e6:	e000      	b.n	100055ea <stdio_stack_buffer_flush+0x4a>
            if (filter && filter != d) continue;
100055e8:	bf00      	nop
        for (stdio_driver_t *d = drivers; d; d = d->next) {
100055ea:	68fb      	ldr	r3, [r7, #12]
100055ec:	691b      	ldr	r3, [r3, #16]
100055ee:	60fb      	str	r3, [r7, #12]
100055f0:	68fb      	ldr	r3, [r7, #12]
100055f2:	2b00      	cmp	r3, #0
100055f4:	d1e0      	bne.n	100055b8 <stdio_stack_buffer_flush+0x18>
        }
        buffer->used = 0;
100055f6:	687b      	ldr	r3, [r7, #4]
100055f8:	2200      	movs	r2, #0
100055fa:	601a      	str	r2, [r3, #0]
    }
}
100055fc:	bf00      	nop
100055fe:	3710      	adds	r7, #16
10005600:	46bd      	mov	sp, r7
10005602:	bd80      	pop	{r7, pc}
10005604:	20000964 	.word	0x20000964
10005608:	20000968 	.word	0x20000968

1000560c <stdio_buffered_printer>:

static void stdio_buffered_printer(char c, void *arg) {
1000560c:	b580      	push	{r7, lr}
1000560e:	b084      	sub	sp, #16
10005610:	af00      	add	r7, sp, #0
10005612:	4603      	mov	r3, r0
10005614:	6039      	str	r1, [r7, #0]
10005616:	71fb      	strb	r3, [r7, #7]
    stdio_stack_buffer_t *buffer = (stdio_stack_buffer_t *)arg;
10005618:	683b      	ldr	r3, [r7, #0]
1000561a:	60fb      	str	r3, [r7, #12]
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
1000561c:	68fb      	ldr	r3, [r7, #12]
1000561e:	681b      	ldr	r3, [r3, #0]
10005620:	2b80      	cmp	r3, #128	@ 0x80
10005622:	d102      	bne.n	1000562a <stdio_buffered_printer+0x1e>
        stdio_stack_buffer_flush(buffer);
10005624:	68f8      	ldr	r0, [r7, #12]
10005626:	f7ff ffbb 	bl	100055a0 <stdio_stack_buffer_flush>
    }
    buffer->buf[buffer->used++] = c;
1000562a:	68fb      	ldr	r3, [r7, #12]
1000562c:	681b      	ldr	r3, [r3, #0]
1000562e:	1c59      	adds	r1, r3, #1
10005630:	68fa      	ldr	r2, [r7, #12]
10005632:	6011      	str	r1, [r2, #0]
10005634:	68fa      	ldr	r2, [r7, #12]
10005636:	4413      	add	r3, r2
10005638:	79fa      	ldrb	r2, [r7, #7]
1000563a:	711a      	strb	r2, [r3, #4]
}
1000563c:	bf00      	nop
1000563e:	3710      	adds	r7, #16
10005640:	46bd      	mov	sp, r7
10005642:	bd80      	pop	{r7, pc}

10005644 <stdio_init_all>:
#endif

bool stdio_init_all(void) {
10005644:	b580      	push	{r7, lr}
10005646:	b082      	sub	sp, #8
10005648:	af00      	add	r7, sp, #0
    // todo add explicit custom, or registered although you can call stdio_enable_driver explicitly anyway
    // These are well known ones

    bool rc = false;
1000564a:	2300      	movs	r3, #0
1000564c:	71fb      	strb	r3, [r7, #7]
#if LIB_PICO_STDIO_UART
    stdio_uart_init();
1000564e:	f000 f9b7 	bl	100059c0 <stdio_uart_init>
    rc = true;
10005652:	2301      	movs	r3, #1
10005654:	71fb      	strb	r3, [r7, #7]
#endif

#if LIB_PICO_STDIO_USB
    rc |= stdio_usb_init();
#endif
    return rc;
10005656:	79fb      	ldrb	r3, [r7, #7]
}
10005658:	4618      	mov	r0, r3
1000565a:	3708      	adds	r7, #8
1000565c:	46bd      	mov	sp, r7
1000565e:	bd80      	pop	{r7, pc}

10005660 <__wrap_puts>:
    char cc = (char)c;
    stdio_put_string(&cc, 1, false, true);
    return c;
}

int PRIMARY_STDIO_FUNC(puts)(const char *s) {
10005660:	b580      	push	{r7, lr}
10005662:	b084      	sub	sp, #16
10005664:	af00      	add	r7, sp, #0
10005666:	6078      	str	r0, [r7, #4]
    int len = (int)strlen(s);
10005668:	6878      	ldr	r0, [r7, #4]
1000566a:	f000 fedf 	bl	1000642c <strlen>
1000566e:	4603      	mov	r3, r0
10005670:	60fb      	str	r3, [r7, #12]
    stdio_put_string(s, len, true, true);
10005672:	2301      	movs	r3, #1
10005674:	2201      	movs	r2, #1
10005676:	68f9      	ldr	r1, [r7, #12]
10005678:	6878      	ldr	r0, [r7, #4]
1000567a:	f7ff fee5 	bl	10005448 <stdio_put_string>
    stdio_flush();
1000567e:	f7ff ff73 	bl	10005568 <stdio_flush>
    return len;
10005682:	68fb      	ldr	r3, [r7, #12]
}
10005684:	4618      	mov	r0, r3
10005686:	3710      	adds	r7, #16
10005688:	46bd      	mov	sp, r7
1000568a:	bd80      	pop	{r7, pc}

1000568c <__wrap_vprintf>:

int REAL_FUNC(vprintf)(const char *format, va_list va);

int PRIMARY_STDIO_FUNC(vprintf)(const char *format, va_list va) {
1000568c:	b580      	push	{r7, lr}
1000568e:	b0a6      	sub	sp, #152	@ 0x98
10005690:	af00      	add	r7, sp, #0
10005692:	6078      	str	r0, [r7, #4]
10005694:	6039      	str	r1, [r7, #0]
    bool serialzed = stdout_serialize_begin();
10005696:	f7ff fe33 	bl	10005300 <stdout_serialize_begin>
1000569a:	4603      	mov	r3, r0
1000569c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#endif
    }
    int ret;
#if LIB_PICO_PRINTF_PICO
    struct stdio_stack_buffer buffer;
    buffer.used = 0;
100056a0:	2300      	movs	r3, #0
100056a2:	60fb      	str	r3, [r7, #12]
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
100056a4:	f107 010c 	add.w	r1, r7, #12
100056a8:	683b      	ldr	r3, [r7, #0]
100056aa:	687a      	ldr	r2, [r7, #4]
100056ac:	480b      	ldr	r0, [pc, #44]	@ (100056dc <__wrap_vprintf+0x50>)
100056ae:	f7ff fd13 	bl	100050d8 <vfctprintf>
100056b2:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    stdio_stack_buffer_flush(&buffer);
100056b6:	f107 030c 	add.w	r3, r7, #12
100056ba:	4618      	mov	r0, r3
100056bc:	f7ff ff70 	bl	100055a0 <stdio_stack_buffer_flush>
    stdio_flush();
100056c0:	f7ff ff52 	bl	10005568 <stdio_flush>
    printf_none_assert();
    ret = 0;
#else
    ret = REAL_FUNC(vprintf)(format, va);
#endif
    if (serialzed) {
100056c4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
100056c8:	2b00      	cmp	r3, #0
100056ca:	d001      	beq.n	100056d0 <__wrap_vprintf+0x44>
        stdout_serialize_end();
100056cc:	f7ff fe28 	bl	10005320 <stdout_serialize_end>
    }
    return ret;
100056d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
100056d4:	4618      	mov	r0, r3
100056d6:	3798      	adds	r7, #152	@ 0x98
100056d8:	46bd      	mov	sp, r7
100056da:	bd80      	pop	{r7, pc}
100056dc:	1000560d 	.word	0x1000560d

100056e0 <__wrap_printf>:

int __printflike(1, 0) PRIMARY_STDIO_FUNC(printf)(const char* format, ...)
{
100056e0:	b40f      	push	{r0, r1, r2, r3}
100056e2:	b580      	push	{r7, lr}
100056e4:	b082      	sub	sp, #8
100056e6:	af00      	add	r7, sp, #0
    va_list va;
    va_start(va, format);
100056e8:	f107 0314 	add.w	r3, r7, #20
100056ec:	603b      	str	r3, [r7, #0]
    int ret = vprintf(format, va);
100056ee:	6839      	ldr	r1, [r7, #0]
100056f0:	6938      	ldr	r0, [r7, #16]
100056f2:	f7ff ffcb 	bl	1000568c <__wrap_vprintf>
100056f6:	6078      	str	r0, [r7, #4]
    va_end(va);
    return ret;
100056f8:	687b      	ldr	r3, [r7, #4]
}
100056fa:	4618      	mov	r0, r3
100056fc:	3708      	adds	r7, #8
100056fe:	46bd      	mov	sp, r7
10005700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
10005704:	b004      	add	sp, #16
10005706:	4770      	bx	lr

10005708 <uart_get_index>:
static inline uint uart_get_index(uart_inst_t *uart) {
10005708:	b480      	push	{r7}
1000570a:	b083      	sub	sp, #12
1000570c:	af00      	add	r7, sp, #0
1000570e:	6078      	str	r0, [r7, #4]
    return UART_NUM(uart);
10005710:	687b      	ldr	r3, [r7, #4]
10005712:	4a06      	ldr	r2, [pc, #24]	@ (1000572c <uart_get_index+0x24>)
10005714:	4293      	cmp	r3, r2
10005716:	bf0c      	ite	eq
10005718:	2301      	moveq	r3, #1
1000571a:	2300      	movne	r3, #0
1000571c:	b2db      	uxtb	r3, r3
}
1000571e:	4618      	mov	r0, r3
10005720:	370c      	adds	r7, #12
10005722:	46bd      	mov	sp, r7
10005724:	f85d 7b04 	ldr.w	r7, [sp], #4
10005728:	4770      	bx	lr
1000572a:	bf00      	nop
1000572c:	40078000 	.word	0x40078000

10005730 <uart_get_hw>:
static inline uart_hw_t *uart_get_hw(uart_inst_t *uart) {
10005730:	b580      	push	{r7, lr}
10005732:	b082      	sub	sp, #8
10005734:	af00      	add	r7, sp, #0
10005736:	6078      	str	r0, [r7, #4]
    uart_get_index(uart); // check it is a hw uart
10005738:	6878      	ldr	r0, [r7, #4]
1000573a:	f7ff ffe5 	bl	10005708 <uart_get_index>
    return (uart_hw_t *)uart;
1000573e:	687b      	ldr	r3, [r7, #4]
}
10005740:	4618      	mov	r0, r3
10005742:	3708      	adds	r7, #8
10005744:	46bd      	mov	sp, r7
10005746:	bd80      	pop	{r7, pc}

10005748 <uart_set_irqs_enabled>:
static inline void uart_set_irqs_enabled(uart_inst_t *uart, bool rx_has_data, bool tx_needs_data) {
10005748:	b5b0      	push	{r4, r5, r7, lr}
1000574a:	b08c      	sub	sp, #48	@ 0x30
1000574c:	af00      	add	r7, sp, #0
1000574e:	6078      	str	r0, [r7, #4]
10005750:	460b      	mov	r3, r1
10005752:	70fb      	strb	r3, [r7, #3]
10005754:	4613      	mov	r3, r2
10005756:	70bb      	strb	r3, [r7, #2]
    uart_get_hw(uart)->imsc = (bool_to_bit(tx_needs_data) << UART_UARTIMSC_TXIM_LSB) |
10005758:	78bb      	ldrb	r3, [r7, #2]
1000575a:	2b00      	cmp	r3, #0
1000575c:	d001      	beq.n	10005762 <uart_set_irqs_enabled+0x1a>
1000575e:	2220      	movs	r2, #32
10005760:	e000      	b.n	10005764 <uart_set_irqs_enabled+0x1c>
10005762:	2200      	movs	r2, #0
                              (bool_to_bit(rx_has_data) << UART_UARTIMSC_RXIM_LSB) |
10005764:	78fb      	ldrb	r3, [r7, #3]
10005766:	2b00      	cmp	r3, #0
10005768:	d001      	beq.n	1000576e <uart_set_irqs_enabled+0x26>
1000576a:	2310      	movs	r3, #16
1000576c:	e000      	b.n	10005770 <uart_set_irqs_enabled+0x28>
1000576e:	2300      	movs	r3, #0
    uart_get_hw(uart)->imsc = (bool_to_bit(tx_needs_data) << UART_UARTIMSC_TXIM_LSB) |
10005770:	ea42 0403 	orr.w	r4, r2, r3
                              (bool_to_bit(rx_has_data) << UART_UARTIMSC_RTIM_LSB);
10005774:	78fb      	ldrb	r3, [r7, #3]
10005776:	2b00      	cmp	r3, #0
10005778:	d001      	beq.n	1000577e <uart_set_irqs_enabled+0x36>
1000577a:	2540      	movs	r5, #64	@ 0x40
1000577c:	e000      	b.n	10005780 <uart_set_irqs_enabled+0x38>
1000577e:	2500      	movs	r5, #0
    uart_get_hw(uart)->imsc = (bool_to_bit(tx_needs_data) << UART_UARTIMSC_TXIM_LSB) |
10005780:	6878      	ldr	r0, [r7, #4]
10005782:	f7ff ffd5 	bl	10005730 <uart_get_hw>
10005786:	4602      	mov	r2, r0
                              (bool_to_bit(rx_has_data) << UART_UARTIMSC_RXIM_LSB) |
10005788:	ea45 0304 	orr.w	r3, r5, r4
    uart_get_hw(uart)->imsc = (bool_to_bit(tx_needs_data) << UART_UARTIMSC_TXIM_LSB) |
1000578c:	6393      	str	r3, [r2, #56]	@ 0x38
    if (rx_has_data) {
1000578e:	78fb      	ldrb	r3, [r7, #3]
10005790:	2b00      	cmp	r3, #0
10005792:	d01a      	beq.n	100057ca <uart_set_irqs_enabled+0x82>
        hw_write_masked(&uart_get_hw(uart)->ifls, 0 << UART_UARTIFLS_RXIFLSEL_LSB,
10005794:	6878      	ldr	r0, [r7, #4]
10005796:	f7ff ffcb 	bl	10005730 <uart_get_hw>
1000579a:	4603      	mov	r3, r0
1000579c:	3334      	adds	r3, #52	@ 0x34
1000579e:	62fb      	str	r3, [r7, #44]	@ 0x2c
100057a0:	2300      	movs	r3, #0
100057a2:	62bb      	str	r3, [r7, #40]	@ 0x28
100057a4:	2338      	movs	r3, #56	@ 0x38
100057a6:	627b      	str	r3, [r7, #36]	@ 0x24
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100057a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100057aa:	681a      	ldr	r2, [r3, #0]
100057ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100057ae:	405a      	eors	r2, r3
100057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100057b2:	4013      	ands	r3, r2
100057b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100057b6:	623a      	str	r2, [r7, #32]
100057b8:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100057ba:	6a3b      	ldr	r3, [r7, #32]
100057bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100057c0:	461a      	mov	r2, r3
100057c2:	69fb      	ldr	r3, [r7, #28]
100057c4:	6013      	str	r3, [r2, #0]
}
100057c6:	bf00      	nop
}
100057c8:	bf00      	nop
    if (tx_needs_data) {
100057ca:	78bb      	ldrb	r3, [r7, #2]
100057cc:	2b00      	cmp	r3, #0
100057ce:	d01a      	beq.n	10005806 <uart_set_irqs_enabled+0xbe>
        hw_write_masked(&uart_get_hw(uart)->ifls, 0 << UART_UARTIFLS_TXIFLSEL_LSB,
100057d0:	6878      	ldr	r0, [r7, #4]
100057d2:	f7ff ffad 	bl	10005730 <uart_get_hw>
100057d6:	4603      	mov	r3, r0
100057d8:	3334      	adds	r3, #52	@ 0x34
100057da:	61bb      	str	r3, [r7, #24]
100057dc:	2300      	movs	r3, #0
100057de:	617b      	str	r3, [r7, #20]
100057e0:	2307      	movs	r3, #7
100057e2:	613b      	str	r3, [r7, #16]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100057e4:	69bb      	ldr	r3, [r7, #24]
100057e6:	681a      	ldr	r2, [r3, #0]
100057e8:	697b      	ldr	r3, [r7, #20]
100057ea:	405a      	eors	r2, r3
100057ec:	693b      	ldr	r3, [r7, #16]
100057ee:	4013      	ands	r3, r2
100057f0:	69ba      	ldr	r2, [r7, #24]
100057f2:	60fa      	str	r2, [r7, #12]
100057f4:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
100057f6:	68fb      	ldr	r3, [r7, #12]
100057f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
100057fc:	461a      	mov	r2, r3
100057fe:	68bb      	ldr	r3, [r7, #8]
10005800:	6013      	str	r3, [r2, #0]
}
10005802:	bf00      	nop
}
10005804:	bf00      	nop
}
10005806:	bf00      	nop
10005808:	3730      	adds	r7, #48	@ 0x30
1000580a:	46bd      	mov	sp, r7
1000580c:	bdb0      	pop	{r4, r5, r7, pc}

1000580e <uart_is_writable>:
static inline bool uart_is_writable(uart_inst_t *uart) {
1000580e:	b580      	push	{r7, lr}
10005810:	b082      	sub	sp, #8
10005812:	af00      	add	r7, sp, #0
10005814:	6078      	str	r0, [r7, #4]
    return !(uart_get_hw(uart)->fr & UART_UARTFR_TXFF_BITS);
10005816:	6878      	ldr	r0, [r7, #4]
10005818:	f7ff ff8a 	bl	10005730 <uart_get_hw>
1000581c:	4603      	mov	r3, r0
1000581e:	699b      	ldr	r3, [r3, #24]
10005820:	f003 0320 	and.w	r3, r3, #32
10005824:	2b00      	cmp	r3, #0
10005826:	bf0c      	ite	eq
10005828:	2301      	moveq	r3, #1
1000582a:	2300      	movne	r3, #0
1000582c:	b2db      	uxtb	r3, r3
}
1000582e:	4618      	mov	r0, r3
10005830:	3708      	adds	r7, #8
10005832:	46bd      	mov	sp, r7
10005834:	bd80      	pop	{r7, pc}

10005836 <uart_tx_wait_blocking>:
static inline void uart_tx_wait_blocking(uart_inst_t *uart) {
10005836:	b580      	push	{r7, lr}
10005838:	b082      	sub	sp, #8
1000583a:	af00      	add	r7, sp, #0
1000583c:	6078      	str	r0, [r7, #4]
    while (uart_get_hw(uart)->fr & UART_UARTFR_BUSY_BITS) tight_loop_contents();
1000583e:	e000      	b.n	10005842 <uart_tx_wait_blocking+0xc>
static __force_inline void tight_loop_contents(void) {}
10005840:	bf00      	nop
10005842:	6878      	ldr	r0, [r7, #4]
10005844:	f7ff ff74 	bl	10005730 <uart_get_hw>
10005848:	4603      	mov	r3, r0
1000584a:	699b      	ldr	r3, [r3, #24]
1000584c:	f003 0308 	and.w	r3, r3, #8
10005850:	2b00      	cmp	r3, #0
10005852:	d1f5      	bne.n	10005840 <uart_tx_wait_blocking+0xa>
}
10005854:	bf00      	nop
10005856:	bf00      	nop
10005858:	3708      	adds	r7, #8
1000585a:	46bd      	mov	sp, r7
1000585c:	bd80      	pop	{r7, pc}

1000585e <uart_is_readable>:
static inline bool uart_is_readable(uart_inst_t *uart) {
1000585e:	b580      	push	{r7, lr}
10005860:	b082      	sub	sp, #8
10005862:	af00      	add	r7, sp, #0
10005864:	6078      	str	r0, [r7, #4]
    return !(uart_get_hw(uart)->fr & UART_UARTFR_RXFE_BITS);
10005866:	6878      	ldr	r0, [r7, #4]
10005868:	f7ff ff62 	bl	10005730 <uart_get_hw>
1000586c:	4603      	mov	r3, r0
1000586e:	699b      	ldr	r3, [r3, #24]
10005870:	f003 0310 	and.w	r3, r3, #16
10005874:	2b00      	cmp	r3, #0
10005876:	bf0c      	ite	eq
10005878:	2301      	moveq	r3, #1
1000587a:	2300      	movne	r3, #0
1000587c:	b2db      	uxtb	r3, r3
}
1000587e:	4618      	mov	r0, r3
10005880:	3708      	adds	r7, #8
10005882:	46bd      	mov	sp, r7
10005884:	bd80      	pop	{r7, pc}

10005886 <uart_write_blocking>:
static inline void uart_write_blocking(uart_inst_t *uart, const uint8_t *src, size_t len) {
10005886:	b590      	push	{r4, r7, lr}
10005888:	b087      	sub	sp, #28
1000588a:	af00      	add	r7, sp, #0
1000588c:	60f8      	str	r0, [r7, #12]
1000588e:	60b9      	str	r1, [r7, #8]
10005890:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; ++i) {
10005892:	2300      	movs	r3, #0
10005894:	617b      	str	r3, [r7, #20]
10005896:	e016      	b.n	100058c6 <uart_write_blocking+0x40>
10005898:	bf00      	nop
        while (!uart_is_writable(uart))
1000589a:	68f8      	ldr	r0, [r7, #12]
1000589c:	f7ff ffb7 	bl	1000580e <uart_is_writable>
100058a0:	4603      	mov	r3, r0
100058a2:	f083 0301 	eor.w	r3, r3, #1
100058a6:	b2db      	uxtb	r3, r3
100058a8:	2b00      	cmp	r3, #0
100058aa:	d1f5      	bne.n	10005898 <uart_write_blocking+0x12>
        uart_get_hw(uart)->dr = *src++;
100058ac:	68bb      	ldr	r3, [r7, #8]
100058ae:	1c5a      	adds	r2, r3, #1
100058b0:	60ba      	str	r2, [r7, #8]
100058b2:	781c      	ldrb	r4, [r3, #0]
100058b4:	68f8      	ldr	r0, [r7, #12]
100058b6:	f7ff ff3b 	bl	10005730 <uart_get_hw>
100058ba:	4603      	mov	r3, r0
100058bc:	4622      	mov	r2, r4
100058be:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < len; ++i) {
100058c0:	697b      	ldr	r3, [r7, #20]
100058c2:	3301      	adds	r3, #1
100058c4:	617b      	str	r3, [r7, #20]
100058c6:	697a      	ldr	r2, [r7, #20]
100058c8:	687b      	ldr	r3, [r7, #4]
100058ca:	429a      	cmp	r2, r3
100058cc:	d3e5      	bcc.n	1000589a <uart_write_blocking+0x14>
}
100058ce:	bf00      	nop
100058d0:	bf00      	nop
100058d2:	371c      	adds	r7, #28
100058d4:	46bd      	mov	sp, r7
100058d6:	bd90      	pop	{r4, r7, pc}

100058d8 <uart_read_blocking>:
static inline void uart_read_blocking(uart_inst_t *uart, uint8_t *dst, size_t len) {
100058d8:	b580      	push	{r7, lr}
100058da:	b086      	sub	sp, #24
100058dc:	af00      	add	r7, sp, #0
100058de:	60f8      	str	r0, [r7, #12]
100058e0:	60b9      	str	r1, [r7, #8]
100058e2:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; ++i) {
100058e4:	2300      	movs	r3, #0
100058e6:	617b      	str	r3, [r7, #20]
100058e8:	e016      	b.n	10005918 <uart_read_blocking+0x40>
100058ea:	bf00      	nop
        while (!uart_is_readable(uart))
100058ec:	68f8      	ldr	r0, [r7, #12]
100058ee:	f7ff ffb6 	bl	1000585e <uart_is_readable>
100058f2:	4603      	mov	r3, r0
100058f4:	f083 0301 	eor.w	r3, r3, #1
100058f8:	b2db      	uxtb	r3, r3
100058fa:	2b00      	cmp	r3, #0
100058fc:	d1f5      	bne.n	100058ea <uart_read_blocking+0x12>
        *dst++ = (uint8_t) uart_get_hw(uart)->dr;
100058fe:	68f8      	ldr	r0, [r7, #12]
10005900:	f7ff ff16 	bl	10005730 <uart_get_hw>
10005904:	4603      	mov	r3, r0
10005906:	6819      	ldr	r1, [r3, #0]
10005908:	68bb      	ldr	r3, [r7, #8]
1000590a:	1c5a      	adds	r2, r3, #1
1000590c:	60ba      	str	r2, [r7, #8]
1000590e:	b2ca      	uxtb	r2, r1
10005910:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len; ++i) {
10005912:	697b      	ldr	r3, [r7, #20]
10005914:	3301      	adds	r3, #1
10005916:	617b      	str	r3, [r7, #20]
10005918:	697a      	ldr	r2, [r7, #20]
1000591a:	687b      	ldr	r3, [r7, #4]
1000591c:	429a      	cmp	r2, r3
1000591e:	d3e5      	bcc.n	100058ec <uart_read_blocking+0x14>
}
10005920:	bf00      	nop
10005922:	bf00      	nop
10005924:	3718      	adds	r7, #24
10005926:	46bd      	mov	sp, r7
10005928:	bd80      	pop	{r7, pc}

1000592a <uart_putc_raw>:
static inline void uart_putc_raw(uart_inst_t *uart, char c) {
1000592a:	b580      	push	{r7, lr}
1000592c:	b082      	sub	sp, #8
1000592e:	af00      	add	r7, sp, #0
10005930:	6078      	str	r0, [r7, #4]
10005932:	460b      	mov	r3, r1
10005934:	70fb      	strb	r3, [r7, #3]
    uart_write_blocking(uart, (const uint8_t *) &c, 1);
10005936:	1cfb      	adds	r3, r7, #3
10005938:	2201      	movs	r2, #1
1000593a:	4619      	mov	r1, r3
1000593c:	6878      	ldr	r0, [r7, #4]
1000593e:	f7ff ffa2 	bl	10005886 <uart_write_blocking>
}
10005942:	bf00      	nop
10005944:	3708      	adds	r7, #8
10005946:	46bd      	mov	sp, r7
10005948:	bd80      	pop	{r7, pc}
	...

1000594c <uart_putc>:
static inline void uart_putc(uart_inst_t *uart, char c) {
1000594c:	b580      	push	{r7, lr}
1000594e:	b082      	sub	sp, #8
10005950:	af00      	add	r7, sp, #0
10005952:	6078      	str	r0, [r7, #4]
10005954:	460b      	mov	r3, r1
10005956:	70fb      	strb	r3, [r7, #3]
    if (uart_char_to_line_feed[uart_get_index(uart)] == c)
10005958:	6878      	ldr	r0, [r7, #4]
1000595a:	f7ff fed5 	bl	10005708 <uart_get_index>
1000595e:	4603      	mov	r3, r0
10005960:	4a09      	ldr	r2, [pc, #36]	@ (10005988 <uart_putc+0x3c>)
10005962:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
10005966:	461a      	mov	r2, r3
10005968:	78fb      	ldrb	r3, [r7, #3]
1000596a:	429a      	cmp	r2, r3
1000596c:	d103      	bne.n	10005976 <uart_putc+0x2a>
        uart_putc_raw(uart, '\r');
1000596e:	210d      	movs	r1, #13
10005970:	6878      	ldr	r0, [r7, #4]
10005972:	f7ff ffda 	bl	1000592a <uart_putc_raw>
    uart_putc_raw(uart, c);
10005976:	78fb      	ldrb	r3, [r7, #3]
10005978:	4619      	mov	r1, r3
1000597a:	6878      	ldr	r0, [r7, #4]
1000597c:	f7ff ffd5 	bl	1000592a <uart_putc_raw>
}
10005980:	bf00      	nop
10005982:	3708      	adds	r7, #8
10005984:	46bd      	mov	sp, r7
10005986:	bd80      	pop	{r7, pc}
10005988:	200009ac 	.word	0x200009ac

1000598c <uart_getc>:
static inline char uart_getc(uart_inst_t *uart) {
1000598c:	b580      	push	{r7, lr}
1000598e:	b084      	sub	sp, #16
10005990:	af00      	add	r7, sp, #0
10005992:	6078      	str	r0, [r7, #4]
    uart_read_blocking(uart, (uint8_t *) &c, 1);
10005994:	f107 030f 	add.w	r3, r7, #15
10005998:	2201      	movs	r2, #1
1000599a:	4619      	mov	r1, r3
1000599c:	6878      	ldr	r0, [r7, #4]
1000599e:	f7ff ff9b 	bl	100058d8 <uart_read_blocking>
    return c;
100059a2:	7bfb      	ldrb	r3, [r7, #15]
}
100059a4:	4618      	mov	r0, r3
100059a6:	3710      	adds	r7, #16
100059a8:	46bd      	mov	sp, r7
100059aa:	bd80      	pop	{r7, pc}

100059ac <uart_default_tx_wait_blocking>:
static inline void uart_default_tx_wait_blocking(void) {
100059ac:	b580      	push	{r7, lr}
100059ae:	af00      	add	r7, sp, #0
    uart_tx_wait_blocking(uart_default);
100059b0:	4802      	ldr	r0, [pc, #8]	@ (100059bc <uart_default_tx_wait_blocking+0x10>)
100059b2:	f7ff ff40 	bl	10005836 <uart_tx_wait_blocking>
}
100059b6:	bf00      	nop
100059b8:	bd80      	pop	{r7, pc}
100059ba:	bf00      	nop
100059bc:	40070000 	.word	0x40070000

100059c0 <stdio_uart_init>:
#if !(PICO_DEFAULT_UART_RX_PIN & 0x1) || (PICO_RP2040 && (PICO_DEFAULT_UART_TX_PIN & 0x2))
#error "Specified PICO_DEFAULT_UART_RX_PIN does not support UART RX"
#endif
#endif

void stdio_uart_init(void) {
100059c0:	b580      	push	{r7, lr}
100059c2:	b082      	sub	sp, #8
100059c4:	af00      	add	r7, sp, #0
#ifdef uart_default
    int tx_pin = -1;
100059c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100059ca:	607b      	str	r3, [r7, #4]
    int rx_pin = -1;
100059cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100059d0:	603b      	str	r3, [r7, #0]
#ifdef PICO_DEFAULT_UART_TX_PIN
    tx_pin = PICO_DEFAULT_UART_TX_PIN;
100059d2:	2300      	movs	r3, #0
100059d4:	607b      	str	r3, [r7, #4]
#ifdef PICO_DEFAULT_UART_RX_PIN
    rx_pin = PICO_DEFAULT_UART_RX_PIN;
100059d6:	2301      	movs	r3, #1
100059d8:	603b      	str	r3, [r7, #0]
    stdio_bi_decl_if_func_used(bi_program_feature("UART stdin / stdout"));
100059da:	4b08      	ldr	r3, [pc, #32]	@ (100059fc <stdio_uart_init+0x3c>)
100059dc:	781b      	ldrb	r3, [r3, #0]
#if PICO_DEFAULT_UART_TX_PIN == PICO_DEFAULT_UART_RX_PIN
    bi_decl_if_func_used(bi_2pins_with_func(PICO_DEFAULT_UART_RX_PIN, PICO_DEFAULT_UART_TX_PIN, uart_get_funcsel(uart_default, PICO_DEFAULT_UART_RX_PIN)));
#else
    bi_decl_if_func_used(bi_1pin_with_func(PICO_DEFAULT_UART_TX_PIN, UART_FUNCSEL_NUM(uart_default, PICO_DEFAULT_UART_TX_PIN)));
100059de:	4b08      	ldr	r3, [pc, #32]	@ (10005a00 <stdio_uart_init+0x40>)
100059e0:	781b      	ldrb	r3, [r3, #0]
    bi_decl_if_func_used(bi_1pin_with_func(PICO_DEFAULT_UART_RX_PIN, UART_FUNCSEL_NUM(uart_default, PICO_DEFAULT_UART_RX_PIN)));
100059e2:	4b08      	ldr	r3, [pc, #32]	@ (10005a04 <stdio_uart_init+0x44>)
100059e4:	781b      	ldrb	r3, [r3, #0]
    bi_decl_if_func_used(bi_1pin_with_func(PICO_DEFAULT_UART_RX_PIN, GPIO_FUNC_UART));
#endif
#if !defined(PICO_DEFAULT_UART_BAUD_RATE)
    panic("UART baud rate undefined");
#else
    stdio_uart_init_full(uart_default, PICO_DEFAULT_UART_BAUD_RATE, tx_pin, rx_pin);
100059e6:	683b      	ldr	r3, [r7, #0]
100059e8:	687a      	ldr	r2, [r7, #4]
100059ea:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
100059ee:	4806      	ldr	r0, [pc, #24]	@ (10005a08 <stdio_uart_init+0x48>)
100059f0:	f000 f80c 	bl	10005a0c <stdio_uart_init_full>
#endif
#endif
}
100059f4:	bf00      	nop
100059f6:	3708      	adds	r7, #8
100059f8:	46bd      	mov	sp, r7
100059fa:	bd80      	pop	{r7, pc}
100059fc:	10006e40 	.word	0x10006e40
10005a00:	10006e44 	.word	0x10006e44
10005a04:	10006e48 	.word	0x10006e48
10005a08:	40070000 	.word	0x40070000

10005a0c <stdio_uart_init_full>:
    stdio_uart_init_full(uart_default, PICO_DEFAULT_UART_BAUD_RATE, -1, PICO_DEFAULT_UART_RX_PIN);
#endif
#endif
}

void stdio_uart_init_full(struct uart_inst *uart, uint baud_rate, int tx_pin, int rx_pin) {
10005a0c:	b580      	push	{r7, lr}
10005a0e:	b084      	sub	sp, #16
10005a10:	af00      	add	r7, sp, #0
10005a12:	60f8      	str	r0, [r7, #12]
10005a14:	60b9      	str	r1, [r7, #8]
10005a16:	607a      	str	r2, [r7, #4]
10005a18:	603b      	str	r3, [r7, #0]
    uart_instance = uart;
10005a1a:	4a18      	ldr	r2, [pc, #96]	@ (10005a7c <stdio_uart_init_full+0x70>)
10005a1c:	68fb      	ldr	r3, [r7, #12]
10005a1e:	6013      	str	r3, [r2, #0]
    if (tx_pin >= 0) gpio_set_function((uint)tx_pin, UART_FUNCSEL_NUM(uart, tx_pin));
10005a20:	687b      	ldr	r3, [r7, #4]
10005a22:	2b00      	cmp	r3, #0
10005a24:	db0c      	blt.n	10005a40 <stdio_uart_init_full+0x34>
10005a26:	687a      	ldr	r2, [r7, #4]
10005a28:	687b      	ldr	r3, [r7, #4]
10005a2a:	f003 0302 	and.w	r3, r3, #2
10005a2e:	2b00      	cmp	r3, #0
10005a30:	d001      	beq.n	10005a36 <stdio_uart_init_full+0x2a>
10005a32:	230b      	movs	r3, #11
10005a34:	e000      	b.n	10005a38 <stdio_uart_init_full+0x2c>
10005a36:	2302      	movs	r3, #2
10005a38:	4619      	mov	r1, r3
10005a3a:	4610      	mov	r0, r2
10005a3c:	f7fa fe0a 	bl	10000654 <gpio_set_function>
    if (rx_pin >= 0) gpio_set_function((uint)rx_pin, UART_FUNCSEL_NUM(uart, rx_pin));
10005a40:	683b      	ldr	r3, [r7, #0]
10005a42:	2b00      	cmp	r3, #0
10005a44:	db0c      	blt.n	10005a60 <stdio_uart_init_full+0x54>
10005a46:	683a      	ldr	r2, [r7, #0]
10005a48:	683b      	ldr	r3, [r7, #0]
10005a4a:	f003 0302 	and.w	r3, r3, #2
10005a4e:	2b00      	cmp	r3, #0
10005a50:	d001      	beq.n	10005a56 <stdio_uart_init_full+0x4a>
10005a52:	230b      	movs	r3, #11
10005a54:	e000      	b.n	10005a58 <stdio_uart_init_full+0x4c>
10005a56:	2302      	movs	r3, #2
10005a58:	4619      	mov	r1, r3
10005a5a:	4610      	mov	r0, r2
10005a5c:	f7fa fdfa 	bl	10000654 <gpio_set_function>
    uart_init(uart_instance, baud_rate);
10005a60:	4b06      	ldr	r3, [pc, #24]	@ (10005a7c <stdio_uart_init_full+0x70>)
10005a62:	681b      	ldr	r3, [r3, #0]
10005a64:	68b9      	ldr	r1, [r7, #8]
10005a66:	4618      	mov	r0, r3
10005a68:	f7fc fed7 	bl	1000281a <uart_init>
    stdio_set_driver_enabled(&stdio_uart, true);
10005a6c:	2101      	movs	r1, #1
10005a6e:	4804      	ldr	r0, [pc, #16]	@ (10005a80 <stdio_uart_init_full+0x74>)
10005a70:	f7ff fd46 	bl	10005500 <stdio_set_driver_enabled>
}
10005a74:	bf00      	nop
10005a76:	3710      	adds	r7, #16
10005a78:	46bd      	mov	sp, r7
10005a7a:	bd80      	pop	{r7, pc}
10005a7c:	200009b0 	.word	0x200009b0
10005a80:	2000075c 	.word	0x2000075c

10005a84 <stdio_uart_out_chars>:
    if (tx_pin >= 0) hw_set_bits(&pads_bank0_hw->io[tx_pin], PADS_BANK0_GPIO0_ISO_BITS);
    if (rx_pin >= 0) hw_set_bits(&pads_bank0_hw->io[rx_pin], PADS_BANK0_GPIO0_ISO_BITS);
#endif
}

static void stdio_uart_out_chars(const char *buf, int length) {
10005a84:	b580      	push	{r7, lr}
10005a86:	b084      	sub	sp, #16
10005a88:	af00      	add	r7, sp, #0
10005a8a:	6078      	str	r0, [r7, #4]
10005a8c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i <length; i++) {
10005a8e:	2300      	movs	r3, #0
10005a90:	60fb      	str	r3, [r7, #12]
10005a92:	e00b      	b.n	10005aac <stdio_uart_out_chars+0x28>
        uart_putc(uart_instance, buf[i]);
10005a94:	4b0a      	ldr	r3, [pc, #40]	@ (10005ac0 <stdio_uart_out_chars+0x3c>)
10005a96:	6818      	ldr	r0, [r3, #0]
10005a98:	68fb      	ldr	r3, [r7, #12]
10005a9a:	687a      	ldr	r2, [r7, #4]
10005a9c:	4413      	add	r3, r2
10005a9e:	781b      	ldrb	r3, [r3, #0]
10005aa0:	4619      	mov	r1, r3
10005aa2:	f7ff ff53 	bl	1000594c <uart_putc>
    for (int i = 0; i <length; i++) {
10005aa6:	68fb      	ldr	r3, [r7, #12]
10005aa8:	3301      	adds	r3, #1
10005aaa:	60fb      	str	r3, [r7, #12]
10005aac:	68fa      	ldr	r2, [r7, #12]
10005aae:	683b      	ldr	r3, [r7, #0]
10005ab0:	429a      	cmp	r2, r3
10005ab2:	dbef      	blt.n	10005a94 <stdio_uart_out_chars+0x10>
    }
}
10005ab4:	bf00      	nop
10005ab6:	bf00      	nop
10005ab8:	3710      	adds	r7, #16
10005aba:	46bd      	mov	sp, r7
10005abc:	bd80      	pop	{r7, pc}
10005abe:	bf00      	nop
10005ac0:	200009b0 	.word	0x200009b0

10005ac4 <stdio_uart_in_chars>:

int stdio_uart_in_chars(char *buf, int length) {
10005ac4:	b590      	push	{r4, r7, lr}
10005ac6:	b085      	sub	sp, #20
10005ac8:	af00      	add	r7, sp, #0
10005aca:	6078      	str	r0, [r7, #4]
10005acc:	6039      	str	r1, [r7, #0]
    int i=0;
10005ace:	2300      	movs	r3, #0
10005ad0:	60fb      	str	r3, [r7, #12]
    while (i<length && uart_is_readable(uart_instance)) {
10005ad2:	e00c      	b.n	10005aee <stdio_uart_in_chars+0x2a>
        buf[i++] = uart_getc(uart_instance);
10005ad4:	4b17      	ldr	r3, [pc, #92]	@ (10005b34 <stdio_uart_in_chars+0x70>)
10005ad6:	6819      	ldr	r1, [r3, #0]
10005ad8:	68fb      	ldr	r3, [r7, #12]
10005ada:	1c5a      	adds	r2, r3, #1
10005adc:	60fa      	str	r2, [r7, #12]
10005ade:	461a      	mov	r2, r3
10005ae0:	687b      	ldr	r3, [r7, #4]
10005ae2:	189c      	adds	r4, r3, r2
10005ae4:	4608      	mov	r0, r1
10005ae6:	f7ff ff51 	bl	1000598c <uart_getc>
10005aea:	4603      	mov	r3, r0
10005aec:	7023      	strb	r3, [r4, #0]
    while (i<length && uart_is_readable(uart_instance)) {
10005aee:	68fa      	ldr	r2, [r7, #12]
10005af0:	683b      	ldr	r3, [r7, #0]
10005af2:	429a      	cmp	r2, r3
10005af4:	da07      	bge.n	10005b06 <stdio_uart_in_chars+0x42>
10005af6:	4b0f      	ldr	r3, [pc, #60]	@ (10005b34 <stdio_uart_in_chars+0x70>)
10005af8:	681b      	ldr	r3, [r3, #0]
10005afa:	4618      	mov	r0, r3
10005afc:	f7ff feaf 	bl	1000585e <uart_is_readable>
10005b00:	4603      	mov	r3, r0
10005b02:	2b00      	cmp	r3, #0
10005b04:	d1e6      	bne.n	10005ad4 <stdio_uart_in_chars+0x10>
    }
#if PICO_STDIO_UART_SUPPORT_CHARS_AVAILABLE_CALLBACK
    if (chars_available_callback) {
10005b06:	4b0c      	ldr	r3, [pc, #48]	@ (10005b38 <stdio_uart_in_chars+0x74>)
10005b08:	681b      	ldr	r3, [r3, #0]
10005b0a:	2b00      	cmp	r3, #0
10005b0c:	d006      	beq.n	10005b1c <stdio_uart_in_chars+0x58>
        // Re-enable interrupts after reading a character
        uart_set_irqs_enabled(uart_instance, true, false);
10005b0e:	4b09      	ldr	r3, [pc, #36]	@ (10005b34 <stdio_uart_in_chars+0x70>)
10005b10:	681b      	ldr	r3, [r3, #0]
10005b12:	2200      	movs	r2, #0
10005b14:	2101      	movs	r1, #1
10005b16:	4618      	mov	r0, r3
10005b18:	f7ff fe16 	bl	10005748 <uart_set_irqs_enabled>
    }
#endif
    return i ? i : PICO_ERROR_NO_DATA;
10005b1c:	68fb      	ldr	r3, [r7, #12]
10005b1e:	2b00      	cmp	r3, #0
10005b20:	d001      	beq.n	10005b26 <stdio_uart_in_chars+0x62>
10005b22:	68fb      	ldr	r3, [r7, #12]
10005b24:	e001      	b.n	10005b2a <stdio_uart_in_chars+0x66>
10005b26:	f06f 0302 	mvn.w	r3, #2
}
10005b2a:	4618      	mov	r0, r3
10005b2c:	3714      	adds	r7, #20
10005b2e:	46bd      	mov	sp, r7
10005b30:	bd90      	pop	{r4, r7, pc}
10005b32:	bf00      	nop
10005b34:	200009b0 	.word	0x200009b0
10005b38:	20000930 	.word	0x20000930

10005b3c <on_uart_rx>:

#if PICO_STDIO_UART_SUPPORT_CHARS_AVAILABLE_CALLBACK
static void on_uart_rx(void) {
10005b3c:	b580      	push	{r7, lr}
10005b3e:	af00      	add	r7, sp, #0
    if (chars_available_callback) {
10005b40:	4b09      	ldr	r3, [pc, #36]	@ (10005b68 <on_uart_rx+0x2c>)
10005b42:	681b      	ldr	r3, [r3, #0]
10005b44:	2b00      	cmp	r3, #0
10005b46:	d00c      	beq.n	10005b62 <on_uart_rx+0x26>
        // Interrupts will go off until the uart is read, so disable them
        uart_set_irqs_enabled(uart_instance, false, false);
10005b48:	4b08      	ldr	r3, [pc, #32]	@ (10005b6c <on_uart_rx+0x30>)
10005b4a:	681b      	ldr	r3, [r3, #0]
10005b4c:	2200      	movs	r2, #0
10005b4e:	2100      	movs	r1, #0
10005b50:	4618      	mov	r0, r3
10005b52:	f7ff fdf9 	bl	10005748 <uart_set_irqs_enabled>
        chars_available_callback(chars_available_param);
10005b56:	4b04      	ldr	r3, [pc, #16]	@ (10005b68 <on_uart_rx+0x2c>)
10005b58:	681b      	ldr	r3, [r3, #0]
10005b5a:	4a05      	ldr	r2, [pc, #20]	@ (10005b70 <on_uart_rx+0x34>)
10005b5c:	6812      	ldr	r2, [r2, #0]
10005b5e:	4610      	mov	r0, r2
10005b60:	4798      	blx	r3
    }
}
10005b62:	bf00      	nop
10005b64:	bd80      	pop	{r7, pc}
10005b66:	bf00      	nop
10005b68:	20000930 	.word	0x20000930
10005b6c:	200009b0 	.word	0x200009b0
10005b70:	20000934 	.word	0x20000934

10005b74 <stdio_uart_set_chars_available_callback>:

#include "hardware/irq.h"

static void stdio_uart_set_chars_available_callback(void (*fn)(void*), void *param) {
10005b74:	b580      	push	{r7, lr}
10005b76:	b084      	sub	sp, #16
10005b78:	af00      	add	r7, sp, #0
10005b7a:	6078      	str	r0, [r7, #4]
10005b7c:	6039      	str	r1, [r7, #0]
    uint irq_num = UART_IRQ_NUM(uart_instance);
10005b7e:	4b20      	ldr	r3, [pc, #128]	@ (10005c00 <stdio_uart_set_chars_available_callback+0x8c>)
10005b80:	681b      	ldr	r3, [r3, #0]
10005b82:	4a20      	ldr	r2, [pc, #128]	@ (10005c04 <stdio_uart_set_chars_available_callback+0x90>)
10005b84:	4293      	cmp	r3, r2
10005b86:	d101      	bne.n	10005b8c <stdio_uart_set_chars_available_callback+0x18>
10005b88:	2322      	movs	r3, #34	@ 0x22
10005b8a:	e000      	b.n	10005b8e <stdio_uart_set_chars_available_callback+0x1a>
10005b8c:	2321      	movs	r3, #33	@ 0x21
10005b8e:	60fb      	str	r3, [r7, #12]
    if (fn && !chars_available_callback) {
10005b90:	687b      	ldr	r3, [r7, #4]
10005b92:	2b00      	cmp	r3, #0
10005b94:	d013      	beq.n	10005bbe <stdio_uart_set_chars_available_callback+0x4a>
10005b96:	4b1c      	ldr	r3, [pc, #112]	@ (10005c08 <stdio_uart_set_chars_available_callback+0x94>)
10005b98:	681b      	ldr	r3, [r3, #0]
10005b9a:	2b00      	cmp	r3, #0
10005b9c:	d10f      	bne.n	10005bbe <stdio_uart_set_chars_available_callback+0x4a>
        irq_set_exclusive_handler(irq_num, on_uart_rx);
10005b9e:	491b      	ldr	r1, [pc, #108]	@ (10005c0c <stdio_uart_set_chars_available_callback+0x98>)
10005ba0:	68f8      	ldr	r0, [r7, #12]
10005ba2:	f7fa ffe7 	bl	10000b74 <irq_set_exclusive_handler>
        irq_set_enabled(irq_num, true);
10005ba6:	2101      	movs	r1, #1
10005ba8:	68f8      	ldr	r0, [r7, #12]
10005baa:	f7fa ff4d 	bl	10000a48 <irq_set_enabled>
        uart_set_irqs_enabled(uart_instance, true, false);
10005bae:	4b14      	ldr	r3, [pc, #80]	@ (10005c00 <stdio_uart_set_chars_available_callback+0x8c>)
10005bb0:	681b      	ldr	r3, [r3, #0]
10005bb2:	2200      	movs	r2, #0
10005bb4:	2101      	movs	r1, #1
10005bb6:	4618      	mov	r0, r3
10005bb8:	f7ff fdc6 	bl	10005748 <uart_set_irqs_enabled>
10005bbc:	e015      	b.n	10005bea <stdio_uart_set_chars_available_callback+0x76>
    } else if (!fn && chars_available_callback) {
10005bbe:	687b      	ldr	r3, [r7, #4]
10005bc0:	2b00      	cmp	r3, #0
10005bc2:	d112      	bne.n	10005bea <stdio_uart_set_chars_available_callback+0x76>
10005bc4:	4b10      	ldr	r3, [pc, #64]	@ (10005c08 <stdio_uart_set_chars_available_callback+0x94>)
10005bc6:	681b      	ldr	r3, [r3, #0]
10005bc8:	2b00      	cmp	r3, #0
10005bca:	d00e      	beq.n	10005bea <stdio_uart_set_chars_available_callback+0x76>
        uart_set_irqs_enabled(uart_instance, false, false);
10005bcc:	4b0c      	ldr	r3, [pc, #48]	@ (10005c00 <stdio_uart_set_chars_available_callback+0x8c>)
10005bce:	681b      	ldr	r3, [r3, #0]
10005bd0:	2200      	movs	r2, #0
10005bd2:	2100      	movs	r1, #0
10005bd4:	4618      	mov	r0, r3
10005bd6:	f7ff fdb7 	bl	10005748 <uart_set_irqs_enabled>
        irq_set_enabled(irq_num, false);
10005bda:	2100      	movs	r1, #0
10005bdc:	68f8      	ldr	r0, [r7, #12]
10005bde:	f7fa ff33 	bl	10000a48 <irq_set_enabled>
        irq_remove_handler(irq_num, on_uart_rx);
10005be2:	490a      	ldr	r1, [pc, #40]	@ (10005c0c <stdio_uart_set_chars_available_callback+0x98>)
10005be4:	68f8      	ldr	r0, [r7, #12]
10005be6:	f7fb f8f1 	bl	10000dcc <irq_remove_handler>
    }
    chars_available_callback = fn;
10005bea:	4a07      	ldr	r2, [pc, #28]	@ (10005c08 <stdio_uart_set_chars_available_callback+0x94>)
10005bec:	687b      	ldr	r3, [r7, #4]
10005bee:	6013      	str	r3, [r2, #0]
    chars_available_param = param;
10005bf0:	4a07      	ldr	r2, [pc, #28]	@ (10005c10 <stdio_uart_set_chars_available_callback+0x9c>)
10005bf2:	683b      	ldr	r3, [r7, #0]
10005bf4:	6013      	str	r3, [r2, #0]
}
10005bf6:	bf00      	nop
10005bf8:	3710      	adds	r7, #16
10005bfa:	46bd      	mov	sp, r7
10005bfc:	bd80      	pop	{r7, pc}
10005bfe:	bf00      	nop
10005c00:	200009b0 	.word	0x200009b0
10005c04:	40078000 	.word	0x40078000
10005c08:	20000930 	.word	0x20000930
10005c0c:	10005b3d 	.word	0x10005b3d
10005c10:	20000934 	.word	0x20000934

10005c14 <stdio_uart_out_flush>:
#endif

static void stdio_uart_out_flush(void) {
10005c14:	b580      	push	{r7, lr}
10005c16:	af00      	add	r7, sp, #0
    uart_default_tx_wait_blocking();
10005c18:	f7ff fec8 	bl	100059ac <uart_default_tx_wait_blocking>
}
10005c1c:	bf00      	nop
10005c1e:	bd80      	pop	{r7, pc}

10005c20 <i2c_get_index>:
 *  \ingroup hardware_i2c
 *
 * \param i2c I2C instance
 * \return Number of I2C, 0 or 1.
 */
static inline uint i2c_get_index(i2c_inst_t *i2c) {
10005c20:	b480      	push	{r7}
10005c22:	b083      	sub	sp, #12
10005c24:	af00      	add	r7, sp, #0
10005c26:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_I2C, i2c != i2c0 && i2c != i2c1);
    return I2C_NUM(i2c);
10005c28:	687b      	ldr	r3, [r7, #4]
10005c2a:	4a06      	ldr	r2, [pc, #24]	@ (10005c44 <i2c_get_index+0x24>)
10005c2c:	4293      	cmp	r3, r2
10005c2e:	bf0c      	ite	eq
10005c30:	2301      	moveq	r3, #1
10005c32:	2300      	movne	r3, #0
10005c34:	b2db      	uxtb	r3, r3
}
10005c36:	4618      	mov	r0, r3
10005c38:	370c      	adds	r7, #12
10005c3a:	46bd      	mov	sp, r7
10005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005c40:	4770      	bx	lr
10005c42:	bf00      	nop
10005c44:	2000077c 	.word	0x2000077c

10005c48 <i2c_get_hw>:
 *  \ingroup hardware_i2c
 *
 * \param i2c I2C instance
 * \return pointer to \ref i2c_hw_t
 */
static inline i2c_hw_t *i2c_get_hw(i2c_inst_t *i2c) {
10005c48:	b580      	push	{r7, lr}
10005c4a:	b082      	sub	sp, #8
10005c4c:	af00      	add	r7, sp, #0
10005c4e:	6078      	str	r0, [r7, #4]
    i2c_hw_index(i2c); // check it is a hw i2c
10005c50:	6878      	ldr	r0, [r7, #4]
10005c52:	f7ff ffe5 	bl	10005c20 <i2c_get_index>
    return i2c->hw;
10005c56:	687b      	ldr	r3, [r7, #4]
10005c58:	681b      	ldr	r3, [r3, #0]
}
10005c5a:	4618      	mov	r0, r3
10005c5c:	3708      	adds	r7, #8
10005c5e:	46bd      	mov	sp, r7
10005c60:	bd80      	pop	{r7, pc}

10005c62 <i2c_get_write_available>:
 *
 * \param i2c Either \ref i2c0 or \ref i2c1
 * \return 0 if no space is available in the I2C to write more data. If return is nonzero, at
 * least that many bytes can be written without blocking.
 */
static inline size_t i2c_get_write_available(i2c_inst_t *i2c) {
10005c62:	b580      	push	{r7, lr}
10005c64:	b084      	sub	sp, #16
10005c66:	af00      	add	r7, sp, #0
10005c68:	6078      	str	r0, [r7, #4]
    const size_t IC_TX_BUFFER_DEPTH = 16;
10005c6a:	2310      	movs	r3, #16
10005c6c:	60fb      	str	r3, [r7, #12]
    return IC_TX_BUFFER_DEPTH - i2c_get_hw(i2c)->txflr;
10005c6e:	6878      	ldr	r0, [r7, #4]
10005c70:	f7ff ffea 	bl	10005c48 <i2c_get_hw>
10005c74:	4603      	mov	r3, r0
10005c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
10005c78:	68fa      	ldr	r2, [r7, #12]
10005c7a:	1ad3      	subs	r3, r2, r3
}
10005c7c:	4618      	mov	r0, r3
10005c7e:	3710      	adds	r7, #16
10005c80:	46bd      	mov	sp, r7
10005c82:	bd80      	pop	{r7, pc}

10005c84 <i2c_get_read_available>:
 *
 * \param i2c Either \ref i2c0 or \ref i2c1
 * \return 0 if no data available, if return is nonzero at
 * least that many bytes can be read without blocking.
 */
static inline size_t i2c_get_read_available(i2c_inst_t *i2c) {
10005c84:	b580      	push	{r7, lr}
10005c86:	b082      	sub	sp, #8
10005c88:	af00      	add	r7, sp, #0
10005c8a:	6078      	str	r0, [r7, #4]
    return i2c_get_hw(i2c)->rxflr;
10005c8c:	6878      	ldr	r0, [r7, #4]
10005c8e:	f7ff ffdb 	bl	10005c48 <i2c_get_hw>
10005c92:	4603      	mov	r3, r0
10005c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
}
10005c96:	4618      	mov	r0, r3
10005c98:	3708      	adds	r7, #8
10005c9a:	46bd      	mov	sp, r7
10005c9c:	bd80      	pop	{r7, pc}
	...

10005ca0 <reset_block_num>:
static inline void reset_block_num(uint32_t block_num) {
10005ca0:	b480      	push	{r7}
10005ca2:	b087      	sub	sp, #28
10005ca4:	af00      	add	r7, sp, #0
10005ca6:	6078      	str	r0, [r7, #4]
    reset_block_reg_mask(&resets_hw->reset, 1u << block_num);
10005ca8:	2201      	movs	r2, #1
10005caa:	687b      	ldr	r3, [r7, #4]
10005cac:	fa02 f303 	lsl.w	r3, r2, r3
10005cb0:	4a0a      	ldr	r2, [pc, #40]	@ (10005cdc <reset_block_num+0x3c>)
10005cb2:	617a      	str	r2, [r7, #20]
10005cb4:	613b      	str	r3, [r7, #16]
10005cb6:	697b      	ldr	r3, [r7, #20]
10005cb8:	60fb      	str	r3, [r7, #12]
10005cba:	693b      	ldr	r3, [r7, #16]
10005cbc:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10005cbe:	68fb      	ldr	r3, [r7, #12]
10005cc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10005cc4:	461a      	mov	r2, r3
10005cc6:	68bb      	ldr	r3, [r7, #8]
10005cc8:	6013      	str	r3, [r2, #0]
}
10005cca:	bf00      	nop
}
10005ccc:	bf00      	nop
}
10005cce:	bf00      	nop
10005cd0:	371c      	adds	r7, #28
10005cd2:	46bd      	mov	sp, r7
10005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
10005cd8:	4770      	bx	lr
10005cda:	bf00      	nop
10005cdc:	40020000 	.word	0x40020000

10005ce0 <unreset_block_num_wait_blocking>:
static inline void unreset_block_num_wait_blocking(uint block_num) {
10005ce0:	b480      	push	{r7}
10005ce2:	b089      	sub	sp, #36	@ 0x24
10005ce4:	af00      	add	r7, sp, #0
10005ce6:	6078      	str	r0, [r7, #4]
    unreset_block_reg_mask_wait_blocking(&resets_hw->reset, &resets_hw->reset_done, 1u << block_num);
10005ce8:	2201      	movs	r2, #1
10005cea:	687b      	ldr	r3, [r7, #4]
10005cec:	fa02 f303 	lsl.w	r3, r2, r3
10005cf0:	4a0f      	ldr	r2, [pc, #60]	@ (10005d30 <unreset_block_num_wait_blocking+0x50>)
10005cf2:	61fa      	str	r2, [r7, #28]
10005cf4:	4a0f      	ldr	r2, [pc, #60]	@ (10005d34 <unreset_block_num_wait_blocking+0x54>)
10005cf6:	61ba      	str	r2, [r7, #24]
10005cf8:	617b      	str	r3, [r7, #20]
10005cfa:	69fb      	ldr	r3, [r7, #28]
10005cfc:	613b      	str	r3, [r7, #16]
10005cfe:	697b      	ldr	r3, [r7, #20]
10005d00:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10005d02:	693b      	ldr	r3, [r7, #16]
10005d04:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10005d08:	461a      	mov	r2, r3
10005d0a:	68fb      	ldr	r3, [r7, #12]
10005d0c:	6013      	str	r3, [r2, #0]
}
10005d0e:	bf00      	nop
    while (~*reset_done & mask)
10005d10:	e000      	b.n	10005d14 <unreset_block_num_wait_blocking+0x34>
10005d12:	bf00      	nop
10005d14:	69bb      	ldr	r3, [r7, #24]
10005d16:	681b      	ldr	r3, [r3, #0]
10005d18:	43da      	mvns	r2, r3
10005d1a:	697b      	ldr	r3, [r7, #20]
10005d1c:	4013      	ands	r3, r2
10005d1e:	2b00      	cmp	r3, #0
10005d20:	d1f7      	bne.n	10005d12 <unreset_block_num_wait_blocking+0x32>
}
10005d22:	bf00      	nop
}
10005d24:	bf00      	nop
10005d26:	3724      	adds	r7, #36	@ 0x24
10005d28:	46bd      	mov	sp, r7
10005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
10005d2e:	4770      	bx	lr
10005d30:	40020000 	.word	0x40020000
10005d34:	40020008 	.word	0x40020008

10005d38 <i2c_reset>:
check_hw_layout(i2c_hw_t, clr_restart_det, I2C_IC_CLR_RESTART_DET_OFFSET);

i2c_inst_t i2c0_inst = {i2c0_hw, false};
i2c_inst_t i2c1_inst = {i2c1_hw, false};

static inline void i2c_reset(i2c_inst_t *i2c) {
10005d38:	b580      	push	{r7, lr}
10005d3a:	b082      	sub	sp, #8
10005d3c:	af00      	add	r7, sp, #0
10005d3e:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_I2C, i2c != i2c0 && i2c != i2c1);
    reset_block_num(i2c == i2c0 ? RESET_I2C0 : RESET_I2C1);
10005d40:	687b      	ldr	r3, [r7, #4]
10005d42:	4a06      	ldr	r2, [pc, #24]	@ (10005d5c <i2c_reset+0x24>)
10005d44:	4293      	cmp	r3, r2
10005d46:	d101      	bne.n	10005d4c <i2c_reset+0x14>
10005d48:	2304      	movs	r3, #4
10005d4a:	e000      	b.n	10005d4e <i2c_reset+0x16>
10005d4c:	2305      	movs	r3, #5
10005d4e:	4618      	mov	r0, r3
10005d50:	f7ff ffa6 	bl	10005ca0 <reset_block_num>
}
10005d54:	bf00      	nop
10005d56:	3708      	adds	r7, #8
10005d58:	46bd      	mov	sp, r7
10005d5a:	bd80      	pop	{r7, pc}
10005d5c:	20000774 	.word	0x20000774

10005d60 <i2c_unreset>:

static inline void i2c_unreset(i2c_inst_t *i2c) {
10005d60:	b580      	push	{r7, lr}
10005d62:	b082      	sub	sp, #8
10005d64:	af00      	add	r7, sp, #0
10005d66:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_I2C, i2c != i2c0 && i2c != i2c1);
    unreset_block_num_wait_blocking(i2c == i2c0 ? RESET_I2C0 : RESET_I2C1);
10005d68:	687b      	ldr	r3, [r7, #4]
10005d6a:	4a06      	ldr	r2, [pc, #24]	@ (10005d84 <i2c_unreset+0x24>)
10005d6c:	4293      	cmp	r3, r2
10005d6e:	d101      	bne.n	10005d74 <i2c_unreset+0x14>
10005d70:	2304      	movs	r3, #4
10005d72:	e000      	b.n	10005d76 <i2c_unreset+0x16>
10005d74:	2305      	movs	r3, #5
10005d76:	4618      	mov	r0, r3
10005d78:	f7ff ffb2 	bl	10005ce0 <unreset_block_num_wait_blocking>
}
10005d7c:	bf00      	nop
10005d7e:	3708      	adds	r7, #8
10005d80:	46bd      	mov	sp, r7
10005d82:	bd80      	pop	{r7, pc}
10005d84:	20000774 	.word	0x20000774

10005d88 <i2c_init>:

// Addresses of the form 000 0xxx or 111 1xxx are reserved. No slave should
// have these addresses.
#define i2c_reserved_addr(addr) (((addr) & 0x78) == 0 || ((addr) & 0x78) == 0x78)

uint i2c_init(i2c_inst_t *i2c, uint baudrate) {
10005d88:	b580      	push	{r7, lr}
10005d8a:	b082      	sub	sp, #8
10005d8c:	af00      	add	r7, sp, #0
10005d8e:	6078      	str	r0, [r7, #4]
10005d90:	6039      	str	r1, [r7, #0]
    i2c_reset(i2c);
10005d92:	6878      	ldr	r0, [r7, #4]
10005d94:	f7ff ffd0 	bl	10005d38 <i2c_reset>
    i2c_unreset(i2c);
10005d98:	6878      	ldr	r0, [r7, #4]
10005d9a:	f7ff ffe1 	bl	10005d60 <i2c_unreset>
    i2c->restart_on_next = false;
10005d9e:	687b      	ldr	r3, [r7, #4]
10005da0:	2200      	movs	r2, #0
10005da2:	711a      	strb	r2, [r3, #4]

    i2c->hw->enable = 0;
10005da4:	687b      	ldr	r3, [r7, #4]
10005da6:	681b      	ldr	r3, [r3, #0]
10005da8:	2200      	movs	r2, #0
10005daa:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Configure as a fast-mode master with RepStart support, 7-bit addresses
    i2c->hw->con =
10005dac:	687b      	ldr	r3, [r7, #4]
10005dae:	681b      	ldr	r3, [r3, #0]
10005db0:	f240 1265 	movw	r2, #357	@ 0x165
10005db4:	601a      	str	r2, [r3, #0]
            I2C_IC_CON_IC_SLAVE_DISABLE_BITS |
            I2C_IC_CON_IC_RESTART_EN_BITS |
            I2C_IC_CON_TX_EMPTY_CTRL_BITS;

    // Set FIFO watermarks to 1 to make things simpler. This is encoded by a register value of 0.
    i2c->hw->tx_tl = 0;
10005db6:	687b      	ldr	r3, [r7, #4]
10005db8:	681b      	ldr	r3, [r3, #0]
10005dba:	2200      	movs	r2, #0
10005dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
    i2c->hw->rx_tl = 0;
10005dbe:	687b      	ldr	r3, [r7, #4]
10005dc0:	681b      	ldr	r3, [r3, #0]
10005dc2:	2200      	movs	r2, #0
10005dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    // Always enable the DREQ signalling -- harmless if DMA isn't listening
    i2c->hw->dma_cr = I2C_IC_DMA_CR_TDMAE_BITS | I2C_IC_DMA_CR_RDMAE_BITS;
10005dc6:	687b      	ldr	r3, [r7, #4]
10005dc8:	681b      	ldr	r3, [r3, #0]
10005dca:	2203      	movs	r2, #3
10005dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Re-sets i2c->hw->enable upon returning:
    return i2c_set_baudrate(i2c, baudrate);
10005dd0:	6839      	ldr	r1, [r7, #0]
10005dd2:	6878      	ldr	r0, [r7, #4]
10005dd4:	f000 f806 	bl	10005de4 <i2c_set_baudrate>
10005dd8:	4603      	mov	r3, r0
}
10005dda:	4618      	mov	r0, r3
10005ddc:	3708      	adds	r7, #8
10005dde:	46bd      	mov	sp, r7
10005de0:	bd80      	pop	{r7, pc}
	...

10005de4 <i2c_set_baudrate>:

void i2c_deinit(i2c_inst_t *i2c) {
    i2c_reset(i2c);
}

uint i2c_set_baudrate(i2c_inst_t *i2c, uint baudrate) {
10005de4:	b580      	push	{r7, lr}
10005de6:	b092      	sub	sp, #72	@ 0x48
10005de8:	af00      	add	r7, sp, #0
10005dea:	6078      	str	r0, [r7, #4]
10005dec:	6039      	str	r1, [r7, #0]
    invalid_params_if(HARDWARE_I2C, baudrate == 0);
    // I2C is synchronous design that runs from clk_sys
    uint freq_in = clock_get_hz(clk_sys);
10005dee:	2005      	movs	r0, #5
10005df0:	f7fc ff52 	bl	10002c98 <clock_get_hz>
10005df4:	6438      	str	r0, [r7, #64]	@ 0x40

    // TODO there are some subtleties to I2C timing which we are completely ignoring here
    uint period = (freq_in + baudrate / 2) / baudrate;
10005df6:	683b      	ldr	r3, [r7, #0]
10005df8:	085a      	lsrs	r2, r3, #1
10005dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10005dfc:	441a      	add	r2, r3
10005dfe:	683b      	ldr	r3, [r7, #0]
10005e00:	fbb2 f3f3 	udiv	r3, r2, r3
10005e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint lcnt = period * 3 / 5; // oof this one hurts
10005e06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10005e08:	4613      	mov	r3, r2
10005e0a:	005b      	lsls	r3, r3, #1
10005e0c:	4413      	add	r3, r2
10005e0e:	4a41      	ldr	r2, [pc, #260]	@ (10005f14 <i2c_set_baudrate+0x130>)
10005e10:	fba2 2303 	umull	r2, r3, r2, r3
10005e14:	089b      	lsrs	r3, r3, #2
10005e16:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint hcnt = period - lcnt;
10005e18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10005e1c:	1ad3      	subs	r3, r2, r3
10005e1e:	637b      	str	r3, [r7, #52]	@ 0x34
    // Per I2C-bus specification a device in standard or fast mode must
    // internally provide a hold time of at least 300ns for the SDA signal to
    // bridge the undefined region of the falling edge of SCL. A smaller hold
    // time of 120ns is used for fast mode plus.
    uint sda_tx_hold_count;
    if (baudrate < 1000000) {
10005e20:	683b      	ldr	r3, [r7, #0]
10005e22:	4a3d      	ldr	r2, [pc, #244]	@ (10005f18 <i2c_set_baudrate+0x134>)
10005e24:	4293      	cmp	r3, r2
10005e26:	d80a      	bhi.n	10005e3e <i2c_set_baudrate+0x5a>
        // sda_tx_hold_count = freq_in [cycles/s] * 300ns * (1s / 1e9ns)
        // Reduce 300/1e9 to 3/1e7 to avoid numbers that don't fit in uint.
        // Add 1 to avoid division truncation.
        sda_tx_hold_count = ((freq_in * 3) / 10000000) + 1;
10005e28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10005e2a:	4613      	mov	r3, r2
10005e2c:	005b      	lsls	r3, r3, #1
10005e2e:	4413      	add	r3, r2
10005e30:	4a3a      	ldr	r2, [pc, #232]	@ (10005f1c <i2c_set_baudrate+0x138>)
10005e32:	fba2 2303 	umull	r2, r3, r2, r3
10005e36:	0d9b      	lsrs	r3, r3, #22
10005e38:	3301      	adds	r3, #1
10005e3a:	647b      	str	r3, [r7, #68]	@ 0x44
10005e3c:	e009      	b.n	10005e52 <i2c_set_baudrate+0x6e>
    } else {
        // sda_tx_hold_count = freq_in [cycles/s] * 120ns * (1s / 1e9ns)
        // Reduce 120/1e9 to 3/25e6 to avoid numbers that don't fit in uint.
        // Add 1 to avoid division truncation.
        sda_tx_hold_count = ((freq_in * 3) / 25000000) + 1;
10005e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10005e40:	4613      	mov	r3, r2
10005e42:	005b      	lsls	r3, r3, #1
10005e44:	4413      	add	r3, r2
10005e46:	4a36      	ldr	r2, [pc, #216]	@ (10005f20 <i2c_set_baudrate+0x13c>)
10005e48:	fba2 2303 	umull	r2, r3, r2, r3
10005e4c:	0ddb      	lsrs	r3, r3, #23
10005e4e:	3301      	adds	r3, #1
10005e50:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    assert(sda_tx_hold_count <= lcnt - 2);
10005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10005e54:	3b02      	subs	r3, #2
10005e56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10005e58:	429a      	cmp	r2, r3
10005e5a:	d905      	bls.n	10005e68 <i2c_set_baudrate+0x84>
10005e5c:	4b31      	ldr	r3, [pc, #196]	@ (10005f24 <i2c_set_baudrate+0x140>)
10005e5e:	4a32      	ldr	r2, [pc, #200]	@ (10005f28 <i2c_set_baudrate+0x144>)
10005e60:	215d      	movs	r1, #93	@ 0x5d
10005e62:	4832      	ldr	r0, [pc, #200]	@ (10005f2c <i2c_set_baudrate+0x148>)
10005e64:	f7ff f962 	bl	1000512c <__assert_func>

    i2c->hw->enable = 0;
10005e68:	687b      	ldr	r3, [r7, #4]
10005e6a:	681b      	ldr	r3, [r3, #0]
10005e6c:	2200      	movs	r2, #0
10005e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
    // Always use "fast" mode (<= 400 kHz, works fine for standard mode too)
    hw_write_masked(&i2c->hw->con,
10005e70:	687b      	ldr	r3, [r7, #4]
10005e72:	681b      	ldr	r3, [r3, #0]
10005e74:	633b      	str	r3, [r7, #48]	@ 0x30
10005e76:	2304      	movs	r3, #4
10005e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
10005e7a:	2306      	movs	r3, #6
10005e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10005e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005e80:	681a      	ldr	r2, [r3, #0]
10005e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005e84:	405a      	eors	r2, r3
10005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10005e88:	4013      	ands	r3, r2
10005e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10005e8c:	627a      	str	r2, [r7, #36]	@ 0x24
10005e8e:	623b      	str	r3, [r7, #32]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10005e92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10005e96:	461a      	mov	r2, r3
10005e98:	6a3b      	ldr	r3, [r7, #32]
10005e9a:	6013      	str	r3, [r2, #0]
}
10005e9c:	bf00      	nop
}
10005e9e:	bf00      	nop
                   I2C_IC_CON_SPEED_VALUE_FAST << I2C_IC_CON_SPEED_LSB,
                   I2C_IC_CON_SPEED_BITS
    );
    i2c->hw->fs_scl_hcnt = hcnt;
10005ea0:	687b      	ldr	r3, [r7, #4]
10005ea2:	681b      	ldr	r3, [r3, #0]
10005ea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10005ea6:	61da      	str	r2, [r3, #28]
    i2c->hw->fs_scl_lcnt = lcnt;
10005ea8:	687b      	ldr	r3, [r7, #4]
10005eaa:	681b      	ldr	r3, [r3, #0]
10005eac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
10005eae:	621a      	str	r2, [r3, #32]
    i2c->hw->fs_spklen = lcnt < 16 ? 1 : lcnt / 16;
10005eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10005eb2:	2b0f      	cmp	r3, #15
10005eb4:	d902      	bls.n	10005ebc <i2c_set_baudrate+0xd8>
10005eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10005eb8:	091b      	lsrs	r3, r3, #4
10005eba:	e000      	b.n	10005ebe <i2c_set_baudrate+0xda>
10005ebc:	2301      	movs	r3, #1
10005ebe:	687a      	ldr	r2, [r7, #4]
10005ec0:	6812      	ldr	r2, [r2, #0]
10005ec2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    hw_write_masked(&i2c->hw->sda_hold,
10005ec6:	687b      	ldr	r3, [r7, #4]
10005ec8:	681b      	ldr	r3, [r3, #0]
10005eca:	337c      	adds	r3, #124	@ 0x7c
10005ecc:	61fb      	str	r3, [r7, #28]
10005ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10005ed0:	61bb      	str	r3, [r7, #24]
10005ed2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10005ed6:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10005ed8:	69fb      	ldr	r3, [r7, #28]
10005eda:	681a      	ldr	r2, [r3, #0]
10005edc:	69bb      	ldr	r3, [r7, #24]
10005ede:	405a      	eors	r2, r3
10005ee0:	697b      	ldr	r3, [r7, #20]
10005ee2:	4013      	ands	r3, r2
10005ee4:	69fa      	ldr	r2, [r7, #28]
10005ee6:	613a      	str	r2, [r7, #16]
10005ee8:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10005eea:	693b      	ldr	r3, [r7, #16]
10005eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10005ef0:	461a      	mov	r2, r3
10005ef2:	68fb      	ldr	r3, [r7, #12]
10005ef4:	6013      	str	r3, [r2, #0]
}
10005ef6:	bf00      	nop
}
10005ef8:	bf00      	nop
                    sda_tx_hold_count << I2C_IC_SDA_HOLD_IC_SDA_TX_HOLD_LSB,
                    I2C_IC_SDA_HOLD_IC_SDA_TX_HOLD_BITS);

    i2c->hw->enable = 1;
10005efa:	687b      	ldr	r3, [r7, #4]
10005efc:	681b      	ldr	r3, [r3, #0]
10005efe:	2201      	movs	r2, #1
10005f00:	66da      	str	r2, [r3, #108]	@ 0x6c
    return freq_in / period;
10005f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10005f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10005f06:	fbb2 f3f3 	udiv	r3, r2, r3
}
10005f0a:	4618      	mov	r0, r3
10005f0c:	3748      	adds	r7, #72	@ 0x48
10005f0e:	46bd      	mov	sp, r7
10005f10:	bd80      	pop	{r7, pc}
10005f12:	bf00      	nop
10005f14:	cccccccd 	.word	0xcccccccd
10005f18:	000f423f 	.word	0x000f423f
10005f1c:	6b5fca6b 	.word	0x6b5fca6b
10005f20:	55e63b89 	.word	0x55e63b89
10005f24:	10006da8 	.word	0x10006da8
10005f28:	10006e08 	.word	0x10006e08
10005f2c:	10006dc8 	.word	0x10006dc8

10005f30 <i2c_write_blocking_internal>:
    }
    i2c->hw->enable = 1;
}

static int i2c_write_blocking_internal(i2c_inst_t *i2c, uint8_t addr, const uint8_t *src, size_t len, bool nostop,
                                       check_timeout_fn timeout_check, struct timeout_state *ts) {
10005f30:	b580      	push	{r7, lr}
10005f32:	b08a      	sub	sp, #40	@ 0x28
10005f34:	af00      	add	r7, sp, #0
10005f36:	60f8      	str	r0, [r7, #12]
10005f38:	607a      	str	r2, [r7, #4]
10005f3a:	603b      	str	r3, [r7, #0]
10005f3c:	460b      	mov	r3, r1
10005f3e:	72fb      	strb	r3, [r7, #11]
    // Synopsys hw accepts start/stop flags alongside data items in the same
    // FIFO word, so no 0 byte transfers.
    invalid_params_if(HARDWARE_I2C, len == 0);
    invalid_params_if(HARDWARE_I2C, ((int)len) < 0);

    i2c->hw->enable = 0;
10005f40:	68fb      	ldr	r3, [r7, #12]
10005f42:	681b      	ldr	r3, [r3, #0]
10005f44:	2200      	movs	r2, #0
10005f46:	66da      	str	r2, [r3, #108]	@ 0x6c
    i2c->hw->tar = addr;
10005f48:	68fb      	ldr	r3, [r7, #12]
10005f4a:	681b      	ldr	r3, [r3, #0]
10005f4c:	7afa      	ldrb	r2, [r7, #11]
10005f4e:	605a      	str	r2, [r3, #4]
    i2c->hw->enable = 1;
10005f50:	68fb      	ldr	r3, [r7, #12]
10005f52:	681b      	ldr	r3, [r3, #0]
10005f54:	2201      	movs	r2, #1
10005f56:	66da      	str	r2, [r3, #108]	@ 0x6c

    bool abort = false;
10005f58:	2300      	movs	r3, #0
10005f5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool timeout = false;
10005f5e:	2300      	movs	r3, #0
10005f60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    uint32_t abort_reason = 0;
10005f64:	2300      	movs	r3, #0
10005f66:	623b      	str	r3, [r7, #32]
    int byte_ctr;

    int ilen = (int)len;
10005f68:	683b      	ldr	r3, [r7, #0]
10005f6a:	617b      	str	r3, [r7, #20]
    for (byte_ctr = 0; byte_ctr < ilen; ++byte_ctr) {
10005f6c:	2300      	movs	r3, #0
10005f6e:	61fb      	str	r3, [r7, #28]
10005f70:	e0b5      	b.n	100060de <i2c_write_blocking_internal+0x1ae>
        bool first = byte_ctr == 0;
10005f72:	69fb      	ldr	r3, [r7, #28]
10005f74:	2b00      	cmp	r3, #0
10005f76:	bf0c      	ite	eq
10005f78:	2301      	moveq	r3, #1
10005f7a:	2300      	movne	r3, #0
10005f7c:	74fb      	strb	r3, [r7, #19]
        bool last = byte_ctr == ilen - 1;
10005f7e:	697b      	ldr	r3, [r7, #20]
10005f80:	3b01      	subs	r3, #1
10005f82:	69fa      	ldr	r2, [r7, #28]
10005f84:	429a      	cmp	r2, r3
10005f86:	bf0c      	ite	eq
10005f88:	2301      	moveq	r3, #1
10005f8a:	2300      	movne	r3, #0
10005f8c:	74bb      	strb	r3, [r7, #18]

        if (timeout_check) {
10005f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005f90:	2b00      	cmp	r3, #0
10005f92:	d003      	beq.n	10005f9c <i2c_write_blocking_internal+0x6c>
            timeout_check(ts, true); // for per iteration checks, this will reset the timeout
10005f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005f96:	2101      	movs	r1, #1
10005f98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
10005f9a:	4798      	blx	r3
        }

        i2c->hw->data_cmd =
                bool_to_bit(first && i2c->restart_on_next) << I2C_IC_DATA_CMD_RESTART_LSB |
10005f9c:	7cfb      	ldrb	r3, [r7, #19]
10005f9e:	2b00      	cmp	r3, #0
10005fa0:	d005      	beq.n	10005fae <i2c_write_blocking_internal+0x7e>
10005fa2:	68fb      	ldr	r3, [r7, #12]
10005fa4:	791b      	ldrb	r3, [r3, #4]
10005fa6:	2b00      	cmp	r3, #0
10005fa8:	d001      	beq.n	10005fae <i2c_write_blocking_internal+0x7e>
10005faa:	2301      	movs	r3, #1
10005fac:	e000      	b.n	10005fb0 <i2c_write_blocking_internal+0x80>
10005fae:	2300      	movs	r3, #0
10005fb0:	029a      	lsls	r2, r3, #10
                bool_to_bit(last && !nostop) << I2C_IC_DATA_CMD_STOP_LSB |
10005fb2:	7cbb      	ldrb	r3, [r7, #18]
10005fb4:	2b00      	cmp	r3, #0
10005fb6:	d008      	beq.n	10005fca <i2c_write_blocking_internal+0x9a>
10005fb8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
10005fbc:	f083 0301 	eor.w	r3, r3, #1
10005fc0:	b2db      	uxtb	r3, r3
10005fc2:	2b00      	cmp	r3, #0
10005fc4:	d001      	beq.n	10005fca <i2c_write_blocking_internal+0x9a>
10005fc6:	2301      	movs	r3, #1
10005fc8:	e000      	b.n	10005fcc <i2c_write_blocking_internal+0x9c>
10005fca:	2300      	movs	r3, #0
10005fcc:	025b      	lsls	r3, r3, #9
                bool_to_bit(first && i2c->restart_on_next) << I2C_IC_DATA_CMD_RESTART_LSB |
10005fce:	431a      	orrs	r2, r3
                *src++;
10005fd0:	687b      	ldr	r3, [r7, #4]
10005fd2:	1c59      	adds	r1, r3, #1
10005fd4:	6079      	str	r1, [r7, #4]
10005fd6:	781b      	ldrb	r3, [r3, #0]
10005fd8:	4619      	mov	r1, r3
        i2c->hw->data_cmd =
10005fda:	68fb      	ldr	r3, [r7, #12]
10005fdc:	681b      	ldr	r3, [r3, #0]
                bool_to_bit(last && !nostop) << I2C_IC_DATA_CMD_STOP_LSB |
10005fde:	430a      	orrs	r2, r1
        i2c->hw->data_cmd =
10005fe0:	611a      	str	r2, [r3, #16]
        // Wait until the transmission of the address/data from the internal
        // shift register has completed. For this to function correctly, the
        // TX_EMPTY_CTRL flag in IC_CON must be set. The TX_EMPTY_CTRL flag
        // was set in i2c_init.
        do {
            if (timeout_check) {
10005fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005fe4:	2b00      	cmp	r3, #0
10005fe6:	d012      	beq.n	1000600e <i2c_write_blocking_internal+0xde>
                timeout = timeout_check(ts, false);
10005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005fea:	2100      	movs	r1, #0
10005fec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
10005fee:	4798      	blx	r3
10005ff0:	4603      	mov	r3, r0
10005ff2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                abort |= timeout;
10005ff6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
10005ffa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
10005ffe:	4313      	orrs	r3, r2
10006000:	b2db      	uxtb	r3, r3
10006002:	2b00      	cmp	r3, #0
10006004:	bf14      	ite	ne
10006006:	2301      	movne	r3, #1
10006008:	2300      	moveq	r3, #0
1000600a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
1000600e:	bf00      	nop
            }
            tight_loop_contents();
        } while (!timeout && !(i2c->hw->raw_intr_stat & I2C_IC_RAW_INTR_STAT_TX_EMPTY_BITS));
10006010:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
10006014:	f083 0301 	eor.w	r3, r3, #1
10006018:	b2db      	uxtb	r3, r3
1000601a:	2b00      	cmp	r3, #0
1000601c:	d006      	beq.n	1000602c <i2c_write_blocking_internal+0xfc>
1000601e:	68fb      	ldr	r3, [r7, #12]
10006020:	681b      	ldr	r3, [r3, #0]
10006022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10006024:	f003 0310 	and.w	r3, r3, #16
10006028:	2b00      	cmp	r3, #0
1000602a:	d0da      	beq.n	10005fe2 <i2c_write_blocking_internal+0xb2>

        // If there was a timeout, don't attempt to do anything else.
        if (!timeout) {
1000602c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
10006030:	f083 0301 	eor.w	r3, r3, #1
10006034:	b2db      	uxtb	r3, r3
10006036:	2b00      	cmp	r3, #0
10006038:	d04a      	beq.n	100060d0 <i2c_write_blocking_internal+0x1a0>
            abort_reason = i2c->hw->tx_abrt_source;
1000603a:	68fb      	ldr	r3, [r7, #12]
1000603c:	681b      	ldr	r3, [r3, #0]
1000603e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
10006042:	623b      	str	r3, [r7, #32]
            if (abort_reason) {
10006044:	6a3b      	ldr	r3, [r7, #32]
10006046:	2b00      	cmp	r3, #0
10006048:	d005      	beq.n	10006056 <i2c_write_blocking_internal+0x126>
                // Note clearing the abort flag also clears the reason, and
                // this instance of flag is clear-on-read! Note also the
                // IC_CLR_TX_ABRT register always reads as 0.
                i2c->hw->clr_tx_abrt;
1000604a:	68fb      	ldr	r3, [r7, #12]
1000604c:	681b      	ldr	r3, [r3, #0]
1000604e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                abort = true;
10006050:	2301      	movs	r3, #1
10006052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }

            if (abort || (last && !nostop)) {
10006056:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
1000605a:	2b00      	cmp	r3, #0
1000605c:	d109      	bne.n	10006072 <i2c_write_blocking_internal+0x142>
1000605e:	7cbb      	ldrb	r3, [r7, #18]
10006060:	2b00      	cmp	r3, #0
10006062:	d035      	beq.n	100060d0 <i2c_write_blocking_internal+0x1a0>
10006064:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
10006068:	f083 0301 	eor.w	r3, r3, #1
1000606c:	b2db      	uxtb	r3, r3
1000606e:	2b00      	cmp	r3, #0
10006070:	d02e      	beq.n	100060d0 <i2c_write_blocking_internal+0x1a0>

                // TODO Could there be an abort while waiting for the STOP
                // condition here? If so, additional code would be needed here
                // to take care of the abort.
                do {
                    if (timeout_check) {
10006072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006074:	2b00      	cmp	r3, #0
10006076:	d012      	beq.n	1000609e <i2c_write_blocking_internal+0x16e>
                        timeout = timeout_check(ts, false);
10006078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000607a:	2100      	movs	r1, #0
1000607c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
1000607e:	4798      	blx	r3
10006080:	4603      	mov	r3, r0
10006082:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                        abort |= timeout;
10006086:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
1000608a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
1000608e:	4313      	orrs	r3, r2
10006090:	b2db      	uxtb	r3, r3
10006092:	2b00      	cmp	r3, #0
10006094:	bf14      	ite	ne
10006096:	2301      	movne	r3, #1
10006098:	2300      	moveq	r3, #0
1000609a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
1000609e:	bf00      	nop
                    }
                    tight_loop_contents();
                } while (!timeout && !(i2c->hw->raw_intr_stat & I2C_IC_RAW_INTR_STAT_STOP_DET_BITS));
100060a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
100060a4:	f083 0301 	eor.w	r3, r3, #1
100060a8:	b2db      	uxtb	r3, r3
100060aa:	2b00      	cmp	r3, #0
100060ac:	d006      	beq.n	100060bc <i2c_write_blocking_internal+0x18c>
100060ae:	68fb      	ldr	r3, [r7, #12]
100060b0:	681b      	ldr	r3, [r3, #0]
100060b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100060b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
100060b8:	2b00      	cmp	r3, #0
100060ba:	d0da      	beq.n	10006072 <i2c_write_blocking_internal+0x142>

                // If there was a timeout, don't attempt to do anything else.
                if (!timeout) {
100060bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
100060c0:	f083 0301 	eor.w	r3, r3, #1
100060c4:	b2db      	uxtb	r3, r3
100060c6:	2b00      	cmp	r3, #0
100060c8:	d002      	beq.n	100060d0 <i2c_write_blocking_internal+0x1a0>
                    i2c->hw->clr_stop_det;
100060ca:	68fb      	ldr	r3, [r7, #12]
100060cc:	681b      	ldr	r3, [r3, #0]
100060ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
        }

        // Note the hardware issues a STOP automatically on an abort condition.
        // Note also the hardware clears RX FIFO as well as TX on abort,
        // because we set hwparam IC_AVOID_RX_FIFO_FLUSH_ON_TX_ABRT to 0.
        if (abort)
100060d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
100060d4:	2b00      	cmp	r3, #0
100060d6:	d108      	bne.n	100060ea <i2c_write_blocking_internal+0x1ba>
    for (byte_ctr = 0; byte_ctr < ilen; ++byte_ctr) {
100060d8:	69fb      	ldr	r3, [r7, #28]
100060da:	3301      	adds	r3, #1
100060dc:	61fb      	str	r3, [r7, #28]
100060de:	69fa      	ldr	r2, [r7, #28]
100060e0:	697b      	ldr	r3, [r7, #20]
100060e2:	429a      	cmp	r2, r3
100060e4:	f6ff af45 	blt.w	10005f72 <i2c_write_blocking_internal+0x42>
100060e8:	e000      	b.n	100060ec <i2c_write_blocking_internal+0x1bc>
            break;
100060ea:	bf00      	nop

    int rval;

    // A lot of things could have just happened due to the ingenious and
    // creative design of I2C. Try to figure things out.
    if (abort) {
100060ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
100060f0:	2b00      	cmp	r3, #0
100060f2:	d01f      	beq.n	10006134 <i2c_write_blocking_internal+0x204>
        if (timeout)
100060f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
100060f8:	2b00      	cmp	r3, #0
100060fa:	d003      	beq.n	10006104 <i2c_write_blocking_internal+0x1d4>
            rval = PICO_ERROR_TIMEOUT;
100060fc:	f06f 0301 	mvn.w	r3, #1
10006100:	61bb      	str	r3, [r7, #24]
10006102:	e019      	b.n	10006138 <i2c_write_blocking_internal+0x208>
        else if (!abort_reason || abort_reason & I2C_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK_BITS) {
10006104:	6a3b      	ldr	r3, [r7, #32]
10006106:	2b00      	cmp	r3, #0
10006108:	d004      	beq.n	10006114 <i2c_write_blocking_internal+0x1e4>
1000610a:	6a3b      	ldr	r3, [r7, #32]
1000610c:	f003 0301 	and.w	r3, r3, #1
10006110:	2b00      	cmp	r3, #0
10006112:	d003      	beq.n	1000611c <i2c_write_blocking_internal+0x1ec>
            // No reported errors - seems to happen if there is nothing connected to the bus.
            // Address byte not acknowledged
            rval = PICO_ERROR_GENERIC;
10006114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10006118:	61bb      	str	r3, [r7, #24]
1000611a:	e00d      	b.n	10006138 <i2c_write_blocking_internal+0x208>
        } else if (abort_reason & I2C_IC_TX_ABRT_SOURCE_ABRT_TXDATA_NOACK_BITS) {
1000611c:	6a3b      	ldr	r3, [r7, #32]
1000611e:	f003 0308 	and.w	r3, r3, #8
10006122:	2b00      	cmp	r3, #0
10006124:	d002      	beq.n	1000612c <i2c_write_blocking_internal+0x1fc>
            // Address acknowledged, some data not acknowledged
            rval = byte_ctr;
10006126:	69fb      	ldr	r3, [r7, #28]
10006128:	61bb      	str	r3, [r7, #24]
1000612a:	e005      	b.n	10006138 <i2c_write_blocking_internal+0x208>
        } else {
            //panic("Unknown abort from I2C instance @%08x: %08x\n", (uint32_t) i2c->hw, abort_reason);
            rval = PICO_ERROR_GENERIC;
1000612c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10006130:	61bb      	str	r3, [r7, #24]
10006132:	e001      	b.n	10006138 <i2c_write_blocking_internal+0x208>
        }
    } else {
        rval = byte_ctr;
10006134:	69fb      	ldr	r3, [r7, #28]
10006136:	61bb      	str	r3, [r7, #24]
    }

    // nostop means we are now at the end of a *message* but not the end of a *transfer*
    i2c->restart_on_next = nostop;
10006138:	68fb      	ldr	r3, [r7, #12]
1000613a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
1000613e:	711a      	strb	r2, [r3, #4]
    return rval;
10006140:	69bb      	ldr	r3, [r7, #24]
}
10006142:	4618      	mov	r0, r3
10006144:	3728      	adds	r7, #40	@ 0x28
10006146:	46bd      	mov	sp, r7
10006148:	bd80      	pop	{r7, pc}

1000614a <i2c_write_blocking>:

int i2c_write_blocking(i2c_inst_t *i2c, uint8_t addr, const uint8_t *src, size_t len, bool nostop) {
1000614a:	b580      	push	{r7, lr}
1000614c:	b088      	sub	sp, #32
1000614e:	af04      	add	r7, sp, #16
10006150:	60f8      	str	r0, [r7, #12]
10006152:	607a      	str	r2, [r7, #4]
10006154:	603b      	str	r3, [r7, #0]
10006156:	460b      	mov	r3, r1
10006158:	72fb      	strb	r3, [r7, #11]
    return i2c_write_blocking_internal(i2c, addr, src, len, nostop, NULL, NULL);
1000615a:	7af9      	ldrb	r1, [r7, #11]
1000615c:	2300      	movs	r3, #0
1000615e:	9302      	str	r3, [sp, #8]
10006160:	2300      	movs	r3, #0
10006162:	9301      	str	r3, [sp, #4]
10006164:	7e3b      	ldrb	r3, [r7, #24]
10006166:	9300      	str	r3, [sp, #0]
10006168:	683b      	ldr	r3, [r7, #0]
1000616a:	687a      	ldr	r2, [r7, #4]
1000616c:	68f8      	ldr	r0, [r7, #12]
1000616e:	f7ff fedf 	bl	10005f30 <i2c_write_blocking_internal>
10006172:	4603      	mov	r3, r0
}
10006174:	4618      	mov	r0, r3
10006176:	3710      	adds	r7, #16
10006178:	46bd      	mov	sp, r7
1000617a:	bd80      	pop	{r7, pc}

1000617c <i2c_read_blocking_internal>:
    return i2c_write_blocking_internal(i2c, addr, src, len, nostop,
                                       init_per_iteration_timeout_us(&ts, timeout_per_char_us), &ts);
}

static int i2c_read_blocking_internal(i2c_inst_t *i2c, uint8_t addr, uint8_t *dst, size_t len, bool nostop,
                               check_timeout_fn timeout_check, timeout_state_t *ts) {
1000617c:	b580      	push	{r7, lr}
1000617e:	b08a      	sub	sp, #40	@ 0x28
10006180:	af00      	add	r7, sp, #0
10006182:	60f8      	str	r0, [r7, #12]
10006184:	607a      	str	r2, [r7, #4]
10006186:	603b      	str	r3, [r7, #0]
10006188:	460b      	mov	r3, r1
1000618a:	72fb      	strb	r3, [r7, #11]
    invalid_params_if(HARDWARE_I2C, addr >= 0x80); // 7-bit addresses
    invalid_params_if(HARDWARE_I2C, i2c_reserved_addr(addr));
    invalid_params_if(HARDWARE_I2C, len == 0);
    invalid_params_if(HARDWARE_I2C, ((int)len) < 0);

    i2c->hw->enable = 0;
1000618c:	68fb      	ldr	r3, [r7, #12]
1000618e:	681b      	ldr	r3, [r3, #0]
10006190:	2200      	movs	r2, #0
10006192:	66da      	str	r2, [r3, #108]	@ 0x6c
    i2c->hw->tar = addr;
10006194:	68fb      	ldr	r3, [r7, #12]
10006196:	681b      	ldr	r3, [r3, #0]
10006198:	7afa      	ldrb	r2, [r7, #11]
1000619a:	605a      	str	r2, [r3, #4]
    i2c->hw->enable = 1;
1000619c:	68fb      	ldr	r3, [r7, #12]
1000619e:	681b      	ldr	r3, [r3, #0]
100061a0:	2201      	movs	r2, #1
100061a2:	66da      	str	r2, [r3, #108]	@ 0x6c

    bool abort = false;
100061a4:	2300      	movs	r3, #0
100061a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    bool timeout = false;
100061aa:	2300      	movs	r3, #0
100061ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint32_t abort_reason;
    int byte_ctr;
    int ilen = (int)len;
100061b0:	683b      	ldr	r3, [r7, #0]
100061b2:	617b      	str	r3, [r7, #20]
    for (byte_ctr = 0; byte_ctr < ilen; ++byte_ctr) {
100061b4:	2300      	movs	r3, #0
100061b6:	61fb      	str	r3, [r7, #28]
100061b8:	e07b      	b.n	100062b2 <i2c_read_blocking_internal+0x136>
        bool first = byte_ctr == 0;
100061ba:	69fb      	ldr	r3, [r7, #28]
100061bc:	2b00      	cmp	r3, #0
100061be:	bf0c      	ite	eq
100061c0:	2301      	moveq	r3, #1
100061c2:	2300      	movne	r3, #0
100061c4:	74fb      	strb	r3, [r7, #19]
        bool last = byte_ctr == ilen - 1;
100061c6:	697b      	ldr	r3, [r7, #20]
100061c8:	3b01      	subs	r3, #1
100061ca:	69fa      	ldr	r2, [r7, #28]
100061cc:	429a      	cmp	r2, r3
100061ce:	bf0c      	ite	eq
100061d0:	2301      	moveq	r3, #1
100061d2:	2300      	movne	r3, #0
100061d4:	74bb      	strb	r3, [r7, #18]
        if (timeout_check) {
100061d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100061d8:	2b00      	cmp	r3, #0
100061da:	d005      	beq.n	100061e8 <i2c_read_blocking_internal+0x6c>
            timeout_check(ts, true); // for per iteration checks, this will reset the timeout
100061dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100061de:	2101      	movs	r1, #1
100061e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
100061e2:	4798      	blx	r3
        }

        while (!i2c_get_write_available(i2c))
100061e4:	e000      	b.n	100061e8 <i2c_read_blocking_internal+0x6c>
100061e6:	bf00      	nop
100061e8:	68f8      	ldr	r0, [r7, #12]
100061ea:	f7ff fd3a 	bl	10005c62 <i2c_get_write_available>
100061ee:	4603      	mov	r3, r0
100061f0:	2b00      	cmp	r3, #0
100061f2:	d0f8      	beq.n	100061e6 <i2c_read_blocking_internal+0x6a>
            tight_loop_contents();

        i2c->hw->data_cmd =
                bool_to_bit(first && i2c->restart_on_next) << I2C_IC_DATA_CMD_RESTART_LSB |
100061f4:	7cfb      	ldrb	r3, [r7, #19]
100061f6:	2b00      	cmp	r3, #0
100061f8:	d005      	beq.n	10006206 <i2c_read_blocking_internal+0x8a>
100061fa:	68fb      	ldr	r3, [r7, #12]
100061fc:	791b      	ldrb	r3, [r3, #4]
100061fe:	2b00      	cmp	r3, #0
10006200:	d001      	beq.n	10006206 <i2c_read_blocking_internal+0x8a>
10006202:	2301      	movs	r3, #1
10006204:	e000      	b.n	10006208 <i2c_read_blocking_internal+0x8c>
10006206:	2300      	movs	r3, #0
10006208:	029a      	lsls	r2, r3, #10
                bool_to_bit(last && !nostop) << I2C_IC_DATA_CMD_STOP_LSB |
1000620a:	7cbb      	ldrb	r3, [r7, #18]
1000620c:	2b00      	cmp	r3, #0
1000620e:	d008      	beq.n	10006222 <i2c_read_blocking_internal+0xa6>
10006210:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
10006214:	f083 0301 	eor.w	r3, r3, #1
10006218:	b2db      	uxtb	r3, r3
1000621a:	2b00      	cmp	r3, #0
1000621c:	d001      	beq.n	10006222 <i2c_read_blocking_internal+0xa6>
1000621e:	2301      	movs	r3, #1
10006220:	e000      	b.n	10006224 <i2c_read_blocking_internal+0xa8>
10006222:	2300      	movs	r3, #0
10006224:	025b      	lsls	r3, r3, #9
                bool_to_bit(first && i2c->restart_on_next) << I2C_IC_DATA_CMD_RESTART_LSB |
10006226:	431a      	orrs	r2, r3
        i2c->hw->data_cmd =
10006228:	68fb      	ldr	r3, [r7, #12]
1000622a:	681b      	ldr	r3, [r3, #0]
                bool_to_bit(last && !nostop) << I2C_IC_DATA_CMD_STOP_LSB |
1000622c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
        i2c->hw->data_cmd =
10006230:	611a      	str	r2, [r3, #16]
                I2C_IC_DATA_CMD_CMD_BITS; // -> 1 for read

        do {
            abort_reason = i2c->hw->tx_abrt_source;
10006232:	68fb      	ldr	r3, [r7, #12]
10006234:	681b      	ldr	r3, [r3, #0]
10006236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
1000623a:	623b      	str	r3, [r7, #32]
            abort = (bool) i2c->hw->clr_tx_abrt;
1000623c:	68fb      	ldr	r3, [r7, #12]
1000623e:	681b      	ldr	r3, [r3, #0]
10006240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10006242:	2b00      	cmp	r3, #0
10006244:	bf14      	ite	ne
10006246:	2301      	movne	r3, #1
10006248:	2300      	moveq	r3, #0
1000624a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            if (timeout_check) {
1000624e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006250:	2b00      	cmp	r3, #0
10006252:	d012      	beq.n	1000627a <i2c_read_blocking_internal+0xfe>
                timeout = timeout_check(ts, false);
10006254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10006256:	2100      	movs	r1, #0
10006258:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
1000625a:	4798      	blx	r3
1000625c:	4603      	mov	r3, r0
1000625e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                abort |= timeout;
10006262:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
10006266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
1000626a:	4313      	orrs	r3, r2
1000626c:	b2db      	uxtb	r3, r3
1000626e:	2b00      	cmp	r3, #0
10006270:	bf14      	ite	ne
10006272:	2301      	movne	r3, #1
10006274:	2300      	moveq	r3, #0
10006276:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        } while (!abort && !i2c_get_read_available(i2c));
1000627a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
1000627e:	f083 0301 	eor.w	r3, r3, #1
10006282:	b2db      	uxtb	r3, r3
10006284:	2b00      	cmp	r3, #0
10006286:	d005      	beq.n	10006294 <i2c_read_blocking_internal+0x118>
10006288:	68f8      	ldr	r0, [r7, #12]
1000628a:	f7ff fcfb 	bl	10005c84 <i2c_get_read_available>
1000628e:	4603      	mov	r3, r0
10006290:	2b00      	cmp	r3, #0
10006292:	d0ce      	beq.n	10006232 <i2c_read_blocking_internal+0xb6>

        if (abort)
10006294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
10006298:	2b00      	cmp	r3, #0
1000629a:	d110      	bne.n	100062be <i2c_read_blocking_internal+0x142>
            break;

        *dst++ = (uint8_t) i2c->hw->data_cmd;
1000629c:	68fb      	ldr	r3, [r7, #12]
1000629e:	681b      	ldr	r3, [r3, #0]
100062a0:	6919      	ldr	r1, [r3, #16]
100062a2:	687b      	ldr	r3, [r7, #4]
100062a4:	1c5a      	adds	r2, r3, #1
100062a6:	607a      	str	r2, [r7, #4]
100062a8:	b2ca      	uxtb	r2, r1
100062aa:	701a      	strb	r2, [r3, #0]
    for (byte_ctr = 0; byte_ctr < ilen; ++byte_ctr) {
100062ac:	69fb      	ldr	r3, [r7, #28]
100062ae:	3301      	adds	r3, #1
100062b0:	61fb      	str	r3, [r7, #28]
100062b2:	69fa      	ldr	r2, [r7, #28]
100062b4:	697b      	ldr	r3, [r7, #20]
100062b6:	429a      	cmp	r2, r3
100062b8:	f6ff af7f 	blt.w	100061ba <i2c_read_blocking_internal+0x3e>
100062bc:	e000      	b.n	100062c0 <i2c_read_blocking_internal+0x144>
            break;
100062be:	bf00      	nop
    }

    int rval;

    if (abort) {
100062c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
100062c4:	2b00      	cmp	r3, #0
100062c6:	d017      	beq.n	100062f8 <i2c_read_blocking_internal+0x17c>
        if (timeout)
100062c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
100062cc:	2b00      	cmp	r3, #0
100062ce:	d003      	beq.n	100062d8 <i2c_read_blocking_internal+0x15c>
            rval = PICO_ERROR_TIMEOUT;
100062d0:	f06f 0301 	mvn.w	r3, #1
100062d4:	61bb      	str	r3, [r7, #24]
100062d6:	e011      	b.n	100062fc <i2c_read_blocking_internal+0x180>
        else if (!abort_reason || abort_reason & I2C_IC_TX_ABRT_SOURCE_ABRT_7B_ADDR_NOACK_BITS) {
100062d8:	6a3b      	ldr	r3, [r7, #32]
100062da:	2b00      	cmp	r3, #0
100062dc:	d004      	beq.n	100062e8 <i2c_read_blocking_internal+0x16c>
100062de:	6a3b      	ldr	r3, [r7, #32]
100062e0:	f003 0301 	and.w	r3, r3, #1
100062e4:	2b00      	cmp	r3, #0
100062e6:	d003      	beq.n	100062f0 <i2c_read_blocking_internal+0x174>
            // No reported errors - seems to happen if there is nothing connected to the bus.
            // Address byte not acknowledged
            rval = PICO_ERROR_GENERIC;
100062e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100062ec:	61bb      	str	r3, [r7, #24]
100062ee:	e005      	b.n	100062fc <i2c_read_blocking_internal+0x180>
        } else {
//            panic("Unknown abort from I2C instance @%08x: %08x\n", (uint32_t) i2c->hw, abort_reason);
            rval = PICO_ERROR_GENERIC;
100062f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100062f4:	61bb      	str	r3, [r7, #24]
100062f6:	e001      	b.n	100062fc <i2c_read_blocking_internal+0x180>
        }
    } else {
        rval = byte_ctr;
100062f8:	69fb      	ldr	r3, [r7, #28]
100062fa:	61bb      	str	r3, [r7, #24]
    }

    i2c->restart_on_next = nostop;
100062fc:	68fb      	ldr	r3, [r7, #12]
100062fe:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
10006302:	711a      	strb	r2, [r3, #4]
    return rval;
10006304:	69bb      	ldr	r3, [r7, #24]
}
10006306:	4618      	mov	r0, r3
10006308:	3728      	adds	r7, #40	@ 0x28
1000630a:	46bd      	mov	sp, r7
1000630c:	bd80      	pop	{r7, pc}

1000630e <i2c_read_blocking>:

int i2c_read_blocking(i2c_inst_t *i2c, uint8_t addr, uint8_t *dst, size_t len, bool nostop) {
1000630e:	b580      	push	{r7, lr}
10006310:	b088      	sub	sp, #32
10006312:	af04      	add	r7, sp, #16
10006314:	60f8      	str	r0, [r7, #12]
10006316:	607a      	str	r2, [r7, #4]
10006318:	603b      	str	r3, [r7, #0]
1000631a:	460b      	mov	r3, r1
1000631c:	72fb      	strb	r3, [r7, #11]
    return i2c_read_blocking_internal(i2c, addr, dst, len, nostop, NULL, NULL);
1000631e:	7af9      	ldrb	r1, [r7, #11]
10006320:	2300      	movs	r3, #0
10006322:	9302      	str	r3, [sp, #8]
10006324:	2300      	movs	r3, #0
10006326:	9301      	str	r3, [sp, #4]
10006328:	7e3b      	ldrb	r3, [r7, #24]
1000632a:	9300      	str	r3, [sp, #0]
1000632c:	683b      	ldr	r3, [r7, #0]
1000632e:	687a      	ldr	r2, [r7, #4]
10006330:	68f8      	ldr	r0, [r7, #12]
10006332:	f7ff ff23 	bl	1000617c <i2c_read_blocking_internal>
10006336:	4603      	mov	r3, r0
}
10006338:	4618      	mov	r0, r3
1000633a:	3710      	adds	r7, #16
1000633c:	46bd      	mov	sp, r7
1000633e:	bd80      	pop	{r7, pc}

10006340 <memcpy>:
10006340:	4684      	mov	ip, r0
10006342:	ea41 0300 	orr.w	r3, r1, r0
10006346:	f013 0303 	ands.w	r3, r3, #3
1000634a:	d149      	bne.n	100063e0 <memcpy+0xa0>
1000634c:	3a40      	subs	r2, #64	@ 0x40
1000634e:	d323      	bcc.n	10006398 <memcpy+0x58>
10006350:	680b      	ldr	r3, [r1, #0]
10006352:	6003      	str	r3, [r0, #0]
10006354:	684b      	ldr	r3, [r1, #4]
10006356:	6043      	str	r3, [r0, #4]
10006358:	688b      	ldr	r3, [r1, #8]
1000635a:	6083      	str	r3, [r0, #8]
1000635c:	68cb      	ldr	r3, [r1, #12]
1000635e:	60c3      	str	r3, [r0, #12]
10006360:	690b      	ldr	r3, [r1, #16]
10006362:	6103      	str	r3, [r0, #16]
10006364:	694b      	ldr	r3, [r1, #20]
10006366:	6143      	str	r3, [r0, #20]
10006368:	698b      	ldr	r3, [r1, #24]
1000636a:	6183      	str	r3, [r0, #24]
1000636c:	69cb      	ldr	r3, [r1, #28]
1000636e:	61c3      	str	r3, [r0, #28]
10006370:	6a0b      	ldr	r3, [r1, #32]
10006372:	6203      	str	r3, [r0, #32]
10006374:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
10006376:	6243      	str	r3, [r0, #36]	@ 0x24
10006378:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
1000637a:	6283      	str	r3, [r0, #40]	@ 0x28
1000637c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
1000637e:	62c3      	str	r3, [r0, #44]	@ 0x2c
10006380:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
10006382:	6303      	str	r3, [r0, #48]	@ 0x30
10006384:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
10006386:	6343      	str	r3, [r0, #52]	@ 0x34
10006388:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
1000638a:	6383      	str	r3, [r0, #56]	@ 0x38
1000638c:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
1000638e:	63c3      	str	r3, [r0, #60]	@ 0x3c
10006390:	3040      	adds	r0, #64	@ 0x40
10006392:	3140      	adds	r1, #64	@ 0x40
10006394:	3a40      	subs	r2, #64	@ 0x40
10006396:	d2db      	bcs.n	10006350 <memcpy+0x10>
10006398:	3230      	adds	r2, #48	@ 0x30
1000639a:	d30b      	bcc.n	100063b4 <memcpy+0x74>
1000639c:	680b      	ldr	r3, [r1, #0]
1000639e:	6003      	str	r3, [r0, #0]
100063a0:	684b      	ldr	r3, [r1, #4]
100063a2:	6043      	str	r3, [r0, #4]
100063a4:	688b      	ldr	r3, [r1, #8]
100063a6:	6083      	str	r3, [r0, #8]
100063a8:	68cb      	ldr	r3, [r1, #12]
100063aa:	60c3      	str	r3, [r0, #12]
100063ac:	3010      	adds	r0, #16
100063ae:	3110      	adds	r1, #16
100063b0:	3a10      	subs	r2, #16
100063b2:	d2f3      	bcs.n	1000639c <memcpy+0x5c>
100063b4:	320c      	adds	r2, #12
100063b6:	d305      	bcc.n	100063c4 <memcpy+0x84>
100063b8:	f851 3b04 	ldr.w	r3, [r1], #4
100063bc:	f840 3b04 	str.w	r3, [r0], #4
100063c0:	3a04      	subs	r2, #4
100063c2:	d2f9      	bcs.n	100063b8 <memcpy+0x78>
100063c4:	3204      	adds	r2, #4
100063c6:	d008      	beq.n	100063da <memcpy+0x9a>
100063c8:	07d2      	lsls	r2, r2, #31
100063ca:	bf1c      	itt	ne
100063cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
100063d0:	f800 3b01 	strbne.w	r3, [r0], #1
100063d4:	d301      	bcc.n	100063da <memcpy+0x9a>
100063d6:	880b      	ldrh	r3, [r1, #0]
100063d8:	8003      	strh	r3, [r0, #0]
100063da:	4660      	mov	r0, ip
100063dc:	4770      	bx	lr
100063de:	bf00      	nop
100063e0:	2a08      	cmp	r2, #8
100063e2:	d313      	bcc.n	1000640c <memcpy+0xcc>
100063e4:	078b      	lsls	r3, r1, #30
100063e6:	d0b1      	beq.n	1000634c <memcpy+0xc>
100063e8:	f010 0303 	ands.w	r3, r0, #3
100063ec:	d0ae      	beq.n	1000634c <memcpy+0xc>
100063ee:	f1c3 0304 	rsb	r3, r3, #4
100063f2:	1ad2      	subs	r2, r2, r3
100063f4:	07db      	lsls	r3, r3, #31
100063f6:	bf1c      	itt	ne
100063f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
100063fc:	f800 3b01 	strbne.w	r3, [r0], #1
10006400:	d3a4      	bcc.n	1000634c <memcpy+0xc>
10006402:	f831 3b02 	ldrh.w	r3, [r1], #2
10006406:	f820 3b02 	strh.w	r3, [r0], #2
1000640a:	e79f      	b.n	1000634c <memcpy+0xc>
1000640c:	3a04      	subs	r2, #4
1000640e:	d3d9      	bcc.n	100063c4 <memcpy+0x84>
10006410:	3a01      	subs	r2, #1
10006412:	f811 3b01 	ldrb.w	r3, [r1], #1
10006416:	f800 3b01 	strb.w	r3, [r0], #1
1000641a:	d2f9      	bcs.n	10006410 <memcpy+0xd0>
1000641c:	780b      	ldrb	r3, [r1, #0]
1000641e:	7003      	strb	r3, [r0, #0]
10006420:	784b      	ldrb	r3, [r1, #1]
10006422:	7043      	strb	r3, [r0, #1]
10006424:	788b      	ldrb	r3, [r1, #2]
10006426:	7083      	strb	r3, [r0, #2]
10006428:	4660      	mov	r0, ip
1000642a:	4770      	bx	lr

1000642c <strlen>:
1000642c:	f020 0103 	bic.w	r1, r0, #3
10006430:	f010 0003 	ands.w	r0, r0, #3
10006434:	f1c0 0000 	rsb	r0, r0, #0
10006438:	f851 3b04 	ldr.w	r3, [r1], #4
1000643c:	f100 0c04 	add.w	ip, r0, #4
10006440:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
10006444:	f06f 0200 	mvn.w	r2, #0
10006448:	bf1c      	itt	ne
1000644a:	fa22 f20c 	lsrne.w	r2, r2, ip
1000644e:	4313      	orrne	r3, r2
10006450:	f04f 0c01 	mov.w	ip, #1
10006454:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
10006458:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
1000645c:	eba3 020c 	sub.w	r2, r3, ip
10006460:	ea22 0203 	bic.w	r2, r2, r3
10006464:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
10006468:	bf04      	itt	eq
1000646a:	f851 3b04 	ldreq.w	r3, [r1], #4
1000646e:	3004      	addeq	r0, #4
10006470:	d0f4      	beq.n	1000645c <strlen+0x30>
10006472:	f1c2 0100 	rsb	r1, r2, #0
10006476:	ea02 0201 	and.w	r2, r2, r1
1000647a:	fab2 f282 	clz	r2, r2
1000647e:	f1c2 021f 	rsb	r2, r2, #31
10006482:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
10006486:	4770      	bx	lr

10006488 <_fini>:
10006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000648a:	bf00      	nop
1000648c:	0000      	movs	r0, r0
	...

10006490 <____aeabi_uldivmod_veneer>:
10006490:	f85f f000 	ldr.w	pc, [pc]	@ 10006494 <____aeabi_uldivmod_veneer+0x4>
10006494:	200003b1 	.word	0x200003b1

10006498 <__mutex_exit_veneer>:
10006498:	f85f f000 	ldr.w	pc, [pc]	@ 1000649c <__mutex_exit_veneer+0x4>
1000649c:	2000030d 	.word	0x2000030d

100064a0 <__mutex_try_enter_block_until_veneer>:
100064a0:	f85f f000 	ldr.w	pc, [pc]	@ 100064a4 <__mutex_try_enter_block_until_veneer+0x4>
100064a4:	200001c7 	.word	0x200001c7

100064a8 <__pre_init_runtime_init_bootrom_reset>:
100064a8:	100030e3                                .0..

100064ac <__pre_init_runtime_init_early_resets>:
100064ac:	10003125                                %1..

100064b0 <__pre_init_runtime_init_usb_power_down>:
100064b0:	100031a9                                .1..

100064b4 <__pre_init_runtime_init_clocks>:
100064b4:	10003311                                .3..

100064b8 <__pre_init_runtime_init_post_clock_resets>:
100064b8:	1000322d                                -2..

100064bc <__pre_init_runtime_init_spin_locks_reset>:
100064bc:	10003285                                .2..

100064c0 <__pre_init_runtime_init_boot_locks_reset>:
100064c0:	1000353d                                =5..

100064c4 <__pre_init_runtime_init_bootrom_locking_enable>:
100064c4:	100034d9                                .4..

100064c8 <__pre_init_runtime_init_mutex>:
100064c8:	10001231                                1...

100064cc <__pre_init_runtime_init_install_ram_vector_table>:
100064cc:	10003291                                .2..

100064d0 <__pre_init_runtime_init_default_alarm_pool>:
100064d0:	100017a9                                ....

100064d4 <__pre_init_first_per_core_initializer>:
100064d4:	100030d5                                .0..

100064d8 <__pre_init_runtime_init_per_core_bootrom_reset>:
100064d8:	10003103                                .1..

100064dc <__pre_init_runtime_init_per_core_enable_coprocessors>:
100064dc:	100031e5                                .1..

100064e0 <__pre_init_spinlock_set_extexclall>:
100064e0:	1000095d                                ]...

100064e4 <__pre_init_runtime_init_per_core_irq_priorities>:
100064e4:	100011cd                                ....

100064e8 <__frame_dummy_init_array_entry>:
100064e8:	10000219                                ....

Disassembly of section .data:

20000110 <mutex_try_enter>:
            lock_internal_spin_unlock_with_wait(&mtx->core, save);
        }
    } while (true);
}

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20000110:	b480      	push	{r7}
20000112:	b091      	sub	sp, #68	@ 0x44
20000114:	af00      	add	r7, sp, #0
20000116:	6078      	str	r0, [r7, #4]
20000118:	6039      	str	r1, [r7, #0]
    if (mtx->recursive) {
        return recursive_mutex_try_enter(mtx, owner_out);
    }
#endif
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	681b      	ldr	r3, [r3, #0]
2000011e:	637b      	str	r3, [r7, #52]	@ 0x34
    pico_default_asm_volatile (
20000120:	f3ef 8310 	mrs	r3, PRIMASK
20000124:	b672      	cpsid	i
20000126:	633b      	str	r3, [r7, #48]	@ 0x30
    return status;
20000128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    uint32_t save = save_and_disable_interrupts();
2000012a:	62fb      	str	r3, [r7, #44]	@ 0x2c
2000012c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000012e:	62bb      	str	r3, [r7, #40]	@ 0x28
    SW_SPIN_LOCK_LOCK(lock);
20000130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
20000132:	e8d1 3fcf 	ldaexb	r3, [r1]
20000136:	2201      	movs	r2, #1
20000138:	2b00      	cmp	r3, #0
2000013a:	d1fa      	bne.n	20000132 <mutex_try_enter+0x22>
2000013c:	e8c1 2f43 	strexb	r3, r2, [r1]
20000140:	2b00      	cmp	r3, #0
20000142:	d1f6      	bne.n	20000132 <mutex_try_enter+0x22>
20000144:	627a      	str	r2, [r7, #36]	@ 0x24
20000146:	623b      	str	r3, [r7, #32]
    pico_default_asm_volatile ("dmb" : : : "memory");
20000148:	f3bf 8f5f 	dmb	sy
}
2000014c:	bf00      	nop
}
2000014e:	bf00      	nop
}
20000150:	bf00      	nop
    return save;
20000152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000154:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (!lock_is_owner_id_valid(mtx->owner)) {
20000156:	687b      	ldr	r3, [r7, #4]
20000158:	f993 3004 	ldrsb.w	r3, [r3, #4]
2000015c:	2b00      	cmp	r3, #0
2000015e:	da09      	bge.n	20000174 <mutex_try_enter+0x64>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20000160:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
20000164:	681b      	ldr	r3, [r3, #0]
        mtx->owner = lock_get_caller_owner_id();
20000166:	b25a      	sxtb	r2, r3
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	711a      	strb	r2, [r3, #4]
        entered = true;
2000016c:	2301      	movs	r3, #1
2000016e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
20000172:	e00b      	b.n	2000018c <mutex_try_enter+0x7c>
    } else {
        if (owner_out) *owner_out = (uint32_t) mtx->owner;
20000174:	683b      	ldr	r3, [r7, #0]
20000176:	2b00      	cmp	r3, #0
20000178:	d005      	beq.n	20000186 <mutex_try_enter+0x76>
2000017a:	687b      	ldr	r3, [r7, #4]
2000017c:	f993 3004 	ldrsb.w	r3, [r3, #4]
20000180:	461a      	mov	r2, r3
20000182:	683b      	ldr	r3, [r7, #0]
20000184:	601a      	str	r2, [r3, #0]
        entered = false;
20000186:	2300      	movs	r3, #0
20000188:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    spin_unlock(mtx->core.spin_lock, save);
2000018c:	687b      	ldr	r3, [r7, #4]
2000018e:	681b      	ldr	r3, [r3, #0]
20000190:	61fb      	str	r3, [r7, #28]
20000192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000194:	61bb      	str	r3, [r7, #24]
20000196:	69fb      	ldr	r3, [r7, #28]
20000198:	617b      	str	r3, [r7, #20]
    SW_SPIN_LOCK_UNLOCK(lock);
2000019a:	2300      	movs	r3, #0
2000019c:	613b      	str	r3, [r7, #16]
2000019e:	693b      	ldr	r3, [r7, #16]
200001a0:	697a      	ldr	r2, [r7, #20]
200001a2:	e8c2 3f8f 	stlb	r3, [r2]
}
200001a6:	bf00      	nop
200001a8:	69bb      	ldr	r3, [r7, #24]
200001aa:	60fb      	str	r3, [r7, #12]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
200001ac:	68fb      	ldr	r3, [r7, #12]
200001ae:	f383 8810 	msr	PRIMASK, r3
}
200001b2:	bf00      	nop
}
200001b4:	bf00      	nop
    return entered;
200001b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
200001ba:	4618      	mov	r0, r3
200001bc:	3744      	adds	r7, #68	@ 0x44
200001be:	46bd      	mov	sp, r7
200001c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200001c4:	4770      	bx	lr

200001c6 <mutex_try_enter_block_until>:

bool __time_critical_func(mutex_try_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
200001c6:	b580      	push	{r7, lr}
200001c8:	b086      	sub	sp, #24
200001ca:	af00      	add	r7, sp, #0
200001cc:	60f8      	str	r0, [r7, #12]
200001ce:	e9c7 2300 	strd	r2, r3, [r7]
    // not using lock_owner_id_t to avoid backwards incompatibility change to mutex_try_enter API
    static_assert(sizeof(lock_owner_id_t) <= 4, "");
    uint32_t owner;
    if (!mutex_try_enter(mtx, &owner)) {
200001d2:	f107 0314 	add.w	r3, r7, #20
200001d6:	4619      	mov	r1, r3
200001d8:	68f8      	ldr	r0, [r7, #12]
200001da:	f7ff ff99 	bl	20000110 <mutex_try_enter>
200001de:	4603      	mov	r3, r0
200001e0:	f083 0301 	eor.w	r3, r3, #1
200001e4:	b2db      	uxtb	r3, r3
200001e6:	2b00      	cmp	r3, #0
200001e8:	d010      	beq.n	2000020c <mutex_try_enter_block_until+0x46>
        if ((lock_owner_id_t)owner == lock_get_caller_owner_id()) return false; // deadlock, so we can never own it
200001ea:	697b      	ldr	r3, [r7, #20]
200001ec:	b25a      	sxtb	r2, r3
200001ee:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
200001f2:	681b      	ldr	r3, [r3, #0]
200001f4:	b25b      	sxtb	r3, r3
200001f6:	429a      	cmp	r2, r3
200001f8:	d101      	bne.n	200001fe <mutex_try_enter_block_until+0x38>
200001fa:	2300      	movs	r3, #0
200001fc:	e007      	b.n	2000020e <mutex_try_enter_block_until+0x48>
        return mutex_enter_block_until(mtx, until);
200001fe:	e9d7 2300 	ldrd	r2, r3, [r7]
20000202:	68f8      	ldr	r0, [r7, #12]
20000204:	f000 f808 	bl	20000218 <mutex_enter_block_until>
20000208:	4603      	mov	r3, r0
2000020a:	e000      	b.n	2000020e <mutex_try_enter_block_until+0x48>
    }
    return true;
2000020c:	2301      	movs	r3, #1
}
2000020e:	4618      	mov	r0, r3
20000210:	3718      	adds	r7, #24
20000212:	46bd      	mov	sp, r7
20000214:	bd80      	pop	{r7, pc}
	...

20000218 <mutex_enter_block_until>:

bool __time_critical_func(recursive_mutex_enter_timeout_us)(recursive_mutex_t *mtx, uint32_t timeout_us) {
    return recursive_mutex_enter_block_until(mtx, make_timeout_time_us(timeout_us));
}

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
20000218:	b580      	push	{r7, lr}
2000021a:	b096      	sub	sp, #88	@ 0x58
2000021c:	af00      	add	r7, sp, #0
2000021e:	60f8      	str	r0, [r7, #12]
20000220:	e9c7 2300 	strd	r2, r3, [r7]
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    if (mtx->recursive) {
        return recursive_mutex_enter_block_until(mtx, until);
    }
#endif
    assert(mtx->core.spin_lock);
20000224:	68fb      	ldr	r3, [r7, #12]
20000226:	681b      	ldr	r3, [r3, #0]
20000228:	2b00      	cmp	r3, #0
2000022a:	d105      	bne.n	20000238 <mutex_enter_block_until+0x20>
2000022c:	4b34      	ldr	r3, [pc, #208]	@ (20000300 <mutex_enter_block_until+0xe8>)
2000022e:	4a35      	ldr	r2, [pc, #212]	@ (20000304 <mutex_enter_block_until+0xec>)
20000230:	21a6      	movs	r1, #166	@ 0xa6
20000232:	4835      	ldr	r0, [pc, #212]	@ (20000308 <mutex_enter_block_until+0xf0>)
20000234:	f000 fa58 	bl	200006e8 <____assert_func_veneer>
20000238:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
2000023c:	681b      	ldr	r3, [r3, #0]
    lock_owner_id_t caller = lock_get_caller_owner_id();
2000023e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000242:	68fb      	ldr	r3, [r7, #12]
20000244:	681b      	ldr	r3, [r3, #0]
20000246:	64fb      	str	r3, [r7, #76]	@ 0x4c
    pico_default_asm_volatile (
20000248:	f3ef 8310 	mrs	r3, PRIMASK
2000024c:	b672      	cpsid	i
2000024e:	64bb      	str	r3, [r7, #72]	@ 0x48
    return status;
20000250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    uint32_t save = save_and_disable_interrupts();
20000252:	647b      	str	r3, [r7, #68]	@ 0x44
20000254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000256:	643b      	str	r3, [r7, #64]	@ 0x40
    SW_SPIN_LOCK_LOCK(lock);
20000258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
2000025a:	e8d1 3fcf 	ldaexb	r3, [r1]
2000025e:	2201      	movs	r2, #1
20000260:	2b00      	cmp	r3, #0
20000262:	d1fa      	bne.n	2000025a <mutex_enter_block_until+0x42>
20000264:	e8c1 2f43 	strexb	r3, r2, [r1]
20000268:	2b00      	cmp	r3, #0
2000026a:	d1f6      	bne.n	2000025a <mutex_enter_block_until+0x42>
2000026c:	63fa      	str	r2, [r7, #60]	@ 0x3c
2000026e:	63bb      	str	r3, [r7, #56]	@ 0x38
    pico_default_asm_volatile ("dmb" : : : "memory");
20000270:	f3bf 8f5f 	dmb	sy
}
20000274:	bf00      	nop
}
20000276:	bf00      	nop
}
20000278:	bf00      	nop
    return save;
2000027a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000027c:	653b      	str	r3, [r7, #80]	@ 0x50
        if (!lock_is_owner_id_valid(mtx->owner)) {
2000027e:	68fb      	ldr	r3, [r7, #12]
20000280:	f993 3004 	ldrsb.w	r3, [r3, #4]
20000284:	2b00      	cmp	r3, #0
20000286:	da1a      	bge.n	200002be <mutex_enter_block_until+0xa6>
            mtx->owner = caller;
20000288:	68fb      	ldr	r3, [r7, #12]
2000028a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
2000028e:	711a      	strb	r2, [r3, #4]
            spin_unlock(mtx->core.spin_lock, save);
20000290:	68fb      	ldr	r3, [r7, #12]
20000292:	681b      	ldr	r3, [r3, #0]
20000294:	637b      	str	r3, [r7, #52]	@ 0x34
20000296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
20000298:	633b      	str	r3, [r7, #48]	@ 0x30
2000029a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000029c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    SW_SPIN_LOCK_UNLOCK(lock);
2000029e:	2300      	movs	r3, #0
200002a0:	62bb      	str	r3, [r7, #40]	@ 0x28
200002a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200002a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200002a6:	e8c2 3f8f 	stlb	r3, [r2]
}
200002aa:	bf00      	nop
200002ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200002ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
200002b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200002b2:	f383 8810 	msr	PRIMASK, r3
}
200002b6:	bf00      	nop
}
200002b8:	bf00      	nop
            return true;
200002ba:	2301      	movs	r3, #1
200002bc:	e01c      	b.n	200002f8 <mutex_enter_block_until+0xe0>
        } else {
            if (lock_internal_spin_unlock_with_best_effort_wait_or_timeout(&mtx->core, save, until)) {
200002be:	68fb      	ldr	r3, [r7, #12]
200002c0:	681b      	ldr	r3, [r3, #0]
200002c2:	623b      	str	r3, [r7, #32]
200002c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200002c6:	61fb      	str	r3, [r7, #28]
200002c8:	6a3b      	ldr	r3, [r7, #32]
200002ca:	61bb      	str	r3, [r7, #24]
    SW_SPIN_LOCK_UNLOCK(lock);
200002cc:	2300      	movs	r3, #0
200002ce:	617b      	str	r3, [r7, #20]
200002d0:	697b      	ldr	r3, [r7, #20]
200002d2:	69ba      	ldr	r2, [r7, #24]
200002d4:	e8c2 3f8f 	stlb	r3, [r2]
}
200002d8:	bf00      	nop
200002da:	69fb      	ldr	r3, [r7, #28]
200002dc:	613b      	str	r3, [r7, #16]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
200002de:	693b      	ldr	r3, [r7, #16]
200002e0:	f383 8810 	msr	PRIMASK, r3
}
200002e4:	bf00      	nop
}
200002e6:	bf00      	nop
200002e8:	e9d7 0100 	ldrd	r0, r1, [r7]
200002ec:	f000 fa00 	bl	200006f0 <__best_effort_wfe_or_timeout_veneer>
200002f0:	4603      	mov	r3, r0
200002f2:	2b00      	cmp	r3, #0
200002f4:	d0a5      	beq.n	20000242 <mutex_enter_block_until+0x2a>
                // timed out
                return false;
200002f6:	2300      	movs	r3, #0
            }
            // not timed out; spin lock already unlocked, so loop again
        }
    } while (true);
}
200002f8:	4618      	mov	r0, r3
200002fa:	3758      	adds	r7, #88	@ 0x58
200002fc:	46bd      	mov	sp, r7
200002fe:	bd80      	pop	{r7, pc}
20000300:	10006888 	.word	0x10006888
20000304:	100068e8 	.word	0x100068e8
20000308:	10006844 	.word	0x10006844

2000030c <mutex_exit>:
            // not timed out; spin lock already unlocked, so loop again
        }
    } while (true);
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
2000030c:	b580      	push	{r7, lr}
2000030e:	b08e      	sub	sp, #56	@ 0x38
20000310:	af00      	add	r7, sp, #0
20000312:	6078      	str	r0, [r7, #4]
    if (mtx->recursive) {
        recursive_mutex_exit(mtx);
        return;
    }
#endif
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000314:	687b      	ldr	r3, [r7, #4]
20000316:	681b      	ldr	r3, [r3, #0]
20000318:	633b      	str	r3, [r7, #48]	@ 0x30
    pico_default_asm_volatile (
2000031a:	f3ef 8310 	mrs	r3, PRIMASK
2000031e:	b672      	cpsid	i
20000320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return status;
20000322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    uint32_t save = save_and_disable_interrupts();
20000324:	62bb      	str	r3, [r7, #40]	@ 0x28
20000326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
20000328:	627b      	str	r3, [r7, #36]	@ 0x24
    SW_SPIN_LOCK_LOCK(lock);
2000032a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
2000032c:	e8d1 3fcf 	ldaexb	r3, [r1]
20000330:	2201      	movs	r2, #1
20000332:	2b00      	cmp	r3, #0
20000334:	d1fa      	bne.n	2000032c <mutex_exit+0x20>
20000336:	e8c1 2f43 	strexb	r3, r2, [r1]
2000033a:	2b00      	cmp	r3, #0
2000033c:	d1f6      	bne.n	2000032c <mutex_exit+0x20>
2000033e:	623a      	str	r2, [r7, #32]
20000340:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile ("dmb" : : : "memory");
20000342:	f3bf 8f5f 	dmb	sy
}
20000346:	bf00      	nop
}
20000348:	bf00      	nop
}
2000034a:	bf00      	nop
    return save;
2000034c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000034e:	637b      	str	r3, [r7, #52]	@ 0x34
    assert(lock_is_owner_id_valid(mtx->owner));
20000350:	687b      	ldr	r3, [r7, #4]
20000352:	f993 3004 	ldrsb.w	r3, [r3, #4]
20000356:	2b00      	cmp	r3, #0
20000358:	da05      	bge.n	20000366 <mutex_exit+0x5a>
2000035a:	4b12      	ldr	r3, [pc, #72]	@ (200003a4 <mutex_exit+0x98>)
2000035c:	4a12      	ldr	r2, [pc, #72]	@ (200003a8 <mutex_exit+0x9c>)
2000035e:	21d5      	movs	r1, #213	@ 0xd5
20000360:	4812      	ldr	r0, [pc, #72]	@ (200003ac <mutex_exit+0xa0>)
20000362:	f000 f9c1 	bl	200006e8 <____assert_func_veneer>
    mtx->owner = LOCK_INVALID_OWNER_ID;
20000366:	687b      	ldr	r3, [r7, #4]
20000368:	22ff      	movs	r2, #255	@ 0xff
2000036a:	711a      	strb	r2, [r3, #4]
    lock_internal_spin_unlock_with_notify(&mtx->core, save);
2000036c:	687b      	ldr	r3, [r7, #4]
2000036e:	681b      	ldr	r3, [r3, #0]
20000370:	61bb      	str	r3, [r7, #24]
20000372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000374:	617b      	str	r3, [r7, #20]
20000376:	69bb      	ldr	r3, [r7, #24]
20000378:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_UNLOCK(lock);
2000037a:	2300      	movs	r3, #0
2000037c:	60fb      	str	r3, [r7, #12]
2000037e:	68fb      	ldr	r3, [r7, #12]
20000380:	693a      	ldr	r2, [r7, #16]
20000382:	e8c2 3f8f 	stlb	r3, [r2]
}
20000386:	bf00      	nop
20000388:	697b      	ldr	r3, [r7, #20]
2000038a:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
2000038c:	68bb      	ldr	r3, [r7, #8]
2000038e:	f383 8810 	msr	PRIMASK, r3
}
20000392:	bf00      	nop
}
20000394:	bf00      	nop
    pico_default_asm_volatile ("sev");
20000396:	bf40      	sev
}
20000398:	bf00      	nop
}
2000039a:	bf00      	nop
2000039c:	3738      	adds	r7, #56	@ 0x38
2000039e:	46bd      	mov	sp, r7
200003a0:	bd80      	pop	{r7, pc}
200003a2:	bf00      	nop
200003a4:	1000689c 	.word	0x1000689c
200003a8:	10006900 	.word	0x10006900
200003ac:	10006844 	.word	0x10006844

200003b0 <__aeabi_uldivmod>:
200003b0:	b953      	cbnz	r3, 200003c8 <__aeabi_uldivmod+0x18>
200003b2:	b94a      	cbnz	r2, 200003c8 <__aeabi_uldivmod+0x18>
200003b4:	2900      	cmp	r1, #0
200003b6:	bf08      	it	eq
200003b8:	2800      	cmpeq	r0, #0
200003ba:	bf1c      	itt	ne
200003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
200003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
200003c4:	f000 b98c 	b.w	200006e0 <__aeabi_idiv0>
200003c8:	f1ad 0c08 	sub.w	ip, sp, #8
200003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200003d0:	f000 f806 	bl	200003e0 <__udivmoddi4>
200003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
200003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
200003dc:	b004      	add	sp, #16
200003de:	4770      	bx	lr

200003e0 <__udivmoddi4>:
200003e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200003e4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
200003e6:	460e      	mov	r6, r1
200003e8:	4604      	mov	r4, r0
200003ea:	460f      	mov	r7, r1
200003ec:	2b00      	cmp	r3, #0
200003ee:	d147      	bne.n	20000480 <__udivmoddi4+0xa0>
200003f0:	428a      	cmp	r2, r1
200003f2:	4694      	mov	ip, r2
200003f4:	fab2 f382 	clz	r3, r2
200003f8:	d95a      	bls.n	200004b0 <__udivmoddi4+0xd0>
200003fa:	b143      	cbz	r3, 2000040e <__udivmoddi4+0x2e>
200003fc:	fa02 fc03 	lsl.w	ip, r2, r3
20000400:	f1c3 0220 	rsb	r2, r3, #32
20000404:	409f      	lsls	r7, r3
20000406:	409c      	lsls	r4, r3
20000408:	fa20 f202 	lsr.w	r2, r0, r2
2000040c:	4317      	orrs	r7, r2
2000040e:	ea4f 461c 	mov.w	r6, ip, lsr #16
20000412:	fa1f fe8c 	uxth.w	lr, ip
20000416:	0c22      	lsrs	r2, r4, #16
20000418:	fbb7 f1f6 	udiv	r1, r7, r6
2000041c:	fb06 7711 	mls	r7, r6, r1, r7
20000420:	fb01 f00e 	mul.w	r0, r1, lr
20000424:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
20000428:	4290      	cmp	r0, r2
2000042a:	d908      	bls.n	2000043e <__udivmoddi4+0x5e>
2000042c:	eb1c 0202 	adds.w	r2, ip, r2
20000430:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
20000434:	d202      	bcs.n	2000043c <__udivmoddi4+0x5c>
20000436:	4290      	cmp	r0, r2
20000438:	f200 813c 	bhi.w	200006b4 <__udivmoddi4+0x2d4>
2000043c:	4639      	mov	r1, r7
2000043e:	1a12      	subs	r2, r2, r0
20000440:	b2a4      	uxth	r4, r4
20000442:	fbb2 f0f6 	udiv	r0, r2, r6
20000446:	fb06 2210 	mls	r2, r6, r0, r2
2000044a:	fb00 fe0e 	mul.w	lr, r0, lr
2000044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
20000452:	45a6      	cmp	lr, r4
20000454:	d908      	bls.n	20000468 <__udivmoddi4+0x88>
20000456:	eb1c 0404 	adds.w	r4, ip, r4
2000045a:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
2000045e:	d202      	bcs.n	20000466 <__udivmoddi4+0x86>
20000460:	45a6      	cmp	lr, r4
20000462:	f200 812a 	bhi.w	200006ba <__udivmoddi4+0x2da>
20000466:	4610      	mov	r0, r2
20000468:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
2000046c:	eba4 040e 	sub.w	r4, r4, lr
20000470:	2100      	movs	r1, #0
20000472:	b11d      	cbz	r5, 2000047c <__udivmoddi4+0x9c>
20000474:	40dc      	lsrs	r4, r3
20000476:	2300      	movs	r3, #0
20000478:	e9c5 4300 	strd	r4, r3, [r5]
2000047c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20000480:	428b      	cmp	r3, r1
20000482:	d905      	bls.n	20000490 <__udivmoddi4+0xb0>
20000484:	b10d      	cbz	r5, 2000048a <__udivmoddi4+0xaa>
20000486:	e9c5 0100 	strd	r0, r1, [r5]
2000048a:	2100      	movs	r1, #0
2000048c:	4608      	mov	r0, r1
2000048e:	e7f5      	b.n	2000047c <__udivmoddi4+0x9c>
20000490:	fab3 f183 	clz	r1, r3
20000494:	2900      	cmp	r1, #0
20000496:	d14f      	bne.n	20000538 <__udivmoddi4+0x158>
20000498:	42b3      	cmp	r3, r6
2000049a:	f0c0 8102 	bcc.w	200006a2 <__udivmoddi4+0x2c2>
2000049e:	4282      	cmp	r2, r0
200004a0:	f240 80ff 	bls.w	200006a2 <__udivmoddi4+0x2c2>
200004a4:	4608      	mov	r0, r1
200004a6:	2d00      	cmp	r5, #0
200004a8:	d0e8      	beq.n	2000047c <__udivmoddi4+0x9c>
200004aa:	e9c5 4700 	strd	r4, r7, [r5]
200004ae:	e7e5      	b.n	2000047c <__udivmoddi4+0x9c>
200004b0:	2b00      	cmp	r3, #0
200004b2:	f040 80af 	bne.w	20000614 <__udivmoddi4+0x234>
200004b6:	1a8a      	subs	r2, r1, r2
200004b8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
200004bc:	fa1f f78c 	uxth.w	r7, ip
200004c0:	2101      	movs	r1, #1
200004c2:	fbb2 f6fe 	udiv	r6, r2, lr
200004c6:	fb0e 2016 	mls	r0, lr, r6, r2
200004ca:	0c22      	lsrs	r2, r4, #16
200004cc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
200004d0:	fb07 f006 	mul.w	r0, r7, r6
200004d4:	4290      	cmp	r0, r2
200004d6:	d90f      	bls.n	200004f8 <__udivmoddi4+0x118>
200004d8:	eb1c 0202 	adds.w	r2, ip, r2
200004dc:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
200004e0:	bf2c      	ite	cs
200004e2:	f04f 0901 	movcs.w	r9, #1
200004e6:	f04f 0900 	movcc.w	r9, #0
200004ea:	4290      	cmp	r0, r2
200004ec:	d903      	bls.n	200004f6 <__udivmoddi4+0x116>
200004ee:	f1b9 0f00 	cmp.w	r9, #0
200004f2:	f000 80dc 	beq.w	200006ae <__udivmoddi4+0x2ce>
200004f6:	4646      	mov	r6, r8
200004f8:	1a12      	subs	r2, r2, r0
200004fa:	b2a4      	uxth	r4, r4
200004fc:	fbb2 f0fe 	udiv	r0, r2, lr
20000500:	fb0e 2210 	mls	r2, lr, r0, r2
20000504:	fb00 f707 	mul.w	r7, r0, r7
20000508:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
2000050c:	42a7      	cmp	r7, r4
2000050e:	d90f      	bls.n	20000530 <__udivmoddi4+0x150>
20000510:	eb1c 0404 	adds.w	r4, ip, r4
20000514:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
20000518:	bf2c      	ite	cs
2000051a:	f04f 0e01 	movcs.w	lr, #1
2000051e:	f04f 0e00 	movcc.w	lr, #0
20000522:	42a7      	cmp	r7, r4
20000524:	d903      	bls.n	2000052e <__udivmoddi4+0x14e>
20000526:	f1be 0f00 	cmp.w	lr, #0
2000052a:	f000 80c9 	beq.w	200006c0 <__udivmoddi4+0x2e0>
2000052e:	4610      	mov	r0, r2
20000530:	1be4      	subs	r4, r4, r7
20000532:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000536:	e79c      	b.n	20000472 <__udivmoddi4+0x92>
20000538:	f1c1 0420 	rsb	r4, r1, #32
2000053c:	408b      	lsls	r3, r1
2000053e:	fa06 fc01 	lsl.w	ip, r6, r1
20000542:	fa00 fe01 	lsl.w	lr, r0, r1
20000546:	fa22 f704 	lsr.w	r7, r2, r4
2000054a:	40e6      	lsrs	r6, r4
2000054c:	408a      	lsls	r2, r1
2000054e:	431f      	orrs	r7, r3
20000550:	fa20 f304 	lsr.w	r3, r0, r4
20000554:	ea4f 4817 	mov.w	r8, r7, lsr #16
20000558:	ea43 030c 	orr.w	r3, r3, ip
2000055c:	fa1f fc87 	uxth.w	ip, r7
20000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
20000564:	fbb6 f0f8 	udiv	r0, r6, r8
20000568:	fb08 6610 	mls	r6, r8, r0, r6
2000056c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
20000570:	fb00 f90c 	mul.w	r9, r0, ip
20000574:	45b1      	cmp	r9, r6
20000576:	d90e      	bls.n	20000596 <__udivmoddi4+0x1b6>
20000578:	19be      	adds	r6, r7, r6
2000057a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
2000057e:	bf2c      	ite	cs
20000580:	f04f 0b01 	movcs.w	fp, #1
20000584:	f04f 0b00 	movcc.w	fp, #0
20000588:	45b1      	cmp	r9, r6
2000058a:	d903      	bls.n	20000594 <__udivmoddi4+0x1b4>
2000058c:	f1bb 0f00 	cmp.w	fp, #0
20000590:	f000 80a2 	beq.w	200006d8 <__udivmoddi4+0x2f8>
20000594:	4650      	mov	r0, sl
20000596:	eba6 0609 	sub.w	r6, r6, r9
2000059a:	fa1f f983 	uxth.w	r9, r3
2000059e:	fbb6 f3f8 	udiv	r3, r6, r8
200005a2:	fb08 6613 	mls	r6, r8, r3, r6
200005a6:	fb03 fc0c 	mul.w	ip, r3, ip
200005aa:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
200005ae:	45b4      	cmp	ip, r6
200005b0:	d90e      	bls.n	200005d0 <__udivmoddi4+0x1f0>
200005b2:	19be      	adds	r6, r7, r6
200005b4:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
200005b8:	bf2c      	ite	cs
200005ba:	f04f 0901 	movcs.w	r9, #1
200005be:	f04f 0900 	movcc.w	r9, #0
200005c2:	45b4      	cmp	ip, r6
200005c4:	d903      	bls.n	200005ce <__udivmoddi4+0x1ee>
200005c6:	f1b9 0f00 	cmp.w	r9, #0
200005ca:	f000 8082 	beq.w	200006d2 <__udivmoddi4+0x2f2>
200005ce:	4643      	mov	r3, r8
200005d0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
200005d4:	eba6 060c 	sub.w	r6, r6, ip
200005d8:	fba0 8c02 	umull	r8, ip, r0, r2
200005dc:	4566      	cmp	r6, ip
200005de:	4643      	mov	r3, r8
200005e0:	46e1      	mov	r9, ip
200005e2:	d302      	bcc.n	200005ea <__udivmoddi4+0x20a>
200005e4:	d107      	bne.n	200005f6 <__udivmoddi4+0x216>
200005e6:	45c6      	cmp	lr, r8
200005e8:	d205      	bcs.n	200005f6 <__udivmoddi4+0x216>
200005ea:	ebb8 0302 	subs.w	r3, r8, r2
200005ee:	eb6c 0c07 	sbc.w	ip, ip, r7
200005f2:	3801      	subs	r0, #1
200005f4:	46e1      	mov	r9, ip
200005f6:	b15d      	cbz	r5, 20000610 <__udivmoddi4+0x230>
200005f8:	ebbe 0203 	subs.w	r2, lr, r3
200005fc:	eb66 0609 	sbc.w	r6, r6, r9
20000600:	fa06 f404 	lsl.w	r4, r6, r4
20000604:	fa22 f301 	lsr.w	r3, r2, r1
20000608:	40ce      	lsrs	r6, r1
2000060a:	431c      	orrs	r4, r3
2000060c:	e9c5 4600 	strd	r4, r6, [r5]
20000610:	2100      	movs	r1, #0
20000612:	e733      	b.n	2000047c <__udivmoddi4+0x9c>
20000614:	fa02 fc03 	lsl.w	ip, r2, r3
20000618:	f1c3 0220 	rsb	r2, r3, #32
2000061c:	4099      	lsls	r1, r3
2000061e:	409c      	lsls	r4, r3
20000620:	40d6      	lsrs	r6, r2
20000622:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20000626:	fa20 f202 	lsr.w	r2, r0, r2
2000062a:	fa1f f78c 	uxth.w	r7, ip
2000062e:	fbb6 f0fe 	udiv	r0, r6, lr
20000632:	430a      	orrs	r2, r1
20000634:	fb0e 6610 	mls	r6, lr, r0, r6
20000638:	0c11      	lsrs	r1, r2, #16
2000063a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
2000063e:	fb00 f607 	mul.w	r6, r0, r7
20000642:	428e      	cmp	r6, r1
20000644:	d90e      	bls.n	20000664 <__udivmoddi4+0x284>
20000646:	eb1c 0101 	adds.w	r1, ip, r1
2000064a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
2000064e:	bf2c      	ite	cs
20000650:	f04f 0901 	movcs.w	r9, #1
20000654:	f04f 0900 	movcc.w	r9, #0
20000658:	428e      	cmp	r6, r1
2000065a:	d902      	bls.n	20000662 <__udivmoddi4+0x282>
2000065c:	f1b9 0f00 	cmp.w	r9, #0
20000660:	d034      	beq.n	200006cc <__udivmoddi4+0x2ec>
20000662:	4640      	mov	r0, r8
20000664:	1b89      	subs	r1, r1, r6
20000666:	b292      	uxth	r2, r2
20000668:	fbb1 f6fe 	udiv	r6, r1, lr
2000066c:	fb0e 1116 	mls	r1, lr, r6, r1
20000670:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
20000674:	fb06 f107 	mul.w	r1, r6, r7
20000678:	4291      	cmp	r1, r2
2000067a:	d90e      	bls.n	2000069a <__udivmoddi4+0x2ba>
2000067c:	eb1c 0202 	adds.w	r2, ip, r2
20000680:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
20000684:	bf2c      	ite	cs
20000686:	f04f 0901 	movcs.w	r9, #1
2000068a:	f04f 0900 	movcc.w	r9, #0
2000068e:	4291      	cmp	r1, r2
20000690:	d902      	bls.n	20000698 <__udivmoddi4+0x2b8>
20000692:	f1b9 0f00 	cmp.w	r9, #0
20000696:	d016      	beq.n	200006c6 <__udivmoddi4+0x2e6>
20000698:	4646      	mov	r6, r8
2000069a:	1a52      	subs	r2, r2, r1
2000069c:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
200006a0:	e70f      	b.n	200004c2 <__udivmoddi4+0xe2>
200006a2:	1a84      	subs	r4, r0, r2
200006a4:	eb66 0203 	sbc.w	r2, r6, r3
200006a8:	2001      	movs	r0, #1
200006aa:	4617      	mov	r7, r2
200006ac:	e6fb      	b.n	200004a6 <__udivmoddi4+0xc6>
200006ae:	3e02      	subs	r6, #2
200006b0:	4462      	add	r2, ip
200006b2:	e721      	b.n	200004f8 <__udivmoddi4+0x118>
200006b4:	3902      	subs	r1, #2
200006b6:	4462      	add	r2, ip
200006b8:	e6c1      	b.n	2000043e <__udivmoddi4+0x5e>
200006ba:	4464      	add	r4, ip
200006bc:	3802      	subs	r0, #2
200006be:	e6d3      	b.n	20000468 <__udivmoddi4+0x88>
200006c0:	4464      	add	r4, ip
200006c2:	3802      	subs	r0, #2
200006c4:	e734      	b.n	20000530 <__udivmoddi4+0x150>
200006c6:	3e02      	subs	r6, #2
200006c8:	4462      	add	r2, ip
200006ca:	e7e6      	b.n	2000069a <__udivmoddi4+0x2ba>
200006cc:	3802      	subs	r0, #2
200006ce:	4461      	add	r1, ip
200006d0:	e7c8      	b.n	20000664 <__udivmoddi4+0x284>
200006d2:	3b02      	subs	r3, #2
200006d4:	443e      	add	r6, r7
200006d6:	e77b      	b.n	200005d0 <__udivmoddi4+0x1f0>
200006d8:	3802      	subs	r0, #2
200006da:	443e      	add	r6, r7
200006dc:	e75b      	b.n	20000596 <__udivmoddi4+0x1b6>
200006de:	bf00      	nop

200006e0 <__aeabi_idiv0>:
200006e0:	4770      	bx	lr
200006e2:	bf00      	nop
200006e4:	0000      	movs	r0, r0
	...

200006e8 <____assert_func_veneer>:
200006e8:	f85f f000 	ldr.w	pc, [pc]	@ 200006ec <____assert_func_veneer+0x4>
200006ec:	1000512d 	.word	0x1000512d

200006f0 <__best_effort_wfe_or_timeout_veneer>:
200006f0:	f85f f000 	ldr.w	pc, [pc]	@ 200006f4 <__best_effort_wfe_or_timeout_veneer+0x4>
200006f4:	100023fd 	.word	0x100023fd

200006f8 <u16_period>:
200006f8:	                                         ..

200006fa <pico_led_state>:
200006fa:	                                         .

200006fb <striped_spin_lock_num>:
200006fb:	                                         .

200006fc <irq_handler_chain_slots>:
200006fc:	00000000 	.word	0x00000000
20000700:	00010000 	.word	0x00010000
	...
2000070c:	00020000 	.word	0x00020000
	...
20000718:	00030000 	.word	0x00030000
	...
20000724:	00ff0000 	.word	0x00ff0000
20000728:	00000000 	.word	0x00000000

2000072c <irq_handler_chain_first_slot>:
2000072c:	b501      	push	{r0, lr}
2000072e:	6848      	ldr	r0, [r1, #4]
20000730:	3101      	adds	r1, #1
20000732:	468e      	mov	lr, r1
20000734:	4700      	bx	r0

20000736 <irq_handler_chain_remove_tail>:
20000736:	4670      	mov	r0, lr
20000738:	3809      	subs	r0, #9
2000073a:	4901      	ldr	r1, [pc, #4]	@ (20000740 <irq_handler_chain_remove_tail+0xa>)
2000073c:	4788      	blx	r1
2000073e:	bd01      	pop	{r0, pc}
20000740:	10001021 	.word	0x10001021

20000744 <default_alarm_pool>:
	...
20000758:	20000790                                ... 

2000075c <stdio_uart>:
2000075c:	10005a85 10005c15 10005ac5 10005b75     .Z...\...Z..u[..
2000076c:	00000000 00000100                       ........

20000774 <i2c0_inst>:
20000774:	40090000 00000000                       ...@....

2000077c <i2c1_inst>:
2000077c:	40098000 00000000                       ...@....

20000784 <print_mutex>:
	...
