
/home/totz45/labs/m4/Test/build/m4.elf:     file format elf32-littlearm


Disassembly of section .text:

10000000 <__VECTOR_TABLE>:
10000000:	20082000 	.word	0x20082000
10000004:	1000015d 	.word	0x1000015d
10000008:	10000113 	.word	0x10000113
1000000c:	10000115 	.word	0x10000115
10000010:	10000111 	.word	0x10000111
10000014:	10000111 	.word	0x10000111
10000018:	10000111 	.word	0x10000111
1000001c:	10000111 	.word	0x10000111
10000020:	10000111 	.word	0x10000111
10000024:	10000111 	.word	0x10000111
10000028:	10000111 	.word	0x10000111
1000002c:	10000117 	.word	0x10000117
10000030:	10000111 	.word	0x10000111
10000034:	10000111 	.word	0x10000111
10000038:	10000119 	.word	0x10000119
1000003c:	1000011b 	.word	0x1000011b
10000040:	1000011d 	.word	0x1000011d
10000044:	1000011d 	.word	0x1000011d
10000048:	1000011d 	.word	0x1000011d
1000004c:	1000011d 	.word	0x1000011d
10000050:	1000011d 	.word	0x1000011d
10000054:	1000011d 	.word	0x1000011d
10000058:	1000011d 	.word	0x1000011d
1000005c:	1000011d 	.word	0x1000011d
10000060:	1000011d 	.word	0x1000011d
10000064:	1000011d 	.word	0x1000011d
10000068:	1000011d 	.word	0x1000011d
1000006c:	1000011d 	.word	0x1000011d
10000070:	1000011d 	.word	0x1000011d
10000074:	1000011d 	.word	0x1000011d
10000078:	1000011d 	.word	0x1000011d
1000007c:	1000011d 	.word	0x1000011d
10000080:	1000011d 	.word	0x1000011d
10000084:	1000011d 	.word	0x1000011d
10000088:	1000011d 	.word	0x1000011d
1000008c:	1000011d 	.word	0x1000011d
10000090:	1000011d 	.word	0x1000011d
10000094:	1000011d 	.word	0x1000011d
10000098:	1000011d 	.word	0x1000011d
1000009c:	1000011d 	.word	0x1000011d
100000a0:	1000011d 	.word	0x1000011d
100000a4:	1000011d 	.word	0x1000011d
100000a8:	1000011d 	.word	0x1000011d
100000ac:	1000011d 	.word	0x1000011d
100000b0:	1000011d 	.word	0x1000011d
100000b4:	1000011d 	.word	0x1000011d
100000b8:	1000011d 	.word	0x1000011d
100000bc:	1000011d 	.word	0x1000011d
100000c0:	1000011d 	.word	0x1000011d
100000c4:	1000011d 	.word	0x1000011d
100000c8:	1000011d 	.word	0x1000011d
100000cc:	1000011d 	.word	0x1000011d
100000d0:	1000011d 	.word	0x1000011d
100000d4:	1000011d 	.word	0x1000011d
100000d8:	1000011d 	.word	0x1000011d
100000dc:	1000011d 	.word	0x1000011d
100000e0:	1000011d 	.word	0x1000011d
100000e4:	1000011d 	.word	0x1000011d
100000e8:	1000011d 	.word	0x1000011d
100000ec:	1000011d 	.word	0x1000011d
100000f0:	1000011d 	.word	0x1000011d
100000f4:	1000011d 	.word	0x1000011d
100000f8:	1000011d 	.word	0x1000011d
100000fc:	1000011d 	.word	0x1000011d
10000100:	1000011d 	.word	0x1000011d
10000104:	1000011d 	.word	0x1000011d
10000108:	1000011d 	.word	0x1000011d
1000010c:	1000011d 	.word	0x1000011d

10000110 <isr_invalid>:
\name:
    bkpt #0
.endm

// these are separated out for clarity
decl_isr_bkpt isr_invalid
10000110:	be00      	bkpt	0x0000

10000112 <isr_nmi>:
decl_isr_bkpt isr_nmi
10000112:	be00      	bkpt	0x0000

10000114 <isr_hardfault>:
decl_isr_bkpt isr_hardfault
10000114:	be00      	bkpt	0x0000

10000116 <isr_svcall>:
decl_isr_bkpt isr_svcall
10000116:	be00      	bkpt	0x0000

10000118 <isr_pendsv>:
decl_isr_bkpt isr_pendsv
10000118:	be00      	bkpt	0x0000

1000011a <isr_systick>:
decl_isr_bkpt isr_systick
1000011a:	be00      	bkpt	0x0000

1000011c <__unhandled_user_irq>:

// All unhandled USER IRQs fall through to here
.global __unhandled_user_irq
.thumb_func
__unhandled_user_irq:
    mrs  r0, ipsr
1000011c:	f3ef 8005 	mrs	r0, IPSR
    subs r0, #16
10000120:	3810      	subs	r0, #16

10000122 <unhandled_user_irq_num_in_r0>:
.global unhandled_user_irq_num_in_r0
unhandled_user_irq_num_in_r0:
    bkpt #0
10000122:	be00      	bkpt	0x0000

10000124 <binary_info_header>:
10000124:	7188ebf2 	.word	0x7188ebf2
10000128:	1000c210 	.word	0x1000c210
1000012c:	1000c230 	.word	0x1000c230
10000130:	100001a8 	.word	0x100001a8
10000134:	e71aa390 	.word	0xe71aa390

10000138 <__binary_info_header_end>:
10000138:	ffffded3 	.word	0xffffded3
1000013c:	10210142 	.word	0x10210142
10000140:	000001ff 	.word	0x000001ff
10000144:	0000d5bc 	.word	0x0000d5bc
10000148:	ab123579 	.word	0xab123579

1000014c <_entry_point>:
    // Vector through our own table (SP, VTOR will not have been set up at
    // this point). Same path for debugger entry and bootloader entry.
#else
    // Debugger tried to run code after loading, so SSI is in 03h-only mode.
    // Go back through bootrom + boot2 to properly initialise flash.
    ldr r0, =BOOTROM_VTABLE_OFFSET
1000014c:	f04f 0000 	mov.w	r0, #0

10000150 <_enter_vtable_in_r0>:
#endif

_enter_vtable_in_r0:
    ldr r1, =(PPB_BASE + ARM_CPU_PREFIXED(VTOR_OFFSET))
10000150:	4920      	ldr	r1, [pc, #128]	@ (100001d4 <data_cpy_table+0x2c>)
    str r0, [r1]
10000152:	6008      	str	r0, [r1, #0]
    ldmia r0!, {r1, r2}
10000154:	c806      	ldmia	r0!, {r1, r2}
    msr msp, r1
10000156:	f381 8808 	msr	MSP, r1
    bx r2
1000015a:	4710      	bx	r2

1000015c <_reset_handler>:
.thumb_func
_reset_handler:
    // Only core 0 should run the C runtime startup code; core 1 is normally
    // sleeping in the bootrom at this point but check to be sure (e.g. if
    // debugger put core 1 at the ELF entry point for some reason)
    ldr r0, =(SIO_BASE + SIO_CPUID_OFFSET)
1000015c:	f04f 4050 	mov.w	r0, #3489660928	@ 0xd0000000
    ldr r0, [r0]
10000160:	6800      	ldr	r0, [r0, #0]
#if __ARM_ARCH_6M__
    cmp r0, #0
    beq 1f
#else
    cbz r0, 1f
10000162:	b110      	cbz	r0, 1000016a <hold_non_core0_in_bootrom+0x6>

10000164 <hold_non_core0_in_bootrom>:
#endif
hold_non_core0_in_bootrom:
    // Send back to the ROM to wait for core 0 to launch it.
    ldr r0, =BOOTROM_VTABLE_OFFSET
10000164:	f04f 0000 	mov.w	r0, #0
    b _enter_vtable_in_r0
10000168:	e7f2      	b.n	10000150 <_enter_vtable_in_r0>
#endif

    // In a NO_FLASH binary, don't perform .data etc copy, since it's loaded
    // in-place by the SRAM load. Still need to clear .bss
#if !PICO_NO_FLASH
    adr r4, data_cpy_table
1000016a:	a40f      	add	r4, pc, #60	@ (adr r4, 100001a8 <data_cpy_table>)

    // assume there is at least one entry
1:
    ldmia r4!, {r1-r3}
1000016c:	cc0e      	ldmia	r4!, {r1, r2, r3}
    cmp r1, #0
1000016e:	2900      	cmp	r1, #0
    beq 2f
10000170:	d002      	beq.n	10000178 <hold_non_core0_in_bootrom+0x14>
    bl data_cpy
10000172:	f000 f815 	bl	100001a0 <data_cpy>
    b 1b
10000176:	e7f9      	b.n	1000016c <hold_non_core0_in_bootrom+0x8>
2:
#endif

    // Zero out the BSS
    ldr r1, =__bss_start__
10000178:	4917      	ldr	r1, [pc, #92]	@ (100001d8 <data_cpy_table+0x30>)
    ldr r2, =__bss_end__
1000017a:	4a18      	ldr	r2, [pc, #96]	@ (100001dc <data_cpy_table+0x34>)
    movs r0, #0
1000017c:	2000      	movs	r0, #0
    b bss_fill_test
1000017e:	e000      	b.n	10000182 <bss_fill_test>

10000180 <bss_fill_loop>:
bss_fill_loop:
    stm r1!, {r0}
10000180:	c101      	stmia	r1!, {r0}

10000182 <bss_fill_test>:
bss_fill_test:
    cmp r1, r2
10000182:	4291      	cmp	r1, r2
    bne bss_fill_loop
10000184:	d1fc      	bne.n	10000180 <bss_fill_loop>

10000186 <platform_entry>:
    // Use 32-bit jumps, in case these symbols are moved out of branch range
    // (e.g. if main is in SRAM and crt0 in flash)
#if !__ARM_ARCH_6M__
    // Make sure stack limit is 0 - the user can set it themselves
    //  todo probably worth adding to the EXE_DEF in the future
    movs r0, #0
10000186:	2000      	movs	r0, #0
    msr msplim, r0
10000188:	f380 880a 	msr	MSPLIM, r0
#endif
    ldr r1, =runtime_init
1000018c:	4914      	ldr	r1, [pc, #80]	@ (100001e0 <data_cpy_table+0x38>)
    blx r1
1000018e:	4788      	blx	r1
    ldr r1, =main
10000190:	4914      	ldr	r1, [pc, #80]	@ (100001e4 <data_cpy_table+0x3c>)
    blx r1
10000192:	4788      	blx	r1
    ldr r1, =exit
10000194:	4914      	ldr	r1, [pc, #80]	@ (100001e8 <data_cpy_table+0x40>)
    blx r1
10000196:	4788      	blx	r1
    // exit should not return.  If it does, hang the core.
1: // separate label because _exit can be moved out of branch range
    bkpt #0
10000198:	be00      	bkpt	0x0000
    b 1b
1000019a:	e7fd      	b.n	10000198 <platform_entry+0x12>

1000019c <data_cpy_loop>:


#if !PICO_NO_FLASH
data_cpy_loop:
    ldm r1!, {r0}
1000019c:	c901      	ldmia	r1!, {r0}
    stm r2!, {r0}
1000019e:	c201      	stmia	r2!, {r0}

100001a0 <data_cpy>:
data_cpy:
    cmp r2, r3
100001a0:	429a      	cmp	r2, r3
    blo data_cpy_loop
100001a2:	d3fb      	bcc.n	1000019c <data_cpy_loop>
    bx lr
100001a4:	4770      	bx	lr
100001a6:	bf00      	nop

100001a8 <data_cpy_table>:
100001a8:	1000c230 	.word	0x1000c230
100001ac:	20000110 	.word	0x20000110
100001b0:	200015d4 	.word	0x200015d4
100001b4:	1000d6f4 	.word	0x1000d6f4
100001b8:	20080000 	.word	0x20080000
100001bc:	20080000 	.word	0x20080000
100001c0:	1000d6f4 	.word	0x1000d6f4
100001c4:	20081000 	.word	0x20081000
100001c8:	20081000 	.word	0x20081000
100001cc:	00000000 	.word	0x00000000

.weak runtime_init
.type runtime_init,%function
.thumb_func
runtime_init:
    bx lr
100001d0:	4770      	bx	lr
100001d2:	0000      	.short	0x0000
    ldr r1, =(PPB_BASE + ARM_CPU_PREFIXED(VTOR_OFFSET))
100001d4:	e000ed08 	.word	0xe000ed08
    ldr r1, =__bss_start__
100001d8:	200015d4 	.word	0x200015d4
    ldr r2, =__bss_end__
100001dc:	2000258c 	.word	0x2000258c
    ldr r1, =runtime_init
100001e0:	100058bd 	.word	0x100058bd
    ldr r1, =main
100001e4:	100007d9 	.word	0x100007d9
    ldr r1, =exit
100001e8:	10005867 	.word	0x10005867

100001ec <_init>:
100001ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100001ee:	bf00      	nop

100001f0 <register_tm_clones>:
100001f0:	4b06      	ldr	r3, [pc, #24]	@ (1000020c <register_tm_clones+0x1c>)
100001f2:	4907      	ldr	r1, [pc, #28]	@ (10000210 <register_tm_clones+0x20>)
100001f4:	1ac9      	subs	r1, r1, r3
100001f6:	1089      	asrs	r1, r1, #2
100001f8:	bf48      	it	mi
100001fa:	3101      	addmi	r1, #1
100001fc:	1049      	asrs	r1, r1, #1
100001fe:	d003      	beq.n	10000208 <register_tm_clones+0x18>
10000200:	4b04      	ldr	r3, [pc, #16]	@ (10000214 <register_tm_clones+0x24>)
10000202:	b10b      	cbz	r3, 10000208 <register_tm_clones+0x18>
10000204:	4801      	ldr	r0, [pc, #4]	@ (1000020c <register_tm_clones+0x1c>)
10000206:	4718      	bx	r3
10000208:	4770      	bx	lr
1000020a:	bf00      	nop
1000020c:	200015d4 	.word	0x200015d4
10000210:	200015d4 	.word	0x200015d4
10000214:	00000000 	.word	0x00000000

10000218 <frame_dummy>:
10000218:	b508      	push	{r3, lr}
1000021a:	4b05      	ldr	r3, [pc, #20]	@ (10000230 <frame_dummy+0x18>)
1000021c:	b11b      	cbz	r3, 10000226 <frame_dummy+0xe>
1000021e:	4905      	ldr	r1, [pc, #20]	@ (10000234 <frame_dummy+0x1c>)
10000220:	4805      	ldr	r0, [pc, #20]	@ (10000238 <frame_dummy+0x20>)
10000222:	f3af 8000 	nop.w
10000226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1000022a:	f7ff bfe1 	b.w	100001f0 <register_tm_clones>
1000022e:	bf00      	nop
10000230:	00000000 	.word	0x00000000
10000234:	20002518 	.word	0x20002518
10000238:	1000b1c8 	.word	0x1000b1c8

1000023c <check_hardware_alarm_num_param>:
// also define timer_hw for backwards compatibility (just accesses the default instance)
#define timer_hw PICO_DEFAULT_TIMER_INSTANCE()
#endif
#endif

static inline void check_hardware_alarm_num_param(__unused uint alarm_num) {
1000023c:	b480      	push	{r7}
1000023e:	b083      	sub	sp, #12
10000240:	af00      	add	r7, sp, #0
10000242:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_TIMER, alarm_num >= NUM_ALARMS);
}
10000244:	bf00      	nop
10000246:	370c      	adds	r7, #12
10000248:	46bd      	mov	sp, r7
1000024a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000024e:	4770      	bx	lr

10000250 <timer_hardware_alarm_get_irq_num>:
 * \brief Returns the \ref irq_num_t for the alarm interrupt from the given alarm on the given timer instance
 * \param timer the timer instance
 * \param alarm_num the alarm number
 * \sa TIMER_ALARM_IRQ_NUM
 */
static inline uint timer_hardware_alarm_get_irq_num(__unused timer_hw_t *timer, uint alarm_num) {
10000250:	b580      	push	{r7, lr}
10000252:	b082      	sub	sp, #8
10000254:	af00      	add	r7, sp, #0
10000256:	6078      	str	r0, [r7, #4]
10000258:	6039      	str	r1, [r7, #0]
    check_hardware_alarm_num_param(alarm_num);
1000025a:	6838      	ldr	r0, [r7, #0]
1000025c:	f7ff ffee 	bl	1000023c <check_hardware_alarm_num_param>
    return TIMER_ALARM_IRQ_NUM(timer, alarm_num);
10000260:	687b      	ldr	r3, [r7, #4]
10000262:	4a06      	ldr	r2, [pc, #24]	@ (1000027c <timer_hardware_alarm_get_irq_num+0x2c>)
10000264:	4293      	cmp	r3, r2
10000266:	d101      	bne.n	1000026c <timer_hardware_alarm_get_irq_num+0x1c>
10000268:	2204      	movs	r2, #4
1000026a:	e000      	b.n	1000026e <timer_hardware_alarm_get_irq_num+0x1e>
1000026c:	2200      	movs	r2, #0
1000026e:	683b      	ldr	r3, [r7, #0]
10000270:	4413      	add	r3, r2
}
10000272:	4618      	mov	r0, r3
10000274:	3708      	adds	r7, #8
10000276:	46bd      	mov	sp, r7
10000278:	bd80      	pop	{r7, pc}
1000027a:	bf00      	nop
1000027c:	400b8000 	.word	0x400b8000

10000280 <gpio_pull_up>:
/*! \brief Set specified GPIO to be pulled up.
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 */
static inline void gpio_pull_up(uint gpio) {
10000280:	b580      	push	{r7, lr}
10000282:	b082      	sub	sp, #8
10000284:	af00      	add	r7, sp, #0
10000286:	6078      	str	r0, [r7, #4]
    gpio_set_pulls(gpio, true, false);
10000288:	2200      	movs	r2, #0
1000028a:	2101      	movs	r1, #1
1000028c:	6878      	ldr	r0, [r7, #4]
1000028e:	f000 fcad 	bl	10000bec <gpio_set_pulls>
}
10000292:	bf00      	nop
10000294:	3708      	adds	r7, #8
10000296:	46bd      	mov	sp, r7
10000298:	bd80      	pop	{r7, pc}

1000029a <gpio_put>:
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 * \param value If false clear the GPIO, otherwise set it.
 */
static inline void gpio_put(uint gpio, bool value) {
1000029a:	b480      	push	{r7}
1000029c:	b085      	sub	sp, #20
1000029e:	af00      	add	r7, sp, #0
100002a0:	6078      	str	r0, [r7, #4]
100002a2:	460b      	mov	r3, r1
100002a4:	70fb      	strb	r3, [r7, #3]
100002a6:	687b      	ldr	r3, [r7, #4]
100002a8:	60fb      	str	r3, [r7, #12]
100002aa:	78fb      	ldrb	r3, [r7, #3]
100002ac:	72fb      	strb	r3, [r7, #11]
//     if (val)
//         gpioc_hilo_out_set(1ull << pin);
//     else
//         gpioc_hilo_out_clr(1ull << pin);
__force_inline static void gpioc_bit_out_put(uint pin, bool val) {
    pico_default_asm_volatile ("mcrr p0, #4, %0, %1, c0" : : "r" (pin), "r" (val));
100002ae:	68fb      	ldr	r3, [r7, #12]
100002b0:	7afa      	ldrb	r2, [r7, #11]
100002b2:	ec42 3040 	mcrr	0, 4, r3, r2, cr0
}
100002b6:	bf00      	nop
        } else {
            sio_hw->gpio_hi_clr = mask;
        }
    }
#endif
}
100002b8:	bf00      	nop
100002ba:	3714      	adds	r7, #20
100002bc:	46bd      	mov	sp, r7
100002be:	f85d 7b04 	ldr.w	r7, [sp], #4
100002c2:	4770      	bx	lr

100002c4 <gpio_set_dir>:
 *  \ingroup hardware_gpio
 *
 * \param gpio GPIO number
 * \param out true for out, false for in
 */
static inline void gpio_set_dir(uint gpio, bool out) {
100002c4:	b480      	push	{r7}
100002c6:	b085      	sub	sp, #20
100002c8:	af00      	add	r7, sp, #0
100002ca:	6078      	str	r0, [r7, #4]
100002cc:	460b      	mov	r3, r1
100002ce:	70fb      	strb	r3, [r7, #3]
100002d0:	687b      	ldr	r3, [r7, #4]
100002d2:	60fb      	str	r3, [r7, #12]
100002d4:	78fb      	ldrb	r3, [r7, #3]
100002d6:	72fb      	strb	r3, [r7, #11]
//     if (val)
//         gpioc_hilo_oe_set(1ull << pin);
//     else
//         gpioc_hilo_oe_clr(1ull << pin);
__force_inline static void gpioc_bit_oe_put(uint pin, bool val) {
    pico_default_asm_volatile ("mcrr p0, #4, %0, %1, c4" : : "r" (pin), "r" (val));
100002d8:	68fb      	ldr	r3, [r7, #12]
100002da:	7afa      	ldrb	r2, [r7, #11]
100002dc:	ec42 3044 	mcrr	0, 4, r3, r2, cr4
}
100002e0:	bf00      	nop
        } else {
            sio_hw->gpio_hi_oe_clr = mask;
        }
    }
#endif
}
100002e2:	bf00      	nop
100002e4:	3714      	adds	r7, #20
100002e6:	46bd      	mov	sp, r7
100002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100002ec:	4770      	bx	lr
	...

100002f0 <uart_get_index>:
 *  \ingroup hardware_uart
 *
 * \param uart UART instance
 * \return Number of UART, 0 or 1.
 */
static inline uint uart_get_index(uart_inst_t *uart) {
100002f0:	b480      	push	{r7}
100002f2:	b083      	sub	sp, #12
100002f4:	af00      	add	r7, sp, #0
100002f6:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_UART, uart != uart0 && uart != uart1);
    return UART_NUM(uart);
100002f8:	687b      	ldr	r3, [r7, #4]
100002fa:	4a06      	ldr	r2, [pc, #24]	@ (10000314 <uart_get_index+0x24>)
100002fc:	4293      	cmp	r3, r2
100002fe:	bf0c      	ite	eq
10000300:	2301      	moveq	r3, #1
10000302:	2300      	movne	r3, #0
10000304:	b2db      	uxtb	r3, r3
}
10000306:	4618      	mov	r0, r3
10000308:	370c      	adds	r7, #12
1000030a:	46bd      	mov	sp, r7
1000030c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000310:	4770      	bx	lr
10000312:	bf00      	nop
10000314:	40078000 	.word	0x40078000

10000318 <uart_get_hw>:
 * It currently does nothing, and costs nothing.
 *
 * \param uart UART instance
 * \return The uart_hw_t pointer to the UART instance registers
 */
static inline uart_hw_t *uart_get_hw(uart_inst_t *uart) {
10000318:	b580      	push	{r7, lr}
1000031a:	b082      	sub	sp, #8
1000031c:	af00      	add	r7, sp, #0
1000031e:	6078      	str	r0, [r7, #4]
    uart_get_index(uart); // check it is a hw uart
10000320:	6878      	ldr	r0, [r7, #4]
10000322:	f7ff ffe5 	bl	100002f0 <uart_get_index>
    return (uart_hw_t *)uart;
10000326:	687b      	ldr	r3, [r7, #4]
}
10000328:	4618      	mov	r0, r3
1000032a:	3708      	adds	r7, #8
1000032c:	46bd      	mov	sp, r7
1000032e:	bd80      	pop	{r7, pc}

10000330 <uart_set_hw_flow>:
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param cts If true enable flow control of TX  by clear-to-send input
 * \param rts If true enable assertion of request-to-send output by RX flow control
 */
static inline void uart_set_hw_flow(uart_inst_t *uart, bool cts, bool rts) {
10000330:	b580      	push	{r7, lr}
10000332:	b088      	sub	sp, #32
10000334:	af00      	add	r7, sp, #0
10000336:	6078      	str	r0, [r7, #4]
10000338:	460b      	mov	r3, r1
1000033a:	70fb      	strb	r3, [r7, #3]
1000033c:	4613      	mov	r3, r2
1000033e:	70bb      	strb	r3, [r7, #2]
    hw_write_masked(&uart_get_hw(uart)->cr,
10000340:	6878      	ldr	r0, [r7, #4]
10000342:	f7ff ffe9 	bl	10000318 <uart_get_hw>
10000346:	4603      	mov	r3, r0
10000348:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                   (bool_to_bit(cts) << UART_UARTCR_CTSEN_LSB) | (bool_to_bit(rts) << UART_UARTCR_RTSEN_LSB),
1000034c:	78fb      	ldrb	r3, [r7, #3]
1000034e:	2b00      	cmp	r3, #0
10000350:	d002      	beq.n	10000358 <uart_set_hw_flow+0x28>
10000352:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
10000356:	e000      	b.n	1000035a <uart_set_hw_flow+0x2a>
10000358:	2100      	movs	r1, #0
1000035a:	78bb      	ldrb	r3, [r7, #2]
1000035c:	2b00      	cmp	r3, #0
1000035e:	d002      	beq.n	10000366 <uart_set_hw_flow+0x36>
10000360:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
10000364:	e000      	b.n	10000368 <uart_set_hw_flow+0x38>
10000366:	2300      	movs	r3, #0
10000368:	430b      	orrs	r3, r1
1000036a:	61fa      	str	r2, [r7, #28]
1000036c:	61bb      	str	r3, [r7, #24]
1000036e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
10000372:	617b      	str	r3, [r7, #20]
 * \param addr Address of writable register
 * \param values Bits values
 * \param write_mask Mask of bits to change
 */
__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000374:	69fb      	ldr	r3, [r7, #28]
10000376:	681a      	ldr	r2, [r3, #0]
10000378:	69bb      	ldr	r3, [r7, #24]
1000037a:	405a      	eors	r2, r3
1000037c:	697b      	ldr	r3, [r7, #20]
1000037e:	4013      	ands	r3, r2
10000380:	69fa      	ldr	r2, [r7, #28]
10000382:	613a      	str	r2, [r7, #16]
10000384:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000386:	693b      	ldr	r3, [r7, #16]
10000388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1000038c:	461a      	mov	r2, r3
1000038e:	68fb      	ldr	r3, [r7, #12]
10000390:	6013      	str	r3, [r2, #0]
}
10000392:	bf00      	nop
}
10000394:	bf00      	nop
                   UART_UARTCR_RTSEN_BITS | UART_UARTCR_CTSEN_BITS);
}
10000396:	bf00      	nop
10000398:	3720      	adds	r7, #32
1000039a:	46bd      	mov	sp, r7
1000039c:	bd80      	pop	{r7, pc}

1000039e <uart_set_irqs_enabled>:
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param rx_has_data If true an interrupt will be fired when the RX FIFO contains data.
 * \param tx_needs_data If true an interrupt will be fired when the TX FIFO needs data.
 */
static inline void uart_set_irqs_enabled(uart_inst_t *uart, bool rx_has_data, bool tx_needs_data) {
1000039e:	b5b0      	push	{r4, r5, r7, lr}
100003a0:	b08c      	sub	sp, #48	@ 0x30
100003a2:	af00      	add	r7, sp, #0
100003a4:	6078      	str	r0, [r7, #4]
100003a6:	460b      	mov	r3, r1
100003a8:	70fb      	strb	r3, [r7, #3]
100003aa:	4613      	mov	r3, r2
100003ac:	70bb      	strb	r3, [r7, #2]
    // Both UARTRXINTR (RX) and UARTRTINTR (RX timeout) interrupts are
    // required for rx_has_data. RX asserts when >=4 characters are in the RX
    // FIFO (for RXIFLSEL=0). RT asserts when there are >=1 characters and no
    // more have been received for 32 bit periods.
    uart_get_hw(uart)->imsc = (bool_to_bit(tx_needs_data) << UART_UARTIMSC_TXIM_LSB) |
100003ae:	78bb      	ldrb	r3, [r7, #2]
100003b0:	2b00      	cmp	r3, #0
100003b2:	d001      	beq.n	100003b8 <uart_set_irqs_enabled+0x1a>
100003b4:	2220      	movs	r2, #32
100003b6:	e000      	b.n	100003ba <uart_set_irqs_enabled+0x1c>
100003b8:	2200      	movs	r2, #0
                              (bool_to_bit(rx_has_data) << UART_UARTIMSC_RXIM_LSB) |
100003ba:	78fb      	ldrb	r3, [r7, #3]
100003bc:	2b00      	cmp	r3, #0
100003be:	d001      	beq.n	100003c4 <uart_set_irqs_enabled+0x26>
100003c0:	2310      	movs	r3, #16
100003c2:	e000      	b.n	100003c6 <uart_set_irqs_enabled+0x28>
100003c4:	2300      	movs	r3, #0
    uart_get_hw(uart)->imsc = (bool_to_bit(tx_needs_data) << UART_UARTIMSC_TXIM_LSB) |
100003c6:	ea42 0403 	orr.w	r4, r2, r3
                              (bool_to_bit(rx_has_data) << UART_UARTIMSC_RTIM_LSB);
100003ca:	78fb      	ldrb	r3, [r7, #3]
100003cc:	2b00      	cmp	r3, #0
100003ce:	d001      	beq.n	100003d4 <uart_set_irqs_enabled+0x36>
100003d0:	2540      	movs	r5, #64	@ 0x40
100003d2:	e000      	b.n	100003d6 <uart_set_irqs_enabled+0x38>
100003d4:	2500      	movs	r5, #0
    uart_get_hw(uart)->imsc = (bool_to_bit(tx_needs_data) << UART_UARTIMSC_TXIM_LSB) |
100003d6:	6878      	ldr	r0, [r7, #4]
100003d8:	f7ff ff9e 	bl	10000318 <uart_get_hw>
100003dc:	4602      	mov	r2, r0
                              (bool_to_bit(rx_has_data) << UART_UARTIMSC_RXIM_LSB) |
100003de:	ea45 0304 	orr.w	r3, r5, r4
    uart_get_hw(uart)->imsc = (bool_to_bit(tx_needs_data) << UART_UARTIMSC_TXIM_LSB) |
100003e2:	6393      	str	r3, [r2, #56]	@ 0x38
    if (rx_has_data) {
100003e4:	78fb      	ldrb	r3, [r7, #3]
100003e6:	2b00      	cmp	r3, #0
100003e8:	d01a      	beq.n	10000420 <uart_set_irqs_enabled+0x82>
        // Set minimum threshold
        hw_write_masked(&uart_get_hw(uart)->ifls, 0 << UART_UARTIFLS_RXIFLSEL_LSB,
100003ea:	6878      	ldr	r0, [r7, #4]
100003ec:	f7ff ff94 	bl	10000318 <uart_get_hw>
100003f0:	4603      	mov	r3, r0
100003f2:	3334      	adds	r3, #52	@ 0x34
100003f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
100003f6:	2300      	movs	r3, #0
100003f8:	62bb      	str	r3, [r7, #40]	@ 0x28
100003fa:	2338      	movs	r3, #56	@ 0x38
100003fc:	627b      	str	r3, [r7, #36]	@ 0x24
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100003fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10000400:	681a      	ldr	r2, [r3, #0]
10000402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10000404:	405a      	eors	r2, r3
10000406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10000408:	4013      	ands	r3, r2
1000040a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000040c:	623a      	str	r2, [r7, #32]
1000040e:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000410:	6a3b      	ldr	r3, [r7, #32]
10000412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10000416:	461a      	mov	r2, r3
10000418:	69fb      	ldr	r3, [r7, #28]
1000041a:	6013      	str	r3, [r2, #0]
}
1000041c:	bf00      	nop
}
1000041e:	bf00      	nop
                        UART_UARTIFLS_RXIFLSEL_BITS);
    }
    if (tx_needs_data) {
10000420:	78bb      	ldrb	r3, [r7, #2]
10000422:	2b00      	cmp	r3, #0
10000424:	d01a      	beq.n	1000045c <uart_set_irqs_enabled+0xbe>
        // Set maximum threshold
        hw_write_masked(&uart_get_hw(uart)->ifls, 0 << UART_UARTIFLS_TXIFLSEL_LSB,
10000426:	6878      	ldr	r0, [r7, #4]
10000428:	f7ff ff76 	bl	10000318 <uart_get_hw>
1000042c:	4603      	mov	r3, r0
1000042e:	3334      	adds	r3, #52	@ 0x34
10000430:	61bb      	str	r3, [r7, #24]
10000432:	2300      	movs	r3, #0
10000434:	617b      	str	r3, [r7, #20]
10000436:	2307      	movs	r3, #7
10000438:	613b      	str	r3, [r7, #16]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000043a:	69bb      	ldr	r3, [r7, #24]
1000043c:	681a      	ldr	r2, [r3, #0]
1000043e:	697b      	ldr	r3, [r7, #20]
10000440:	405a      	eors	r2, r3
10000442:	693b      	ldr	r3, [r7, #16]
10000444:	4013      	ands	r3, r2
10000446:	69ba      	ldr	r2, [r7, #24]
10000448:	60fa      	str	r2, [r7, #12]
1000044a:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000044c:	68fb      	ldr	r3, [r7, #12]
1000044e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10000452:	461a      	mov	r2, r3
10000454:	68bb      	ldr	r3, [r7, #8]
10000456:	6013      	str	r3, [r2, #0]
}
10000458:	bf00      	nop
}
1000045a:	bf00      	nop
                        UART_UARTIFLS_TXIFLSEL_BITS);
    }
}
1000045c:	bf00      	nop
1000045e:	3730      	adds	r7, #48	@ 0x30
10000460:	46bd      	mov	sp, r7
10000462:	bdb0      	pop	{r4, r5, r7, pc}

10000464 <uart_set_irq_enables>:

// backwards compatibility with SDK version < 2.0.0
static inline void uart_set_irq_enables(uart_inst_t *uart, bool rx_has_data, bool tx_needs_data) {
10000464:	b580      	push	{r7, lr}
10000466:	b082      	sub	sp, #8
10000468:	af00      	add	r7, sp, #0
1000046a:	6078      	str	r0, [r7, #4]
1000046c:	460b      	mov	r3, r1
1000046e:	70fb      	strb	r3, [r7, #3]
10000470:	4613      	mov	r3, r2
10000472:	70bb      	strb	r3, [r7, #2]
    uart_set_irqs_enabled(uart, rx_has_data, tx_needs_data);
10000474:	78ba      	ldrb	r2, [r7, #2]
10000476:	78fb      	ldrb	r3, [r7, #3]
10000478:	4619      	mov	r1, r3
1000047a:	6878      	ldr	r0, [r7, #4]
1000047c:	f7ff ff8f 	bl	1000039e <uart_set_irqs_enabled>
}
10000480:	bf00      	nop
10000482:	3708      	adds	r7, #8
10000484:	46bd      	mov	sp, r7
10000486:	bd80      	pop	{r7, pc}

10000488 <uart_is_writable>:
 *  \ingroup hardware_uart
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \return false if no space available, true otherwise
 */
static inline bool uart_is_writable(uart_inst_t *uart) {
10000488:	b580      	push	{r7, lr}
1000048a:	b082      	sub	sp, #8
1000048c:	af00      	add	r7, sp, #0
1000048e:	6078      	str	r0, [r7, #4]
    return !(uart_get_hw(uart)->fr & UART_UARTFR_TXFF_BITS);
10000490:	6878      	ldr	r0, [r7, #4]
10000492:	f7ff ff41 	bl	10000318 <uart_get_hw>
10000496:	4603      	mov	r3, r0
10000498:	699b      	ldr	r3, [r3, #24]
1000049a:	f003 0320 	and.w	r3, r3, #32
1000049e:	2b00      	cmp	r3, #0
100004a0:	bf0c      	ite	eq
100004a2:	2301      	moveq	r3, #1
100004a4:	2300      	movne	r3, #0
100004a6:	b2db      	uxtb	r3, r3
}
100004a8:	4618      	mov	r0, r3
100004aa:	3708      	adds	r7, #8
100004ac:	46bd      	mov	sp, r7
100004ae:	bd80      	pop	{r7, pc}

100004b0 <uart_is_readable>:
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \return true if the RX FIFO is not empty, otherwise false.
 *
 */
static inline bool uart_is_readable(uart_inst_t *uart) {
100004b0:	b580      	push	{r7, lr}
100004b2:	b082      	sub	sp, #8
100004b4:	af00      	add	r7, sp, #0
100004b6:	6078      	str	r0, [r7, #4]
    // PL011 doesn't expose levels directly, so return values are only 0 or 1
    return !(uart_get_hw(uart)->fr & UART_UARTFR_RXFE_BITS);
100004b8:	6878      	ldr	r0, [r7, #4]
100004ba:	f7ff ff2d 	bl	10000318 <uart_get_hw>
100004be:	4603      	mov	r3, r0
100004c0:	699b      	ldr	r3, [r3, #24]
100004c2:	f003 0310 	and.w	r3, r3, #16
100004c6:	2b00      	cmp	r3, #0
100004c8:	bf0c      	ite	eq
100004ca:	2301      	moveq	r3, #1
100004cc:	2300      	movne	r3, #0
100004ce:	b2db      	uxtb	r3, r3
}
100004d0:	4618      	mov	r0, r3
100004d2:	3708      	adds	r7, #8
100004d4:	46bd      	mov	sp, r7
100004d6:	bd80      	pop	{r7, pc}

100004d8 <uart_write_blocking>:
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param src The bytes to send
 * \param len The number of bytes to send
 */
static inline void uart_write_blocking(uart_inst_t *uart, const uint8_t *src, size_t len) {
100004d8:	b590      	push	{r4, r7, lr}
100004da:	b087      	sub	sp, #28
100004dc:	af00      	add	r7, sp, #0
100004de:	60f8      	str	r0, [r7, #12]
100004e0:	60b9      	str	r1, [r7, #8]
100004e2:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; ++i) {
100004e4:	2300      	movs	r3, #0
100004e6:	617b      	str	r3, [r7, #20]
100004e8:	e016      	b.n	10000518 <uart_write_blocking+0x40>
 *
 * No-op function intended to be called by any tight hardware polling loop. Using this ubiquitously
 * makes it much easier to find tight loops, but also in the future \#ifdef-ed support for lockup
 * debugging might be added
 */
static __force_inline void tight_loop_contents(void) {}
100004ea:	bf00      	nop
        while (!uart_is_writable(uart))
100004ec:	68f8      	ldr	r0, [r7, #12]
100004ee:	f7ff ffcb 	bl	10000488 <uart_is_writable>
100004f2:	4603      	mov	r3, r0
100004f4:	f083 0301 	eor.w	r3, r3, #1
100004f8:	b2db      	uxtb	r3, r3
100004fa:	2b00      	cmp	r3, #0
100004fc:	d1f5      	bne.n	100004ea <uart_write_blocking+0x12>
            tight_loop_contents();
        uart_get_hw(uart)->dr = *src++;
100004fe:	68bb      	ldr	r3, [r7, #8]
10000500:	1c5a      	adds	r2, r3, #1
10000502:	60ba      	str	r2, [r7, #8]
10000504:	781c      	ldrb	r4, [r3, #0]
10000506:	68f8      	ldr	r0, [r7, #12]
10000508:	f7ff ff06 	bl	10000318 <uart_get_hw>
1000050c:	4603      	mov	r3, r0
1000050e:	4622      	mov	r2, r4
10000510:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < len; ++i) {
10000512:	697b      	ldr	r3, [r7, #20]
10000514:	3301      	adds	r3, #1
10000516:	617b      	str	r3, [r7, #20]
10000518:	697a      	ldr	r2, [r7, #20]
1000051a:	687b      	ldr	r3, [r7, #4]
1000051c:	429a      	cmp	r2, r3
1000051e:	d3e5      	bcc.n	100004ec <uart_write_blocking+0x14>
    }
}
10000520:	bf00      	nop
10000522:	bf00      	nop
10000524:	371c      	adds	r7, #28
10000526:	46bd      	mov	sp, r7
10000528:	bd90      	pop	{r4, r7, pc}

1000052a <uart_read_blocking>:
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param dst Buffer to accept received bytes
 * \param len The number of bytes to receive.
 */
static inline void uart_read_blocking(uart_inst_t *uart, uint8_t *dst, size_t len) {
1000052a:	b580      	push	{r7, lr}
1000052c:	b086      	sub	sp, #24
1000052e:	af00      	add	r7, sp, #0
10000530:	60f8      	str	r0, [r7, #12]
10000532:	60b9      	str	r1, [r7, #8]
10000534:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; ++i) {
10000536:	2300      	movs	r3, #0
10000538:	617b      	str	r3, [r7, #20]
1000053a:	e016      	b.n	1000056a <uart_read_blocking+0x40>
1000053c:	bf00      	nop
        while (!uart_is_readable(uart))
1000053e:	68f8      	ldr	r0, [r7, #12]
10000540:	f7ff ffb6 	bl	100004b0 <uart_is_readable>
10000544:	4603      	mov	r3, r0
10000546:	f083 0301 	eor.w	r3, r3, #1
1000054a:	b2db      	uxtb	r3, r3
1000054c:	2b00      	cmp	r3, #0
1000054e:	d1f5      	bne.n	1000053c <uart_read_blocking+0x12>
            tight_loop_contents();
        *dst++ = (uint8_t) uart_get_hw(uart)->dr;
10000550:	68f8      	ldr	r0, [r7, #12]
10000552:	f7ff fee1 	bl	10000318 <uart_get_hw>
10000556:	4603      	mov	r3, r0
10000558:	6819      	ldr	r1, [r3, #0]
1000055a:	68bb      	ldr	r3, [r7, #8]
1000055c:	1c5a      	adds	r2, r3, #1
1000055e:	60ba      	str	r2, [r7, #8]
10000560:	b2ca      	uxtb	r2, r1
10000562:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len; ++i) {
10000564:	697b      	ldr	r3, [r7, #20]
10000566:	3301      	adds	r3, #1
10000568:	617b      	str	r3, [r7, #20]
1000056a:	697a      	ldr	r2, [r7, #20]
1000056c:	687b      	ldr	r3, [r7, #4]
1000056e:	429a      	cmp	r2, r3
10000570:	d3e5      	bcc.n	1000053e <uart_read_blocking+0x14>
    }
}
10000572:	bf00      	nop
10000574:	bf00      	nop
10000576:	3718      	adds	r7, #24
10000578:	46bd      	mov	sp, r7
1000057a:	bd80      	pop	{r7, pc}

1000057c <uart_putc_raw>:
 * This function will block until the entire character has been sent to the UART transmit buffer
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param c The character  to send
 */
static inline void uart_putc_raw(uart_inst_t *uart, char c) {
1000057c:	b580      	push	{r7, lr}
1000057e:	b082      	sub	sp, #8
10000580:	af00      	add	r7, sp, #0
10000582:	6078      	str	r0, [r7, #4]
10000584:	460b      	mov	r3, r1
10000586:	70fb      	strb	r3, [r7, #3]
    uart_write_blocking(uart, (const uint8_t *) &c, 1);
10000588:	1cfb      	adds	r3, r7, #3
1000058a:	2201      	movs	r2, #1
1000058c:	4619      	mov	r1, r3
1000058e:	6878      	ldr	r0, [r7, #4]
10000590:	f7ff ffa2 	bl	100004d8 <uart_write_blocking>
}
10000594:	bf00      	nop
10000596:	3708      	adds	r7, #8
10000598:	46bd      	mov	sp, r7
1000059a:	bd80      	pop	{r7, pc}

1000059c <uart_putc>:
 * This function will block until the character has been sent to the UART transmit buffer
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param c The character  to send
 */
static inline void uart_putc(uart_inst_t *uart, char c) {
1000059c:	b580      	push	{r7, lr}
1000059e:	b082      	sub	sp, #8
100005a0:	af00      	add	r7, sp, #0
100005a2:	6078      	str	r0, [r7, #4]
100005a4:	460b      	mov	r3, r1
100005a6:	70fb      	strb	r3, [r7, #3]
#if PICO_UART_ENABLE_CRLF_SUPPORT
    extern short uart_char_to_line_feed[NUM_UARTS];
    if (uart_char_to_line_feed[uart_get_index(uart)] == c)
100005a8:	6878      	ldr	r0, [r7, #4]
100005aa:	f7ff fea1 	bl	100002f0 <uart_get_index>
100005ae:	4603      	mov	r3, r0
100005b0:	4a09      	ldr	r2, [pc, #36]	@ (100005d8 <uart_putc+0x3c>)
100005b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
100005b6:	461a      	mov	r2, r3
100005b8:	78fb      	ldrb	r3, [r7, #3]
100005ba:	429a      	cmp	r2, r3
100005bc:	d103      	bne.n	100005c6 <uart_putc+0x2a>
        uart_putc_raw(uart, '\r');
100005be:	210d      	movs	r1, #13
100005c0:	6878      	ldr	r0, [r7, #4]
100005c2:	f7ff ffdb 	bl	1000057c <uart_putc_raw>
#endif
    uart_putc_raw(uart, c);
100005c6:	78fb      	ldrb	r3, [r7, #3]
100005c8:	4619      	mov	r1, r3
100005ca:	6878      	ldr	r0, [r7, #4]
100005cc:	f7ff ffd6 	bl	1000057c <uart_putc_raw>
}
100005d0:	bf00      	nop
100005d2:	3708      	adds	r7, #8
100005d4:	46bd      	mov	sp, r7
100005d6:	bd80      	pop	{r7, pc}
100005d8:	2000256c 	.word	0x2000256c

100005dc <uart_getc>:
 * This function will block until a character has been read
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \return The character read.
 */
static inline char uart_getc(uart_inst_t *uart) {
100005dc:	b580      	push	{r7, lr}
100005de:	b084      	sub	sp, #16
100005e0:	af00      	add	r7, sp, #0
100005e2:	6078      	str	r0, [r7, #4]
    char c;
    uart_read_blocking(uart, (uint8_t *) &c, 1);
100005e4:	f107 030f 	add.w	r3, r7, #15
100005e8:	2201      	movs	r2, #1
100005ea:	4619      	mov	r1, r3
100005ec:	6878      	ldr	r0, [r7, #4]
100005ee:	f7ff ff9c 	bl	1000052a <uart_read_blocking>
    return c;
100005f2:	7bfb      	ldrb	r3, [r7, #15]
}
100005f4:	4618      	mov	r0, r3
100005f6:	3710      	adds	r7, #16
100005f8:	46bd      	mov	sp, r7
100005fa:	bd80      	pop	{r7, pc}

100005fc <edub_init>:
#define PICOEDUB_COL0_PIN      10
#define PICOEDUB_COL1_PIN      11
#define PICOEDUB_COL2_PIN      12
#define PICOEDUB_COL3_PIN      13

void edub_init(){
100005fc:	b580      	push	{r7, lr}
100005fe:	af00      	add	r7, sp, #0
    //LED0
    gpio_init(PICOEDUB_LED0_PIN);
10000600:	2001      	movs	r0, #1
10000602:	f000 fb2b 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_LED0_PIN, GPIO_OUT);
10000606:	2101      	movs	r1, #1
10000608:	2001      	movs	r0, #1
1000060a:	f7ff fe5b 	bl	100002c4 <gpio_set_dir>

    //LED1
    gpio_init(PICOEDUB_LED1_PIN);
1000060e:	2000      	movs	r0, #0
10000610:	f000 fb24 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_LED1_PIN, GPIO_OUT);
10000614:	2101      	movs	r1, #1
10000616:	2000      	movs	r0, #0
10000618:	f7ff fe54 	bl	100002c4 <gpio_set_dir>

    //LED2
    gpio_init(PICOEDUB_LED2_PIN);
1000061c:	2002      	movs	r0, #2
1000061e:	f000 fb1d 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_LED2_PIN, GPIO_OUT);
10000622:	2101      	movs	r1, #1
10000624:	2002      	movs	r0, #2
10000626:	f7ff fe4d 	bl	100002c4 <gpio_set_dir>

    //LED3
    gpio_init(PICOEDUB_LED3_PIN);
1000062a:	2003      	movs	r0, #3
1000062c:	f000 fb16 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_LED3_PIN, GPIO_OUT);
10000630:	2101      	movs	r1, #1
10000632:	2003      	movs	r0, #3
10000634:	f7ff fe46 	bl	100002c4 <gpio_set_dir>

    //SW2R3
    gpio_init(PICOEDUB_SW2R3_PIN);
10000638:	2009      	movs	r0, #9
1000063a:	f000 fb0f 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_SW2R3_PIN, GPIO_IN);
1000063e:	2100      	movs	r1, #0
10000640:	2009      	movs	r0, #9
10000642:	f7ff fe3f 	bl	100002c4 <gpio_set_dir>
    
    //SW3R2
    gpio_init(PICOEDUB_SW3R2_PIN);
10000646:	2008      	movs	r0, #8
10000648:	f000 fb08 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_SW3R2_PIN, GPIO_IN);
1000064c:	2100      	movs	r1, #0
1000064e:	2008      	movs	r0, #8
10000650:	f7ff fe38 	bl	100002c4 <gpio_set_dir>

    //SW4R1
    gpio_init(PICOEDUB_SW4R1_PIN);
10000654:	2007      	movs	r0, #7
10000656:	f000 fb01 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_SW4R1_PIN, GPIO_IN);
1000065a:	2100      	movs	r1, #0
1000065c:	2007      	movs	r0, #7
1000065e:	f7ff fe31 	bl	100002c4 <gpio_set_dir>

    //SW5R0
    gpio_init(PICOEDUB_SW5R0_PIN);
10000662:	2006      	movs	r0, #6
10000664:	f000 fafa 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_SW5R0_PIN, GPIO_IN);
10000668:	2100      	movs	r1, #0
1000066a:	2006      	movs	r0, #6
1000066c:	f7ff fe2a 	bl	100002c4 <gpio_set_dir>

    //COL0
    gpio_init(PICOEDUB_COL0_PIN);
10000670:	200a      	movs	r0, #10
10000672:	f000 faf3 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_COL0_PIN, GPIO_IN);
10000676:	2100      	movs	r1, #0
10000678:	200a      	movs	r0, #10
1000067a:	f7ff fe23 	bl	100002c4 <gpio_set_dir>

    //COL1
    gpio_init(PICOEDUB_COL1_PIN);
1000067e:	200b      	movs	r0, #11
10000680:	f000 faec 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_COL1_PIN, GPIO_IN);
10000684:	2100      	movs	r1, #0
10000686:	200b      	movs	r0, #11
10000688:	f7ff fe1c 	bl	100002c4 <gpio_set_dir>
    
    //COL2
    gpio_init(PICOEDUB_COL2_PIN);
1000068c:	200c      	movs	r0, #12
1000068e:	f000 fae5 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_COL2_PIN, GPIO_IN);
10000692:	2100      	movs	r1, #0
10000694:	200c      	movs	r0, #12
10000696:	f7ff fe15 	bl	100002c4 <gpio_set_dir>
    
    //COL3
    gpio_init(PICOEDUB_COL3_PIN);
1000069a:	200d      	movs	r0, #13
1000069c:	f000 fade 	bl	10000c5c <gpio_init>
    gpio_set_dir(PICOEDUB_COL3_PIN, GPIO_IN);
100006a0:	2100      	movs	r1, #0
100006a2:	200d      	movs	r0, #13
100006a4:	f7ff fe0e 	bl	100002c4 <gpio_set_dir>
}
100006a8:	bf00      	nop
100006aa:	bd80      	pop	{r7, pc}

100006ac <pico_set_LED3>:
void pico_set_LED2(bool led_on) {
    // Just set the GPIO on or off
    gpio_put(PICOEDUB_LED2_PIN, led_on);
}

void pico_set_LED3(bool led_on) {
100006ac:	b580      	push	{r7, lr}
100006ae:	b082      	sub	sp, #8
100006b0:	af00      	add	r7, sp, #0
100006b2:	4603      	mov	r3, r0
100006b4:	71fb      	strb	r3, [r7, #7]
    // Just set the GPIO on or off
    gpio_put(PICOEDUB_LED3_PIN, led_on);
100006b6:	79fb      	ldrb	r3, [r7, #7]
100006b8:	4619      	mov	r1, r3
100006ba:	2003      	movs	r0, #3
100006bc:	f7ff fded 	bl	1000029a <gpio_put>
}
100006c0:	bf00      	nop
100006c2:	3708      	adds	r7, #8
100006c4:	46bd      	mov	sp, r7
100006c6:	bd80      	pop	{r7, pc}

100006c8 <alarm_irq>:

// This global variable controls the length of my timer and the period 
// of the LED toggling. It's default is a second (half on, half off)
uint16_t u16_period = 1000;

static void alarm_irq(void) {
100006c8:	b5b0      	push	{r4, r5, r7, lr}
100006ca:	b084      	sub	sp, #16
100006cc:	af00      	add	r7, sp, #0
100006ce:	4b1a      	ldr	r3, [pc, #104]	@ (10000738 <alarm_irq+0x70>)
100006d0:	607b      	str	r3, [r7, #4]
100006d2:	2301      	movs	r3, #1
100006d4:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100006d6:	687b      	ldr	r3, [r7, #4]
100006d8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
100006dc:	461a      	mov	r2, r3
100006de:	683b      	ldr	r3, [r7, #0]
100006e0:	6013      	str	r3, [r2, #0]
}
100006e2:	bf00      	nop
    // Clear the alarm irq
    hw_clear_bits(&timer_hw->intr, 1u << ALARM_NUM);
    
    // Here I toggle and set the LED
    b_led_flag = !b_led_flag;
100006e4:	4b15      	ldr	r3, [pc, #84]	@ (1000073c <alarm_irq+0x74>)
100006e6:	781b      	ldrb	r3, [r3, #0]
100006e8:	2b00      	cmp	r3, #0
100006ea:	bf14      	ite	ne
100006ec:	2301      	movne	r3, #1
100006ee:	2300      	moveq	r3, #0
100006f0:	b2db      	uxtb	r3, r3
100006f2:	f083 0301 	eor.w	r3, r3, #1
100006f6:	b2db      	uxtb	r3, r3
100006f8:	f003 0301 	and.w	r3, r3, #1
100006fc:	b2da      	uxtb	r2, r3
100006fe:	4b0f      	ldr	r3, [pc, #60]	@ (1000073c <alarm_irq+0x74>)
10000700:	701a      	strb	r2, [r3, #0]
    pico_set_LED3(b_led_flag);
10000702:	4b0e      	ldr	r3, [pc, #56]	@ (1000073c <alarm_irq+0x74>)
10000704:	781b      	ldrb	r3, [r3, #0]
10000706:	4618      	mov	r0, r3
10000708:	f7ff ffd0 	bl	100006ac <pico_set_LED3>
    
    // This computes the next clock intstance at which the
    // alarm will "fire". The 500 * modifies u16_period to fit 
    // the how the alarm works
    uint64_t target = timer_hw->timerawl + (500 * u16_period);
1000070c:	4b0c      	ldr	r3, [pc, #48]	@ (10000740 <alarm_irq+0x78>)
1000070e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10000710:	4a0c      	ldr	r2, [pc, #48]	@ (10000744 <alarm_irq+0x7c>)
10000712:	8812      	ldrh	r2, [r2, #0]
10000714:	4611      	mov	r1, r2
10000716:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
1000071a:	fb01 f202 	mul.w	r2, r1, r2
1000071e:	4413      	add	r3, r2
10000720:	2200      	movs	r2, #0
10000722:	461c      	mov	r4, r3
10000724:	4615      	mov	r5, r2
10000726:	e9c7 4502 	strd	r4, r5, [r7, #8]

    // Write the lower 32 bits of the target time to the alarm which
    // will arm it
    timer_hw->alarm[ALARM_NUM] = (uint32_t) target;
1000072a:	4a05      	ldr	r2, [pc, #20]	@ (10000740 <alarm_irq+0x78>)
1000072c:	68bb      	ldr	r3, [r7, #8]
1000072e:	6113      	str	r3, [r2, #16]
}
10000730:	bf00      	nop
10000732:	3710      	adds	r7, #16
10000734:	46bd      	mov	sp, r7
10000736:	bdb0      	pop	{r4, r5, r7, pc}
10000738:	400b003c 	.word	0x400b003c
1000073c:	20002584 	.word	0x20002584
10000740:	400b0000 	.word	0x400b0000
10000744:	20001518 	.word	0x20001518

10000748 <on_uart_rx>:
// pass the value to the buffers, then send from uart.
// I made it global to prevent further isr instructions.
uint8_t u8_ch;
uint8_t *pu8_ch = &u8_ch;

void on_uart_rx() {
10000748:	b580      	push	{r7, lr}
1000074a:	af00      	add	r7, sp, #0
    watchdog_update();
1000074c:	f002 fed4 	bl	100034f8 <watchdog_update>
    if(!u8_read_or_write){
10000750:	4b1b      	ldr	r3, [pc, #108]	@ (100007c0 <on_uart_rx+0x78>)
10000752:	781b      	ldrb	r3, [r3, #0]
10000754:	2b00      	cmp	r3, #0
10000756:	d10e      	bne.n	10000776 <on_uart_rx+0x2e>
        u8_ch = uart_getc(UART_ID); //if I'm receiving, i get the value and place
10000758:	481a      	ldr	r0, [pc, #104]	@ (100007c4 <on_uart_rx+0x7c>)
1000075a:	f7ff ff3f 	bl	100005dc <uart_getc>
1000075e:	4603      	mov	r3, r0
10000760:	461a      	mov	r2, r3
10000762:	4b19      	ldr	r3, [pc, #100]	@ (100007c8 <on_uart_rx+0x80>)
10000764:	701a      	strb	r2, [r3, #0]
        cb_push(p_cb_in, pu8_ch);   //it in the appropriate buffer
10000766:	4b19      	ldr	r3, [pc, #100]	@ (100007cc <on_uart_rx+0x84>)
10000768:	681b      	ldr	r3, [r3, #0]
1000076a:	4a19      	ldr	r2, [pc, #100]	@ (100007d0 <on_uart_rx+0x88>)
1000076c:	6812      	ldr	r2, [r2, #0]
1000076e:	4611      	mov	r1, r2
10000770:	4618      	mov	r0, r3
10000772:	f000 f91b 	bl	100009ac <cb_push>
    }
    if (u8_read_or_write) {
10000776:	4b12      	ldr	r3, [pc, #72]	@ (100007c0 <on_uart_rx+0x78>)
10000778:	781b      	ldrb	r3, [r3, #0]
1000077a:	2b00      	cmp	r3, #0
1000077c:	d01d      	beq.n	100007ba <on_uart_rx+0x72>
        if(!cb_is_empty(p_cb_out)){         //if I am sending, I pop my buffer after being 
1000077e:	4b15      	ldr	r3, [pc, #84]	@ (100007d4 <on_uart_rx+0x8c>)
10000780:	681b      	ldr	r3, [r3, #0]
10000782:	4618      	mov	r0, r3
10000784:	f000 f9b0 	bl	10000ae8 <cb_is_empty>
10000788:	4603      	mov	r3, r0
1000078a:	2b00      	cmp	r3, #0
1000078c:	d10d      	bne.n	100007aa <on_uart_rx+0x62>
            cb_pop_next(p_cb_out, pu8_ch);  //sure it's not empty and output it to uart
1000078e:	4b11      	ldr	r3, [pc, #68]	@ (100007d4 <on_uart_rx+0x8c>)
10000790:	681b      	ldr	r3, [r3, #0]
10000792:	4a0f      	ldr	r2, [pc, #60]	@ (100007d0 <on_uart_rx+0x88>)
10000794:	6812      	ldr	r2, [r2, #0]
10000796:	4611      	mov	r1, r2
10000798:	4618      	mov	r0, r3
1000079a:	f000 f956 	bl	10000a4a <cb_pop_next>
            uart_putc(UART_ID, u8_ch);
1000079e:	4b0a      	ldr	r3, [pc, #40]	@ (100007c8 <on_uart_rx+0x80>)
100007a0:	781b      	ldrb	r3, [r3, #0]
100007a2:	4619      	mov	r1, r3
100007a4:	4807      	ldr	r0, [pc, #28]	@ (100007c4 <on_uart_rx+0x7c>)
100007a6:	f7ff fef9 	bl	1000059c <uart_putc>
        }
        u8_read_or_write = 0;                       //Here I reassign my this variable so that the isr
100007aa:	4b05      	ldr	r3, [pc, #20]	@ (100007c0 <on_uart_rx+0x78>)
100007ac:	2200      	movs	r2, #0
100007ae:	701a      	strb	r2, [r3, #0]
        uart_set_irq_enables(UART_ID, true, false); //will receive, and I disable the TX interrupt.
100007b0:	2200      	movs	r2, #0
100007b2:	2101      	movs	r1, #1
100007b4:	4803      	ldr	r0, [pc, #12]	@ (100007c4 <on_uart_rx+0x7c>)
100007b6:	f7ff fe55 	bl	10000464 <uart_set_irq_enables>
    }
}
100007ba:	bf00      	nop
100007bc:	bd80      	pop	{r7, pc}
100007be:	bf00      	nop
100007c0:	2000258a 	.word	0x2000258a
100007c4:	40070000 	.word	0x40070000
100007c8:	20002589 	.word	0x20002589
100007cc:	2000151c 	.word	0x2000151c
100007d0:	20001524 	.word	0x20001524
100007d4:	20001520 	.word	0x20001520

100007d8 <main>:

int main() {
100007d8:	b5b0      	push	{r4, r5, r7, lr}
100007da:	b086      	sub	sp, #24
100007dc:	af00      	add	r7, sp, #0
    //I run my general initializations
    stdio_init_all();
100007de:	f005 fad5 	bl	10005d8c <stdio_init_all>
    edub_init();
100007e2:	f7ff ff0b 	bl	100005fc <edub_init>
    watchdog_enable(10000, 1);
100007e6:	2101      	movs	r1, #1
100007e8:	f242 7010 	movw	r0, #10000	@ 0x2710
100007ec:	f002 ff06 	bl	100035fc <watchdog_enable>

    i2c_init(i2c_default, 100 * 1000);
100007f0:	4952      	ldr	r1, [pc, #328]	@ (1000093c <main+0x164>)
100007f2:	4853      	ldr	r0, [pc, #332]	@ (10000940 <main+0x168>)
100007f4:	f00a facc 	bl	1000ad90 <i2c_init>
    gpio_set_function(PICO_DEFAULT_I2C_SDA_PIN, GPIO_FUNC_I2C);
100007f8:	2103      	movs	r1, #3
100007fa:	2004      	movs	r0, #4
100007fc:	f000 f9b6 	bl	10000b6c <gpio_set_function>
    gpio_set_function(PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C);
10000800:	2103      	movs	r1, #3
10000802:	2005      	movs	r0, #5
10000804:	f000 f9b2 	bl	10000b6c <gpio_set_function>
    gpio_pull_up(PICO_DEFAULT_I2C_SDA_PIN);
10000808:	2004      	movs	r0, #4
1000080a:	f7ff fd39 	bl	10000280 <gpio_pull_up>
    gpio_pull_up(PICO_DEFAULT_I2C_SCL_PIN);
1000080e:	2005      	movs	r0, #5
10000810:	f7ff fd36 	bl	10000280 <gpio_pull_up>
    // Make the I2C pins available to picotool
    //bi_decl(bi_2pins_with_func(PICO_DEFAULT_I2C_SDA_PIN, PICO_DEFAULT_I2C_SCL_PIN, GPIO_FUNC_I2C));

    // Set up our UART with a basic baud rate.
    uart_init(UART_ID, BAUD_RATE);
10000814:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
10000818:	484a      	ldr	r0, [pc, #296]	@ (10000944 <main+0x16c>)
1000081a:	f002 fada 	bl	10002dd2 <uart_init>

    // Set the TX and RX pins by using the function select on the GPIO
    // Set datasheet for more information on function select
    gpio_set_function(UART_TX_PIN, UART_FUNCSEL_NUM(UART_ID, UART_TX_PIN));
1000081e:	2102      	movs	r1, #2
10000820:	2000      	movs	r0, #0
10000822:	f000 f9a3 	bl	10000b6c <gpio_set_function>
    gpio_set_function(UART_RX_PIN, UART_FUNCSEL_NUM(UART_ID, UART_RX_PIN));
10000826:	2102      	movs	r1, #2
10000828:	2001      	movs	r0, #1
1000082a:	f000 f99f 	bl	10000b6c <gpio_set_function>

    // Set UART flow control CTS/RTS, we don't want these, so turn them off
    uart_set_hw_flow(UART_ID, false, false);
1000082e:	2200      	movs	r2, #0
10000830:	2100      	movs	r1, #0
10000832:	4844      	ldr	r0, [pc, #272]	@ (10000944 <main+0x16c>)
10000834:	f7ff fd7c 	bl	10000330 <uart_set_hw_flow>

    // Set our data format
    uart_set_format(UART_ID, DATA_BITS, STOP_BITS, PARITY);
10000838:	2302      	movs	r3, #2
1000083a:	2201      	movs	r2, #1
1000083c:	2108      	movs	r1, #8
1000083e:	4841      	ldr	r0, [pc, #260]	@ (10000944 <main+0x16c>)
10000840:	f002 fbf7 	bl	10003032 <uart_set_format>

    // Turn off FIFO's - we want to do this character by character
    uart_set_fifo_enabled(UART_ID, false);
10000844:	2100      	movs	r1, #0
10000846:	483f      	ldr	r0, [pc, #252]	@ (10000944 <main+0x16c>)
10000848:	f002 fc18 	bl	1000307c <uart_set_fifo_enabled>

    // We need to set up the handlers first
    // Select correct interrupts for the UART we are using
    int UART_IRQ = UART_ID == uart0 ? UART0_IRQ : UART1_IRQ;
1000084c:	2321      	movs	r3, #33	@ 0x21
1000084e:	617b      	str	r3, [r7, #20]

    // Set up and enable the interrupt handlers
    irq_set_exclusive_handler(UART_IRQ, on_uart_rx);
10000850:	697b      	ldr	r3, [r7, #20]
10000852:	493d      	ldr	r1, [pc, #244]	@ (10000948 <main+0x170>)
10000854:	4618      	mov	r0, r3
10000856:	f000 fcb9 	bl	100011cc <irq_set_exclusive_handler>

    //irq_set_exclusive_handler(UART_IRQ, on_uart_tx);
    irq_set_enabled(UART_IRQ, true);
1000085a:	697b      	ldr	r3, [r7, #20]
1000085c:	2101      	movs	r1, #1
1000085e:	4618      	mov	r0, r3
10000860:	f000 fbe6 	bl	10001030 <irq_set_enabled>

    // Enable the UART to send interrupts for RX and TX
    uart_set_irq_enables(UART_ID, true, false); // Enable both RX and TX interrupts
10000864:	2200      	movs	r2, #0
10000866:	2101      	movs	r1, #1
10000868:	4836      	ldr	r0, [pc, #216]	@ (10000944 <main+0x16c>)
1000086a:	f7ff fdfb 	bl	10000464 <uart_set_irq_enables>
1000086e:	4b37      	ldr	r3, [pc, #220]	@ (1000094c <main+0x174>)
10000870:	607b      	str	r3, [r7, #4]
10000872:	2301      	movs	r3, #1
10000874:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10000876:	687b      	ldr	r3, [r7, #4]
10000878:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
1000087c:	461a      	mov	r2, r3
1000087e:	683b      	ldr	r3, [r7, #0]
10000880:	6013      	str	r3, [r2, #0]
}
10000882:	bf00      	nop

    // Enable the interrupt for our alarm (the timer outputs 4 alarm irqs)
    hw_set_bits(&timer_hw->inte, 1u << ALARM_NUM);

    // Set irq handler for alarm irq
    irq_set_exclusive_handler(ALARM_IRQ, alarm_irq);
10000884:	2100      	movs	r1, #0
10000886:	4832      	ldr	r0, [pc, #200]	@ (10000950 <main+0x178>)
10000888:	f7ff fce2 	bl	10000250 <timer_hardware_alarm_get_irq_num>
1000088c:	4603      	mov	r3, r0
1000088e:	4931      	ldr	r1, [pc, #196]	@ (10000954 <main+0x17c>)
10000890:	4618      	mov	r0, r3
10000892:	f000 fc9b 	bl	100011cc <irq_set_exclusive_handler>

    // Enable the alarm irq
    irq_set_enabled(ALARM_IRQ, true);
10000896:	2100      	movs	r1, #0
10000898:	482d      	ldr	r0, [pc, #180]	@ (10000950 <main+0x178>)
1000089a:	f7ff fcd9 	bl	10000250 <timer_hardware_alarm_get_irq_num>
1000089e:	4603      	mov	r3, r0
100008a0:	2101      	movs	r1, #1
100008a2:	4618      	mov	r0, r3
100008a4:	f000 fbc4 	bl	10001030 <irq_set_enabled>
    // This is the first time the alarmed will be armed.
    // Afterwards, it'll be alarmed through the isr.
    // Alarm is only 32 bits so if trying to delay more
    // than that need to be careful and keep track of the upper
    // bits
    uint64_t target = timer_hw->timerawl + (500 * u16_period);
100008a8:	4b29      	ldr	r3, [pc, #164]	@ (10000950 <main+0x178>)
100008aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100008ac:	4a2a      	ldr	r2, [pc, #168]	@ (10000958 <main+0x180>)
100008ae:	8812      	ldrh	r2, [r2, #0]
100008b0:	4611      	mov	r1, r2
100008b2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
100008b6:	fb01 f202 	mul.w	r2, r1, r2
100008ba:	4413      	add	r3, r2
100008bc:	2200      	movs	r2, #0
100008be:	461c      	mov	r4, r3
100008c0:	4615      	mov	r5, r2
100008c2:	e9c7 4502 	strd	r4, r5, [r7, #8]

    // Write the lower 32 bits of the target time to the alarm which
    // will arm it
    timer_hw->alarm[ALARM_NUM] = (uint32_t) target;
100008c6:	4a22      	ldr	r2, [pc, #136]	@ (10000950 <main+0x178>)
100008c8:	68bb      	ldr	r3, [r7, #8]
100008ca:	6113      	str	r3, [r2, #16]

    // I initialize both circular buffers
    cb_init(p_cb_in);
100008cc:	4b23      	ldr	r3, [pc, #140]	@ (1000095c <main+0x184>)
100008ce:	681b      	ldr	r3, [r3, #0]
100008d0:	4618      	mov	r0, r3
100008d2:	f000 f84b 	bl	1000096c <cb_init>
    cb_init(p_cb_out);
100008d6:	4b22      	ldr	r3, [pc, #136]	@ (10000960 <main+0x188>)
100008d8:	681b      	ldr	r3, [r3, #0]
100008da:	4618      	mov	r0, r3
100008dc:	f000 f846 	bl	1000096c <cb_init>

    // There is a small odditywhere the first 
    // bit printed to UART isn't processed. I can't tell
    // if this a function of the UART or the serial monitor
    // app I am using, but printing an emtpy space solves the issue.
    uart_putc(UART_ID, ' ');
100008e0:	2120      	movs	r1, #32
100008e2:	4818      	ldr	r0, [pc, #96]	@ (10000944 <main+0x16c>)
100008e4:	f7ff fe5a 	bl	1000059c <uart_putc>

    while (1) {

        if(!cb_is_empty(p_cb_in)){          //If my input cb holds values, 
100008e8:	4b1c      	ldr	r3, [pc, #112]	@ (1000095c <main+0x184>)
100008ea:	681b      	ldr	r3, [r3, #0]
100008ec:	4618      	mov	r0, r3
100008ee:	f000 f8fb 	bl	10000ae8 <cb_is_empty>
100008f2:	4603      	mov	r3, r0
100008f4:	2b00      	cmp	r3, #0
100008f6:	d10f      	bne.n	10000918 <main+0x140>
            cb_pop_next(p_cb_in, pu8_ch);   //we pop the next one
100008f8:	4b18      	ldr	r3, [pc, #96]	@ (1000095c <main+0x184>)
100008fa:	681b      	ldr	r3, [r3, #0]
100008fc:	4a19      	ldr	r2, [pc, #100]	@ (10000964 <main+0x18c>)
100008fe:	6812      	ldr	r2, [r2, #0]
10000900:	4611      	mov	r1, r2
10000902:	4618      	mov	r0, r3
10000904:	f000 f8a1 	bl	10000a4a <cb_pop_next>
            cb_push(p_cb_out, pu8_ch);
10000908:	4b15      	ldr	r3, [pc, #84]	@ (10000960 <main+0x188>)
1000090a:	681b      	ldr	r3, [r3, #0]
1000090c:	4a15      	ldr	r2, [pc, #84]	@ (10000964 <main+0x18c>)
1000090e:	6812      	ldr	r2, [r2, #0]
10000910:	4611      	mov	r1, r2
10000912:	4618      	mov	r0, r3
10000914:	f000 f84a 	bl	100009ac <cb_push>
        }

        if(!cb_is_empty(p_cb_out)){                     //if the output buffer isn't empty, enable it's IRQ and set the ISR to write
10000918:	4b11      	ldr	r3, [pc, #68]	@ (10000960 <main+0x188>)
1000091a:	681b      	ldr	r3, [r3, #0]
1000091c:	4618      	mov	r0, r3
1000091e:	f000 f8e3 	bl	10000ae8 <cb_is_empty>
10000922:	4603      	mov	r3, r0
10000924:	2b00      	cmp	r3, #0
10000926:	d1df      	bne.n	100008e8 <main+0x110>
            u8_read_or_write = 1;                       //through the u8_read_or_write variable
10000928:	4b0f      	ldr	r3, [pc, #60]	@ (10000968 <main+0x190>)
1000092a:	2201      	movs	r2, #1
1000092c:	701a      	strb	r2, [r3, #0]
            uart_set_irq_enables(UART_ID, true, true);
1000092e:	2201      	movs	r2, #1
10000930:	2101      	movs	r1, #1
10000932:	4804      	ldr	r0, [pc, #16]	@ (10000944 <main+0x16c>)
10000934:	f7ff fd96 	bl	10000464 <uart_set_irq_enables>
        if(!cb_is_empty(p_cb_in)){          //If my input cb holds values, 
10000938:	e7d6      	b.n	100008e8 <main+0x110>
1000093a:	bf00      	nop
1000093c:	000186a0 	.word	0x000186a0
10000940:	200015c4 	.word	0x200015c4
10000944:	40070000 	.word	0x40070000
10000948:	10000749 	.word	0x10000749
1000094c:	400b0040 	.word	0x400b0040
10000950:	400b0000 	.word	0x400b0000
10000954:	100006c9 	.word	0x100006c9
10000958:	20001518 	.word	0x20001518
1000095c:	2000151c 	.word	0x2000151c
10000960:	20001520 	.word	0x20001520
10000964:	20001524 	.word	0x20001524
10000968:	2000258a 	.word	0x2000258a

1000096c <cb_init>:
#include "circular_buffer.h"

void cb_init(circular_buffer *cb) { 
1000096c:	b480      	push	{r7}
1000096e:	b083      	sub	sp, #12
10000970:	af00      	add	r7, sp, #0
10000972:	6078      	str	r0, [r7, #4]
    cb->last_index = &cb->buffer[BUFFER_SIZE - 1];        //I set the size
10000974:	687b      	ldr	r3, [r7, #4]
10000976:	f103 02ff 	add.w	r2, r3, #255	@ 0xff
1000097a:	687b      	ldr	r3, [r7, #4]
1000097c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    cb->head = cb->buffer;          //I set both at starting point
10000980:	687a      	ldr	r2, [r7, #4]
10000982:	687b      	ldr	r3, [r7, #4]
10000984:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    cb->tail = cb->buffer;
10000988:	687a      	ldr	r2, [r7, #4]
1000098a:	687b      	ldr	r3, [r7, #4]
1000098c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    cb->full = 0;       //full is false
10000990:	687b      	ldr	r3, [r7, #4]
10000992:	2200      	movs	r2, #0
10000994:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
    cb->empty = 1;       //empty is true
10000998:	687b      	ldr	r3, [r7, #4]
1000099a:	2201      	movs	r2, #1
1000099c:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
}
100009a0:	bf00      	nop
100009a2:	370c      	adds	r7, #12
100009a4:	46bd      	mov	sp, r7
100009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100009aa:	4770      	bx	lr

100009ac <cb_push>:

int cb_push(circular_buffer *cb, uint8_t *data){
100009ac:	b480      	push	{r7}
100009ae:	b087      	sub	sp, #28
100009b0:	af00      	add	r7, sp, #0
100009b2:	6078      	str	r0, [r7, #4]
100009b4:	6039      	str	r1, [r7, #0]
    pico_default_asm_volatile (
        "csrrci %0, mstatus, 0x8\n"
        : "=r" (status) :: "memory"
    );
#else
    pico_default_asm_volatile (
100009b6:	f3ef 8310 	mrs	r3, PRIMASK
100009ba:	b672      	cpsid	i
100009bc:	613b      	str	r3, [r7, #16]
            "mrs %0, PRIMASK\n"
            "cpsid i"
            : "=r" (status) :: "memory");
#endif
    return status;
100009be:	693b      	ldr	r3, [r7, #16]
    //This should protect the code from interrupts
    uint32_t u32_register = save_and_disable_interrupts(); 
100009c0:	617b      	str	r3, [r7, #20]
   // Check if the buffer is full
    if (cb->full) {
100009c2:	687b      	ldr	r3, [r7, #4]
100009c4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
100009c8:	2b00      	cmp	r3, #0
100009ca:	d008      	beq.n	100009de <cb_push+0x32>
100009cc:	697b      	ldr	r3, [r7, #20]
100009ce:	60fb      	str	r3, [r7, #12]
    } else {
        riscv_clear_csr(mstatus, 8);
    }
    __compiler_memory_barrier();
#else
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
100009d0:	68fb      	ldr	r3, [r7, #12]
100009d2:	f383 8810 	msr	PRIMASK, r3
#endif
}
100009d6:	bf00      	nop
        restore_interrupts(u32_register);
        return -1; // Buffer is full
100009d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100009dc:	e02f      	b.n	10000a3e <cb_push+0x92>
    }

    // Write the data to the buffer
    *cb->head = *data;
100009de:	687b      	ldr	r3, [r7, #4]
100009e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
100009e4:	683a      	ldr	r2, [r7, #0]
100009e6:	7812      	ldrb	r2, [r2, #0]
100009e8:	701a      	strb	r2, [r3, #0]

    // Move the head forward
    cb->head++;
100009ea:	687b      	ldr	r3, [r7, #4]
100009ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
100009f0:	1c5a      	adds	r2, r3, #1
100009f2:	687b      	ldr	r3, [r7, #4]
100009f4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
       
    // wrap around if I am at the last index
    if (cb->head > cb->last_index) {
100009f8:	687b      	ldr	r3, [r7, #4]
100009fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
100009fe:	687b      	ldr	r3, [r7, #4]
10000a00:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10000a04:	429a      	cmp	r2, r3
10000a06:	d903      	bls.n	10000a10 <cb_push+0x64>
        cb->head = cb->buffer; 
10000a08:	687a      	ldr	r2, [r7, #4]
10000a0a:	687b      	ldr	r3, [r7, #4]
10000a0c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    
    // Update the full and empty status
    cb->empty = 0;
10000a10:	687b      	ldr	r3, [r7, #4]
10000a12:	2200      	movs	r2, #0
10000a14:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
    if (cb->head == cb->tail) {
10000a18:	687b      	ldr	r3, [r7, #4]
10000a1a:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
10000a1e:	687b      	ldr	r3, [r7, #4]
10000a20:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10000a24:	429a      	cmp	r2, r3
10000a26:	d103      	bne.n	10000a30 <cb_push+0x84>
        cb->full = 1;       // Buffer is full
10000a28:	687b      	ldr	r3, [r7, #4]
10000a2a:	2201      	movs	r2, #1
10000a2c:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
10000a30:	697b      	ldr	r3, [r7, #20]
10000a32:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10000a34:	68bb      	ldr	r3, [r7, #8]
10000a36:	f383 8810 	msr	PRIMASK, r3
}
10000a3a:	bf00      	nop
    }

    restore_interrupts(u32_register);

    return(0);
10000a3c:	2300      	movs	r3, #0
};
10000a3e:	4618      	mov	r0, r3
10000a40:	371c      	adds	r7, #28
10000a42:	46bd      	mov	sp, r7
10000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a48:	4770      	bx	lr

10000a4a <cb_pop_next>:

int cb_pop_next(circular_buffer *cb, uint8_t *data){
10000a4a:	b480      	push	{r7}
10000a4c:	b087      	sub	sp, #28
10000a4e:	af00      	add	r7, sp, #0
10000a50:	6078      	str	r0, [r7, #4]
10000a52:	6039      	str	r1, [r7, #0]
    pico_default_asm_volatile (
10000a54:	f3ef 8310 	mrs	r3, PRIMASK
10000a58:	b672      	cpsid	i
10000a5a:	613b      	str	r3, [r7, #16]
    return status;
10000a5c:	693b      	ldr	r3, [r7, #16]
    //This should protect the code from interrupts
    uint32_t u32_register = save_and_disable_interrupts();
10000a5e:	617b      	str	r3, [r7, #20]
    // Check if the buffer is empty
    if (cb->empty) {
10000a60:	687b      	ldr	r3, [r7, #4]
10000a62:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
10000a66:	2b00      	cmp	r3, #0
10000a68:	d008      	beq.n	10000a7c <cb_pop_next+0x32>
10000a6a:	697b      	ldr	r3, [r7, #20]
10000a6c:	60fb      	str	r3, [r7, #12]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10000a6e:	68fb      	ldr	r3, [r7, #12]
10000a70:	f383 8810 	msr	PRIMASK, r3
}
10000a74:	bf00      	nop
        restore_interrupts(u32_register);
        return -1; // Buffer is empty
10000a76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10000a7a:	e02f      	b.n	10000adc <cb_pop_next+0x92>
    }

    // Read the data from the buffer
    *data = *cb->tail;
10000a7c:	687b      	ldr	r3, [r7, #4]
10000a7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10000a82:	781a      	ldrb	r2, [r3, #0]
10000a84:	683b      	ldr	r3, [r7, #0]
10000a86:	701a      	strb	r2, [r3, #0]

    // Move the tail forward
    cb->tail++; 
10000a88:	687b      	ldr	r3, [r7, #4]
10000a8a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10000a8e:	1c5a      	adds	r2, r3, #1
10000a90:	687b      	ldr	r3, [r7, #4]
10000a92:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    // Update the full and empty status
    cb->full = 0;
10000a96:	687b      	ldr	r3, [r7, #4]
10000a98:	2200      	movs	r2, #0
10000a9a:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

    // if tail reaches the end, wrap around
    if (cb->tail > cb->last_index) {
10000a9e:	687b      	ldr	r3, [r7, #4]
10000aa0:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
10000aa4:	687b      	ldr	r3, [r7, #4]
10000aa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
10000aaa:	429a      	cmp	r2, r3
10000aac:	d903      	bls.n	10000ab6 <cb_pop_next+0x6c>
        cb->tail = cb->buffer; 
10000aae:	687a      	ldr	r2, [r7, #4]
10000ab0:	687b      	ldr	r3, [r7, #4]
10000ab2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    }

    if (cb->head == cb->tail) {
10000ab6:	687b      	ldr	r3, [r7, #4]
10000ab8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
10000abc:	687b      	ldr	r3, [r7, #4]
10000abe:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
10000ac2:	429a      	cmp	r2, r3
10000ac4:	d103      	bne.n	10000ace <cb_pop_next+0x84>
        cb->empty = 1; // Buffer is now empty
10000ac6:	687b      	ldr	r3, [r7, #4]
10000ac8:	2201      	movs	r2, #1
10000aca:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
10000ace:	697b      	ldr	r3, [r7, #20]
10000ad0:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10000ad2:	68bb      	ldr	r3, [r7, #8]
10000ad4:	f383 8810 	msr	PRIMASK, r3
}
10000ad8:	bf00      	nop
    }

    //restore interrupts
    restore_interrupts(u32_register);

    return(0);
10000ada:	2300      	movs	r3, #0
};
10000adc:	4618      	mov	r0, r3
10000ade:	371c      	adds	r7, #28
10000ae0:	46bd      	mov	sp, r7
10000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ae6:	4770      	bx	lr

10000ae8 <cb_is_empty>:
    restore_interrupts(u32_register);
    return(0);
};

//simply return empty var
uint8_t cb_is_empty(circular_buffer *cb){
10000ae8:	b480      	push	{r7}
10000aea:	b083      	sub	sp, #12
10000aec:	af00      	add	r7, sp, #0
10000aee:	6078      	str	r0, [r7, #4]
    return(cb->empty);
10000af0:	687b      	ldr	r3, [r7, #4]
10000af2:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
};
10000af6:	4618      	mov	r0, r3
10000af8:	370c      	adds	r7, #12
10000afa:	46bd      	mov	sp, r7
10000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b00:	4770      	bx	lr

10000b02 <check_gpio_param>:
static inline void check_gpio_param(__unused uint gpio) {
10000b02:	b480      	push	{r7}
10000b04:	b083      	sub	sp, #12
10000b06:	af00      	add	r7, sp, #0
10000b08:	6078      	str	r0, [r7, #4]
}
10000b0a:	bf00      	nop
10000b0c:	370c      	adds	r7, #12
10000b0e:	46bd      	mov	sp, r7
10000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b14:	4770      	bx	lr

10000b16 <gpio_put>:
static inline void gpio_put(uint gpio, bool value) {
10000b16:	b480      	push	{r7}
10000b18:	b085      	sub	sp, #20
10000b1a:	af00      	add	r7, sp, #0
10000b1c:	6078      	str	r0, [r7, #4]
10000b1e:	460b      	mov	r3, r1
10000b20:	70fb      	strb	r3, [r7, #3]
10000b22:	687b      	ldr	r3, [r7, #4]
10000b24:	60fb      	str	r3, [r7, #12]
10000b26:	78fb      	ldrb	r3, [r7, #3]
10000b28:	72fb      	strb	r3, [r7, #11]
    pico_default_asm_volatile ("mcrr p0, #4, %0, %1, c0" : : "r" (pin), "r" (val));
10000b2a:	68fb      	ldr	r3, [r7, #12]
10000b2c:	7afa      	ldrb	r2, [r7, #11]
10000b2e:	ec42 3040 	mcrr	0, 4, r3, r2, cr0
}
10000b32:	bf00      	nop
}
10000b34:	bf00      	nop
10000b36:	3714      	adds	r7, #20
10000b38:	46bd      	mov	sp, r7
10000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b3e:	4770      	bx	lr

10000b40 <gpio_set_dir>:
static inline void gpio_set_dir(uint gpio, bool out) {
10000b40:	b480      	push	{r7}
10000b42:	b085      	sub	sp, #20
10000b44:	af00      	add	r7, sp, #0
10000b46:	6078      	str	r0, [r7, #4]
10000b48:	460b      	mov	r3, r1
10000b4a:	70fb      	strb	r3, [r7, #3]
10000b4c:	687b      	ldr	r3, [r7, #4]
10000b4e:	60fb      	str	r3, [r7, #12]
10000b50:	78fb      	ldrb	r3, [r7, #3]
10000b52:	72fb      	strb	r3, [r7, #11]
    pico_default_asm_volatile ("mcrr p0, #4, %0, %1, c4" : : "r" (pin), "r" (val));
10000b54:	68fb      	ldr	r3, [r7, #12]
10000b56:	7afa      	ldrb	r2, [r7, #11]
10000b58:	ec42 3044 	mcrr	0, 4, r3, r2, cr4
}
10000b5c:	bf00      	nop
}
10000b5e:	bf00      	nop
10000b60:	3714      	adds	r7, #20
10000b62:	46bd      	mov	sp, r7
10000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b68:	4770      	bx	lr
	...

10000b6c <gpio_set_function>:
}

/// \tag::gpio_set_function[]
// Select function for this GPIO, and ensure input/output are enabled at the pad.
// This also clears the input/output/irq override bits.
void gpio_set_function(uint gpio, gpio_function_t fn) {
10000b6c:	b580      	push	{r7, lr}
10000b6e:	b08a      	sub	sp, #40	@ 0x28
10000b70:	af00      	add	r7, sp, #0
10000b72:	6078      	str	r0, [r7, #4]
10000b74:	460b      	mov	r3, r1
10000b76:	70fb      	strb	r3, [r7, #3]
    check_gpio_param(gpio);
10000b78:	6878      	ldr	r0, [r7, #4]
10000b7a:	f7ff ffc2 	bl	10000b02 <check_gpio_param>
    invalid_params_if(HARDWARE_GPIO, ((uint32_t)fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB) & ~IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS);
    // Set input enable on, output disable off
    hw_write_masked(&pads_bank0_hw->io[gpio],
10000b7e:	687b      	ldr	r3, [r7, #4]
10000b80:	009a      	lsls	r2, r3, #2
10000b82:	4b18      	ldr	r3, [pc, #96]	@ (10000be4 <gpio_set_function+0x78>)
10000b84:	4413      	add	r3, r2
10000b86:	61fb      	str	r3, [r7, #28]
10000b88:	2340      	movs	r3, #64	@ 0x40
10000b8a:	61bb      	str	r3, [r7, #24]
10000b8c:	23c0      	movs	r3, #192	@ 0xc0
10000b8e:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000b90:	69fb      	ldr	r3, [r7, #28]
10000b92:	681a      	ldr	r2, [r3, #0]
10000b94:	69bb      	ldr	r3, [r7, #24]
10000b96:	405a      	eors	r2, r3
10000b98:	697b      	ldr	r3, [r7, #20]
10000b9a:	4013      	ands	r3, r2
10000b9c:	69fa      	ldr	r2, [r7, #28]
10000b9e:	613a      	str	r2, [r7, #16]
10000ba0:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000ba2:	693b      	ldr	r3, [r7, #16]
10000ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10000ba8:	461a      	mov	r2, r3
10000baa:	68fb      	ldr	r3, [r7, #12]
10000bac:	6013      	str	r3, [r2, #0]
}
10000bae:	bf00      	nop
}
10000bb0:	bf00      	nop
                   PADS_BANK0_GPIO0_IE_BITS,
                   PADS_BANK0_GPIO0_IE_BITS | PADS_BANK0_GPIO0_OD_BITS
    );
    // Zero all fields apart from fsel; we want this IO to do what the peripheral tells it.
    // This doesn't affect e.g. pullup/pulldown, as these are in pad controls.
    io_bank0_hw->io[gpio].ctrl = fn << IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB;
10000bb2:	490d      	ldr	r1, [pc, #52]	@ (10000be8 <gpio_set_function+0x7c>)
10000bb4:	78fa      	ldrb	r2, [r7, #3]
10000bb6:	687b      	ldr	r3, [r7, #4]
10000bb8:	00db      	lsls	r3, r3, #3
10000bba:	440b      	add	r3, r1
10000bbc:	605a      	str	r2, [r3, #4]
#if !PICO_RP2040
    // Remove pad isolation now that the correct peripheral is in control of the pad
    hw_clear_bits(&pads_bank0_hw->io[gpio], PADS_BANK0_GPIO0_ISO_BITS);
10000bbe:	687b      	ldr	r3, [r7, #4]
10000bc0:	009a      	lsls	r2, r3, #2
10000bc2:	4b08      	ldr	r3, [pc, #32]	@ (10000be4 <gpio_set_function+0x78>)
10000bc4:	4413      	add	r3, r2
10000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
10000bc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
10000bcc:	623b      	str	r3, [r7, #32]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10000bd0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10000bd4:	461a      	mov	r2, r3
10000bd6:	6a3b      	ldr	r3, [r7, #32]
10000bd8:	6013      	str	r3, [r2, #0]
}
10000bda:	bf00      	nop
#endif
}
10000bdc:	bf00      	nop
10000bde:	3728      	adds	r7, #40	@ 0x28
10000be0:	46bd      	mov	sp, r7
10000be2:	bd80      	pop	{r7, pc}
10000be4:	40038004 	.word	0x40038004
10000be8:	40028000 	.word	0x40028000

10000bec <gpio_set_pulls>:
    return (gpio_function_t) ((io_bank0_hw->io[gpio].ctrl & IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS) >> IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB);
}

// Note that, on RP2040, setting both pulls enables a "bus keep" function,
// i.e. weak pull to whatever is current high/low state of GPIO.
void gpio_set_pulls(uint gpio, bool up, bool down) {
10000bec:	b580      	push	{r7, lr}
10000bee:	b088      	sub	sp, #32
10000bf0:	af00      	add	r7, sp, #0
10000bf2:	6078      	str	r0, [r7, #4]
10000bf4:	460b      	mov	r3, r1
10000bf6:	70fb      	strb	r3, [r7, #3]
10000bf8:	4613      	mov	r3, r2
10000bfa:	70bb      	strb	r3, [r7, #2]
    check_gpio_param(gpio);
10000bfc:	6878      	ldr	r0, [r7, #4]
10000bfe:	f7ff ff80 	bl	10000b02 <check_gpio_param>
    hw_write_masked(
10000c02:	687b      	ldr	r3, [r7, #4]
10000c04:	009a      	lsls	r2, r3, #2
10000c06:	4b14      	ldr	r3, [pc, #80]	@ (10000c58 <gpio_set_pulls+0x6c>)
10000c08:	4413      	add	r3, r2
            &pads_bank0_hw->io[gpio],
            (bool_to_bit(up) << PADS_BANK0_GPIO0_PUE_LSB) | (bool_to_bit(down) << PADS_BANK0_GPIO0_PDE_LSB),
10000c0a:	78fa      	ldrb	r2, [r7, #3]
10000c0c:	2a00      	cmp	r2, #0
10000c0e:	d001      	beq.n	10000c14 <gpio_set_pulls+0x28>
10000c10:	2108      	movs	r1, #8
10000c12:	e000      	b.n	10000c16 <gpio_set_pulls+0x2a>
10000c14:	2100      	movs	r1, #0
10000c16:	78ba      	ldrb	r2, [r7, #2]
10000c18:	2a00      	cmp	r2, #0
10000c1a:	d001      	beq.n	10000c20 <gpio_set_pulls+0x34>
10000c1c:	2204      	movs	r2, #4
10000c1e:	e000      	b.n	10000c22 <gpio_set_pulls+0x36>
10000c20:	2200      	movs	r2, #0
10000c22:	430a      	orrs	r2, r1
10000c24:	61fb      	str	r3, [r7, #28]
10000c26:	61ba      	str	r2, [r7, #24]
10000c28:	230c      	movs	r3, #12
10000c2a:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10000c2c:	69fb      	ldr	r3, [r7, #28]
10000c2e:	681a      	ldr	r2, [r3, #0]
10000c30:	69bb      	ldr	r3, [r7, #24]
10000c32:	405a      	eors	r2, r3
10000c34:	697b      	ldr	r3, [r7, #20]
10000c36:	4013      	ands	r3, r2
10000c38:	69fa      	ldr	r2, [r7, #28]
10000c3a:	613a      	str	r2, [r7, #16]
10000c3c:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10000c3e:	693b      	ldr	r3, [r7, #16]
10000c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10000c44:	461a      	mov	r2, r3
10000c46:	68fb      	ldr	r3, [r7, #12]
10000c48:	6013      	str	r3, [r2, #0]
}
10000c4a:	bf00      	nop
}
10000c4c:	bf00      	nop
            PADS_BANK0_GPIO0_PUE_BITS | PADS_BANK0_GPIO0_PDE_BITS
    );
}
10000c4e:	bf00      	nop
10000c50:	3720      	adds	r7, #32
10000c52:	46bd      	mov	sp, r7
10000c54:	bd80      	pop	{r7, pc}
10000c56:	bf00      	nop
10000c58:	40038004 	.word	0x40038004

10000c5c <gpio_init>:
        hw_set_bits(&pads_bank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
    else
        hw_clear_bits(&pads_bank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
}

void gpio_init(uint gpio) {
10000c5c:	b580      	push	{r7, lr}
10000c5e:	b082      	sub	sp, #8
10000c60:	af00      	add	r7, sp, #0
10000c62:	6078      	str	r0, [r7, #4]
    gpio_set_dir(gpio, GPIO_IN);
10000c64:	2100      	movs	r1, #0
10000c66:	6878      	ldr	r0, [r7, #4]
10000c68:	f7ff ff6a 	bl	10000b40 <gpio_set_dir>
    gpio_put(gpio, 0);
10000c6c:	2100      	movs	r1, #0
10000c6e:	6878      	ldr	r0, [r7, #4]
10000c70:	f7ff ff51 	bl	10000b16 <gpio_put>
    gpio_set_function(gpio, GPIO_FUNC_SIO);
10000c74:	2105      	movs	r1, #5
10000c76:	6878      	ldr	r0, [r7, #4]
10000c78:	f7ff ff78 	bl	10000b6c <gpio_set_function>
}
10000c7c:	bf00      	nop
10000c7e:	3708      	adds	r7, #8
10000c80:	46bd      	mov	sp, r7
10000c82:	bd80      	pop	{r7, pc}

10000c84 <panic>:
// todo consider making this try harder to output if we panic early
//  right now, print mutex may be uninitialised (in which case it deadlocks - although after printing "PANIC")
//  more importantly there may be no stdout/UART initialized yet
// todo we may want to think about where we print panic messages to; writing to USB appears to work
//  though it doesn't seem like we can expect it to... fine for now
void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
10000c84:	b40f      	push	{r0, r1, r2, r3}
10000c86:	b580      	push	{r7, lr}
10000c88:	b082      	sub	sp, #8
10000c8a:	af00      	add	r7, sp, #0
    puts("\n*** PANIC ***\n");
10000c8c:	4809      	ldr	r0, [pc, #36]	@ (10000cb4 <panic+0x30>)
10000c8e:	f005 f893 	bl	10005db8 <__wrap_puts>
    if (fmt) {
10000c92:	693b      	ldr	r3, [r7, #16]
10000c94:	2b00      	cmp	r3, #0
10000c96:	d009      	beq.n	10000cac <panic+0x28>
#if LIB_PICO_PRINTF_NONE
        puts(fmt);
#else
        va_list args;
        va_start(args, fmt);
10000c98:	f107 0314 	add.w	r3, r7, #20
10000c9c:	607b      	str	r3, [r7, #4]
#if PICO_PRINTF_ALWAYS_INCLUDED
        vprintf(fmt, args);
10000c9e:	6879      	ldr	r1, [r7, #4]
10000ca0:	6938      	ldr	r0, [r7, #16]
10000ca2:	f005 f89f 	bl	10005de4 <__wrap_vprintf>
#else
        weak_raw_vprintf(fmt, args);
#endif
        va_end(args);
        puts("\n");
10000ca6:	4804      	ldr	r0, [pc, #16]	@ (10000cb8 <panic+0x34>)
10000ca8:	f005 f886 	bl	10005db8 <__wrap_puts>
#endif
    }

    _exit(1);
10000cac:	2001      	movs	r0, #1
10000cae:	f004 fdd3 	bl	10005858 <_exit>
10000cb2:	bf00      	nop
10000cb4:	1000b1d8 	.word	0x1000b1d8
10000cb8:	1000b1e8 	.word	0x1000b1e8

10000cbc <hw_claim_lock>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "hardware/claim.h"

uint32_t hw_claim_lock(void) {
10000cbc:	b480      	push	{r7}
10000cbe:	b089      	sub	sp, #36	@ 0x24
10000cc0:	af00      	add	r7, sp, #0
10000cc2:	230b      	movs	r3, #11
10000cc4:	607b      	str	r3, [r7, #4]
 * \return The spinlock instance
 */
__force_inline static spin_lock_t *spin_lock_instance(uint lock_num) {
    invalid_params_if(HARDWARE_SYNC, lock_num >= NUM_SPIN_LOCKS);
#if PICO_USE_SW_SPIN_LOCKS
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000cc6:	687b      	ldr	r3, [r7, #4]
10000cc8:	4a11      	ldr	r2, [pc, #68]	@ (10000d10 <hw_claim_lock+0x54>)
10000cca:	4413      	add	r3, r2
10000ccc:	bf00      	nop
10000cce:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile (
10000cd0:	f3ef 8310 	mrs	r3, PRIMASK
10000cd4:	b672      	cpsid	i
10000cd6:	61bb      	str	r3, [r7, #24]
    return status;
10000cd8:	69bb      	ldr	r3, [r7, #24]
 *
 * \param lock Spinlock instance
 * \return interrupt status to be used when unlocking, to restore to original state
 */
__force_inline static uint32_t spin_lock_blocking(spin_lock_t *lock) {
    uint32_t save = save_and_disable_interrupts();
10000cda:	617b      	str	r3, [r7, #20]
10000cdc:	69fb      	ldr	r3, [r7, #28]
10000cde:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_LOCK(lock);
10000ce0:	6939      	ldr	r1, [r7, #16]
10000ce2:	e8d1 3fcf 	ldaexb	r3, [r1]
10000ce6:	2201      	movs	r2, #1
10000ce8:	2b00      	cmp	r3, #0
10000cea:	d1fa      	bne.n	10000ce2 <hw_claim_lock+0x26>
10000cec:	e8c1 2f43 	strexb	r3, r2, [r1]
10000cf0:	2b00      	cmp	r3, #0
10000cf2:	d1f6      	bne.n	10000ce2 <hw_claim_lock+0x26>
10000cf4:	60fa      	str	r2, [r7, #12]
10000cf6:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("dmb" : : : "memory");
10000cf8:	f3bf 8f5f 	dmb	sy
}
10000cfc:	bf00      	nop
}
10000cfe:	bf00      	nop
}
10000d00:	bf00      	nop
    spin_lock_unsafe_blocking(lock);
    return save;
10000d02:	697b      	ldr	r3, [r7, #20]
    return spin_lock_blocking(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM));
}
10000d04:	4618      	mov	r0, r3
10000d06:	3724      	adds	r7, #36	@ 0x24
10000d08:	46bd      	mov	sp, r7
10000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d0e:	4770      	bx	lr
10000d10:	20001a44 	.word	0x20001a44

10000d14 <hw_claim_unlock>:

void hw_claim_unlock(uint32_t save) {
10000d14:	b480      	push	{r7}
10000d16:	b089      	sub	sp, #36	@ 0x24
10000d18:	af00      	add	r7, sp, #0
10000d1a:	6078      	str	r0, [r7, #4]
10000d1c:	230b      	movs	r3, #11
10000d1e:	60bb      	str	r3, [r7, #8]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000d20:	68bb      	ldr	r3, [r7, #8]
10000d22:	4a0e      	ldr	r2, [pc, #56]	@ (10000d5c <hw_claim_unlock+0x48>)
10000d24:	4413      	add	r3, r2
10000d26:	bf00      	nop
10000d28:	61fb      	str	r3, [r7, #28]
10000d2a:	687b      	ldr	r3, [r7, #4]
10000d2c:	61bb      	str	r3, [r7, #24]
10000d2e:	69fb      	ldr	r3, [r7, #28]
10000d30:	617b      	str	r3, [r7, #20]
    SW_SPIN_LOCK_UNLOCK(lock);
10000d32:	2300      	movs	r3, #0
10000d34:	613b      	str	r3, [r7, #16]
10000d36:	693b      	ldr	r3, [r7, #16]
10000d38:	697a      	ldr	r2, [r7, #20]
10000d3a:	e8c2 3f8f 	stlb	r3, [r2]
}
10000d3e:	bf00      	nop
10000d40:	69bb      	ldr	r3, [r7, #24]
10000d42:	60fb      	str	r3, [r7, #12]
    __compiler_memory_barrier();
    riscv_set_csr(mstatus, status & 8);
    __compiler_memory_barrier();
#else
    // on ARM, this behaves the same as restore_interrupts()
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10000d44:	68fb      	ldr	r3, [r7, #12]
10000d46:	f383 8810 	msr	PRIMASK, r3
#endif
}
10000d4a:	bf00      	nop
 * \sa spin_lock_blocking()
 */
__force_inline static void spin_unlock(spin_lock_t *lock, uint32_t saved_irq) {
    spin_unlock_unsafe(lock);
    restore_interrupts_from_disabled(saved_irq);
}
10000d4c:	bf00      	nop
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_HARDWARE_CLAIM), save);
}
10000d4e:	bf00      	nop
10000d50:	3724      	adds	r7, #36	@ 0x24
10000d52:	46bd      	mov	sp, r7
10000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d58:	4770      	bx	lr
10000d5a:	bf00      	nop
10000d5c:	20001a44 	.word	0x20001a44

10000d60 <hw_is_claimed>:

inline bool hw_is_claimed(const uint8_t *bits, uint bit_index) {
10000d60:	b480      	push	{r7}
10000d62:	b083      	sub	sp, #12
10000d64:	af00      	add	r7, sp, #0
10000d66:	6078      	str	r0, [r7, #4]
10000d68:	6039      	str	r1, [r7, #0]
    return (bits[bit_index >> 3u] & (1u << (bit_index & 7u)));
10000d6a:	683b      	ldr	r3, [r7, #0]
10000d6c:	08db      	lsrs	r3, r3, #3
10000d6e:	687a      	ldr	r2, [r7, #4]
10000d70:	4413      	add	r3, r2
10000d72:	781b      	ldrb	r3, [r3, #0]
10000d74:	4619      	mov	r1, r3
10000d76:	683b      	ldr	r3, [r7, #0]
10000d78:	f003 0307 	and.w	r3, r3, #7
10000d7c:	2201      	movs	r2, #1
10000d7e:	fa02 f303 	lsl.w	r3, r2, r3
10000d82:	400b      	ands	r3, r1
10000d84:	2b00      	cmp	r3, #0
10000d86:	bf14      	ite	ne
10000d88:	2301      	movne	r3, #1
10000d8a:	2300      	moveq	r3, #0
10000d8c:	b2db      	uxtb	r3, r3
}
10000d8e:	4618      	mov	r0, r3
10000d90:	370c      	adds	r7, #12
10000d92:	46bd      	mov	sp, r7
10000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
10000d98:	4770      	bx	lr

10000d9a <hw_claim_or_assert>:

void hw_claim_or_assert(uint8_t *bits, uint bit_index, const char *message) {
10000d9a:	b580      	push	{r7, lr}
10000d9c:	b086      	sub	sp, #24
10000d9e:	af00      	add	r7, sp, #0
10000da0:	60f8      	str	r0, [r7, #12]
10000da2:	60b9      	str	r1, [r7, #8]
10000da4:	607a      	str	r2, [r7, #4]
    uint32_t save = hw_claim_lock();
10000da6:	f7ff ff89 	bl	10000cbc <hw_claim_lock>
10000daa:	6178      	str	r0, [r7, #20]
    if (hw_is_claimed(bits, bit_index)) {
10000dac:	68b9      	ldr	r1, [r7, #8]
10000dae:	68f8      	ldr	r0, [r7, #12]
10000db0:	f7ff ffd6 	bl	10000d60 <hw_is_claimed>
10000db4:	4603      	mov	r3, r0
10000db6:	2b00      	cmp	r3, #0
10000db8:	d003      	beq.n	10000dc2 <hw_claim_or_assert+0x28>
        panic(message, bit_index);
10000dba:	68b9      	ldr	r1, [r7, #8]
10000dbc:	6878      	ldr	r0, [r7, #4]
10000dbe:	f7ff ff61 	bl	10000c84 <panic>
    } else {
        bits[bit_index >> 3u] |= (uint8_t)(1u << (bit_index & 7u));
10000dc2:	68bb      	ldr	r3, [r7, #8]
10000dc4:	08db      	lsrs	r3, r3, #3
10000dc6:	68fa      	ldr	r2, [r7, #12]
10000dc8:	4413      	add	r3, r2
10000dca:	7819      	ldrb	r1, [r3, #0]
10000dcc:	68bb      	ldr	r3, [r7, #8]
10000dce:	f003 0307 	and.w	r3, r3, #7
10000dd2:	2201      	movs	r2, #1
10000dd4:	fa02 f303 	lsl.w	r3, r2, r3
10000dd8:	b2da      	uxtb	r2, r3
10000dda:	68bb      	ldr	r3, [r7, #8]
10000ddc:	08db      	lsrs	r3, r3, #3
10000dde:	68f8      	ldr	r0, [r7, #12]
10000de0:	4403      	add	r3, r0
10000de2:	430a      	orrs	r2, r1
10000de4:	b2d2      	uxtb	r2, r2
10000de6:	701a      	strb	r2, [r3, #0]
    }
    hw_claim_unlock(save);
10000de8:	6978      	ldr	r0, [r7, #20]
10000dea:	f7ff ff93 	bl	10000d14 <hw_claim_unlock>
}
10000dee:	bf00      	nop
10000df0:	3718      	adds	r7, #24
10000df2:	46bd      	mov	sp, r7
10000df4:	bd80      	pop	{r7, pc}

10000df6 <hw_claim_unused_from_range>:

int hw_claim_unused_from_range(uint8_t *bits, bool required, uint bit_lsb, uint bit_msb, const char *message) {
10000df6:	b580      	push	{r7, lr}
10000df8:	b088      	sub	sp, #32
10000dfa:	af00      	add	r7, sp, #0
10000dfc:	60f8      	str	r0, [r7, #12]
10000dfe:	607a      	str	r2, [r7, #4]
10000e00:	603b      	str	r3, [r7, #0]
10000e02:	460b      	mov	r3, r1
10000e04:	72fb      	strb	r3, [r7, #11]
    // don't bother check lsb / msb order as if wrong, then it'll fail anyway
    uint32_t save = hw_claim_lock();
10000e06:	f7ff ff59 	bl	10000cbc <hw_claim_lock>
10000e0a:	6178      	str	r0, [r7, #20]
    int found_bit = -1;
10000e0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10000e10:	61fb      	str	r3, [r7, #28]
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10000e12:	687b      	ldr	r3, [r7, #4]
10000e14:	61bb      	str	r3, [r7, #24]
10000e16:	e022      	b.n	10000e5e <hw_claim_unused_from_range+0x68>
        if (!hw_is_claimed(bits, bit)) {
10000e18:	69b9      	ldr	r1, [r7, #24]
10000e1a:	68f8      	ldr	r0, [r7, #12]
10000e1c:	f7ff ffa0 	bl	10000d60 <hw_is_claimed>
10000e20:	4603      	mov	r3, r0
10000e22:	f083 0301 	eor.w	r3, r3, #1
10000e26:	b2db      	uxtb	r3, r3
10000e28:	2b00      	cmp	r3, #0
10000e2a:	d015      	beq.n	10000e58 <hw_claim_unused_from_range+0x62>
            bits[bit >> 3u] |= (uint8_t)(1u << (bit & 7u));
10000e2c:	69bb      	ldr	r3, [r7, #24]
10000e2e:	08db      	lsrs	r3, r3, #3
10000e30:	68fa      	ldr	r2, [r7, #12]
10000e32:	4413      	add	r3, r2
10000e34:	7819      	ldrb	r1, [r3, #0]
10000e36:	69bb      	ldr	r3, [r7, #24]
10000e38:	f003 0307 	and.w	r3, r3, #7
10000e3c:	2201      	movs	r2, #1
10000e3e:	fa02 f303 	lsl.w	r3, r2, r3
10000e42:	b2da      	uxtb	r2, r3
10000e44:	69bb      	ldr	r3, [r7, #24]
10000e46:	08db      	lsrs	r3, r3, #3
10000e48:	68f8      	ldr	r0, [r7, #12]
10000e4a:	4403      	add	r3, r0
10000e4c:	430a      	orrs	r2, r1
10000e4e:	b2d2      	uxtb	r2, r2
10000e50:	701a      	strb	r2, [r3, #0]
            found_bit = (int)bit;
10000e52:	69bb      	ldr	r3, [r7, #24]
10000e54:	61fb      	str	r3, [r7, #28]
            break;
10000e56:	e006      	b.n	10000e66 <hw_claim_unused_from_range+0x70>
    for(uint bit=bit_lsb; bit <= bit_msb; bit++) {
10000e58:	69bb      	ldr	r3, [r7, #24]
10000e5a:	3301      	adds	r3, #1
10000e5c:	61bb      	str	r3, [r7, #24]
10000e5e:	69ba      	ldr	r2, [r7, #24]
10000e60:	683b      	ldr	r3, [r7, #0]
10000e62:	429a      	cmp	r2, r3
10000e64:	d9d8      	bls.n	10000e18 <hw_claim_unused_from_range+0x22>
        }
    }
    hw_claim_unlock(save);
10000e66:	6978      	ldr	r0, [r7, #20]
10000e68:	f7ff ff54 	bl	10000d14 <hw_claim_unlock>
    if (found_bit < 0 && required) {
10000e6c:	69fb      	ldr	r3, [r7, #28]
10000e6e:	2b00      	cmp	r3, #0
10000e70:	da05      	bge.n	10000e7e <hw_claim_unused_from_range+0x88>
10000e72:	7afb      	ldrb	r3, [r7, #11]
10000e74:	2b00      	cmp	r3, #0
10000e76:	d002      	beq.n	10000e7e <hw_claim_unused_from_range+0x88>
        panic(message);
10000e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10000e7a:	f7ff ff03 	bl	10000c84 <panic>
    }
    return found_bit;
10000e7e:	69fb      	ldr	r3, [r7, #28]
}
10000e80:	4618      	mov	r0, r3
10000e82:	3720      	adds	r7, #32
10000e84:	46bd      	mov	sp, r7
10000e86:	bd80      	pop	{r7, pc}

10000e88 <next_striped_spin_lock_num>:

static void check_lock_num(uint __unused lock_num) {
    invalid_params_if(HARDWARE_SYNC, lock_num >= 32);
}

uint next_striped_spin_lock_num(void) {
10000e88:	b480      	push	{r7}
10000e8a:	b083      	sub	sp, #12
10000e8c:	af00      	add	r7, sp, #0
    uint rc = striped_spin_lock_num++;
10000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (10000eb8 <next_striped_spin_lock_num+0x30>)
10000e90:	781b      	ldrb	r3, [r3, #0]
10000e92:	1c5a      	adds	r2, r3, #1
10000e94:	b2d1      	uxtb	r1, r2
10000e96:	4a08      	ldr	r2, [pc, #32]	@ (10000eb8 <next_striped_spin_lock_num+0x30>)
10000e98:	7011      	strb	r1, [r2, #0]
10000e9a:	607b      	str	r3, [r7, #4]
    if (striped_spin_lock_num > PICO_SPINLOCK_ID_STRIPED_LAST) {
10000e9c:	4b06      	ldr	r3, [pc, #24]	@ (10000eb8 <next_striped_spin_lock_num+0x30>)
10000e9e:	781b      	ldrb	r3, [r3, #0]
10000ea0:	2b17      	cmp	r3, #23
10000ea2:	d902      	bls.n	10000eaa <next_striped_spin_lock_num+0x22>
        striped_spin_lock_num = PICO_SPINLOCK_ID_STRIPED_FIRST;
10000ea4:	4b04      	ldr	r3, [pc, #16]	@ (10000eb8 <next_striped_spin_lock_num+0x30>)
10000ea6:	2210      	movs	r2, #16
10000ea8:	701a      	strb	r2, [r3, #0]
    }
    return rc;
10000eaa:	687b      	ldr	r3, [r7, #4]
}
10000eac:	4618      	mov	r0, r3
10000eae:	370c      	adds	r7, #12
10000eb0:	46bd      	mov	sp, r7
10000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
10000eb6:	4770      	bx	lr
10000eb8:	20001528 	.word	0x20001528

10000ebc <spin_lock_claim_unused>:
    check_lock_num(lock_num);
    spin_unlock_unsafe(spin_lock_instance(lock_num));
    hw_claim_clear((uint8_t *) &claimed, lock_num);
}

int spin_lock_claim_unused(bool required) {
10000ebc:	b580      	push	{r7, lr}
10000ebe:	b084      	sub	sp, #16
10000ec0:	af02      	add	r7, sp, #8
10000ec2:	4603      	mov	r3, r0
10000ec4:	71fb      	strb	r3, [r7, #7]
    return hw_claim_unused_from_range((uint8_t*)&claimed, required, PICO_SPINLOCK_ID_CLAIM_FREE_FIRST, PICO_SPINLOCK_ID_CLAIM_FREE_LAST, "No spinlocks are available");
10000ec6:	79f9      	ldrb	r1, [r7, #7]
10000ec8:	4b05      	ldr	r3, [pc, #20]	@ (10000ee0 <spin_lock_claim_unused+0x24>)
10000eca:	9300      	str	r3, [sp, #0]
10000ecc:	231f      	movs	r3, #31
10000ece:	2218      	movs	r2, #24
10000ed0:	4804      	ldr	r0, [pc, #16]	@ (10000ee4 <spin_lock_claim_unused+0x28>)
10000ed2:	f7ff ff90 	bl	10000df6 <hw_claim_unused_from_range>
10000ed6:	4603      	mov	r3, r0
}
10000ed8:	4618      	mov	r0, r3
10000eda:	3708      	adds	r7, #8
10000edc:	46bd      	mov	sp, r7
10000ede:	bd80      	pop	{r7, pc}
10000ee0:	1000b20c 	.word	0x1000b20c
10000ee4:	200020ac 	.word	0x200020ac

10000ee8 <spin_locks_reset>:
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */
#include "hardware/sync/spin_lock.h"

void spin_locks_reset(void) {
10000ee8:	b480      	push	{r7}
10000eea:	b085      	sub	sp, #20
10000eec:	af00      	add	r7, sp, #0
    for (uint i = 0; i < NUM_SPIN_LOCKS; i++) {
10000eee:	2300      	movs	r3, #0
10000ef0:	60fb      	str	r3, [r7, #12]
10000ef2:	e010      	b.n	10000f16 <spin_locks_reset+0x2e>
10000ef4:	68fb      	ldr	r3, [r7, #12]
10000ef6:	603b      	str	r3, [r7, #0]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000ef8:	683b      	ldr	r3, [r7, #0]
10000efa:	4a0c      	ldr	r2, [pc, #48]	@ (10000f2c <spin_locks_reset+0x44>)
10000efc:	4413      	add	r3, r2
10000efe:	bf00      	nop
10000f00:	60bb      	str	r3, [r7, #8]
    SW_SPIN_LOCK_UNLOCK(lock);
10000f02:	2300      	movs	r3, #0
10000f04:	607b      	str	r3, [r7, #4]
10000f06:	687b      	ldr	r3, [r7, #4]
10000f08:	68ba      	ldr	r2, [r7, #8]
10000f0a:	e8c2 3f8f 	stlb	r3, [r2]
}
10000f0e:	bf00      	nop
10000f10:	68fb      	ldr	r3, [r7, #12]
10000f12:	3301      	adds	r3, #1
10000f14:	60fb      	str	r3, [r7, #12]
10000f16:	68fb      	ldr	r3, [r7, #12]
10000f18:	2b1f      	cmp	r3, #31
10000f1a:	d9eb      	bls.n	10000ef4 <spin_locks_reset+0xc>
        spin_unlock_unsafe(spin_lock_instance(i));
    }
}
10000f1c:	bf00      	nop
10000f1e:	bf00      	nop
10000f20:	3714      	adds	r7, #20
10000f22:	46bd      	mov	sp, r7
10000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f28:	4770      	bx	lr
10000f2a:	bf00      	nop
10000f2c:	20001a44 	.word	0x20001a44

10000f30 <spinlock_set_extexclall>:

#if __ARM_ARCH_8M_MAIN__ && !PICO_SW_SPIN_LOCKS_NO_EXTEXCLALL
#include "pico/runtime_init.h"
#include "hardware/structs/m33.h"

static void spinlock_set_extexclall(void) {
10000f30:	b480      	push	{r7}
10000f32:	af00      	add	r7, sp, #0
    // SRAM and also single-core exclusives in external PSRAM (not covered by
    // the global monitor on RP2350) you must clear this and add your own
    // Shareable regions.
    //
    // Setting PICO_SW_SPIN_LOCKS_NO_EXTEXCLALL == 1 will disable this code
    m33_hw->actlr |= M33_ACTLR_EXTEXCLALL_BITS;
10000f34:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
10000f38:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
10000f3c:	689b      	ldr	r3, [r3, #8]
10000f3e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
10000f42:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
10000f46:	f502 4260 	add.w	r2, r2, #57344	@ 0xe000
10000f4a:	6093      	str	r3, [r2, #8]
}
10000f4c:	bf00      	nop
10000f4e:	46bd      	mov	sp, r7
10000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f54:	4770      	bx	lr

10000f56 <check_irq_param>:
 *
 * All interrupts handlers should be of this type, and follow normal ARM EABI register saving conventions
 */
typedef void (*irq_handler_t)(void);

static inline void check_irq_param(__unused uint num) {
10000f56:	b480      	push	{r7}
10000f58:	b083      	sub	sp, #12
10000f5a:	af00      	add	r7, sp, #0
10000f5c:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_IRQ, num >= NUM_IRQS);
}
10000f5e:	bf00      	nop
10000f60:	370c      	adds	r7, #12
10000f62:	46bd      	mov	sp, r7
10000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f68:	4770      	bx	lr
	...

10000f6c <user_irq_claimed_ptr>:
static inline uint8_t *user_irq_claimed_ptr(void) {
    return &user_irq_claimed[get_core_num()];
}
#else
static uint8_t user_irq_claimed;
static inline uint8_t *user_irq_claimed_ptr(void) {
10000f6c:	b480      	push	{r7}
10000f6e:	af00      	add	r7, sp, #0
    return &user_irq_claimed;
10000f70:	4b02      	ldr	r3, [pc, #8]	@ (10000f7c <user_irq_claimed_ptr+0x10>)
}
10000f72:	4618      	mov	r0, r3
10000f74:	46bd      	mov	sp, r7
10000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f7a:	4770      	bx	lr
10000f7c:	2000258b 	.word	0x2000258b

10000f80 <get_vtable>:
#endif

static inline irq_handler_t *get_vtable(void) {
10000f80:	b480      	push	{r7}
10000f82:	af00      	add	r7, sp, #0
#ifdef __riscv
    return (irq_handler_t *) (riscv_read_csr(RVCSR_MTVEC_OFFSET) & ~0x3u);
#else
    return (irq_handler_t *) scb_hw->vtor;
10000f84:	4b03      	ldr	r3, [pc, #12]	@ (10000f94 <get_vtable+0x14>)
10000f86:	689b      	ldr	r3, [r3, #8]
#endif
}
10000f88:	4618      	mov	r0, r3
10000f8a:	46bd      	mov	sp, r7
10000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000f90:	4770      	bx	lr
10000f92:	bf00      	nop
10000f94:	e000ed00 	.word	0xe000ed00

10000f98 <add_thumb_bit>:

static inline void *add_thumb_bit(void *addr) {
10000f98:	b480      	push	{r7}
10000f9a:	b083      	sub	sp, #12
10000f9c:	af00      	add	r7, sp, #0
10000f9e:	6078      	str	r0, [r7, #4]
#ifdef __riscv
    return addr;
#else
    return (void *) (((uintptr_t) addr) | 0x1);
10000fa0:	687b      	ldr	r3, [r7, #4]
10000fa2:	f043 0301 	orr.w	r3, r3, #1
#endif
}
10000fa6:	4618      	mov	r0, r3
10000fa8:	370c      	adds	r7, #12
10000faa:	46bd      	mov	sp, r7
10000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fb0:	4770      	bx	lr

10000fb2 <remove_thumb_bit>:

static inline void *remove_thumb_bit(void *addr) {
10000fb2:	b480      	push	{r7}
10000fb4:	b083      	sub	sp, #12
10000fb6:	af00      	add	r7, sp, #0
10000fb8:	6078      	str	r0, [r7, #4]
#ifdef __riscv
    return addr;
#else
    return (void *) (((uintptr_t) addr) & (uint)~0x1);
10000fba:	687b      	ldr	r3, [r7, #4]
10000fbc:	f023 0301 	bic.w	r3, r3, #1
#endif
}
10000fc0:	4618      	mov	r0, r3
10000fc2:	370c      	adds	r7, #12
10000fc4:	46bd      	mov	sp, r7
10000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fca:	4770      	bx	lr

10000fcc <set_raw_irq_handler_and_unlock>:

static void set_raw_irq_handler_and_unlock(uint num, irq_handler_t handler, uint32_t save) {
10000fcc:	b580      	push	{r7, lr}
10000fce:	b08a      	sub	sp, #40	@ 0x28
10000fd0:	af00      	add	r7, sp, #0
10000fd2:	60f8      	str	r0, [r7, #12]
10000fd4:	60b9      	str	r1, [r7, #8]
10000fd6:	607a      	str	r2, [r7, #4]
    // update vtable (vtable_handler may be same or updated depending on cases, but we do it anyway for compactness)
    get_vtable()[VTABLE_FIRST_IRQ + num] = handler;
10000fd8:	f7ff ffd2 	bl	10000f80 <get_vtable>
10000fdc:	4602      	mov	r2, r0
10000fde:	68fb      	ldr	r3, [r7, #12]
10000fe0:	3310      	adds	r3, #16
10000fe2:	009b      	lsls	r3, r3, #2
10000fe4:	4413      	add	r3, r2
10000fe6:	68ba      	ldr	r2, [r7, #8]
10000fe8:	601a      	str	r2, [r3, #0]
    pico_default_asm_volatile ("dmb" : : : "memory");
10000fea:	f3bf 8f5f 	dmb	sy
}
10000fee:	bf00      	nop
10000ff0:	2309      	movs	r3, #9
10000ff2:	613b      	str	r3, [r7, #16]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10000ff4:	693b      	ldr	r3, [r7, #16]
10000ff6:	4a0d      	ldr	r2, [pc, #52]	@ (1000102c <set_raw_irq_handler_and_unlock+0x60>)
10000ff8:	4413      	add	r3, r2
10000ffa:	bf00      	nop
10000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
10000ffe:	687b      	ldr	r3, [r7, #4]
10001000:	623b      	str	r3, [r7, #32]
10001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10001004:	61fb      	str	r3, [r7, #28]
    SW_SPIN_LOCK_UNLOCK(lock);
10001006:	2300      	movs	r3, #0
10001008:	61bb      	str	r3, [r7, #24]
1000100a:	69bb      	ldr	r3, [r7, #24]
1000100c:	69fa      	ldr	r2, [r7, #28]
1000100e:	e8c2 3f8f 	stlb	r3, [r2]
}
10001012:	bf00      	nop
10001014:	6a3b      	ldr	r3, [r7, #32]
10001016:	617b      	str	r3, [r7, #20]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10001018:	697b      	ldr	r3, [r7, #20]
1000101a:	f383 8810 	msr	PRIMASK, r3
}
1000101e:	bf00      	nop
}
10001020:	bf00      	nop
    __dmb();
    spin_unlock(spin_lock_instance(PICO_SPINLOCK_ID_IRQ), save);
}
10001022:	bf00      	nop
10001024:	3728      	adds	r7, #40	@ 0x28
10001026:	46bd      	mov	sp, r7
10001028:	bd80      	pop	{r7, pc}
1000102a:	bf00      	nop
1000102c:	20001a44 	.word	0x20001a44

10001030 <irq_set_enabled>:

void irq_set_enabled(uint num, bool enabled) {
10001030:	b580      	push	{r7, lr}
10001032:	b082      	sub	sp, #8
10001034:	af00      	add	r7, sp, #0
10001036:	6078      	str	r0, [r7, #4]
10001038:	460b      	mov	r3, r1
1000103a:	70fb      	strb	r3, [r7, #3]
    check_irq_param(num);
1000103c:	6878      	ldr	r0, [r7, #4]
1000103e:	f7ff ff8a 	bl	10000f56 <check_irq_param>
    // really should update irq_set_mask_enabled?
    irq_set_mask_n_enabled(num / 32, 1u << (num % 32), enabled);
10001042:	687b      	ldr	r3, [r7, #4]
10001044:	0958      	lsrs	r0, r3, #5
10001046:	687b      	ldr	r3, [r7, #4]
10001048:	f003 031f 	and.w	r3, r3, #31
1000104c:	2201      	movs	r2, #1
1000104e:	fa02 f303 	lsl.w	r3, r2, r3
10001052:	78fa      	ldrb	r2, [r7, #3]
10001054:	4619      	mov	r1, r3
10001056:	f000 f847 	bl	100010e8 <irq_set_mask_n_enabled>
}
1000105a:	bf00      	nop
1000105c:	3708      	adds	r7, #8
1000105e:	46bd      	mov	sp, r7
10001060:	bd80      	pop	{r7, pc}
	...

10001064 <irq_is_enabled>:

bool irq_is_enabled(uint num) {
10001064:	b580      	push	{r7, lr}
10001066:	b082      	sub	sp, #8
10001068:	af00      	add	r7, sp, #0
1000106a:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
1000106c:	6878      	ldr	r0, [r7, #4]
1000106e:	f7ff ff72 	bl	10000f56 <check_irq_param>
#if PICO_RP2040
    return 0 != ((1u << num) & *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISER_OFFSET)));
#elif defined(__riscv)
    return 0 != (hazard3_irqarray_read(RVCSR_MEIEA_OFFSET, num / 16) & (1u << (num % 16)));
#else
    return 0 != (nvic_hw->iser[num/32] & (1 << num % 32));
10001072:	4a0a      	ldr	r2, [pc, #40]	@ (1000109c <irq_is_enabled+0x38>)
10001074:	687b      	ldr	r3, [r7, #4]
10001076:	095b      	lsrs	r3, r3, #5
10001078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000107c:	687a      	ldr	r2, [r7, #4]
1000107e:	f002 021f 	and.w	r2, r2, #31
10001082:	2101      	movs	r1, #1
10001084:	fa01 f202 	lsl.w	r2, r1, r2
10001088:	4013      	ands	r3, r2
1000108a:	2b00      	cmp	r3, #0
1000108c:	bf14      	ite	ne
1000108e:	2301      	movne	r3, #1
10001090:	2300      	moveq	r3, #0
10001092:	b2db      	uxtb	r3, r3
#endif
}
10001094:	4618      	mov	r0, r3
10001096:	3708      	adds	r7, #8
10001098:	46bd      	mov	sp, r7
1000109a:	bd80      	pop	{r7, pc}
1000109c:	e000e100 	.word	0xe000e100

100010a0 <irq_set_mask_n_enabled_internal>:

static inline void irq_set_mask_n_enabled_internal(uint n, uint32_t mask, bool enabled) {
100010a0:	b480      	push	{r7}
100010a2:	b085      	sub	sp, #20
100010a4:	af00      	add	r7, sp, #0
100010a6:	60f8      	str	r0, [r7, #12]
100010a8:	60b9      	str	r1, [r7, #8]
100010aa:	4613      	mov	r3, r2
100010ac:	71fb      	strb	r3, [r7, #7]
    } else {
        nvic_hw->icer = mask;
    }
#else
    // >32 IRQs (well this works for the bottom 32 which is all that is passed in
    if (enabled) {
100010ae:	79fb      	ldrb	r3, [r7, #7]
100010b0:	2b00      	cmp	r3, #0
100010b2:	d00b      	beq.n	100010cc <irq_set_mask_n_enabled_internal+0x2c>
        nvic_hw->icpr[n] = mask;
100010b4:	490b      	ldr	r1, [pc, #44]	@ (100010e4 <irq_set_mask_n_enabled_internal+0x44>)
100010b6:	68fb      	ldr	r3, [r7, #12]
100010b8:	3360      	adds	r3, #96	@ 0x60
100010ba:	68ba      	ldr	r2, [r7, #8]
100010bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        nvic_hw->iser[n] = mask;
100010c0:	4908      	ldr	r1, [pc, #32]	@ (100010e4 <irq_set_mask_n_enabled_internal+0x44>)
100010c2:	68fb      	ldr	r3, [r7, #12]
100010c4:	68ba      	ldr	r2, [r7, #8]
100010c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
        nvic_hw->icer[n] = mask;
    }
#endif
}
100010ca:	e005      	b.n	100010d8 <irq_set_mask_n_enabled_internal+0x38>
        nvic_hw->icer[n] = mask;
100010cc:	4905      	ldr	r1, [pc, #20]	@ (100010e4 <irq_set_mask_n_enabled_internal+0x44>)
100010ce:	68fb      	ldr	r3, [r7, #12]
100010d0:	3320      	adds	r3, #32
100010d2:	68ba      	ldr	r2, [r7, #8]
100010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
100010d8:	bf00      	nop
100010da:	3714      	adds	r7, #20
100010dc:	46bd      	mov	sp, r7
100010de:	f85d 7b04 	ldr.w	r7, [sp], #4
100010e2:	4770      	bx	lr
100010e4:	e000e100 	.word	0xe000e100

100010e8 <irq_set_mask_n_enabled>:

void irq_set_mask_enabled(uint32_t mask, bool enabled) {
    irq_set_mask_n_enabled_internal(0, mask, enabled);
}

void irq_set_mask_n_enabled(uint n, uint32_t mask, bool enabled) {
100010e8:	b580      	push	{r7, lr}
100010ea:	b084      	sub	sp, #16
100010ec:	af00      	add	r7, sp, #0
100010ee:	60f8      	str	r0, [r7, #12]
100010f0:	60b9      	str	r1, [r7, #8]
100010f2:	4613      	mov	r3, r2
100010f4:	71fb      	strb	r3, [r7, #7]
    irq_set_mask_n_enabled_internal(n, mask, enabled);
100010f6:	79fb      	ldrb	r3, [r7, #7]
100010f8:	461a      	mov	r2, r3
100010fa:	68b9      	ldr	r1, [r7, #8]
100010fc:	68f8      	ldr	r0, [r7, #12]
100010fe:	f7ff ffcf 	bl	100010a0 <irq_set_mask_n_enabled_internal>
}
10001102:	bf00      	nop
10001104:	3710      	adds	r7, #16
10001106:	46bd      	mov	sp, r7
10001108:	bd80      	pop	{r7, pc}
	...

1000110c <irq_set_pending>:

void irq_set_pending(uint num) {
1000110c:	b580      	push	{r7, lr}
1000110e:	b082      	sub	sp, #8
10001110:	af00      	add	r7, sp, #0
10001112:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
10001114:	6878      	ldr	r0, [r7, #4]
10001116:	f7ff ff1e 	bl	10000f56 <check_irq_param>
    hazard3_irqarray_set(RVCSR_MEIFA_OFFSET, num / 16, 1u << (num % 16));
#else
#if PICO_RP2040
    *((io_rw_32 *) (PPB_BASE + M0PLUS_NVIC_ISPR_OFFSET)) = 1u << num;
#else
    nvic_hw->ispr[num/32] = 1 << (num % 32);
1000111a:	687b      	ldr	r3, [r7, #4]
1000111c:	f003 031f 	and.w	r3, r3, #31
10001120:	2201      	movs	r2, #1
10001122:	fa02 f103 	lsl.w	r1, r2, r3
10001126:	4a05      	ldr	r2, [pc, #20]	@ (1000113c <irq_set_pending+0x30>)
10001128:	687b      	ldr	r3, [r7, #4]
1000112a:	095b      	lsrs	r3, r3, #5
1000112c:	3340      	adds	r3, #64	@ 0x40
1000112e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#endif
#endif
}
10001132:	bf00      	nop
10001134:	3708      	adds	r7, #8
10001136:	46bd      	mov	sp, r7
10001138:	bd80      	pop	{r7, pc}
1000113a:	bf00      	nop
1000113c:	e000e100 	.word	0xe000e100

10001140 <is_shared_irq_raw_handler>:
#endif
} irq_handler_chain_slots[PICO_MAX_SHARED_IRQ_HANDLERS];

static int8_t irq_handler_chain_free_slot_head;

static inline bool is_shared_irq_raw_handler(irq_handler_t raw_handler) {
10001140:	b480      	push	{r7}
10001142:	b083      	sub	sp, #12
10001144:	af00      	add	r7, sp, #0
10001146:	6078      	str	r0, [r7, #4]
    return (uintptr_t)raw_handler - (uintptr_t)irq_handler_chain_slots < sizeof(irq_handler_chain_slots);
10001148:	687b      	ldr	r3, [r7, #4]
1000114a:	4a06      	ldr	r2, [pc, #24]	@ (10001164 <is_shared_irq_raw_handler+0x24>)
1000114c:	1a9b      	subs	r3, r3, r2
1000114e:	2b2f      	cmp	r3, #47	@ 0x2f
10001150:	bf94      	ite	ls
10001152:	2301      	movls	r3, #1
10001154:	2300      	movhi	r3, #0
10001156:	b2db      	uxtb	r3, r3
}
10001158:	4618      	mov	r0, r3
1000115a:	370c      	adds	r7, #12
1000115c:	46bd      	mov	sp, r7
1000115e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001162:	4770      	bx	lr
10001164:	2000152c 	.word	0x2000152c

10001168 <irq_has_shared_handler>:

bool irq_has_shared_handler(uint irq_num) {
10001168:	b580      	push	{r7, lr}
1000116a:	b084      	sub	sp, #16
1000116c:	af00      	add	r7, sp, #0
1000116e:	6078      	str	r0, [r7, #4]
    check_irq_param(irq_num);
10001170:	6878      	ldr	r0, [r7, #4]
10001172:	f7ff fef0 	bl	10000f56 <check_irq_param>
    irq_handler_t handler = irq_get_vtable_handler(irq_num);
10001176:	6878      	ldr	r0, [r7, #4]
10001178:	f000 f814 	bl	100011a4 <irq_get_vtable_handler>
1000117c:	60f8      	str	r0, [r7, #12]
    return handler && is_shared_irq_raw_handler(handler);
1000117e:	68fb      	ldr	r3, [r7, #12]
10001180:	2b00      	cmp	r3, #0
10001182:	d007      	beq.n	10001194 <irq_has_shared_handler+0x2c>
10001184:	68f8      	ldr	r0, [r7, #12]
10001186:	f7ff ffdb 	bl	10001140 <is_shared_irq_raw_handler>
1000118a:	4603      	mov	r3, r0
1000118c:	2b00      	cmp	r3, #0
1000118e:	d001      	beq.n	10001194 <irq_has_shared_handler+0x2c>
10001190:	2301      	movs	r3, #1
10001192:	e000      	b.n	10001196 <irq_has_shared_handler+0x2e>
10001194:	2300      	movs	r3, #0
10001196:	f003 0301 	and.w	r3, r3, #1
1000119a:	b2db      	uxtb	r3, r3
}
1000119c:	4618      	mov	r0, r3
1000119e:	3710      	adds	r7, #16
100011a0:	46bd      	mov	sp, r7
100011a2:	bd80      	pop	{r7, pc}

100011a4 <irq_get_vtable_handler>:
    return false;
}
#endif


irq_handler_t irq_get_vtable_handler(uint num) {
100011a4:	b580      	push	{r7, lr}
100011a6:	b082      	sub	sp, #8
100011a8:	af00      	add	r7, sp, #0
100011aa:	6078      	str	r0, [r7, #4]
    check_irq_param(num);
100011ac:	6878      	ldr	r0, [r7, #4]
100011ae:	f7ff fed2 	bl	10000f56 <check_irq_param>
    return get_vtable()[VTABLE_FIRST_IRQ + num];
100011b2:	f7ff fee5 	bl	10000f80 <get_vtable>
100011b6:	4602      	mov	r2, r0
100011b8:	687b      	ldr	r3, [r7, #4]
100011ba:	3310      	adds	r3, #16
100011bc:	009b      	lsls	r3, r3, #2
100011be:	4413      	add	r3, r2
100011c0:	681b      	ldr	r3, [r3, #0]
}
100011c2:	4618      	mov	r0, r3
100011c4:	3708      	adds	r7, #8
100011c6:	46bd      	mov	sp, r7
100011c8:	bd80      	pop	{r7, pc}
	...

100011cc <irq_set_exclusive_handler>:

void irq_set_exclusive_handler(uint num, irq_handler_t handler) {
100011cc:	b580      	push	{r7, lr}
100011ce:	b08c      	sub	sp, #48	@ 0x30
100011d0:	af00      	add	r7, sp, #0
100011d2:	6078      	str	r0, [r7, #4]
100011d4:	6039      	str	r1, [r7, #0]
    check_irq_param(num);
100011d6:	6878      	ldr	r0, [r7, #4]
100011d8:	f7ff febd 	bl	10000f56 <check_irq_param>
100011dc:	2309      	movs	r3, #9
100011de:	60bb      	str	r3, [r7, #8]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
100011e0:	68bb      	ldr	r3, [r7, #8]
100011e2:	4a1e      	ldr	r2, [pc, #120]	@ (1000125c <irq_set_exclusive_handler+0x90>)
100011e4:	4413      	add	r3, r2
100011e6:	bf00      	nop
#if !PICO_NO_RAM_VECTOR_TABLE
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
100011e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
100011ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100011ec:	623b      	str	r3, [r7, #32]
    pico_default_asm_volatile (
100011ee:	f3ef 8310 	mrs	r3, PRIMASK
100011f2:	b672      	cpsid	i
100011f4:	61fb      	str	r3, [r7, #28]
    return status;
100011f6:	69fb      	ldr	r3, [r7, #28]
    uint32_t save = save_and_disable_interrupts();
100011f8:	61bb      	str	r3, [r7, #24]
100011fa:	6a3b      	ldr	r3, [r7, #32]
100011fc:	617b      	str	r3, [r7, #20]
    SW_SPIN_LOCK_LOCK(lock);
100011fe:	6979      	ldr	r1, [r7, #20]
10001200:	e8d1 3fcf 	ldaexb	r3, [r1]
10001204:	2201      	movs	r2, #1
10001206:	2b00      	cmp	r3, #0
10001208:	d1fa      	bne.n	10001200 <irq_set_exclusive_handler+0x34>
1000120a:	e8c1 2f43 	strexb	r3, r2, [r1]
1000120e:	2b00      	cmp	r3, #0
10001210:	d1f6      	bne.n	10001200 <irq_set_exclusive_handler+0x34>
10001212:	613a      	str	r2, [r7, #16]
10001214:	60fb      	str	r3, [r7, #12]
    pico_default_asm_volatile ("dmb" : : : "memory");
10001216:	f3bf 8f5f 	dmb	sy
}
1000121a:	bf00      	nop
}
1000121c:	bf00      	nop
}
1000121e:	bf00      	nop
    return save;
10001220:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = spin_lock_blocking(lock);
10001222:	62bb      	str	r3, [r7, #40]	@ 0x28
    __unused irq_handler_t current = irq_get_vtable_handler(num);
10001224:	6878      	ldr	r0, [r7, #4]
10001226:	f7ff ffbd 	bl	100011a4 <irq_get_vtable_handler>
1000122a:	6278      	str	r0, [r7, #36]	@ 0x24
    hard_assert(current == __unhandled_user_irq || current == handler);
1000122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000122e:	4a0c      	ldr	r2, [pc, #48]	@ (10001260 <irq_set_exclusive_handler+0x94>)
10001230:	4293      	cmp	r3, r2
10001232:	d009      	beq.n	10001248 <irq_set_exclusive_handler+0x7c>
10001234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10001236:	683b      	ldr	r3, [r7, #0]
10001238:	429a      	cmp	r2, r3
1000123a:	d005      	beq.n	10001248 <irq_set_exclusive_handler+0x7c>
1000123c:	4b09      	ldr	r3, [pc, #36]	@ (10001264 <irq_set_exclusive_handler+0x98>)
1000123e:	4a0a      	ldr	r2, [pc, #40]	@ (10001268 <irq_set_exclusive_handler+0x9c>)
10001240:	21e1      	movs	r1, #225	@ 0xe1
10001242:	480a      	ldr	r0, [pc, #40]	@ (1000126c <irq_set_exclusive_handler+0xa0>)
10001244:	f004 fb16 	bl	10005874 <__assert_func>
    set_raw_irq_handler_and_unlock(num, handler, save);
10001248:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000124a:	6839      	ldr	r1, [r7, #0]
1000124c:	6878      	ldr	r0, [r7, #4]
1000124e:	f7ff febd 	bl	10000fcc <set_raw_irq_handler_and_unlock>
#else
    panic_unsupported();
#endif
}
10001252:	bf00      	nop
10001254:	3730      	adds	r7, #48	@ 0x30
10001256:	46bd      	mov	sp, r7
10001258:	bd80      	pop	{r7, pc}
1000125a:	bf00      	nop
1000125c:	20001a44 	.word	0x20001a44
10001260:	1000011d 	.word	0x1000011d
10001264:	1000b228 	.word	0x1000b228
10001268:	1000b47c 	.word	0x1000b47c
1000126c:	1000b260 	.word	0x1000b260

10001270 <make_j_16>:

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS

#ifndef __riscv

static uint16_t make_j_16(uint16_t *from, void *to) {
10001270:	b580      	push	{r7, lr}
10001272:	b086      	sub	sp, #24
10001274:	af00      	add	r7, sp, #0
10001276:	6078      	str	r0, [r7, #4]
10001278:	6039      	str	r1, [r7, #0]
    uint32_t ui_from = (uint32_t)from;
1000127a:	687b      	ldr	r3, [r7, #4]
1000127c:	617b      	str	r3, [r7, #20]
    uint32_t ui_to = (uint32_t)to;
1000127e:	683b      	ldr	r3, [r7, #0]
10001280:	613b      	str	r3, [r7, #16]
    int32_t delta = (int32_t)(ui_to - ui_from - 4);
10001282:	693a      	ldr	r2, [r7, #16]
10001284:	697b      	ldr	r3, [r7, #20]
10001286:	1ad3      	subs	r3, r2, r3
10001288:	3b04      	subs	r3, #4
1000128a:	60fb      	str	r3, [r7, #12]
    assert(delta >= -2048 && delta <= 2046 && !(delta & 1));
1000128c:	68fb      	ldr	r3, [r7, #12]
1000128e:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
10001292:	db09      	blt.n	100012a8 <make_j_16+0x38>
10001294:	68fb      	ldr	r3, [r7, #12]
10001296:	f240 72fe 	movw	r2, #2046	@ 0x7fe
1000129a:	4293      	cmp	r3, r2
1000129c:	dc04      	bgt.n	100012a8 <make_j_16+0x38>
1000129e:	68fb      	ldr	r3, [r7, #12]
100012a0:	f003 0301 	and.w	r3, r3, #1
100012a4:	2b00      	cmp	r3, #0
100012a6:	d006      	beq.n	100012b6 <make_j_16+0x46>
100012a8:	4b0b      	ldr	r3, [pc, #44]	@ (100012d8 <make_j_16+0x68>)
100012aa:	4a0c      	ldr	r2, [pc, #48]	@ (100012dc <make_j_16+0x6c>)
100012ac:	f240 1101 	movw	r1, #257	@ 0x101
100012b0:	480b      	ldr	r0, [pc, #44]	@ (100012e0 <make_j_16+0x70>)
100012b2:	f004 fadf 	bl	10005874 <__assert_func>
    return (uint16_t)(0xe000 | ((delta >> 1) & 0x7ff));
100012b6:	68fb      	ldr	r3, [r7, #12]
100012b8:	105b      	asrs	r3, r3, #1
100012ba:	b21b      	sxth	r3, r3
100012bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
100012c0:	b21b      	sxth	r3, r3
100012c2:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
100012c6:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
100012ca:	b21b      	sxth	r3, r3
100012cc:	b29b      	uxth	r3, r3
}
100012ce:	4618      	mov	r0, r3
100012d0:	3718      	adds	r7, #24
100012d2:	46bd      	mov	sp, r7
100012d4:	bd80      	pop	{r7, pc}
100012d6:	bf00      	nop
100012d8:	1000b2a0 	.word	0x1000b2a0
100012dc:	1000b498 	.word	0x1000b498
100012e0:	1000b260 	.word	0x1000b260

100012e4 <resolve_j_16>:
    assert(!(delta >> 11u));
    from[0] = (uint16_t)(0xf000 | ((delta >> 11u) & 0x7ffu));
    from[1] = (uint16_t)(0xf800 | (delta & 0x7ffu));
}

static inline void *resolve_j_16(uint16_t *inst) {
100012e4:	b580      	push	{r7, lr}
100012e6:	b084      	sub	sp, #16
100012e8:	af00      	add	r7, sp, #0
100012ea:	6078      	str	r0, [r7, #4]
    assert(0x1c == (*inst)>>11u);
100012ec:	687b      	ldr	r3, [r7, #4]
100012ee:	881b      	ldrh	r3, [r3, #0]
100012f0:	0adb      	lsrs	r3, r3, #11
100012f2:	b29b      	uxth	r3, r3
100012f4:	2b1c      	cmp	r3, #28
100012f6:	d006      	beq.n	10001306 <resolve_j_16+0x22>
100012f8:	4b0d      	ldr	r3, [pc, #52]	@ (10001330 <resolve_j_16+0x4c>)
100012fa:	4a0e      	ldr	r2, [pc, #56]	@ (10001334 <resolve_j_16+0x50>)
100012fc:	f240 110f 	movw	r1, #271	@ 0x10f
10001300:	480d      	ldr	r0, [pc, #52]	@ (10001338 <resolve_j_16+0x54>)
10001302:	f004 fab7 	bl	10005874 <__assert_func>
    int32_t i_addr = (*inst) << 21u;
10001306:	687b      	ldr	r3, [r7, #4]
10001308:	881b      	ldrh	r3, [r3, #0]
1000130a:	055b      	lsls	r3, r3, #21
1000130c:	60fb      	str	r3, [r7, #12]
    i_addr /= (int32_t)(1u<<21u);
1000130e:	68fb      	ldr	r3, [r7, #12]
10001310:	2b00      	cmp	r3, #0
10001312:	da02      	bge.n	1000131a <resolve_j_16+0x36>
10001314:	4a09      	ldr	r2, [pc, #36]	@ (1000133c <resolve_j_16+0x58>)
10001316:	441a      	add	r2, r3
10001318:	4613      	mov	r3, r2
1000131a:	155b      	asrs	r3, r3, #21
1000131c:	60fb      	str	r3, [r7, #12]
    return inst + 2 + i_addr;
1000131e:	68fb      	ldr	r3, [r7, #12]
10001320:	3302      	adds	r3, #2
10001322:	005b      	lsls	r3, r3, #1
10001324:	687a      	ldr	r2, [r7, #4]
10001326:	4413      	add	r3, r2
}
10001328:	4618      	mov	r0, r3
1000132a:	3710      	adds	r7, #16
1000132c:	46bd      	mov	sp, r7
1000132e:	bd80      	pop	{r7, pc}
10001330:	1000b2e0 	.word	0x1000b2e0
10001334:	1000b4bc 	.word	0x1000b4bc
10001338:	1000b260 	.word	0x1000b260
1000133c:	001fffff 	.word	0x001fffff

10001340 <slot_diff>:
}

#endif

// GCC produces horrible code for subtraction of pointers here, and it was bugging me
static inline int8_t slot_diff(struct irq_handler_chain_slot *to, struct irq_handler_chain_slot *from) {
10001340:	b480      	push	{r7}
10001342:	b085      	sub	sp, #20
10001344:	af00      	add	r7, sp, #0
10001346:	6078      	str	r0, [r7, #4]
10001348:	6039      	str	r1, [r7, #0]
    static_assert(sizeof(struct irq_handler_chain_slot) == 12, "");
#ifdef __riscv
    // todo I think RISC-V also deserves a fancy pointer diff implementation
    return (int8_t)(to - from);
#else
    int32_t result = 0xaaaa;
1000134a:	f64a 23aa 	movw	r3, #43690	@ 0xaaaa
1000134e:	60fb      	str	r3, [r7, #12]
    // return (to - from);
    // note this implementation has limited range, but is fine for plenty more than -128->127 result
    pico_default_asm (
10001350:	6839      	ldr	r1, [r7, #0]
10001352:	68fa      	ldr	r2, [r7, #12]
10001354:	687b      	ldr	r3, [r7, #4]
10001356:	1a5b      	subs	r3, r3, r1
10001358:	415b      	adcs	r3, r3
1000135a:	435a      	muls	r2, r3
1000135c:	0d12      	lsrs	r2, r2, #20
1000135e:	60fa      	str	r2, [r7, #12]
10001360:	607b      	str	r3, [r7, #4]
         "lsrs %0, %0, #20\n"
         : "+l" (result), "+l" (to)
         : "l" (from)
         : "cc"
         );
    return (int8_t)result;
10001362:	68fb      	ldr	r3, [r7, #12]
10001364:	b25b      	sxtb	r3, r3
#endif
}
10001366:	4618      	mov	r0, r3
10001368:	3714      	adds	r7, #20
1000136a:	46bd      	mov	sp, r7
1000136c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001370:	4770      	bx	lr
	...

10001374 <get_slot_index>:
static const uint16_t inst16_return_from_last_slot = 0xbd01; // pop {r0, pc}
#else
static const uint16_t inst16_return_from_last_slot = 0xbe42; // cm.popret {ra}, 16
#endif

static inline int8_t get_slot_index(struct irq_handler_chain_slot *slot) {
10001374:	b580      	push	{r7, lr}
10001376:	b082      	sub	sp, #8
10001378:	af00      	add	r7, sp, #0
1000137a:	6078      	str	r0, [r7, #4]
    return slot_diff(slot, irq_handler_chain_slots);
1000137c:	4904      	ldr	r1, [pc, #16]	@ (10001390 <get_slot_index+0x1c>)
1000137e:	6878      	ldr	r0, [r7, #4]
10001380:	f7ff ffde 	bl	10001340 <slot_diff>
10001384:	4603      	mov	r3, r0
}
10001386:	4618      	mov	r0, r3
10001388:	3708      	adds	r7, #8
1000138a:	46bd      	mov	sp, r7
1000138c:	bd80      	pop	{r7, pc}
1000138e:	bf00      	nop
10001390:	2000152c 	.word	0x2000152c

10001394 <irq_add_shared_handler>:
#endif

void irq_add_shared_handler(uint num, irq_handler_t handler, uint8_t order_priority) {
10001394:	b590      	push	{r4, r7, lr}
10001396:	b09d      	sub	sp, #116	@ 0x74
10001398:	af00      	add	r7, sp, #0
1000139a:	60f8      	str	r0, [r7, #12]
1000139c:	60b9      	str	r1, [r7, #8]
1000139e:	4613      	mov	r3, r2
100013a0:	71fb      	strb	r3, [r7, #7]
    check_irq_param(num);
100013a2:	68f8      	ldr	r0, [r7, #12]
100013a4:	f7ff fdd7 	bl	10000f56 <check_irq_param>
100013a8:	2309      	movs	r3, #9
100013aa:	637b      	str	r3, [r7, #52]	@ 0x34
    return SW_SPIN_LOCK_INSTANCE(lock_num);
100013ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100013ae:	4a9b      	ldr	r2, [pc, #620]	@ (1000161c <irq_add_shared_handler+0x288>)
100013b0:	4413      	add	r3, r2
100013b2:	bf00      	nop
#if PICO_NO_RAM_VECTOR_TABLE
    panic_unsupported();
#elif PICO_DISABLE_SHARED_IRQ_HANDLERS
    irq_set_exclusive_handler(num, handler);
#else
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
100013b4:	663b      	str	r3, [r7, #96]	@ 0x60
100013b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
100013b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    pico_default_asm_volatile (
100013ba:	f3ef 8310 	mrs	r3, PRIMASK
100013be:	b672      	cpsid	i
100013c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    return status;
100013c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    uint32_t save = save_and_disable_interrupts();
100013c4:	647b      	str	r3, [r7, #68]	@ 0x44
100013c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100013c8:	643b      	str	r3, [r7, #64]	@ 0x40
    SW_SPIN_LOCK_LOCK(lock);
100013ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
100013cc:	e8d1 3fcf 	ldaexb	r3, [r1]
100013d0:	2201      	movs	r2, #1
100013d2:	2b00      	cmp	r3, #0
100013d4:	d1fa      	bne.n	100013cc <irq_add_shared_handler+0x38>
100013d6:	e8c1 2f43 	strexb	r3, r2, [r1]
100013da:	2b00      	cmp	r3, #0
100013dc:	d1f6      	bne.n	100013cc <irq_add_shared_handler+0x38>
100013de:	63fa      	str	r2, [r7, #60]	@ 0x3c
100013e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    pico_default_asm_volatile ("dmb" : : : "memory");
100013e2:	f3bf 8f5f 	dmb	sy
}
100013e6:	bf00      	nop
}
100013e8:	bf00      	nop
}
100013ea:	bf00      	nop
    return save;
100013ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    uint32_t save = spin_lock_blocking(lock);
100013ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    hard_assert(irq_handler_chain_free_slot_head >= 0); // we must have a slot
100013f0:	4b8b      	ldr	r3, [pc, #556]	@ (10001620 <irq_add_shared_handler+0x28c>)
100013f2:	f993 3000 	ldrsb.w	r3, [r3]
100013f6:	2b00      	cmp	r3, #0
100013f8:	da06      	bge.n	10001408 <irq_add_shared_handler+0x74>
100013fa:	4b8a      	ldr	r3, [pc, #552]	@ (10001624 <irq_add_shared_handler+0x290>)
100013fc:	4a8a      	ldr	r2, [pc, #552]	@ (10001628 <irq_add_shared_handler+0x294>)
100013fe:	f240 116d 	movw	r1, #365	@ 0x16d
10001402:	488a      	ldr	r0, [pc, #552]	@ (1000162c <irq_add_shared_handler+0x298>)
10001404:	f004 fa36 	bl	10005874 <__assert_func>
    struct irq_handler_chain_slot *slot = &irq_handler_chain_slots[irq_handler_chain_free_slot_head];
10001408:	4b85      	ldr	r3, [pc, #532]	@ (10001620 <irq_add_shared_handler+0x28c>)
1000140a:	f993 3000 	ldrsb.w	r3, [r3]
1000140e:	461a      	mov	r2, r3
10001410:	4613      	mov	r3, r2
10001412:	005b      	lsls	r3, r3, #1
10001414:	4413      	add	r3, r2
10001416:	009b      	lsls	r3, r3, #2
10001418:	4a85      	ldr	r2, [pc, #532]	@ (10001630 <irq_add_shared_handler+0x29c>)
1000141a:	4413      	add	r3, r2
1000141c:	65bb      	str	r3, [r7, #88]	@ 0x58
    int8_t slot_index = irq_handler_chain_free_slot_head;
1000141e:	4b80      	ldr	r3, [pc, #512]	@ (10001620 <irq_add_shared_handler+0x28c>)
10001420:	781b      	ldrb	r3, [r3, #0]
10001422:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    irq_handler_chain_free_slot_head = slot->link;
10001426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10001428:	f993 2006 	ldrsb.w	r2, [r3, #6]
1000142c:	4b7c      	ldr	r3, [pc, #496]	@ (10001620 <irq_add_shared_handler+0x28c>)
1000142e:	701a      	strb	r2, [r3, #0]
    irq_handler_t vtable_handler = get_vtable()[VTABLE_FIRST_IRQ + num];
10001430:	f7ff fda6 	bl	10000f80 <get_vtable>
10001434:	4602      	mov	r2, r0
10001436:	68fb      	ldr	r3, [r7, #12]
10001438:	3310      	adds	r3, #16
1000143a:	009b      	lsls	r3, r3, #2
1000143c:	4413      	add	r3, r2
1000143e:	681b      	ldr	r3, [r3, #0]
10001440:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (!is_shared_irq_raw_handler(vtable_handler)) {
10001442:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
10001444:	f7ff fe7c 	bl	10001140 <is_shared_irq_raw_handler>
10001448:	4603      	mov	r3, r0
1000144a:	f083 0301 	eor.w	r3, r3, #1
1000144e:	b2db      	uxtb	r3, r3
10001450:	2b00      	cmp	r3, #0
10001452:	d02e      	beq.n	100014b2 <irq_add_shared_handler+0x11e>
        // start new chain
        hard_assert(vtable_handler == __unhandled_user_irq);
10001454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10001456:	4a77      	ldr	r2, [pc, #476]	@ (10001634 <irq_add_shared_handler+0x2a0>)
10001458:	4293      	cmp	r3, r2
1000145a:	d006      	beq.n	1000146a <irq_add_shared_handler+0xd6>
1000145c:	4b76      	ldr	r3, [pc, #472]	@ (10001638 <irq_add_shared_handler+0x2a4>)
1000145e:	4a72      	ldr	r2, [pc, #456]	@ (10001628 <irq_add_shared_handler+0x294>)
10001460:	f44f 71ba 	mov.w	r1, #372	@ 0x174
10001464:	4871      	ldr	r0, [pc, #452]	@ (1000162c <irq_add_shared_handler+0x298>)
10001466:	f004 fa05 	bl	10005874 <__assert_func>
        struct irq_handler_chain_slot slot_data = {
1000146a:	f44f 4321 	mov.w	r3, #41216	@ 0xa100
1000146e:	853b      	strh	r3, [r7, #40]	@ 0x28
#ifndef __riscv
                .inst1 = 0xa100,                                                             // add r1, pc, #0
                .inst2 = make_j_16(&slot->inst2, (void *) irq_handler_chain_first_slot),     // b irq_handler_chain_first_slot
10001470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10001472:	3302      	adds	r3, #2
10001474:	4971      	ldr	r1, [pc, #452]	@ (1000163c <irq_add_shared_handler+0x2a8>)
10001476:	4618      	mov	r0, r3
10001478:	f7ff fefa 	bl	10001270 <make_j_16>
1000147c:	4603      	mov	r3, r0
        struct irq_handler_chain_slot slot_data = {
1000147e:	857b      	strh	r3, [r7, #42]	@ 0x2a
10001480:	f64b 5301 	movw	r3, #48385	@ 0xbd01
10001484:	85bb      	strh	r3, [r7, #44]	@ 0x2c
10001486:	23ff      	movs	r3, #255	@ 0xff
10001488:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
1000148c:	79fb      	ldrb	r3, [r7, #7]
1000148e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
10001492:	68bb      	ldr	r3, [r7, #8]
10001494:	633b      	str	r3, [r7, #48]	@ 0x30
#endif
                .inst3 = inst16_return_from_last_slot,
                .link = -1,
                .priority = order_priority
        };
        *slot = slot_data;
10001496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10001498:	461c      	mov	r4, r3
1000149a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
1000149e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
100014a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        vtable_handler = (irq_handler_t)add_thumb_bit(slot);
100014a6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
100014a8:	f7ff fd76 	bl	10000f98 <add_thumb_bit>
100014ac:	4603      	mov	r3, r0
100014ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
100014b0:	e0ab      	b.n	1000160a <irq_add_shared_handler+0x276>
    } else {
        assert(!((((uintptr_t)remove_thumb_bit(vtable_handler)) - ((uintptr_t)irq_handler_chain_slots)) % sizeof(struct irq_handler_chain_slot)));
100014b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
100014b4:	f7ff fd7d 	bl	10000fb2 <remove_thumb_bit>
100014b8:	4603      	mov	r3, r0
100014ba:	461a      	mov	r2, r3
100014bc:	4b5c      	ldr	r3, [pc, #368]	@ (10001630 <irq_add_shared_handler+0x29c>)
100014be:	1ad1      	subs	r1, r2, r3
100014c0:	4b5f      	ldr	r3, [pc, #380]	@ (10001640 <irq_add_shared_handler+0x2ac>)
100014c2:	fba3 2301 	umull	r2, r3, r3, r1
100014c6:	08da      	lsrs	r2, r3, #3
100014c8:	4613      	mov	r3, r2
100014ca:	005b      	lsls	r3, r3, #1
100014cc:	4413      	add	r3, r2
100014ce:	009b      	lsls	r3, r3, #2
100014d0:	1aca      	subs	r2, r1, r3
100014d2:	2a00      	cmp	r2, #0
100014d4:	d006      	beq.n	100014e4 <irq_add_shared_handler+0x150>
100014d6:	4b5b      	ldr	r3, [pc, #364]	@ (10001644 <irq_add_shared_handler+0x2b0>)
100014d8:	4a53      	ldr	r2, [pc, #332]	@ (10001628 <irq_add_shared_handler+0x294>)
100014da:	f240 1185 	movw	r1, #389	@ 0x185
100014de:	4853      	ldr	r0, [pc, #332]	@ (1000162c <irq_add_shared_handler+0x298>)
100014e0:	f004 f9c8 	bl	10005874 <__assert_func>
        struct irq_handler_chain_slot *prev_slot = NULL;
100014e4:	2300      	movs	r3, #0
100014e6:	66bb      	str	r3, [r7, #104]	@ 0x68
        struct irq_handler_chain_slot *existing_vtable_slot = remove_thumb_bit((void *) vtable_handler);
100014e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
100014ea:	f7ff fd62 	bl	10000fb2 <remove_thumb_bit>
100014ee:	6538      	str	r0, [r7, #80]	@ 0x50
        struct irq_handler_chain_slot *cur_slot = existing_vtable_slot;
100014f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
100014f2:	667b      	str	r3, [r7, #100]	@ 0x64
        while (cur_slot->priority > order_priority) {
100014f4:	e011      	b.n	1000151a <irq_add_shared_handler+0x186>
            prev_slot = cur_slot;
100014f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100014f8:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (cur_slot->link < 0) break;
100014fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100014fc:	f993 3006 	ldrsb.w	r3, [r3, #6]
10001500:	2b00      	cmp	r3, #0
10001502:	db10      	blt.n	10001526 <irq_add_shared_handler+0x192>
            cur_slot = &irq_handler_chain_slots[cur_slot->link];
10001504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10001506:	f993 3006 	ldrsb.w	r3, [r3, #6]
1000150a:	461a      	mov	r2, r3
1000150c:	4613      	mov	r3, r2
1000150e:	005b      	lsls	r3, r3, #1
10001510:	4413      	add	r3, r2
10001512:	009b      	lsls	r3, r3, #2
10001514:	4a46      	ldr	r2, [pc, #280]	@ (10001630 <irq_add_shared_handler+0x29c>)
10001516:	4413      	add	r3, r2
10001518:	667b      	str	r3, [r7, #100]	@ 0x64
        while (cur_slot->priority > order_priority) {
1000151a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000151c:	79db      	ldrb	r3, [r3, #7]
1000151e:	79fa      	ldrb	r2, [r7, #7]
10001520:	429a      	cmp	r2, r3
10001522:	d3e8      	bcc.n	100014f6 <irq_add_shared_handler+0x162>
10001524:	e000      	b.n	10001528 <irq_add_shared_handler+0x194>
            if (cur_slot->link < 0) break;
10001526:	bf00      	nop
        }
        if (prev_slot) {
10001528:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
1000152a:	2b00      	cmp	r3, #0
1000152c:	d03c      	beq.n	100015a8 <irq_add_shared_handler+0x214>
            // insert into chain
            struct irq_handler_chain_slot slot_data = {
1000152e:	f644 0301 	movw	r3, #18433	@ 0x4801
10001532:	83bb      	strh	r3, [r7, #28]
10001534:	f44f 438f 	mov.w	r3, #18304	@ 0x4780
10001538:	83fb      	strh	r3, [r7, #30]
                    .handler = handler,
#else
                    .inst1 = make_call_inst1(handler),                                 // lui ra, %hi(handler)
                    .inst2 = make_call_inst2(handler),                                 // jalr ra, %lo(handler)(ra)
#endif
                    .inst3 = prev_slot->link >= 0 ?
1000153a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
1000153c:	f993 3006 	ldrsb.w	r3, [r3, #6]
            struct irq_handler_chain_slot slot_data = {
10001540:	2b00      	cmp	r3, #0
10001542:	db0d      	blt.n	10001560 <irq_add_shared_handler+0x1cc>
                            make_j_16(&slot->inst3, resolve_j_16(&prev_slot->inst3)) : // b next_slot
10001544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10001546:	1d1c      	adds	r4, r3, #4
10001548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
1000154a:	3304      	adds	r3, #4
1000154c:	4618      	mov	r0, r3
1000154e:	f7ff fec9 	bl	100012e4 <resolve_j_16>
10001552:	4603      	mov	r3, r0
10001554:	4619      	mov	r1, r3
10001556:	4620      	mov	r0, r4
10001558:	f7ff fe8a 	bl	10001270 <make_j_16>
1000155c:	4603      	mov	r3, r0
1000155e:	e001      	b.n	10001564 <irq_add_shared_handler+0x1d0>
            struct irq_handler_chain_slot slot_data = {
10001560:	f64b 5301 	movw	r3, #48385	@ 0xbd01
10001564:	843b      	strh	r3, [r7, #32]
                            inst16_return_from_last_slot,
                    .link = prev_slot->link,
10001566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10001568:	f993 3006 	ldrsb.w	r3, [r3, #6]
            struct irq_handler_chain_slot slot_data = {
1000156c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
10001570:	79fb      	ldrb	r3, [r7, #7]
10001572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
10001576:	68bb      	ldr	r3, [r7, #8]
10001578:	627b      	str	r3, [r7, #36]	@ 0x24
                    .priority = order_priority
            };
            // update code and data links
            prev_slot->inst3 = make_j_16(&prev_slot->inst3, slot),
1000157a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
1000157c:	3304      	adds	r3, #4
1000157e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
10001580:	4618      	mov	r0, r3
10001582:	f7ff fe75 	bl	10001270 <make_j_16>
10001586:	4603      	mov	r3, r0
10001588:	461a      	mov	r2, r3
1000158a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
1000158c:	809a      	strh	r2, [r3, #4]
            prev_slot->link = slot_index;
1000158e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10001590:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
10001594:	719a      	strb	r2, [r3, #6]
            *slot = slot_data;
10001596:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10001598:	461c      	mov	r4, r3
1000159a:	f107 031c 	add.w	r3, r7, #28
1000159e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
100015a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
100015a6:	e030      	b.n	1000160a <irq_add_shared_handler+0x276>
        } else {
            // update with new chain head
            struct irq_handler_chain_slot slot_data = {
100015a8:	f44f 4321 	mov.w	r3, #41216	@ 0xa100
100015ac:	823b      	strh	r3, [r7, #16]
#ifndef __riscv
                    .inst1 = 0xa100,                                                           // add r1, pc, #0
                    .inst2 = make_j_16(&slot->inst2, (void *) irq_handler_chain_first_slot),   // b irq_handler_chain_first_slot
100015ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
100015b0:	3302      	adds	r3, #2
100015b2:	4922      	ldr	r1, [pc, #136]	@ (1000163c <irq_add_shared_handler+0x2a8>)
100015b4:	4618      	mov	r0, r3
100015b6:	f7ff fe5b 	bl	10001270 <make_j_16>
100015ba:	4603      	mov	r3, r0
            struct irq_handler_chain_slot slot_data = {
100015bc:	827b      	strh	r3, [r7, #18]
                    .handler = handler,
#else
                    .inst1 = make_jal_t0_32(&slot->inst1, irq_handler_chain_first_slot),       // jal t0, irq_handler_chain_first_slot
                    .inst2 = (uint32_t)handler,                                                // (t0 points to handler)
#endif
                    .inst3 = make_j_16(&slot->inst3, existing_vtable_slot),                    // b existing_slot
100015be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
100015c0:	3304      	adds	r3, #4
100015c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
100015c4:	4618      	mov	r0, r3
100015c6:	f7ff fe53 	bl	10001270 <make_j_16>
100015ca:	4603      	mov	r3, r0
            struct irq_handler_chain_slot slot_data = {
100015cc:	82bb      	strh	r3, [r7, #20]
                    .link = get_slot_index(existing_vtable_slot),
100015ce:	6d38      	ldr	r0, [r7, #80]	@ 0x50
100015d0:	f7ff fed0 	bl	10001374 <get_slot_index>
100015d4:	4603      	mov	r3, r0
            struct irq_handler_chain_slot slot_data = {
100015d6:	75bb      	strb	r3, [r7, #22]
100015d8:	79fb      	ldrb	r3, [r7, #7]
100015da:	75fb      	strb	r3, [r7, #23]
100015dc:	68bb      	ldr	r3, [r7, #8]
100015de:	61bb      	str	r3, [r7, #24]
                    .priority = order_priority,
            };
            *slot = slot_data;
100015e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
100015e2:	461c      	mov	r4, r3
100015e4:	f107 0310 	add.w	r3, r7, #16
100015e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
100015ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            // fixup previous head slot
#ifndef __riscv
            existing_vtable_slot->inst1 = 0x4801; // ldr r0, [pc, #4]
100015f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
100015f2:	f644 0201 	movw	r2, #18433	@ 0x4801
100015f6:	801a      	strh	r2, [r3, #0]
            existing_vtable_slot->inst2 = 0x4780; // blx r0
100015f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
100015fa:	f44f 428f 	mov.w	r2, #18304	@ 0x4780
100015fe:	805a      	strh	r2, [r3, #2]
            // todo lock-freeness?
            void *handler_of_existing_head = (void*)existing_vtable_slot->inst2;
            existing_vtable_slot->inst1 = make_call_inst1(handler_of_existing_head);
            existing_vtable_slot->inst2 = make_call_inst2(handler_of_existing_head);
#endif
            vtable_handler = (irq_handler_t)add_thumb_bit(slot);
10001600:	6db8      	ldr	r0, [r7, #88]	@ 0x58
10001602:	f7ff fcc9 	bl	10000f98 <add_thumb_bit>
10001606:	4603      	mov	r3, r0
10001608:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
    }
    set_raw_irq_handler_and_unlock(num, vtable_handler, save);
1000160a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
1000160c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
1000160e:	68f8      	ldr	r0, [r7, #12]
10001610:	f7ff fcdc 	bl	10000fcc <set_raw_irq_handler_and_unlock>
#endif // !PICO_NO_RAM_VECTOR_TABLE && !PICO_DISABLE_SHARED_IRQ_HANDLERS
}
10001614:	bf00      	nop
10001616:	3774      	adds	r7, #116	@ 0x74
10001618:	46bd      	mov	sp, r7
1000161a:	bd90      	pop	{r4, r7, pc}
1000161c:	20001a44 	.word	0x20001a44
10001620:	20002585 	.word	0x20002585
10001624:	1000b2f8 	.word	0x1000b2f8
10001628:	1000b4a4 	.word	0x1000b4a4
1000162c:	1000b260 	.word	0x1000b260
10001630:	2000152c 	.word	0x2000152c
10001634:	1000011d 	.word	0x1000011d
10001638:	1000b320 	.word	0x1000b320
1000163c:	2000155c 	.word	0x2000155c
10001640:	aaaaaaab 	.word	0xaaaaaaab
10001644:	1000b348 	.word	0x1000b348

10001648 <nvic_ipr0>:
    panic_unsupported();
#endif
}

#ifndef __riscv
static io_rw_32 *nvic_ipr0(void) {
10001648:	b480      	push	{r7}
1000164a:	af00      	add	r7, sp, #0
    return (io_rw_32 *)(PPB_BASE + ARM_CPU_PREFIXED(NVIC_IPR0_OFFSET));
1000164c:	4b02      	ldr	r3, [pc, #8]	@ (10001658 <nvic_ipr0+0x10>)
}
1000164e:	4618      	mov	r0, r3
10001650:	46bd      	mov	sp, r7
10001652:	f85d 7b04 	ldr.w	r7, [sp], #4
10001656:	4770      	bx	lr
10001658:	e000e400 	.word	0xe000e400

1000165c <irq_add_tail_to_free_list>:
}

#if !PICO_DISABLE_SHARED_IRQ_HANDLERS
// used by irq_handler_chain.S to remove the last link in a handler chain after it executes
// note this must be called only with the last slot in a chain (and during the exception)
void irq_add_tail_to_free_list(struct irq_handler_chain_slot *slot) {
1000165c:	b580      	push	{r7, lr}
1000165e:	b096      	sub	sp, #88	@ 0x58
10001660:	af00      	add	r7, sp, #0
10001662:	6078      	str	r0, [r7, #4]
    irq_handler_t slot_handler = (irq_handler_t) add_thumb_bit(slot);
10001664:	6878      	ldr	r0, [r7, #4]
10001666:	f7ff fc97 	bl	10000f98 <add_thumb_bit>
1000166a:	4603      	mov	r3, r0
1000166c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    assert(is_shared_irq_raw_handler(slot_handler));
1000166e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
10001670:	f7ff fd66 	bl	10001140 <is_shared_irq_raw_handler>
10001674:	4603      	mov	r3, r0
10001676:	2b00      	cmp	r3, #0
10001678:	d106      	bne.n	10001688 <irq_add_tail_to_free_list+0x2c>
1000167a:	4b5a      	ldr	r3, [pc, #360]	@ (100017e4 <irq_add_tail_to_free_list+0x188>)
1000167c:	4a5a      	ldr	r2, [pc, #360]	@ (100017e8 <irq_add_tail_to_free_list+0x18c>)
1000167e:	f240 216e 	movw	r1, #622	@ 0x26e
10001682:	485a      	ldr	r0, [pc, #360]	@ (100017ec <irq_add_tail_to_free_list+0x190>)
10001684:	f004 f8f6 	bl	10005874 <__assert_func>
                (meicontext & RVCSR_MEICONTEXT_IRQ_BITS) >> RVCSR_MEICONTEXT_IRQ_LSB
        );
    }
#else
    uint exception;
    pico_default_asm_volatile (
10001688:	f3ef 8305 	mrs	r3, IPSR
1000168c:	b2db      	uxtb	r3, r3
1000168e:	63bb      	str	r3, [r7, #56]	@ 0x38
        "mrs %0, ipsr\n"
        "uxtb %0, %0\n"
        : "=l" (exception)
    );
    return exception;
10001690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    uint exception = __get_current_exception();
10001692:	64bb      	str	r3, [r7, #72]	@ 0x48
    assert(exception);
10001694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10001696:	2b00      	cmp	r3, #0
10001698:	d106      	bne.n	100016a8 <irq_add_tail_to_free_list+0x4c>
1000169a:	4b55      	ldr	r3, [pc, #340]	@ (100017f0 <irq_add_tail_to_free_list+0x194>)
1000169c:	4a52      	ldr	r2, [pc, #328]	@ (100017e8 <irq_add_tail_to_free_list+0x18c>)
1000169e:	f240 2171 	movw	r1, #625	@ 0x271
100016a2:	4852      	ldr	r0, [pc, #328]	@ (100017ec <irq_add_tail_to_free_list+0x190>)
100016a4:	f004 f8e6 	bl	10005874 <__assert_func>
100016a8:	2309      	movs	r3, #9
100016aa:	61fb      	str	r3, [r7, #28]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
100016ac:	69fb      	ldr	r3, [r7, #28]
100016ae:	4a51      	ldr	r2, [pc, #324]	@ (100017f4 <irq_add_tail_to_free_list+0x198>)
100016b0:	4413      	add	r3, r2
100016b2:	bf00      	nop
    spin_lock_t *lock = spin_lock_instance(PICO_SPINLOCK_ID_IRQ);
100016b4:	647b      	str	r3, [r7, #68]	@ 0x44
100016b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100016b8:	637b      	str	r3, [r7, #52]	@ 0x34
    pico_default_asm_volatile (
100016ba:	f3ef 8310 	mrs	r3, PRIMASK
100016be:	b672      	cpsid	i
100016c0:	633b      	str	r3, [r7, #48]	@ 0x30
    return status;
100016c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    uint32_t save = save_and_disable_interrupts();
100016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
100016c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100016c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SW_SPIN_LOCK_LOCK(lock);
100016ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
100016cc:	e8d1 3fcf 	ldaexb	r3, [r1]
100016d0:	2201      	movs	r2, #1
100016d2:	2b00      	cmp	r3, #0
100016d4:	d1fa      	bne.n	100016cc <irq_add_tail_to_free_list+0x70>
100016d6:	e8c1 2f43 	strexb	r3, r2, [r1]
100016da:	2b00      	cmp	r3, #0
100016dc:	d1f6      	bne.n	100016cc <irq_add_tail_to_free_list+0x70>
100016de:	627a      	str	r2, [r7, #36]	@ 0x24
100016e0:	623b      	str	r3, [r7, #32]
    pico_default_asm_volatile ("dmb" : : : "memory");
100016e2:	f3bf 8f5f 	dmb	sy
}
100016e6:	bf00      	nop
}
100016e8:	bf00      	nop
}
100016ea:	bf00      	nop
    return save;
100016ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    uint32_t save = spin_lock_blocking(lock);
100016ee:	643b      	str	r3, [r7, #64]	@ 0x40
    int8_t slot_index = get_slot_index(slot);
100016f0:	6878      	ldr	r0, [r7, #4]
100016f2:	f7ff fe3f 	bl	10001374 <get_slot_index>
100016f6:	4603      	mov	r3, r0
100016f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (slot_handler == get_vtable()[exception]) {
100016fc:	f7ff fc40 	bl	10000f80 <get_vtable>
10001700:	4602      	mov	r2, r0
10001702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10001704:	009b      	lsls	r3, r3, #2
10001706:	4413      	add	r3, r2
10001708:	681b      	ldr	r3, [r3, #0]
1000170a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
1000170c:	429a      	cmp	r2, r3
1000170e:	d108      	bne.n	10001722 <irq_add_tail_to_free_list+0xc6>
        get_vtable()[exception] = __unhandled_user_irq;
10001710:	f7ff fc36 	bl	10000f80 <get_vtable>
10001714:	4602      	mov	r2, r0
10001716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10001718:	009b      	lsls	r3, r3, #2
1000171a:	4413      	add	r3, r2
1000171c:	4a36      	ldr	r2, [pc, #216]	@ (100017f8 <irq_add_tail_to_free_list+0x19c>)
1000171e:	601a      	str	r2, [r3, #0]
10001720:	e03e      	b.n	100017a0 <irq_add_tail_to_free_list+0x144>
    } else {
        bool __unused found = false;
10001722:	2300      	movs	r3, #0
10001724:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        // need to find who points at the slot and update it
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
10001728:	2300      	movs	r3, #0
1000172a:	653b      	str	r3, [r7, #80]	@ 0x50
1000172c:	e02a      	b.n	10001784 <irq_add_tail_to_free_list+0x128>
            if (irq_handler_chain_slots[i].link == slot_index) {
1000172e:	4933      	ldr	r1, [pc, #204]	@ (100017fc <irq_add_tail_to_free_list+0x1a0>)
10001730:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10001732:	4613      	mov	r3, r2
10001734:	005b      	lsls	r3, r3, #1
10001736:	4413      	add	r3, r2
10001738:	009b      	lsls	r3, r3, #2
1000173a:	440b      	add	r3, r1
1000173c:	3306      	adds	r3, #6
1000173e:	f993 3000 	ldrsb.w	r3, [r3]
10001742:	f997 203f 	ldrsb.w	r2, [r7, #63]	@ 0x3f
10001746:	429a      	cmp	r2, r3
10001748:	d119      	bne.n	1000177e <irq_add_tail_to_free_list+0x122>
                irq_handler_chain_slots[i].link = -1;
1000174a:	492c      	ldr	r1, [pc, #176]	@ (100017fc <irq_add_tail_to_free_list+0x1a0>)
1000174c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
1000174e:	4613      	mov	r3, r2
10001750:	005b      	lsls	r3, r3, #1
10001752:	4413      	add	r3, r2
10001754:	009b      	lsls	r3, r3, #2
10001756:	440b      	add	r3, r1
10001758:	3306      	adds	r3, #6
1000175a:	22ff      	movs	r2, #255	@ 0xff
1000175c:	701a      	strb	r2, [r3, #0]
                irq_handler_chain_slots[i].inst3 = inst16_return_from_last_slot;
1000175e:	f64b 5001 	movw	r0, #48385	@ 0xbd01
10001762:	4926      	ldr	r1, [pc, #152]	@ (100017fc <irq_add_tail_to_free_list+0x1a0>)
10001764:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10001766:	4613      	mov	r3, r2
10001768:	005b      	lsls	r3, r3, #1
1000176a:	4413      	add	r3, r2
1000176c:	009b      	lsls	r3, r3, #2
1000176e:	440b      	add	r3, r1
10001770:	3304      	adds	r3, #4
10001772:	4602      	mov	r2, r0
10001774:	801a      	strh	r2, [r3, #0]
                found = true;
10001776:	2301      	movs	r3, #1
10001778:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                break;
1000177c:	e005      	b.n	1000178a <irq_add_tail_to_free_list+0x12e>
        for(uint i=0;i<count_of(irq_handler_chain_slots);i++) {
1000177e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10001780:	3301      	adds	r3, #1
10001782:	653b      	str	r3, [r7, #80]	@ 0x50
10001784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10001786:	2b03      	cmp	r3, #3
10001788:	d9d1      	bls.n	1000172e <irq_add_tail_to_free_list+0xd2>
            }
        }
        assert(found);
1000178a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
1000178e:	2b00      	cmp	r3, #0
10001790:	d106      	bne.n	100017a0 <irq_add_tail_to_free_list+0x144>
10001792:	4b1b      	ldr	r3, [pc, #108]	@ (10001800 <irq_add_tail_to_free_list+0x1a4>)
10001794:	4a14      	ldr	r2, [pc, #80]	@ (100017e8 <irq_add_tail_to_free_list+0x18c>)
10001796:	f240 2182 	movw	r1, #642	@ 0x282
1000179a:	4814      	ldr	r0, [pc, #80]	@ (100017ec <irq_add_tail_to_free_list+0x190>)
1000179c:	f004 f86a 	bl	10005874 <__assert_func>
    }
    // add slot to free list
    slot->link = irq_handler_chain_free_slot_head;
100017a0:	4b18      	ldr	r3, [pc, #96]	@ (10001804 <irq_add_tail_to_free_list+0x1a8>)
100017a2:	f993 2000 	ldrsb.w	r2, [r3]
100017a6:	687b      	ldr	r3, [r7, #4]
100017a8:	719a      	strb	r2, [r3, #6]
    irq_handler_chain_free_slot_head = slot_index;
100017aa:	4a16      	ldr	r2, [pc, #88]	@ (10001804 <irq_add_tail_to_free_list+0x1a8>)
100017ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
100017b0:	7013      	strb	r3, [r2, #0]
100017b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100017b4:	61bb      	str	r3, [r7, #24]
100017b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100017b8:	617b      	str	r3, [r7, #20]
100017ba:	69bb      	ldr	r3, [r7, #24]
100017bc:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_UNLOCK(lock);
100017be:	2300      	movs	r3, #0
100017c0:	60fb      	str	r3, [r7, #12]
100017c2:	68fb      	ldr	r3, [r7, #12]
100017c4:	693a      	ldr	r2, [r7, #16]
100017c6:	e8c2 3f8f 	stlb	r3, [r2]
}
100017ca:	bf00      	nop
100017cc:	697b      	ldr	r3, [r7, #20]
100017ce:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
100017d0:	68bb      	ldr	r3, [r7, #8]
100017d2:	f383 8810 	msr	PRIMASK, r3
}
100017d6:	bf00      	nop
}
100017d8:	bf00      	nop
    spin_unlock(lock, save);
}
100017da:	bf00      	nop
100017dc:	3758      	adds	r7, #88	@ 0x58
100017de:	46bd      	mov	sp, r7
100017e0:	bd80      	pop	{r7, pc}
100017e2:	bf00      	nop
100017e4:	1000b408 	.word	0x1000b408
100017e8:	1000b4cc 	.word	0x1000b4cc
100017ec:	1000b260 	.word	0x1000b260
100017f0:	1000b430 	.word	0x1000b430
100017f4:	20001a44 	.word	0x20001a44
100017f8:	1000011d 	.word	0x1000011d
100017fc:	2000152c 	.word	0x2000152c
10001800:	1000b43c 	.word	0x1000b43c
10001804:	20002585 	.word	0x20002585

10001808 <runtime_init_per_core_irq_priorities>:
#endif

__weak void runtime_init_per_core_irq_priorities(void) {
10001808:	b580      	push	{r7, lr}
1000180a:	b084      	sub	sp, #16
1000180c:	af00      	add	r7, sp, #0
#if PICO_DEFAULT_IRQ_PRIORITY != 0
#ifndef __riscv
    // static_assert(!(NUM_IRQS & 3), ""); // this isn't really required - the reg is still 32 bit
    uint32_t prio4 = (PICO_DEFAULT_IRQ_PRIORITY & 0xff) * 0x1010101u;
1000180e:	f04f 3380 	mov.w	r3, #2155905152	@ 0x80808080
10001812:	607b      	str	r3, [r7, #4]
    io_rw_32 *p = nvic_ipr0();
10001814:	f7ff ff18 	bl	10001648 <nvic_ipr0>
10001818:	60f8      	str	r0, [r7, #12]
    for (uint i = 0; i < (NUM_IRQS + 3) / 4; i++) {
1000181a:	2300      	movs	r3, #0
1000181c:	60bb      	str	r3, [r7, #8]
1000181e:	e007      	b.n	10001830 <runtime_init_per_core_irq_priorities+0x28>
        *p++ = prio4;
10001820:	68fb      	ldr	r3, [r7, #12]
10001822:	1d1a      	adds	r2, r3, #4
10001824:	60fa      	str	r2, [r7, #12]
10001826:	687a      	ldr	r2, [r7, #4]
10001828:	601a      	str	r2, [r3, #0]
    for (uint i = 0; i < (NUM_IRQS + 3) / 4; i++) {
1000182a:	68bb      	ldr	r3, [r7, #8]
1000182c:	3301      	adds	r3, #1
1000182e:	60bb      	str	r3, [r7, #8]
10001830:	68bb      	ldr	r3, [r7, #8]
10001832:	2b0c      	cmp	r3, #12
10001834:	d9f4      	bls.n	10001820 <runtime_init_per_core_irq_priorities+0x18>
    for (uint i = 0; i < NUM_IRQS; ++i) {
        irq_set_priority(i, PICO_DEFAULT_IRQ_PRIORITY);
    }
#endif
#endif
}
10001836:	bf00      	nop
10001838:	bf00      	nop
1000183a:	3710      	adds	r7, #16
1000183c:	46bd      	mov	sp, r7
1000183e:	bd80      	pop	{r7, pc}

10001840 <user_irq_claim_unused>:

void user_irq_unclaim(uint irq_num) {
    hw_claim_clear(user_irq_claimed_ptr(), get_user_irq_claim_index(irq_num));
}

int user_irq_claim_unused(bool required) {
10001840:	b580      	push	{r7, lr}
10001842:	b086      	sub	sp, #24
10001844:	af02      	add	r7, sp, #8
10001846:	4603      	mov	r3, r0
10001848:	71fb      	strb	r3, [r7, #7]
    int bit = hw_claim_unused_from_range(user_irq_claimed_ptr(), required, 0, NUM_USER_IRQS - 1, "No user IRQs are available");
1000184a:	f7ff fb8f 	bl	10000f6c <user_irq_claimed_ptr>
1000184e:	79f9      	ldrb	r1, [r7, #7]
10001850:	4b09      	ldr	r3, [pc, #36]	@ (10001878 <user_irq_claim_unused+0x38>)
10001852:	9300      	str	r3, [sp, #0]
10001854:	2305      	movs	r3, #5
10001856:	2200      	movs	r2, #0
10001858:	f7ff facd 	bl	10000df6 <hw_claim_unused_from_range>
1000185c:	60f8      	str	r0, [r7, #12]
    if (bit >= 0) bit =  (int)NUM_IRQS - bit - 1;
1000185e:	68fb      	ldr	r3, [r7, #12]
10001860:	2b00      	cmp	r3, #0
10001862:	db03      	blt.n	1000186c <user_irq_claim_unused+0x2c>
10001864:	68fb      	ldr	r3, [r7, #12]
10001866:	f1c3 0333 	rsb	r3, r3, #51	@ 0x33
1000186a:	60fb      	str	r3, [r7, #12]
    return bit;
1000186c:	68fb      	ldr	r3, [r7, #12]
}
1000186e:	4618      	mov	r0, r3
10001870:	3710      	adds	r7, #16
10001872:	46bd      	mov	sp, r7
10001874:	bd80      	pop	{r7, pc}
10001876:	bf00      	nop
10001878:	1000b460 	.word	0x1000b460

1000187c <lock_init>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "pico/lock_core.h"

void lock_init(lock_core_t *core, uint lock_num) {
1000187c:	b480      	push	{r7}
1000187e:	b085      	sub	sp, #20
10001880:	af00      	add	r7, sp, #0
10001882:	6078      	str	r0, [r7, #4]
10001884:	6039      	str	r1, [r7, #0]
10001886:	683b      	ldr	r3, [r7, #0]
10001888:	60fb      	str	r3, [r7, #12]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
1000188a:	68fb      	ldr	r3, [r7, #12]
1000188c:	4a05      	ldr	r2, [pc, #20]	@ (100018a4 <lock_init+0x28>)
1000188e:	441a      	add	r2, r3
10001890:	bf00      	nop
    valid_params_if(LOCK_CORE, lock_num < NUM_SPIN_LOCKS);
    core->spin_lock = spin_lock_instance(lock_num);
10001892:	687b      	ldr	r3, [r7, #4]
10001894:	601a      	str	r2, [r3, #0]
}
10001896:	bf00      	nop
10001898:	3714      	adds	r7, #20
1000189a:	46bd      	mov	sp, r7
1000189c:	f85d 7b04 	ldr.w	r7, [sp], #4
100018a0:	4770      	bx	lr
100018a2:	bf00      	nop
100018a4:	20001a44 	.word	0x20001a44

100018a8 <to_us_since_boot>:
 * \brief convert an absolute_time_t into a number of microseconds since boot.
 * \param t the absolute time to convert
 * \return a number of microseconds since boot, equivalent to t
 * \ingroup timestamp
 */
static inline uint64_t to_us_since_boot(absolute_time_t t) {
100018a8:	b480      	push	{r7}
100018aa:	b083      	sub	sp, #12
100018ac:	af00      	add	r7, sp, #0
100018ae:	e9c7 0100 	strd	r0, r1, [r7]
#ifdef PICO_DEBUG_ABSOLUTE_TIME_T
    return t._private_us_since_boot;
#else
    return t;
100018b2:	e9d7 2300 	ldrd	r2, r3, [r7]
#endif
}
100018b6:	4610      	mov	r0, r2
100018b8:	4619      	mov	r1, r3
100018ba:	370c      	adds	r7, #12
100018bc:	46bd      	mov	sp, r7
100018be:	f85d 7b04 	ldr.w	r7, [sp], #4
100018c2:	4770      	bx	lr

100018c4 <update_us_since_boot>:
 * \param t the absolute time value to update
 * \param us_since_boot the number of microseconds since boot to represent. Note this should be representable
 *                      as a signed 64 bit integer
 * \ingroup timestamp
 */
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
100018c4:	b480      	push	{r7}
100018c6:	b085      	sub	sp, #20
100018c8:	af00      	add	r7, sp, #0
100018ca:	60f8      	str	r0, [r7, #12]
100018cc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef PICO_DEBUG_ABSOLUTE_TIME_T
    assert(us_since_boot <= INT64_MAX);
    t->_private_us_since_boot = us_since_boot;
#else
    *t = us_since_boot;
100018d0:	68f9      	ldr	r1, [r7, #12]
100018d2:	e9d7 2300 	ldrd	r2, r3, [r7]
100018d6:	e9c1 2300 	strd	r2, r3, [r1]
#endif
}
100018da:	bf00      	nop
100018dc:	3714      	adds	r7, #20
100018de:	46bd      	mov	sp, r7
100018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
100018e4:	4770      	bx	lr

100018e6 <get_absolute_time>:
 *
 * \sa absolute_time_t
 * \sa sleep_until()
 * \sa time_us_64()
 */
static inline absolute_time_t get_absolute_time(void) {
100018e6:	b580      	push	{r7, lr}
100018e8:	b082      	sub	sp, #8
100018ea:	af00      	add	r7, sp, #0
    absolute_time_t t;
    update_us_since_boot(&t, time_us_64());
100018ec:	f001 f9ae 	bl	10002c4c <time_us_64>
100018f0:	4602      	mov	r2, r0
100018f2:	460b      	mov	r3, r1
100018f4:	4639      	mov	r1, r7
100018f6:	4608      	mov	r0, r1
100018f8:	f7ff ffe4 	bl	100018c4 <update_us_since_boot>
    return t;
100018fc:	e9d7 2300 	ldrd	r2, r3, [r7]
}
10001900:	4610      	mov	r0, r2
10001902:	4619      	mov	r1, r3
10001904:	3708      	adds	r7, #8
10001906:	46bd      	mov	sp, r7
10001908:	bd80      	pop	{r7, pc}

1000190a <delayed_by_ms>:
 *
 * \param t the base timestamp
 * \param ms the number of milliseconds to add
 * \return the timestamp representing the resulting time
 */
static inline absolute_time_t delayed_by_ms(const absolute_time_t t, uint32_t ms) {
1000190a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
1000190e:	b08c      	sub	sp, #48	@ 0x30
10001910:	af00      	add	r7, sp, #0
10001912:	e9c7 0104 	strd	r0, r1, [r7, #16]
10001916:	60fa      	str	r2, [r7, #12]
    absolute_time_t t2;
    uint64_t base = to_us_since_boot(t);
10001918:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
1000191c:	f7ff ffc4 	bl	100018a8 <to_us_since_boot>
10001920:	e9c7 0108 	strd	r0, r1, [r7, #32]
    uint64_t delayed = base + ms * 1000ull;
10001924:	68fb      	ldr	r3, [r7, #12]
10001926:	2200      	movs	r2, #0
10001928:	4698      	mov	r8, r3
1000192a:	4691      	mov	r9, r2
1000192c:	4642      	mov	r2, r8
1000192e:	464b      	mov	r3, r9
10001930:	f04f 0000 	mov.w	r0, #0
10001934:	f04f 0100 	mov.w	r1, #0
10001938:	0159      	lsls	r1, r3, #5
1000193a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
1000193e:	0150      	lsls	r0, r2, #5
10001940:	4602      	mov	r2, r0
10001942:	460b      	mov	r3, r1
10001944:	ebb2 0408 	subs.w	r4, r2, r8
10001948:	eb63 0509 	sbc.w	r5, r3, r9
1000194c:	f04f 0200 	mov.w	r2, #0
10001950:	f04f 0300 	mov.w	r3, #0
10001954:	00ab      	lsls	r3, r5, #2
10001956:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
1000195a:	00a2      	lsls	r2, r4, #2
1000195c:	4614      	mov	r4, r2
1000195e:	461d      	mov	r5, r3
10001960:	eb14 0a08 	adds.w	sl, r4, r8
10001964:	eb45 0b09 	adc.w	fp, r5, r9
10001968:	f04f 0200 	mov.w	r2, #0
1000196c:	f04f 0300 	mov.w	r3, #0
10001970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
10001974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
10001978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
1000197c:	4692      	mov	sl, r2
1000197e:	469b      	mov	fp, r3
10001980:	4650      	mov	r0, sl
10001982:	4659      	mov	r1, fp
10001984:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10001988:	1814      	adds	r4, r2, r0
1000198a:	603c      	str	r4, [r7, #0]
1000198c:	414b      	adcs	r3, r1
1000198e:	607b      	str	r3, [r7, #4]
10001990:	e9d7 3400 	ldrd	r3, r4, [r7]
10001994:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
    if ((int64_t)delayed < 0) {
10001998:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
1000199c:	2b00      	cmp	r3, #0
1000199e:	da05      	bge.n	100019ac <delayed_by_ms+0xa2>
        // absolute_time_t (to allow for signed time deltas) is never greater than INT64_MAX which == at_the_end_of_time
        delayed = INT64_MAX;
100019a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100019a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
100019a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    }
    update_us_since_boot(&t2, delayed);
100019ac:	f107 0118 	add.w	r1, r7, #24
100019b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
100019b4:	4608      	mov	r0, r1
100019b6:	f7ff ff85 	bl	100018c4 <update_us_since_boot>
    return t2;
100019ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
100019be:	4610      	mov	r0, r2
100019c0:	4619      	mov	r1, r3
100019c2:	3730      	adds	r7, #48	@ 0x30
100019c4:	46bd      	mov	sp, r7
100019c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

100019ca <make_timeout_time_ms>:
 * \ingroup timestamp
 *
 * \param ms the number of milliseconds to add to the current timestamp
 * \return the future timestamp
 */
static inline absolute_time_t make_timeout_time_ms(uint32_t ms) {
100019ca:	b580      	push	{r7, lr}
100019cc:	b082      	sub	sp, #8
100019ce:	af00      	add	r7, sp, #0
100019d0:	6078      	str	r0, [r7, #4]
    return delayed_by_ms(get_absolute_time(), ms);
100019d2:	f7ff ff88 	bl	100018e6 <get_absolute_time>
100019d6:	687a      	ldr	r2, [r7, #4]
100019d8:	f7ff ff97 	bl	1000190a <delayed_by_ms>
100019dc:	4602      	mov	r2, r0
100019de:	460b      	mov	r3, r1
}
100019e0:	4610      	mov	r0, r2
100019e2:	4619      	mov	r1, r3
100019e4:	3708      	adds	r7, #8
100019e6:	46bd      	mov	sp, r7
100019e8:	bd80      	pop	{r7, pc}
	...

100019ec <runtime_init_mutex>:
#include "pico/mutex.h"
#include "pico/time.h"
#include "pico/runtime_init.h"

#if !PICO_RUNTIME_NO_INIT_MUTEX
void __weak runtime_init_mutex(void) {
100019ec:	b580      	push	{r7, lr}
100019ee:	b084      	sub	sp, #16
100019f0:	af00      	add	r7, sp, #0
    static_assert(!offsetof(mutex_t, core), "");
    static_assert(!offsetof(recursive_mutex_t, core), "");
    extern lock_core_t __mutex_array_start;
    extern lock_core_t __mutex_array_end;

    for (lock_core_t *l = &__mutex_array_start; l < &__mutex_array_end; ) {
100019f2:	4b15      	ldr	r3, [pc, #84]	@ (10001a48 <runtime_init_mutex+0x5c>)
100019f4:	60fb      	str	r3, [r7, #12]
100019f6:	e01e      	b.n	10001a36 <runtime_init_mutex+0x4a>
        if (l->spin_lock) {
100019f8:	68fb      	ldr	r3, [r7, #12]
100019fa:	681b      	ldr	r3, [r3, #0]
100019fc:	2b00      	cmp	r3, #0
100019fe:	d012      	beq.n	10001a26 <runtime_init_mutex+0x3a>
            assert(1 == (uintptr_t)l->spin_lock); // indicator for a recursive mutex
10001a00:	68fb      	ldr	r3, [r7, #12]
10001a02:	681b      	ldr	r3, [r3, #0]
10001a04:	2b01      	cmp	r3, #1
10001a06:	d005      	beq.n	10001a14 <runtime_init_mutex+0x28>
10001a08:	4b10      	ldr	r3, [pc, #64]	@ (10001a4c <runtime_init_mutex+0x60>)
10001a0a:	4a11      	ldr	r2, [pc, #68]	@ (10001a50 <runtime_init_mutex+0x64>)
10001a0c:	211a      	movs	r1, #26
10001a0e:	4811      	ldr	r0, [pc, #68]	@ (10001a54 <runtime_init_mutex+0x68>)
10001a10:	f003 ff30 	bl	10005874 <__assert_func>
            recursive_mutex_t *rm = (recursive_mutex_t *)l;
10001a14:	68fb      	ldr	r3, [r7, #12]
10001a16:	607b      	str	r3, [r7, #4]
            recursive_mutex_init(rm);
10001a18:	6878      	ldr	r0, [r7, #4]
10001a1a:	f000 f836 	bl	10001a8a <recursive_mutex_init>
            l = &rm[1].core; // next
10001a1e:	687b      	ldr	r3, [r7, #4]
10001a20:	3308      	adds	r3, #8
10001a22:	60fb      	str	r3, [r7, #12]
10001a24:	e007      	b.n	10001a36 <runtime_init_mutex+0x4a>
        } else {
            mutex_t *m = (mutex_t *)l;
10001a26:	68fb      	ldr	r3, [r7, #12]
10001a28:	60bb      	str	r3, [r7, #8]
            mutex_init(m);
10001a2a:	68b8      	ldr	r0, [r7, #8]
10001a2c:	f000 f816 	bl	10001a5c <mutex_init>
            l = &m[1].core; // next
10001a30:	68bb      	ldr	r3, [r7, #8]
10001a32:	3308      	adds	r3, #8
10001a34:	60fb      	str	r3, [r7, #12]
    for (lock_core_t *l = &__mutex_array_start; l < &__mutex_array_end; ) {
10001a36:	68fb      	ldr	r3, [r7, #12]
10001a38:	4a07      	ldr	r2, [pc, #28]	@ (10001a58 <runtime_init_mutex+0x6c>)
10001a3a:	4293      	cmp	r3, r2
10001a3c:	d3dc      	bcc.n	100019f8 <runtime_init_mutex+0xc>
        }
    }
}
10001a3e:	bf00      	nop
10001a40:	bf00      	nop
10001a42:	3710      	adds	r7, #16
10001a44:	46bd      	mov	sp, r7
10001a46:	bd80      	pop	{r7, pc}
10001a48:	200015cc 	.word	0x200015cc
10001a4c:	1000b4e8 	.word	0x1000b4e8
10001a50:	1000b598 	.word	0x1000b598
10001a54:	1000b508 	.word	0x1000b508
10001a58:	200015d4 	.word	0x200015d4

10001a5c <mutex_init>:

#if defined(PICO_RUNTIME_INIT_MUTEX) && !PICO_RUNTIME_SKIP_INIT_MUTEX
PICO_RUNTIME_INIT_FUNC_RUNTIME(runtime_init_mutex, PICO_RUNTIME_INIT_MUTEX);
#endif

void mutex_init(mutex_t *mtx) {
10001a5c:	b590      	push	{r4, r7, lr}
10001a5e:	b083      	sub	sp, #12
10001a60:	af00      	add	r7, sp, #0
10001a62:	6078      	str	r0, [r7, #4]
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001a64:	687c      	ldr	r4, [r7, #4]
10001a66:	f7ff fa0f 	bl	10000e88 <next_striped_spin_lock_num>
10001a6a:	4603      	mov	r3, r0
10001a6c:	4619      	mov	r1, r3
10001a6e:	4620      	mov	r0, r4
10001a70:	f7ff ff04 	bl	1000187c <lock_init>
    mtx->owner = LOCK_INVALID_OWNER_ID;
10001a74:	687b      	ldr	r3, [r7, #4]
10001a76:	22ff      	movs	r2, #255	@ 0xff
10001a78:	711a      	strb	r2, [r3, #4]
    pico_default_asm_volatile ("dmb" : : : "memory");
10001a7a:	f3bf 8f5f 	dmb	sy
}
10001a7e:	bf00      	nop
}
10001a80:	bf00      	nop
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    mtx->recursive = false;
#endif
    __mem_fence_release();
}
10001a82:	bf00      	nop
10001a84:	370c      	adds	r7, #12
10001a86:	46bd      	mov	sp, r7
10001a88:	bd90      	pop	{r4, r7, pc}

10001a8a <recursive_mutex_init>:

void recursive_mutex_init(recursive_mutex_t *mtx) {
10001a8a:	b590      	push	{r4, r7, lr}
10001a8c:	b083      	sub	sp, #12
10001a8e:	af00      	add	r7, sp, #0
10001a90:	6078      	str	r0, [r7, #4]
    lock_init(&mtx->core, next_striped_spin_lock_num());
10001a92:	687c      	ldr	r4, [r7, #4]
10001a94:	f7ff f9f8 	bl	10000e88 <next_striped_spin_lock_num>
10001a98:	4603      	mov	r3, r0
10001a9a:	4619      	mov	r1, r3
10001a9c:	4620      	mov	r0, r4
10001a9e:	f7ff feed 	bl	1000187c <lock_init>
    mtx->owner = LOCK_INVALID_OWNER_ID;
10001aa2:	687b      	ldr	r3, [r7, #4]
10001aa4:	22ff      	movs	r2, #255	@ 0xff
10001aa6:	711a      	strb	r2, [r3, #4]
    mtx->enter_count = 0;
10001aa8:	687b      	ldr	r3, [r7, #4]
10001aaa:	2200      	movs	r2, #0
10001aac:	715a      	strb	r2, [r3, #5]
    pico_default_asm_volatile ("dmb" : : : "memory");
10001aae:	f3bf 8f5f 	dmb	sy
}
10001ab2:	bf00      	nop
}
10001ab4:	bf00      	nop
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    mtx->recursive = true;
#endif
    __mem_fence_release();
}
10001ab6:	bf00      	nop
10001ab8:	370c      	adds	r7, #12
10001aba:	46bd      	mov	sp, r7
10001abc:	bd90      	pop	{r4, r7, pc}

10001abe <critical_section_init>:

#if PICO_32BIT
static_assert(sizeof(critical_section_t) == 8, "");
#endif

void critical_section_init(critical_section_t *crit_sec) {
10001abe:	b580      	push	{r7, lr}
10001ac0:	b082      	sub	sp, #8
10001ac2:	af00      	add	r7, sp, #0
10001ac4:	6078      	str	r0, [r7, #4]
    critical_section_init_with_lock_num(crit_sec, (uint)spin_lock_claim_unused(true));
10001ac6:	2001      	movs	r0, #1
10001ac8:	f7ff f9f8 	bl	10000ebc <spin_lock_claim_unused>
10001acc:	4603      	mov	r3, r0
10001ace:	4619      	mov	r1, r3
10001ad0:	6878      	ldr	r0, [r7, #4]
10001ad2:	f000 f805 	bl	10001ae0 <critical_section_init_with_lock_num>
}
10001ad6:	bf00      	nop
10001ad8:	3708      	adds	r7, #8
10001ada:	46bd      	mov	sp, r7
10001adc:	bd80      	pop	{r7, pc}
	...

10001ae0 <critical_section_init_with_lock_num>:

void critical_section_init_with_lock_num(critical_section_t *crit_sec, uint lock_num) {
10001ae0:	b480      	push	{r7}
10001ae2:	b085      	sub	sp, #20
10001ae4:	af00      	add	r7, sp, #0
10001ae6:	6078      	str	r0, [r7, #4]
10001ae8:	6039      	str	r1, [r7, #0]
10001aea:	683b      	ldr	r3, [r7, #0]
10001aec:	60fb      	str	r3, [r7, #12]
10001aee:	68fb      	ldr	r3, [r7, #12]
10001af0:	4a07      	ldr	r2, [pc, #28]	@ (10001b10 <critical_section_init_with_lock_num+0x30>)
10001af2:	441a      	add	r2, r3
10001af4:	bf00      	nop
    crit_sec->spin_lock = spin_lock_instance(lock_num);
10001af6:	687b      	ldr	r3, [r7, #4]
10001af8:	601a      	str	r2, [r3, #0]
    pico_default_asm_volatile ("dmb" : : : "memory");
10001afa:	f3bf 8f5f 	dmb	sy
}
10001afe:	bf00      	nop
}
10001b00:	bf00      	nop
    __mem_fence_release();
}
10001b02:	bf00      	nop
10001b04:	3714      	adds	r7, #20
10001b06:	46bd      	mov	sp, r7
10001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b0c:	4770      	bx	lr
10001b0e:	bf00      	nop
10001b10:	20001a44 	.word	0x20001a44

10001b14 <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10001b14:	b480      	push	{r7}
10001b16:	b083      	sub	sp, #12
10001b18:	af00      	add	r7, sp, #0
10001b1a:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
10001b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
10001b22:	4610      	mov	r0, r2
10001b24:	4619      	mov	r1, r3
10001b26:	370c      	adds	r7, #12
10001b28:	46bd      	mov	sp, r7
10001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b2e:	4770      	bx	lr

10001b30 <update_us_since_boot>:
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
10001b30:	b480      	push	{r7}
10001b32:	b085      	sub	sp, #20
10001b34:	af00      	add	r7, sp, #0
10001b36:	60f8      	str	r0, [r7, #12]
10001b38:	e9c7 2300 	strd	r2, r3, [r7]
    *t = us_since_boot;
10001b3c:	68f9      	ldr	r1, [r7, #12]
10001b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
10001b42:	e9c1 2300 	strd	r2, r3, [r1]
}
10001b46:	bf00      	nop
10001b48:	3714      	adds	r7, #20
10001b4a:	46bd      	mov	sp, r7
10001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b50:	4770      	bx	lr

10001b52 <check_hardware_alarm_num_param>:
static inline void check_hardware_alarm_num_param(__unused uint alarm_num) {
10001b52:	b480      	push	{r7}
10001b54:	b083      	sub	sp, #12
10001b56:	af00      	add	r7, sp, #0
10001b58:	6078      	str	r0, [r7, #4]
}
10001b5a:	bf00      	nop
10001b5c:	370c      	adds	r7, #12
10001b5e:	46bd      	mov	sp, r7
10001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b64:	4770      	bx	lr

10001b66 <timer_time_reached>:
static inline bool timer_time_reached(timer_hw_t *timer, absolute_time_t t) {
10001b66:	b580      	push	{r7, lr}
10001b68:	b088      	sub	sp, #32
10001b6a:	af00      	add	r7, sp, #0
10001b6c:	60f8      	str	r0, [r7, #12]
10001b6e:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t target = to_us_since_boot(t);
10001b72:	e9d7 0100 	ldrd	r0, r1, [r7]
10001b76:	f7ff ffcd 	bl	10001b14 <to_us_since_boot>
10001b7a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint32_t hi_target = (uint32_t)(target >> 32u);
10001b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
10001b82:	f04f 0200 	mov.w	r2, #0
10001b86:	f04f 0300 	mov.w	r3, #0
10001b8a:	000a      	movs	r2, r1
10001b8c:	2300      	movs	r3, #0
10001b8e:	4613      	mov	r3, r2
10001b90:	617b      	str	r3, [r7, #20]
    uint32_t hi = timer->timerawh;
10001b92:	68fb      	ldr	r3, [r7, #12]
10001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10001b96:	613b      	str	r3, [r7, #16]
    return (hi >= hi_target && (timer->timerawl >= (uint32_t) target || hi != hi_target));
10001b98:	693a      	ldr	r2, [r7, #16]
10001b9a:	697b      	ldr	r3, [r7, #20]
10001b9c:	429a      	cmp	r2, r3
10001b9e:	d30a      	bcc.n	10001bb6 <timer_time_reached+0x50>
10001ba0:	68fb      	ldr	r3, [r7, #12]
10001ba2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10001ba4:	69bb      	ldr	r3, [r7, #24]
10001ba6:	429a      	cmp	r2, r3
10001ba8:	d203      	bcs.n	10001bb2 <timer_time_reached+0x4c>
10001baa:	693a      	ldr	r2, [r7, #16]
10001bac:	697b      	ldr	r3, [r7, #20]
10001bae:	429a      	cmp	r2, r3
10001bb0:	d001      	beq.n	10001bb6 <timer_time_reached+0x50>
10001bb2:	2301      	movs	r3, #1
10001bb4:	e000      	b.n	10001bb8 <timer_time_reached+0x52>
10001bb6:	2300      	movs	r3, #0
10001bb8:	f003 0301 	and.w	r3, r3, #1
10001bbc:	b2db      	uxtb	r3, r3
}
10001bbe:	4618      	mov	r0, r3
10001bc0:	3720      	adds	r7, #32
10001bc2:	46bd      	mov	sp, r7
10001bc4:	bd80      	pop	{r7, pc}
	...

10001bc8 <time_reached>:
static inline bool time_reached(absolute_time_t t) {
10001bc8:	b580      	push	{r7, lr}
10001bca:	b082      	sub	sp, #8
10001bcc:	af00      	add	r7, sp, #0
10001bce:	e9c7 0100 	strd	r0, r1, [r7]
    return timer_time_reached(PICO_DEFAULT_TIMER_INSTANCE(), t);
10001bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
10001bd6:	4804      	ldr	r0, [pc, #16]	@ (10001be8 <time_reached+0x20>)
10001bd8:	f7ff ffc5 	bl	10001b66 <timer_time_reached>
10001bdc:	4603      	mov	r3, r0
}
10001bde:	4618      	mov	r0, r3
10001be0:	3708      	adds	r7, #8
10001be2:	46bd      	mov	sp, r7
10001be4:	bd80      	pop	{r7, pc}
10001be6:	bf00      	nop
10001be8:	400b0000 	.word	0x400b0000

10001bec <timer_hardware_alarm_get_irq_num>:
static inline uint timer_hardware_alarm_get_irq_num(__unused timer_hw_t *timer, uint alarm_num) {
10001bec:	b580      	push	{r7, lr}
10001bee:	b082      	sub	sp, #8
10001bf0:	af00      	add	r7, sp, #0
10001bf2:	6078      	str	r0, [r7, #4]
10001bf4:	6039      	str	r1, [r7, #0]
    check_hardware_alarm_num_param(alarm_num);
10001bf6:	6838      	ldr	r0, [r7, #0]
10001bf8:	f7ff ffab 	bl	10001b52 <check_hardware_alarm_num_param>
    return TIMER_ALARM_IRQ_NUM(timer, alarm_num);
10001bfc:	687b      	ldr	r3, [r7, #4]
10001bfe:	4a06      	ldr	r2, [pc, #24]	@ (10001c18 <timer_hardware_alarm_get_irq_num+0x2c>)
10001c00:	4293      	cmp	r3, r2
10001c02:	d101      	bne.n	10001c08 <timer_hardware_alarm_get_irq_num+0x1c>
10001c04:	2204      	movs	r2, #4
10001c06:	e000      	b.n	10001c0a <timer_hardware_alarm_get_irq_num+0x1e>
10001c08:	2200      	movs	r2, #0
10001c0a:	683b      	ldr	r3, [r7, #0]
10001c0c:	4413      	add	r3, r2
}
10001c0e:	4618      	mov	r0, r3
10001c10:	3708      	adds	r7, #8
10001c12:	46bd      	mov	sp, r7
10001c14:	bd80      	pop	{r7, pc}
10001c16:	bf00      	nop
10001c18:	400b8000 	.word	0x400b8000

10001c1c <timer_get_index>:
 *
 * \param timer the timer instance
 * \return the timer number
 * \sa TIMER_NUM
 */
static inline uint timer_get_index(timer_hw_t *timer) {
10001c1c:	b480      	push	{r7}
10001c1e:	b083      	sub	sp, #12
10001c20:	af00      	add	r7, sp, #0
10001c22:	6078      	str	r0, [r7, #4]
    return TIMER_NUM(timer);
10001c24:	687b      	ldr	r3, [r7, #4]
10001c26:	4a06      	ldr	r2, [pc, #24]	@ (10001c40 <timer_get_index+0x24>)
10001c28:	4293      	cmp	r3, r2
10001c2a:	bf0c      	ite	eq
10001c2c:	2301      	moveq	r3, #1
10001c2e:	2300      	movne	r3, #0
10001c30:	b2db      	uxtb	r3, r3
}
10001c32:	4618      	mov	r0, r3
10001c34:	370c      	adds	r7, #12
10001c36:	46bd      	mov	sp, r7
10001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c3c:	4770      	bx	lr
10001c3e:	bf00      	nop
10001c40:	400b8000 	.word	0x400b8000

10001c44 <timer_get_instance>:
 * \brief Returns the timer instance with the given timer number
 *
 * \param timer_num the timer number
 * \return the timer instance
 */
static inline timer_hw_t *timer_get_instance(uint timer_num) {
10001c44:	b480      	push	{r7}
10001c46:	b083      	sub	sp, #12
10001c48:	af00      	add	r7, sp, #0
10001c4a:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_TIMER, timer_num >= NUM_GENERIC_TIMERS);
    return TIMER_INSTANCE(timer_num);
10001c4c:	687b      	ldr	r3, [r7, #4]
10001c4e:	2b00      	cmp	r3, #0
10001c50:	d001      	beq.n	10001c56 <timer_get_instance+0x12>
10001c52:	4b04      	ldr	r3, [pc, #16]	@ (10001c64 <timer_get_instance+0x20>)
10001c54:	e000      	b.n	10001c58 <timer_get_instance+0x14>
10001c56:	4b04      	ldr	r3, [pc, #16]	@ (10001c68 <timer_get_instance+0x24>)
}
10001c58:	4618      	mov	r0, r3
10001c5a:	370c      	adds	r7, #12
10001c5c:	46bd      	mov	sp, r7
10001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001c62:	4770      	bx	lr
10001c64:	400b8000 	.word	0x400b8000
10001c68:	400b0000 	.word	0x400b0000

10001c6c <get_absolute_time>:
static inline absolute_time_t get_absolute_time(void) {
10001c6c:	b580      	push	{r7, lr}
10001c6e:	b082      	sub	sp, #8
10001c70:	af00      	add	r7, sp, #0
    update_us_since_boot(&t, time_us_64());
10001c72:	f000 ffeb 	bl	10002c4c <time_us_64>
10001c76:	4602      	mov	r2, r0
10001c78:	460b      	mov	r3, r1
10001c7a:	4639      	mov	r1, r7
10001c7c:	4608      	mov	r0, r1
10001c7e:	f7ff ff57 	bl	10001b30 <update_us_since_boot>
    return t;
10001c82:	e9d7 2300 	ldrd	r2, r3, [r7]
}
10001c86:	4610      	mov	r0, r2
10001c88:	4619      	mov	r1, r3
10001c8a:	3708      	adds	r7, #8
10001c8c:	46bd      	mov	sp, r7
10001c8e:	bd80      	pop	{r7, pc}

10001c90 <absolute_time_diff_us>:
 * \param from the first timestamp
 * \param to the second timestamp
 * \return the number of microseconds between the two timestamps (positive if `to` is after `from` except
 * in case of overflow)
 */
static inline int64_t absolute_time_diff_us(absolute_time_t from, absolute_time_t to) {
10001c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
10001c94:	b084      	sub	sp, #16
10001c96:	af00      	add	r7, sp, #0
10001c98:	e9c7 0102 	strd	r0, r1, [r7, #8]
10001c9c:	e9c7 2300 	strd	r2, r3, [r7]
    return (int64_t)(to_us_since_boot(to) - to_us_since_boot(from));
10001ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
10001ca4:	f7ff ff36 	bl	10001b14 <to_us_since_boot>
10001ca8:	4604      	mov	r4, r0
10001caa:	460d      	mov	r5, r1
10001cac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
10001cb0:	f7ff ff30 	bl	10001b14 <to_us_since_boot>
10001cb4:	4602      	mov	r2, r0
10001cb6:	460b      	mov	r3, r1
10001cb8:	ebb4 0802 	subs.w	r8, r4, r2
10001cbc:	eb65 0903 	sbc.w	r9, r5, r3
10001cc0:	4642      	mov	r2, r8
10001cc2:	464b      	mov	r3, r9
}
10001cc4:	4610      	mov	r0, r2
10001cc6:	4619      	mov	r1, r3
10001cc8:	3710      	adds	r7, #16
10001cca:	46bd      	mov	sp, r7
10001ccc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

10001cd0 <add_alarm_at>:
 *                     then the callback should be called during (by) this function instead 
 * @return >0 the alarm id
 * @return 0 if the alarm time passed before or during the call and fire_if_past was false
 * @return <0 if there were no alarm slots available, or other error occurred
 */
static inline alarm_id_t add_alarm_at(absolute_time_t time, alarm_callback_t callback, void *user_data, bool fire_if_past) {
10001cd0:	b580      	push	{r7, lr}
10001cd2:	b088      	sub	sp, #32
10001cd4:	af04      	add	r7, sp, #16
10001cd6:	e9c7 0102 	strd	r0, r1, [r7, #8]
10001cda:	607a      	str	r2, [r7, #4]
10001cdc:	603b      	str	r3, [r7, #0]
    return alarm_pool_add_alarm_at(alarm_pool_get_default(), time, callback, user_data, fire_if_past);
10001cde:	f000 f951 	bl	10001f84 <alarm_pool_get_default>
10001ce2:	4601      	mov	r1, r0
10001ce4:	7e3b      	ldrb	r3, [r7, #24]
10001ce6:	9302      	str	r3, [sp, #8]
10001ce8:	683b      	ldr	r3, [r7, #0]
10001cea:	9301      	str	r3, [sp, #4]
10001cec:	687b      	ldr	r3, [r7, #4]
10001cee:	9300      	str	r3, [sp, #0]
10001cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
10001cf4:	4608      	mov	r0, r1
10001cf6:	f000 fc9b 	bl	10002630 <alarm_pool_add_alarm_at>
10001cfa:	4603      	mov	r3, r0
}
10001cfc:	4618      	mov	r0, r3
10001cfe:	3710      	adds	r7, #16
10001d00:	46bd      	mov	sp, r7
10001d02:	bd80      	pop	{r7, pc}

10001d04 <cancel_alarm>:
 * \ingroup alarm
 * \param alarm_id the alarm
 * \return true if the alarm was cancelled, false if it didn't exist
 * \sa alarm_id_t for a note on reuse of IDs
 */
static inline bool cancel_alarm(alarm_id_t alarm_id) {
10001d04:	b580      	push	{r7, lr}
10001d06:	b082      	sub	sp, #8
10001d08:	af00      	add	r7, sp, #0
10001d0a:	6078      	str	r0, [r7, #4]
    return alarm_pool_cancel_alarm(alarm_pool_get_default(), alarm_id);
10001d0c:	f000 f93a 	bl	10001f84 <alarm_pool_get_default>
10001d10:	4603      	mov	r3, r0
10001d12:	6879      	ldr	r1, [r7, #4]
10001d14:	4618      	mov	r0, r3
10001d16:	f000 fd84 	bl	10002822 <alarm_pool_cancel_alarm>
10001d1a:	4603      	mov	r3, r0
}
10001d1c:	4618      	mov	r0, r3
10001d1e:	3708      	adds	r7, #8
10001d20:	46bd      	mov	sp, r7
10001d22:	bd80      	pop	{r7, pc}

10001d24 <default_alarm_pool_initialized>:

static alarm_pool_t default_alarm_pool = {
        .entries = default_alarm_pool_entries,
};

static inline bool default_alarm_pool_initialized(void) {
10001d24:	b480      	push	{r7}
10001d26:	af00      	add	r7, sp, #0
    return default_alarm_pool.lock != NULL;
10001d28:	4b05      	ldr	r3, [pc, #20]	@ (10001d40 <default_alarm_pool_initialized+0x1c>)
10001d2a:	691b      	ldr	r3, [r3, #16]
10001d2c:	2b00      	cmp	r3, #0
10001d2e:	bf14      	ite	ne
10001d30:	2301      	movne	r3, #1
10001d32:	2300      	moveq	r3, #0
10001d34:	b2db      	uxtb	r3, r3
}
10001d36:	4618      	mov	r0, r3
10001d38:	46bd      	mov	sp, r7
10001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d3e:	4770      	bx	lr
10001d40:	20001574 	.word	0x20001574

10001d44 <ta_force_irq>:
#define TA_NUM_TIMERS NUM_GENERIC_TIMERS
#define TA_NUM_TIMER_ALARMS NUM_ALARMS

#define timer_hw_from_timer(t) ((timer_hw_t *)(t))

static inline void ta_force_irq(alarm_pool_timer_t *timer, uint alarm_num) {
10001d44:	b480      	push	{r7}
10001d46:	b085      	sub	sp, #20
10001d48:	af00      	add	r7, sp, #0
10001d4a:	6078      	str	r0, [r7, #4]
10001d4c:	6039      	str	r1, [r7, #0]
    hw_set_bits(&timer_hw_from_timer(timer)->intf, 1u << alarm_num);
10001d4e:	687b      	ldr	r3, [r7, #4]
10001d50:	f103 0244 	add.w	r2, r3, #68	@ 0x44
10001d54:	2101      	movs	r1, #1
10001d56:	683b      	ldr	r3, [r7, #0]
10001d58:	fa01 f303 	lsl.w	r3, r1, r3
10001d5c:	60fa      	str	r2, [r7, #12]
10001d5e:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001d60:	68fb      	ldr	r3, [r7, #12]
10001d62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10001d66:	461a      	mov	r2, r3
10001d68:	68bb      	ldr	r3, [r7, #8]
10001d6a:	6013      	str	r3, [r2, #0]
}
10001d6c:	bf00      	nop
}
10001d6e:	bf00      	nop
10001d70:	3714      	adds	r7, #20
10001d72:	46bd      	mov	sp, r7
10001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
10001d78:	4770      	bx	lr

10001d7a <ta_clear_force_irq>:

static inline void ta_clear_force_irq(alarm_pool_timer_t *timer, uint alarm_num) {
10001d7a:	b480      	push	{r7}
10001d7c:	b085      	sub	sp, #20
10001d7e:	af00      	add	r7, sp, #0
10001d80:	6078      	str	r0, [r7, #4]
10001d82:	6039      	str	r1, [r7, #0]
    hw_clear_bits(&timer_hw_from_timer(timer)->intf, 1u << alarm_num);
10001d84:	687b      	ldr	r3, [r7, #4]
10001d86:	f103 0244 	add.w	r2, r3, #68	@ 0x44
10001d8a:	2101      	movs	r1, #1
10001d8c:	683b      	ldr	r3, [r7, #0]
10001d8e:	fa01 f303 	lsl.w	r3, r1, r3
10001d92:	60fa      	str	r2, [r7, #12]
10001d94:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10001d96:	68fb      	ldr	r3, [r7, #12]
10001d98:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10001d9c:	461a      	mov	r2, r3
10001d9e:	68bb      	ldr	r3, [r7, #8]
10001da0:	6013      	str	r3, [r2, #0]
}
10001da2:	bf00      	nop
}
10001da4:	bf00      	nop
10001da6:	3714      	adds	r7, #20
10001da8:	46bd      	mov	sp, r7
10001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dae:	4770      	bx	lr

10001db0 <ta_clear_irq>:

static inline void ta_clear_irq(alarm_pool_timer_t *timer, uint alarm_num) {
10001db0:	b480      	push	{r7}
10001db2:	b083      	sub	sp, #12
10001db4:	af00      	add	r7, sp, #0
10001db6:	6078      	str	r0, [r7, #4]
10001db8:	6039      	str	r1, [r7, #0]
    timer_hw_from_timer(timer)->intr = 1u << alarm_num;
10001dba:	2201      	movs	r2, #1
10001dbc:	683b      	ldr	r3, [r7, #0]
10001dbe:	409a      	lsls	r2, r3
10001dc0:	687b      	ldr	r3, [r7, #4]
10001dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
10001dc4:	bf00      	nop
10001dc6:	370c      	adds	r7, #12
10001dc8:	46bd      	mov	sp, r7
10001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dce:	4770      	bx	lr

10001dd0 <ta_from_current_irq>:

static inline alarm_pool_timer_t *ta_from_current_irq(uint *alarm_num) {
10001dd0:	b580      	push	{r7, lr}
10001dd2:	b086      	sub	sp, #24
10001dd4:	af00      	add	r7, sp, #0
10001dd6:	6078      	str	r0, [r7, #4]
    pico_default_asm_volatile (
10001dd8:	f3ef 8305 	mrs	r3, IPSR
10001ddc:	b2db      	uxtb	r3, r3
10001dde:	60fb      	str	r3, [r7, #12]
    return exception;
10001de0:	68fb      	ldr	r3, [r7, #12]
    uint irq_num = __get_current_exception() - VTABLE_FIRST_IRQ;
10001de2:	3b10      	subs	r3, #16
10001de4:	617b      	str	r3, [r7, #20]
    alarm_pool_timer_t *timer = timer_get_instance(TIMER_NUM_FROM_IRQ(irq_num));
10001de6:	697b      	ldr	r3, [r7, #20]
10001de8:	089b      	lsrs	r3, r3, #2
10001dea:	4618      	mov	r0, r3
10001dec:	f7ff ff2a 	bl	10001c44 <timer_get_instance>
10001df0:	6138      	str	r0, [r7, #16]
    *alarm_num = TIMER_ALARM_NUM_FROM_IRQ(irq_num);
10001df2:	697b      	ldr	r3, [r7, #20]
10001df4:	f003 0203 	and.w	r2, r3, #3
10001df8:	687b      	ldr	r3, [r7, #4]
10001dfa:	601a      	str	r2, [r3, #0]
    return timer;
10001dfc:	693b      	ldr	r3, [r7, #16]
}
10001dfe:	4618      	mov	r0, r3
10001e00:	3718      	adds	r7, #24
10001e02:	46bd      	mov	sp, r7
10001e04:	bd80      	pop	{r7, pc}

10001e06 <ta_set_timeout>:

static inline void ta_set_timeout(alarm_pool_timer_t *timer, uint alarm_num, int64_t target) {
10001e06:	b480      	push	{r7}
10001e08:	b085      	sub	sp, #20
10001e0a:	af00      	add	r7, sp, #0
10001e0c:	60f8      	str	r0, [r7, #12]
10001e0e:	60b9      	str	r1, [r7, #8]
10001e10:	e9c7 2300 	strd	r2, r3, [r7]
    timer_hw_from_timer(timer)->alarm[alarm_num] = (uint32_t) target;
10001e14:	6839      	ldr	r1, [r7, #0]
10001e16:	68fb      	ldr	r3, [r7, #12]
10001e18:	68ba      	ldr	r2, [r7, #8]
10001e1a:	3204      	adds	r2, #4
10001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
10001e20:	bf00      	nop
10001e22:	3714      	adds	r7, #20
10001e24:	46bd      	mov	sp, r7
10001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
10001e2a:	4770      	bx	lr

10001e2c <ta_time_us_64>:

static inline uint64_t ta_time_us_64(alarm_pool_timer_t *timer) {
10001e2c:	b580      	push	{r7, lr}
10001e2e:	b082      	sub	sp, #8
10001e30:	af00      	add	r7, sp, #0
10001e32:	6078      	str	r0, [r7, #4]
    return timer_time_us_64(timer_hw_from_timer(timer));
10001e34:	6878      	ldr	r0, [r7, #4]
10001e36:	f000 fe71 	bl	10002b1c <timer_time_us_64>
10001e3a:	4602      	mov	r2, r0
10001e3c:	460b      	mov	r3, r1
}
10001e3e:	4610      	mov	r0, r2
10001e40:	4619      	mov	r1, r3
10001e42:	3708      	adds	r7, #8
10001e44:	46bd      	mov	sp, r7
10001e46:	bd80      	pop	{r7, pc}

10001e48 <ta_enable_irq_handler>:

static inline void ta_enable_irq_handler(alarm_pool_timer_t *timer, uint alarm_num, irq_handler_t irq_handler) {
10001e48:	b580      	push	{r7, lr}
10001e4a:	b088      	sub	sp, #32
10001e4c:	af00      	add	r7, sp, #0
10001e4e:	60f8      	str	r0, [r7, #12]
10001e50:	60b9      	str	r1, [r7, #8]
10001e52:	607a      	str	r2, [r7, #4]
    // disarm the timer
    uint irq_num = timer_hardware_alarm_get_irq_num(timer, alarm_num);
10001e54:	68b9      	ldr	r1, [r7, #8]
10001e56:	68f8      	ldr	r0, [r7, #12]
10001e58:	f7ff fec8 	bl	10001bec <timer_hardware_alarm_get_irq_num>
10001e5c:	61f8      	str	r0, [r7, #28]
    timer_hw_from_timer(timer)->armed = 1u << alarm_num;
10001e5e:	2201      	movs	r2, #1
10001e60:	68bb      	ldr	r3, [r7, #8]
10001e62:	409a      	lsls	r2, r3
10001e64:	68fb      	ldr	r3, [r7, #12]
10001e66:	621a      	str	r2, [r3, #32]
    irq_set_exclusive_handler(irq_num, irq_handler);
10001e68:	6879      	ldr	r1, [r7, #4]
10001e6a:	69f8      	ldr	r0, [r7, #28]
10001e6c:	f7ff f9ae 	bl	100011cc <irq_set_exclusive_handler>
    irq_set_enabled(irq_num, true);
10001e70:	2101      	movs	r1, #1
10001e72:	69f8      	ldr	r0, [r7, #28]
10001e74:	f7ff f8dc 	bl	10001030 <irq_set_enabled>
    hw_set_bits(&timer_hw_from_timer(timer)->inte, 1u << alarm_num);
10001e78:	68fb      	ldr	r3, [r7, #12]
10001e7a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
10001e7e:	2101      	movs	r1, #1
10001e80:	68bb      	ldr	r3, [r7, #8]
10001e82:	fa01 f303 	lsl.w	r3, r1, r3
10001e86:	61ba      	str	r2, [r7, #24]
10001e88:	617b      	str	r3, [r7, #20]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10001e8a:	69bb      	ldr	r3, [r7, #24]
10001e8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10001e90:	461a      	mov	r2, r3
10001e92:	697b      	ldr	r3, [r7, #20]
10001e94:	6013      	str	r3, [r2, #0]
}
10001e96:	bf00      	nop
}
10001e98:	bf00      	nop
10001e9a:	3720      	adds	r7, #32
10001e9c:	46bd      	mov	sp, r7
10001e9e:	bd80      	pop	{r7, pc}

10001ea0 <ta_hardware_alarm_claim>:
    irq_set_enabled(irq_num, true);
    irq_remove_handler(irq_num, irq_handler);
    hardware_alarm_unclaim(alarm_num);
}

static inline void ta_hardware_alarm_claim(alarm_pool_timer_t *timer, uint hardware_alaram_num) {
10001ea0:	b580      	push	{r7, lr}
10001ea2:	b082      	sub	sp, #8
10001ea4:	af00      	add	r7, sp, #0
10001ea6:	6078      	str	r0, [r7, #4]
10001ea8:	6039      	str	r1, [r7, #0]
    timer_hardware_alarm_claim(timer_hw_from_timer(timer), hardware_alaram_num);
10001eaa:	6839      	ldr	r1, [r7, #0]
10001eac:	6878      	ldr	r0, [r7, #4]
10001eae:	f000 fe19 	bl	10002ae4 <timer_hardware_alarm_claim>
}
10001eb2:	bf00      	nop
10001eb4:	3708      	adds	r7, #8
10001eb6:	46bd      	mov	sp, r7
10001eb8:	bd80      	pop	{r7, pc}

10001eba <ta_timer_num>:

static inline alarm_pool_timer_t *ta_timer_instance(uint timer_num) {
    return timer_get_instance(timer_num);
}

static inline uint ta_timer_num(alarm_pool_timer_t *timer) {
10001eba:	b580      	push	{r7, lr}
10001ebc:	b082      	sub	sp, #8
10001ebe:	af00      	add	r7, sp, #0
10001ec0:	6078      	str	r0, [r7, #4]
    return timer_get_index(timer_hw_from_timer(timer));
10001ec2:	6878      	ldr	r0, [r7, #4]
10001ec4:	f7ff feaa 	bl	10001c1c <timer_get_index>
10001ec8:	4603      	mov	r3, r0
}
10001eca:	4618      	mov	r0, r3
10001ecc:	3708      	adds	r7, #8
10001ece:	46bd      	mov	sp, r7
10001ed0:	bd80      	pop	{r7, pc}
	...

10001ed4 <ta_default_timer_instance>:

static inline alarm_pool_timer_t *ta_default_timer_instance(void) {
10001ed4:	b480      	push	{r7}
10001ed6:	af00      	add	r7, sp, #0
    return PICO_DEFAULT_TIMER_INSTANCE();
10001ed8:	4b02      	ldr	r3, [pc, #8]	@ (10001ee4 <ta_default_timer_instance+0x10>)
}
10001eda:	4618      	mov	r0, r3
10001edc:	46bd      	mov	sp, r7
10001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ee2:	4770      	bx	lr
10001ee4:	400b0000 	.word	0x400b0000

10001ee8 <alarm_index>:

static alarm_pool_t *pools[TA_NUM_TIMERS][TA_NUM_TIMER_ALARMS];

static void alarm_pool_post_alloc_init(alarm_pool_t *pool, alarm_pool_timer_t *timer, uint hardware_alarm_num, uint max_timers);

static inline int16_t alarm_index(alarm_id_t id) {
10001ee8:	b480      	push	{r7}
10001eea:	b083      	sub	sp, #12
10001eec:	af00      	add	r7, sp, #0
10001eee:	6078      	str	r0, [r7, #4]
    return (int16_t)(id >> 16);
10001ef0:	687b      	ldr	r3, [r7, #4]
10001ef2:	141b      	asrs	r3, r3, #16
10001ef4:	b21b      	sxth	r3, r3
}
10001ef6:	4618      	mov	r0, r3
10001ef8:	370c      	adds	r7, #12
10001efa:	46bd      	mov	sp, r7
10001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f00:	4770      	bx	lr

10001f02 <alarm_sequence>:

static inline uint16_t alarm_sequence(alarm_id_t id) {
10001f02:	b480      	push	{r7}
10001f04:	b083      	sub	sp, #12
10001f06:	af00      	add	r7, sp, #0
10001f08:	6078      	str	r0, [r7, #4]
    return (uint16_t)id;
10001f0a:	687b      	ldr	r3, [r7, #4]
10001f0c:	b29b      	uxth	r3, r3
}
10001f0e:	4618      	mov	r0, r3
10001f10:	370c      	adds	r7, #12
10001f12:	46bd      	mov	sp, r7
10001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f18:	4770      	bx	lr

10001f1a <make_alarm_id>:

static alarm_id_t make_alarm_id(int index, uint16_t counter) {
10001f1a:	b480      	push	{r7}
10001f1c:	b083      	sub	sp, #12
10001f1e:	af00      	add	r7, sp, #0
10001f20:	6078      	str	r0, [r7, #4]
10001f22:	460b      	mov	r3, r1
10001f24:	807b      	strh	r3, [r7, #2]
    return index << 16 | counter;
10001f26:	687b      	ldr	r3, [r7, #4]
10001f28:	041a      	lsls	r2, r3, #16
10001f2a:	887b      	ldrh	r3, [r7, #2]
10001f2c:	4313      	orrs	r3, r2
}
10001f2e:	4618      	mov	r0, r3
10001f30:	370c      	adds	r7, #12
10001f32:	46bd      	mov	sp, r7
10001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f38:	4770      	bx	lr
	...

10001f3c <runtime_init_default_alarm_pool>:

#if !PICO_RUNTIME_NO_INIT_DEFAULT_ALARM_POOL
void __weak runtime_init_default_alarm_pool(void) {
10001f3c:	b580      	push	{r7, lr}
10001f3e:	b082      	sub	sp, #8
10001f40:	af00      	add	r7, sp, #0
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    // allow multiple calls for ease of use from host tests
    if (!default_alarm_pool_initialized()) {
10001f42:	f7ff feef 	bl	10001d24 <default_alarm_pool_initialized>
10001f46:	4603      	mov	r3, r0
10001f48:	f083 0301 	eor.w	r3, r3, #1
10001f4c:	b2db      	uxtb	r3, r3
10001f4e:	2b00      	cmp	r3, #0
10001f50:	d00c      	beq.n	10001f6c <runtime_init_default_alarm_pool+0x30>
        alarm_pool_timer_t *timer = alarm_pool_get_default_timer();
10001f52:	f000 fd83 	bl	10002a5c <alarm_pool_get_default_timer>
10001f56:	6078      	str	r0, [r7, #4]
        ta_hardware_alarm_claim(timer, PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM);
10001f58:	2103      	movs	r1, #3
10001f5a:	6878      	ldr	r0, [r7, #4]
10001f5c:	f7ff ffa0 	bl	10001ea0 <ta_hardware_alarm_claim>
        alarm_pool_post_alloc_init(&default_alarm_pool,
10001f60:	2310      	movs	r3, #16
10001f62:	2203      	movs	r2, #3
10001f64:	6879      	ldr	r1, [r7, #4]
10001f66:	4805      	ldr	r0, [pc, #20]	@ (10001f7c <runtime_init_default_alarm_pool+0x40>)
10001f68:	f000 fafe 	bl	10002568 <alarm_pool_post_alloc_init>
                                   timer,
                                   PICO_TIME_DEFAULT_ALARM_POOL_HARDWARE_ALARM_NUM,
                                   PICO_TIME_DEFAULT_ALARM_POOL_MAX_TIMERS);
    }
    lock_init(&sleep_notifier, PICO_SPINLOCK_ID_TIMER);
10001f6c:	210a      	movs	r1, #10
10001f6e:	4804      	ldr	r0, [pc, #16]	@ (10001f80 <runtime_init_default_alarm_pool+0x44>)
10001f70:	f7ff fc84 	bl	1000187c <lock_init>
#endif
}
10001f74:	bf00      	nop
10001f76:	3708      	adds	r7, #8
10001f78:	46bd      	mov	sp, r7
10001f7a:	bd80      	pop	{r7, pc}
10001f7c:	20001574 	.word	0x20001574
10001f80:	20002560 	.word	0x20002560

10001f84 <alarm_pool_get_default>:
void alarm_pool_init_default(void) {
    runtime_init_default_alarm_pool();
}

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
alarm_pool_t *alarm_pool_get_default(void) {
10001f84:	b580      	push	{r7, lr}
10001f86:	af00      	add	r7, sp, #0
    assert(default_alarm_pool_initialized());
10001f88:	f7ff fecc 	bl	10001d24 <default_alarm_pool_initialized>
10001f8c:	4603      	mov	r3, r0
10001f8e:	2b00      	cmp	r3, #0
10001f90:	d105      	bne.n	10001f9e <alarm_pool_get_default+0x1a>
10001f92:	4b04      	ldr	r3, [pc, #16]	@ (10001fa4 <alarm_pool_get_default+0x20>)
10001f94:	4a04      	ldr	r2, [pc, #16]	@ (10001fa8 <alarm_pool_get_default+0x24>)
10001f96:	2165      	movs	r1, #101	@ 0x65
10001f98:	4804      	ldr	r0, [pc, #16]	@ (10001fac <alarm_pool_get_default+0x28>)
10001f9a:	f003 fc6b 	bl	10005874 <__assert_func>
    return &default_alarm_pool;
10001f9e:	4b04      	ldr	r3, [pc, #16]	@ (10001fb0 <alarm_pool_get_default+0x2c>)
}
10001fa0:	4618      	mov	r0, r3
10001fa2:	bd80      	pop	{r7, pc}
10001fa4:	1000b5d0 	.word	0x1000b5d0
10001fa8:	1000b6f0 	.word	0x1000b6f0
10001fac:	1000b5f4 	.word	0x1000b5f4
10001fb0:	20001574 	.word	0x20001574

10001fb4 <alarm_pool_irq_handler>:

// marker which we can use in place of handler function to indicate we are a repeating timer

#define repeating_timer_marker ((alarm_callback_t)alarm_pool_irq_handler)
#include "hardware/gpio.h"
static void alarm_pool_irq_handler(void) {
10001fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10001fb8:	b0bf      	sub	sp, #252	@ 0xfc
10001fba:	af00      	add	r7, sp, #0
    // This IRQ handler does the main work, as it always (assuming the IRQ hasn't been enabled on both cores
    // which is unsupported) run on the alarm pool's core, and can't be preempted by itself, meaning
    // that it doesn't need locks except to protect against linked list access
    uint timer_alarm_num;
    alarm_pool_timer_t *timer = ta_from_current_irq(&timer_alarm_num);
10001fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
10001fc0:	4618      	mov	r0, r3
10001fc2:	f7ff ff05 	bl	10001dd0 <ta_from_current_irq>
10001fc6:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    uint timer_num = ta_timer_num(timer);
10001fca:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
10001fce:	f7ff ff74 	bl	10001eba <ta_timer_num>
10001fd2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    alarm_pool_t *pool = pools[timer_num][timer_alarm_num];
10001fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10001fd8:	4997      	ldr	r1, [pc, #604]	@ (10002238 <alarm_pool_irq_handler+0x284>)
10001fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
10001fde:	009b      	lsls	r3, r3, #2
10001fe0:	4413      	add	r3, r2
10001fe2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    assert(pool->timer_alarm_num == timer_alarm_num);
10001fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10001fee:	781b      	ldrb	r3, [r3, #0]
10001ff0:	461a      	mov	r2, r3
10001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10001ff4:	429a      	cmp	r2, r3
10001ff6:	d005      	beq.n	10002004 <alarm_pool_irq_handler+0x50>
10001ff8:	4b90      	ldr	r3, [pc, #576]	@ (1000223c <alarm_pool_irq_handler+0x288>)
10001ffa:	4a91      	ldr	r2, [pc, #580]	@ (10002240 <alarm_pool_irq_handler+0x28c>)
10001ffc:	2190      	movs	r1, #144	@ 0x90
10001ffe:	4891      	ldr	r0, [pc, #580]	@ (10002244 <alarm_pool_irq_handler+0x290>)
10002000:	f003 fc38 	bl	10005874 <__assert_func>
    int64_t now = (int64_t) ta_time_us_64(timer);
10002004:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
10002008:	f7ff ff10 	bl	10001e2c <ta_time_us_64>
1000200c:	4602      	mov	r2, r0
1000200e:	460b      	mov	r3, r1
10002010:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
    int64_t earliest_target;
    // 1. clear force bits if we were forced (do this outside the loop, as forcing is hopefully rare)
    ta_clear_force_irq(timer, timer_alarm_num);
10002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002016:	4619      	mov	r1, r3
10002018:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
1000201c:	f7ff fead 	bl	10001d7a <ta_clear_force_irq>
    do {
        // 2. clear the IRQ if it was fired
        ta_clear_irq(timer, timer_alarm_num);
10002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002022:	4619      	mov	r1, r3
10002024:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
10002028:	f7ff fec2 	bl	10001db0 <ta_clear_irq>
        // 3. we look at the earliest existing alarm first; the reasoning here is that we
        //    don't want to delay an existing callback because a later one is added, and
        //    if both are due now, then we have a race anyway (but we prefer to fire existing
        //    timers before new ones anyway.
        int16_t earliest_index = pool->ordered_head;
1000202c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002030:	891b      	ldrh	r3, [r3, #8]
10002032:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        // by default, we loop if there was any event pending (we will mark it false
        // later if there is no work to do)
        if (earliest_index >= 0) {
10002036:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
1000203a:	2b00      	cmp	r3, #0
1000203c:	f2c0 8150 	blt.w	100022e0 <alarm_pool_irq_handler+0x32c>
            alarm_pool_entry_t *earliest_entry = &pool->entries[earliest_index];
10002040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002044:	6959      	ldr	r1, [r3, #20]
10002046:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	@ 0xbe
1000204a:	4613      	mov	r3, r2
1000204c:	005b      	lsls	r3, r3, #1
1000204e:	4413      	add	r3, r2
10002050:	00db      	lsls	r3, r3, #3
10002052:	440b      	add	r3, r1
10002054:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            earliest_target = earliest_entry->target;
10002058:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
1000205c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
10002060:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
            if ((now - earliest_target) >= 0) {
10002064:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
10002068:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
1000206c:	ebb0 0802 	subs.w	r8, r0, r2
10002070:	eb61 0903 	sbc.w	r9, r1, r3
10002074:	f1b9 0f00 	cmp.w	r9, #0
10002078:	f2c0 8132 	blt.w	100022e0 <alarm_pool_irq_handler+0x32c>
                // time to call the callback now (or in the past)
                // note that an entry->target of < 0 means the entry has been canceled (not this is set
                // by this function, in response to the entry having been queued by the cancel_alarm API
                // meaning that we don't need to worry about tearing of the 64 bit value)
                int64_t delta;
                if (earliest_target >= 0) {
1000207c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
10002080:	2b00      	cmp	r3, #0
10002082:	db3b      	blt.n	100020fc <alarm_pool_irq_handler+0x148>
                    // special case repeating timer without making another function call which adds overhead
                    if (earliest_entry->callback == repeating_timer_marker) {
10002084:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
10002088:	691a      	ldr	r2, [r3, #16]
1000208a:	4b6f      	ldr	r3, [pc, #444]	@ (10002248 <alarm_pool_irq_handler+0x294>)
1000208c:	429a      	cmp	r2, r3
1000208e:	d119      	bne.n	100020c4 <alarm_pool_irq_handler+0x110>
                        repeating_timer_t *rpt = (repeating_timer_t *)earliest_entry->user_data;
10002090:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
10002094:	695b      	ldr	r3, [r3, #20]
10002096:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                        delta = rpt->callback(rpt) ? rpt->delay_us : 0;
1000209a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
1000209e:	691b      	ldr	r3, [r3, #16]
100020a0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
100020a4:	4798      	blx	r3
100020a6:	4603      	mov	r3, r0
100020a8:	2b00      	cmp	r3, #0
100020aa:	d004      	beq.n	100020b6 <alarm_pool_irq_handler+0x102>
100020ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
100020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
100020b4:	e003      	b.n	100020be <alarm_pool_irq_handler+0x10a>
100020b6:	f04f 0200 	mov.w	r2, #0
100020ba:	f04f 0300 	mov.w	r3, #0
100020be:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
100020c2:	e021      	b.n	10002108 <alarm_pool_irq_handler+0x154>
                    } else {
                        alarm_id_t id = make_alarm_id(pool->ordered_head, earliest_entry->sequence);
100020c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100020c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
100020cc:	461a      	mov	r2, r3
100020ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
100020d2:	885b      	ldrh	r3, [r3, #2]
100020d4:	b29b      	uxth	r3, r3
100020d6:	4619      	mov	r1, r3
100020d8:	4610      	mov	r0, r2
100020da:	f7ff ff1e 	bl	10001f1a <make_alarm_id>
100020de:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                        delta = earliest_entry->callback(id, earliest_entry->user_data);
100020e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
100020e6:	691a      	ldr	r2, [r3, #16]
100020e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
100020ec:	695b      	ldr	r3, [r3, #20]
100020ee:	4619      	mov	r1, r3
100020f0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
100020f4:	4790      	blx	r2
100020f6:	e9c7 013a 	strd	r0, r1, [r7, #232]	@ 0xe8
100020fa:	e005      	b.n	10002108 <alarm_pool_irq_handler+0x154>
                    }
                } else {
                    // negative target means cancel alarm
                    delta = 0;
100020fc:	f04f 0200 	mov.w	r2, #0
10002100:	f04f 0300 	mov.w	r3, #0
10002104:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8
                }
                if (delta) {
10002108:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
1000210c:	4313      	orrs	r3, r2
1000210e:	f000 809d 	beq.w	1000224c <alarm_pool_irq_handler+0x298>
                    int64_t next_time;
                    if (delta < 0) {
10002112:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
10002116:	2b00      	cmp	r3, #0
10002118:	da0d      	bge.n	10002136 <alarm_pool_irq_handler+0x182>
                        // delta is (positive) delta from last fire time
                        next_time = earliest_target - delta;
1000211a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
1000211e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
10002122:	1a86      	subs	r6, r0, r2
10002124:	60be      	str	r6, [r7, #8]
10002126:	eb61 0303 	sbc.w	r3, r1, r3
1000212a:	60fb      	str	r3, [r7, #12]
1000212c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
10002130:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
10002134:	e011      	b.n	1000215a <alarm_pool_irq_handler+0x1a6>
                    } else {
                        // delta is relative to now
                        next_time = (int64_t) ta_time_us_64(timer) + delta;
10002136:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
1000213a:	f7ff fe77 	bl	10001e2c <ta_time_us_64>
1000213e:	4602      	mov	r2, r0
10002140:	460b      	mov	r3, r1
10002142:	4610      	mov	r0, r2
10002144:	4619      	mov	r1, r3
10002146:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
1000214a:	1816      	adds	r6, r2, r0
1000214c:	603e      	str	r6, [r7, #0]
1000214e:	414b      	adcs	r3, r1
10002150:	607b      	str	r3, [r7, #4]
10002152:	e9d7 2300 	ldrd	r2, r3, [r7]
10002156:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
                    }
                    earliest_entry->target = next_time;
1000215a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
1000215e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
10002162:	e9c1 2302 	strd	r2, r3, [r1, #8]
                    // need to re-add, unless we are the only entry or already at the front
                    if (earliest_entry->next >= 0 && next_time - pool->entries[earliest_entry->next].target >= 0) {
10002166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
1000216a:	f9b3 3000 	ldrsh.w	r3, [r3]
1000216e:	2b00      	cmp	r3, #0
10002170:	f2c0 80b6 	blt.w	100022e0 <alarm_pool_irq_handler+0x32c>
10002174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002178:	6959      	ldr	r1, [r3, #20]
1000217a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
1000217e:	f9b3 3000 	ldrsh.w	r3, [r3]
10002182:	461a      	mov	r2, r3
10002184:	4613      	mov	r3, r2
10002186:	005b      	lsls	r3, r3, #1
10002188:	4413      	add	r3, r2
1000218a:	00db      	lsls	r3, r3, #3
1000218c:	440b      	add	r3, r1
1000218e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
10002192:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
10002196:	ebb2 0a00 	subs.w	sl, r2, r0
1000219a:	eb63 0b01 	sbc.w	fp, r3, r1
1000219e:	f1bb 0f00 	cmp.w	fp, #0
100021a2:	f2c0 809d 	blt.w	100022e0 <alarm_pool_irq_handler+0x32c>
                        // unlink this item
                        pool->ordered_head = earliest_entry->next;
100021a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
100021aa:	f9b3 3000 	ldrsh.w	r3, [r3]
100021ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
100021b2:	8113      	strh	r3, [r2, #8]
                        int16_t *prev = &pool->ordered_head;
100021b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100021b8:	3308      	adds	r3, #8
100021ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                        // find insertion point; note >= as if we add a new item for the same time as another, then it follows
                        while (*prev >= 0 && (next_time - pool->entries[*prev].target) >= 0) {
100021be:	e00e      	b.n	100021de <alarm_pool_irq_handler+0x22a>
                            prev = &pool->entries[*prev].next;
100021c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100021c4:	6959      	ldr	r1, [r3, #20]
100021c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
100021ca:	f9b3 3000 	ldrsh.w	r3, [r3]
100021ce:	461a      	mov	r2, r3
100021d0:	4613      	mov	r3, r2
100021d2:	005b      	lsls	r3, r3, #1
100021d4:	4413      	add	r3, r2
100021d6:	00db      	lsls	r3, r3, #3
100021d8:	440b      	add	r3, r1
100021da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                        while (*prev >= 0 && (next_time - pool->entries[*prev].target) >= 0) {
100021de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
100021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
100021e6:	2b00      	cmp	r3, #0
100021e8:	db18      	blt.n	1000221c <alarm_pool_irq_handler+0x268>
100021ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100021ee:	6959      	ldr	r1, [r3, #20]
100021f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
100021f4:	f9b3 3000 	ldrsh.w	r3, [r3]
100021f8:	461a      	mov	r2, r3
100021fa:	4613      	mov	r3, r2
100021fc:	005b      	lsls	r3, r3, #1
100021fe:	4413      	add	r3, r2
10002200:	00db      	lsls	r3, r3, #3
10002202:	440b      	add	r3, r1
10002204:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
10002208:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
1000220c:	1a16      	subs	r6, r2, r0
1000220e:	61be      	str	r6, [r7, #24]
10002210:	eb63 0301 	sbc.w	r3, r3, r1
10002214:	61fb      	str	r3, [r7, #28]
10002216:	69fb      	ldr	r3, [r7, #28]
10002218:	2b00      	cmp	r3, #0
1000221a:	dad1      	bge.n	100021c0 <alarm_pool_irq_handler+0x20c>
                        }
                        earliest_entry->next = *prev;
1000221c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
10002220:	f9b3 3000 	ldrsh.w	r3, [r3]
10002224:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
10002228:	8013      	strh	r3, [r2, #0]
                        *prev = earliest_index;
1000222a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
1000222e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
10002232:	8013      	strh	r3, [r2, #0]
10002234:	e054      	b.n	100022e0 <alarm_pool_irq_handler+0x32c>
10002236:	bf00      	nop
10002238:	20002538 	.word	0x20002538
1000223c:	1000b62c 	.word	0x1000b62c
10002240:	1000b708 	.word	0x1000b708
10002244:	1000b5f4 	.word	0x1000b5f4
10002248:	10001fb5 	.word	0x10001fb5
                    }
                } else {
                    // need to remove the item
                    pool->ordered_head = earliest_entry->next;
1000224c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
10002250:	f9b3 3000 	ldrsh.w	r3, [r3]
10002254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
10002258:	8113      	strh	r3, [r2, #8]
                    // and add it back to the free list (under lock)
                    uint32_t save = spin_lock_blocking(pool->lock);
1000225a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
1000225e:	691b      	ldr	r3, [r3, #16]
10002260:	66bb      	str	r3, [r7, #104]	@ 0x68
    pico_default_asm_volatile (
10002262:	f3ef 8310 	mrs	r3, PRIMASK
10002266:	b672      	cpsid	i
10002268:	667b      	str	r3, [r7, #100]	@ 0x64
    return status;
1000226a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    uint32_t save = save_and_disable_interrupts();
1000226c:	663b      	str	r3, [r7, #96]	@ 0x60
1000226e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10002270:	65fb      	str	r3, [r7, #92]	@ 0x5c
    SW_SPIN_LOCK_LOCK(lock);
10002272:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
10002274:	e8d1 3fcf 	ldaexb	r3, [r1]
10002278:	2201      	movs	r2, #1
1000227a:	2b00      	cmp	r3, #0
1000227c:	d1fa      	bne.n	10002274 <alarm_pool_irq_handler+0x2c0>
1000227e:	e8c1 2f43 	strexb	r3, r2, [r1]
10002282:	2b00      	cmp	r3, #0
10002284:	d1f6      	bne.n	10002274 <alarm_pool_irq_handler+0x2c0>
10002286:	65ba      	str	r2, [r7, #88]	@ 0x58
10002288:	657b      	str	r3, [r7, #84]	@ 0x54
    pico_default_asm_volatile ("dmb" : : : "memory");
1000228a:	f3bf 8f5f 	dmb	sy
}
1000228e:	bf00      	nop
}
10002290:	bf00      	nop
}
10002292:	bf00      	nop
    return save;
10002294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10002296:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                    earliest_entry->next = pool->free_head;
1000229a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
1000229e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
100022a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
100022a6:	8013      	strh	r3, [r2, #0]
                    pool->free_head = earliest_index;
100022a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
100022ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
100022b0:	8053      	strh	r3, [r2, #2]
                    spin_unlock(pool->lock, save);
100022b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100022b6:	691b      	ldr	r3, [r3, #16]
100022b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
100022ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
100022be:	67bb      	str	r3, [r7, #120]	@ 0x78
100022c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
100022c2:	677b      	str	r3, [r7, #116]	@ 0x74
    SW_SPIN_LOCK_UNLOCK(lock);
100022c4:	2300      	movs	r3, #0
100022c6:	673b      	str	r3, [r7, #112]	@ 0x70
100022c8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
100022ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
100022cc:	e8c3 2f8f 	stlb	r2, [r3]
}
100022d0:	bf00      	nop
100022d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100022d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
100022d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
100022d8:	f383 8810 	msr	PRIMASK, r3
}
100022dc:	bf00      	nop
}
100022de:	bf00      	nop
                }
            }
        }
        // if we have any new alarms, add them to the ordered list
        if (pool->new_head >= 0) {
100022e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100022e4:	889b      	ldrh	r3, [r3, #4]
100022e6:	b21b      	sxth	r3, r3
100022e8:	2b00      	cmp	r3, #0
100022ea:	f2c0 80a0 	blt.w	1000242e <alarm_pool_irq_handler+0x47a>
            uint32_t save = spin_lock_blocking(pool->lock);
100022ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100022f2:	691b      	ldr	r3, [r3, #16]
100022f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pico_default_asm_volatile (
100022f6:	f3ef 8310 	mrs	r3, PRIMASK
100022fa:	b672      	cpsid	i
100022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    return status;
100022fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    uint32_t save = save_and_disable_interrupts();
10002300:	637b      	str	r3, [r7, #52]	@ 0x34
10002302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10002304:	633b      	str	r3, [r7, #48]	@ 0x30
    SW_SPIN_LOCK_LOCK(lock);
10002306:	6b39      	ldr	r1, [r7, #48]	@ 0x30
10002308:	e8d1 3fcf 	ldaexb	r3, [r1]
1000230c:	2201      	movs	r2, #1
1000230e:	2b00      	cmp	r3, #0
10002310:	d1fa      	bne.n	10002308 <alarm_pool_irq_handler+0x354>
10002312:	e8c1 2f43 	strexb	r3, r2, [r1]
10002316:	2b00      	cmp	r3, #0
10002318:	d1f6      	bne.n	10002308 <alarm_pool_irq_handler+0x354>
1000231a:	62fa      	str	r2, [r7, #44]	@ 0x2c
1000231c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pico_default_asm_volatile ("dmb" : : : "memory");
1000231e:	f3bf 8f5f 	dmb	sy
}
10002322:	bf00      	nop
}
10002324:	bf00      	nop
}
10002326:	bf00      	nop
    return save;
10002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000232a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            // must re-read new head under lock
            int16_t new_index = pool->new_head;
1000232e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002332:	889b      	ldrh	r3, [r3, #4]
10002334:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
            // clear the list
            pool->new_head = -1;
10002338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
1000233c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10002340:	8093      	strh	r3, [r2, #4]
            spin_unlock(pool->lock, save);
10002342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002346:	691b      	ldr	r3, [r3, #16]
10002348:	653b      	str	r3, [r7, #80]	@ 0x50
1000234a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
1000234e:	64fb      	str	r3, [r7, #76]	@ 0x4c
10002350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10002352:	64bb      	str	r3, [r7, #72]	@ 0x48
    SW_SPIN_LOCK_UNLOCK(lock);
10002354:	2300      	movs	r3, #0
10002356:	647b      	str	r3, [r7, #68]	@ 0x44
10002358:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1000235a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1000235c:	e8c3 2f8f 	stlb	r2, [r3]
}
10002360:	bf00      	nop
10002362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10002364:	643b      	str	r3, [r7, #64]	@ 0x40
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10002366:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10002368:	f383 8810 	msr	PRIMASK, r3
}
1000236c:	bf00      	nop
}
1000236e:	bf00      	nop
            // insert each of the new items
            while (new_index >= 0) {
10002370:	e059      	b.n	10002426 <alarm_pool_irq_handler+0x472>
                alarm_pool_entry_t *new_entry = &pool->entries[new_index];
10002372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002376:	6959      	ldr	r1, [r3, #20]
10002378:	f9b7 20da 	ldrsh.w	r2, [r7, #218]	@ 0xda
1000237c:	4613      	mov	r3, r2
1000237e:	005b      	lsls	r3, r3, #1
10002380:	4413      	add	r3, r2
10002382:	00db      	lsls	r3, r3, #3
10002384:	440b      	add	r3, r1
10002386:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                int64_t new_entry_time = new_entry->target;
1000238a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
1000238e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
10002392:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
                int16_t *prev = &pool->ordered_head;
10002396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
1000239a:	3308      	adds	r3, #8
1000239c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                // find insertion point; note >= as if we add a new item for the same time as another, then it follows
                while (*prev >= 0 && (new_entry_time - pool->entries[*prev].target) >= 0) {
100023a0:	e00e      	b.n	100023c0 <alarm_pool_irq_handler+0x40c>
                    prev = &pool->entries[*prev].next;
100023a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100023a6:	6959      	ldr	r1, [r3, #20]
100023a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
100023ac:	f9b3 3000 	ldrsh.w	r3, [r3]
100023b0:	461a      	mov	r2, r3
100023b2:	4613      	mov	r3, r2
100023b4:	005b      	lsls	r3, r3, #1
100023b6:	4413      	add	r3, r2
100023b8:	00db      	lsls	r3, r3, #3
100023ba:	440b      	add	r3, r1
100023bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                while (*prev >= 0 && (new_entry_time - pool->entries[*prev].target) >= 0) {
100023c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
100023c4:	f9b3 3000 	ldrsh.w	r3, [r3]
100023c8:	2b00      	cmp	r3, #0
100023ca:	db18      	blt.n	100023fe <alarm_pool_irq_handler+0x44a>
100023cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100023d0:	6959      	ldr	r1, [r3, #20]
100023d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
100023d6:	f9b3 3000 	ldrsh.w	r3, [r3]
100023da:	461a      	mov	r2, r3
100023dc:	4613      	mov	r3, r2
100023de:	005b      	lsls	r3, r3, #1
100023e0:	4413      	add	r3, r2
100023e2:	00db      	lsls	r3, r3, #3
100023e4:	440b      	add	r3, r1
100023e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
100023ea:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
100023ee:	1a16      	subs	r6, r2, r0
100023f0:	613e      	str	r6, [r7, #16]
100023f2:	eb63 0301 	sbc.w	r3, r3, r1
100023f6:	617b      	str	r3, [r7, #20]
100023f8:	697b      	ldr	r3, [r7, #20]
100023fa:	2b00      	cmp	r3, #0
100023fc:	dad1      	bge.n	100023a2 <alarm_pool_irq_handler+0x3ee>
                }
                int16_t next = *prev;
100023fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
10002402:	881b      	ldrh	r3, [r3, #0]
10002404:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
                *prev = new_index;
10002408:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
1000240c:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
10002410:	8013      	strh	r3, [r2, #0]
                new_index = new_entry->next;
10002412:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
10002416:	881b      	ldrh	r3, [r3, #0]
10002418:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
                new_entry->next = next;
1000241c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
10002420:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
10002424:	8013      	strh	r3, [r2, #0]
            while (new_index >= 0) {
10002426:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	@ 0xda
1000242a:	2b00      	cmp	r3, #0
1000242c:	daa1      	bge.n	10002372 <alarm_pool_irq_handler+0x3be>
            }
        }
        // if we have any canceled alarms, then mark them for removal by setting their due time to -1 (which will
        // cause them to be handled the next time round and removed)
        if (pool->has_pending_cancellations) {
1000242e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002432:	799b      	ldrb	r3, [r3, #6]
10002434:	b2db      	uxtb	r3, r3
10002436:	2b00      	cmp	r3, #0
10002438:	d058      	beq.n	100024ec <alarm_pool_irq_handler+0x538>
            pool->has_pending_cancellations = false;
1000243a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
1000243e:	2300      	movs	r3, #0
10002440:	7193      	strb	r3, [r2, #6]
 * The compiler will not move the load from `some_other_memory_location` above the memory barrier (which it otherwise
 * might - even above the memory store!)
 */
__force_inline static void __compiler_memory_barrier(void) {
    pico_default_asm_volatile ("" : : : "memory");
}
10002442:	bf00      	nop
            __compiler_memory_barrier();
            int16_t *prev = &pool->ordered_head;
10002444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002448:	3308      	adds	r3, #8
1000244a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            // set target for canceled items to -1, and move to front of the list
            for(int16_t index = pool->ordered_head; index != -1; ) {
1000244e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002452:	891b      	ldrh	r3, [r3, #8]
10002454:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
10002458:	e043      	b.n	100024e2 <alarm_pool_irq_handler+0x52e>
                alarm_pool_entry_t *entry = &pool->entries[index];
1000245a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
1000245e:	6959      	ldr	r1, [r3, #20]
10002460:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	@ 0xce
10002464:	4613      	mov	r3, r2
10002466:	005b      	lsls	r3, r3, #1
10002468:	4413      	add	r3, r2
1000246a:	00db      	lsls	r3, r3, #3
1000246c:	440b      	add	r3, r1
1000246e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                int16_t next = entry->next;
10002472:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10002476:	881b      	ldrh	r3, [r3, #0]
10002478:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
                if ((int16_t)entry->sequence < 0) {
1000247c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10002480:	885b      	ldrh	r3, [r3, #2]
10002482:	b29b      	uxth	r3, r3
10002484:	b21b      	sxth	r3, r3
10002486:	2b00      	cmp	r3, #0
10002488:	da23      	bge.n	100024d2 <alarm_pool_irq_handler+0x51e>
                    // mark for deletion
                    entry->target = -1;
1000248a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
1000248e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10002492:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10002496:	e9c1 2302 	strd	r2, r3, [r1, #8]
                    if (index != pool->ordered_head) {
1000249a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
1000249e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
100024a2:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
100024a6:	4293      	cmp	r3, r2
100024a8:	d017      	beq.n	100024da <alarm_pool_irq_handler+0x526>
                        // move to start of queue
                        *prev = entry->next;
100024aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100024ae:	f9b3 3000 	ldrsh.w	r3, [r3]
100024b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
100024b6:	8013      	strh	r3, [r2, #0]
                        entry->next = pool->ordered_head;
100024b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
100024bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
100024c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
100024c4:	8013      	strh	r3, [r2, #0]
                        pool->ordered_head = index;
100024c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
100024ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
100024ce:	8113      	strh	r3, [r2, #8]
100024d0:	e003      	b.n	100024da <alarm_pool_irq_handler+0x526>
                    }
                } else {
                    prev = &entry->next;
100024d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100024d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                }
                index = next;
100024da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
100024de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            for(int16_t index = pool->ordered_head; index != -1; ) {
100024e2:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
100024e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
100024ea:	d1b6      	bne.n	1000245a <alarm_pool_irq_handler+0x4a6>
            }
        }
        now = (int64_t) ta_time_us_64(timer);
100024ec:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
100024f0:	f7ff fc9c 	bl	10001e2c <ta_time_us_64>
100024f4:	4602      	mov	r2, r0
100024f6:	460b      	mov	r3, r1
100024f8:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
        earliest_index = pool->ordered_head;
100024fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002500:	891b      	ldrh	r3, [r3, #8]
10002502:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
        if (earliest_index < 0) break;
10002506:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	@ 0xbe
1000250a:	2b00      	cmp	r3, #0
1000250c:	db25      	blt.n	1000255a <alarm_pool_irq_handler+0x5a6>
        // need to wait
        alarm_pool_entry_t *earliest_entry = &pool->entries[earliest_index];
1000250e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
10002512:	6959      	ldr	r1, [r3, #20]
10002514:	f9b7 20be 	ldrsh.w	r2, [r7, #190]	@ 0xbe
10002518:	4613      	mov	r3, r2
1000251a:	005b      	lsls	r3, r3, #1
1000251c:	4413      	add	r3, r2
1000251e:	00db      	lsls	r3, r3, #3
10002520:	440b      	add	r3, r1
10002522:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        earliest_target = earliest_entry->target;
10002526:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
1000252a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
1000252e:	e9c7 232c 	strd	r2, r3, [r7, #176]	@ 0xb0
        ta_set_timeout(timer, timer_alarm_num, earliest_target);
10002532:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10002534:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
10002538:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
1000253c:	f7ff fc63 	bl	10001e06 <ta_set_timeout>
        // check we haven't now past the target time; if not we don't want to loop again
    } while ((earliest_target - now) <= 0);
10002540:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
10002544:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
10002548:	1a84      	subs	r4, r0, r2
1000254a:	eb61 0503 	sbc.w	r5, r1, r3
1000254e:	2c01      	cmp	r4, #1
10002550:	f175 0300 	sbcs.w	r3, r5, #0
10002554:	f6ff ad64 	blt.w	10002020 <alarm_pool_irq_handler+0x6c>
}
10002558:	e000      	b.n	1000255c <alarm_pool_irq_handler+0x5a8>
        if (earliest_index < 0) break;
1000255a:	bf00      	nop
}
1000255c:	bf00      	nop
1000255e:	37fc      	adds	r7, #252	@ 0xfc
10002560:	46bd      	mov	sp, r7
10002562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10002566:	bf00      	nop

10002568 <alarm_pool_post_alloc_init>:

void alarm_pool_post_alloc_init(alarm_pool_t *pool, alarm_pool_timer_t *timer, uint hardware_alarm_num, uint max_timers) {
10002568:	b580      	push	{r7, lr}
1000256a:	b086      	sub	sp, #24
1000256c:	af00      	add	r7, sp, #0
1000256e:	60f8      	str	r0, [r7, #12]
10002570:	60b9      	str	r1, [r7, #8]
10002572:	607a      	str	r2, [r7, #4]
10002574:	603b      	str	r3, [r7, #0]
    pool->timer = timer;
10002576:	68fb      	ldr	r3, [r7, #12]
10002578:	68ba      	ldr	r2, [r7, #8]
1000257a:	60da      	str	r2, [r3, #12]
    pool->lock = spin_lock_instance(next_striped_spin_lock_num());
1000257c:	f7fe fc84 	bl	10000e88 <next_striped_spin_lock_num>
10002580:	4603      	mov	r3, r0
10002582:	613b      	str	r3, [r7, #16]
    return SW_SPIN_LOCK_INSTANCE(lock_num);
10002584:	693b      	ldr	r3, [r7, #16]
10002586:	4a27      	ldr	r2, [pc, #156]	@ (10002624 <alarm_pool_post_alloc_init+0xbc>)
10002588:	441a      	add	r2, r3
1000258a:	bf00      	nop
1000258c:	68fb      	ldr	r3, [r7, #12]
1000258e:	611a      	str	r2, [r3, #16]
    pool->timer_alarm_num = (uint8_t) hardware_alarm_num;
10002590:	687b      	ldr	r3, [r7, #4]
10002592:	b2da      	uxtb	r2, r3
10002594:	68fb      	ldr	r3, [r7, #12]
10002596:	701a      	strb	r2, [r3, #0]
    invalid_params_if(PICO_TIME, max_timers > 65536);
    pool->num_entries = (uint16_t)max_timers;
10002598:	683b      	ldr	r3, [r7, #0]
1000259a:	b29a      	uxth	r2, r3
1000259c:	68fb      	ldr	r3, [r7, #12]
1000259e:	815a      	strh	r2, [r3, #10]
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100025a0:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
100025a4:	681b      	ldr	r3, [r3, #0]
    pool->core_num = (uint8_t) get_core_num();
100025a6:	b2da      	uxtb	r2, r3
100025a8:	68fb      	ldr	r3, [r7, #12]
100025aa:	705a      	strb	r2, [r3, #1]
    pool->new_head = pool->ordered_head = -1;
100025ac:	68fb      	ldr	r3, [r7, #12]
100025ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
100025b2:	811a      	strh	r2, [r3, #8]
100025b4:	68fb      	ldr	r3, [r7, #12]
100025b6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
100025ba:	68fb      	ldr	r3, [r7, #12]
100025bc:	809a      	strh	r2, [r3, #4]
    pool->free_head = (int16_t)(max_timers - 1);
100025be:	683b      	ldr	r3, [r7, #0]
100025c0:	b29b      	uxth	r3, r3
100025c2:	3b01      	subs	r3, #1
100025c4:	b29b      	uxth	r3, r3
100025c6:	b21a      	sxth	r2, r3
100025c8:	68fb      	ldr	r3, [r7, #12]
100025ca:	805a      	strh	r2, [r3, #2]
    for(uint i=0;i<max_timers;i++) {
100025cc:	2300      	movs	r3, #0
100025ce:	617b      	str	r3, [r7, #20]
100025d0:	e010      	b.n	100025f4 <alarm_pool_post_alloc_init+0x8c>
        pool->entries[i].next = (int16_t)(i-1);
100025d2:	697b      	ldr	r3, [r7, #20]
100025d4:	b29b      	uxth	r3, r3
100025d6:	3b01      	subs	r3, #1
100025d8:	b298      	uxth	r0, r3
100025da:	68fb      	ldr	r3, [r7, #12]
100025dc:	6959      	ldr	r1, [r3, #20]
100025de:	697a      	ldr	r2, [r7, #20]
100025e0:	4613      	mov	r3, r2
100025e2:	005b      	lsls	r3, r3, #1
100025e4:	4413      	add	r3, r2
100025e6:	00db      	lsls	r3, r3, #3
100025e8:	440b      	add	r3, r1
100025ea:	b202      	sxth	r2, r0
100025ec:	801a      	strh	r2, [r3, #0]
    for(uint i=0;i<max_timers;i++) {
100025ee:	697b      	ldr	r3, [r7, #20]
100025f0:	3301      	adds	r3, #1
100025f2:	617b      	str	r3, [r7, #20]
100025f4:	697a      	ldr	r2, [r7, #20]
100025f6:	683b      	ldr	r3, [r7, #0]
100025f8:	429a      	cmp	r2, r3
100025fa:	d3ea      	bcc.n	100025d2 <alarm_pool_post_alloc_init+0x6a>
    }
    pools[ta_timer_num(timer)][hardware_alarm_num] = pool;
100025fc:	68b8      	ldr	r0, [r7, #8]
100025fe:	f7ff fc5c 	bl	10001eba <ta_timer_num>
10002602:	4603      	mov	r3, r0
10002604:	4908      	ldr	r1, [pc, #32]	@ (10002628 <alarm_pool_post_alloc_init+0xc0>)
10002606:	009a      	lsls	r2, r3, #2
10002608:	687b      	ldr	r3, [r7, #4]
1000260a:	4413      	add	r3, r2
1000260c:	68fa      	ldr	r2, [r7, #12]
1000260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    ta_enable_irq_handler(timer, hardware_alarm_num, alarm_pool_irq_handler);
10002612:	4a06      	ldr	r2, [pc, #24]	@ (1000262c <alarm_pool_post_alloc_init+0xc4>)
10002614:	6879      	ldr	r1, [r7, #4]
10002616:	68b8      	ldr	r0, [r7, #8]
10002618:	f7ff fc16 	bl	10001e48 <ta_enable_irq_handler>
}
1000261c:	bf00      	nop
1000261e:	3718      	adds	r7, #24
10002620:	46bd      	mov	sp, r7
10002622:	bd80      	pop	{r7, pc}
10002624:	20001a44 	.word	0x20001a44
10002628:	20002538 	.word	0x20002538
1000262c:	10001fb5 	.word	0x10001fb5

10002630 <alarm_pool_add_alarm_at>:
    free(pool->entries);
    free(pool);
}

alarm_id_t alarm_pool_add_alarm_at(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
                                   void *user_data, bool fire_if_past) {
10002630:	b580      	push	{r7, lr}
10002632:	b088      	sub	sp, #32
10002634:	af02      	add	r7, sp, #8
10002636:	60f8      	str	r0, [r7, #12]
10002638:	e9c7 2300 	strd	r2, r3, [r7]
    if (!fire_if_past) {
1000263c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
10002640:	f083 0301 	eor.w	r3, r3, #1
10002644:	b2db      	uxtb	r3, r3
10002646:	2b00      	cmp	r3, #0
10002648:	d00f      	beq.n	1000266a <alarm_pool_add_alarm_at+0x3a>
        absolute_time_t t = get_absolute_time();
1000264a:	f7ff fb0f 	bl	10001c6c <get_absolute_time>
1000264e:	e9c7 0104 	strd	r0, r1, [r7, #16]
        if (absolute_time_diff_us(t, time) < 0) return 0;
10002652:	e9d7 2300 	ldrd	r2, r3, [r7]
10002656:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
1000265a:	f7ff fb19 	bl	10001c90 <absolute_time_diff_us>
1000265e:	4602      	mov	r2, r0
10002660:	460b      	mov	r3, r1
10002662:	2b00      	cmp	r3, #0
10002664:	da01      	bge.n	1000266a <alarm_pool_add_alarm_at+0x3a>
10002666:	2300      	movs	r3, #0
10002668:	e009      	b.n	1000267e <alarm_pool_add_alarm_at+0x4e>
    }
    return alarm_pool_add_alarm_at_force_in_context(pool, time, callback, user_data);
1000266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000266c:	9301      	str	r3, [sp, #4]
1000266e:	6a3b      	ldr	r3, [r7, #32]
10002670:	9300      	str	r3, [sp, #0]
10002672:	e9d7 2300 	ldrd	r2, r3, [r7]
10002676:	68f8      	ldr	r0, [r7, #12]
10002678:	f000 f805 	bl	10002686 <alarm_pool_add_alarm_at_force_in_context>
1000267c:	4603      	mov	r3, r0
}
1000267e:	4618      	mov	r0, r3
10002680:	3718      	adds	r7, #24
10002682:	46bd      	mov	sp, r7
10002684:	bd80      	pop	{r7, pc}

10002686 <alarm_pool_add_alarm_at_force_in_context>:

alarm_id_t alarm_pool_add_alarm_at_force_in_context(alarm_pool_t *pool, absolute_time_t time, alarm_callback_t callback,
                                                    void *user_data) {
10002686:	b580      	push	{r7, lr}
10002688:	b0a0      	sub	sp, #128	@ 0x80
1000268a:	af00      	add	r7, sp, #0
1000268c:	60f8      	str	r0, [r7, #12]
1000268e:	e9c7 2300 	strd	r2, r3, [r7]
    // ---- take a free pool entry
    uint32_t save = spin_lock_blocking(pool->lock);
10002692:	68fb      	ldr	r3, [r7, #12]
10002694:	691b      	ldr	r3, [r3, #16]
10002696:	66bb      	str	r3, [r7, #104]	@ 0x68
    pico_default_asm_volatile (
10002698:	f3ef 8310 	mrs	r3, PRIMASK
1000269c:	b672      	cpsid	i
1000269e:	667b      	str	r3, [r7, #100]	@ 0x64
    return status;
100026a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    uint32_t save = save_and_disable_interrupts();
100026a2:	663b      	str	r3, [r7, #96]	@ 0x60
100026a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
100026a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    SW_SPIN_LOCK_LOCK(lock);
100026a8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
100026aa:	e8d1 3fcf 	ldaexb	r3, [r1]
100026ae:	2201      	movs	r2, #1
100026b0:	2b00      	cmp	r3, #0
100026b2:	d1fa      	bne.n	100026aa <alarm_pool_add_alarm_at_force_in_context+0x24>
100026b4:	e8c1 2f43 	strexb	r3, r2, [r1]
100026b8:	2b00      	cmp	r3, #0
100026ba:	d1f6      	bne.n	100026aa <alarm_pool_add_alarm_at_force_in_context+0x24>
100026bc:	65ba      	str	r2, [r7, #88]	@ 0x58
100026be:	657b      	str	r3, [r7, #84]	@ 0x54
    pico_default_asm_volatile ("dmb" : : : "memory");
100026c0:	f3bf 8f5f 	dmb	sy
}
100026c4:	bf00      	nop
}
100026c6:	bf00      	nop
}
100026c8:	bf00      	nop
    return save;
100026ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
100026cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    int16_t index = pool->free_head;
100026ce:	68fb      	ldr	r3, [r7, #12]
100026d0:	885b      	ldrh	r3, [r3, #2]
100026d2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    alarm_pool_entry_t *entry = &pool->entries[index];
100026d6:	68fb      	ldr	r3, [r7, #12]
100026d8:	6959      	ldr	r1, [r3, #20]
100026da:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
100026de:	4613      	mov	r3, r2
100026e0:	005b      	lsls	r3, r3, #1
100026e2:	4413      	add	r3, r2
100026e4:	00db      	lsls	r3, r3, #3
100026e6:	440b      	add	r3, r1
100026e8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (index >= 0) {
100026ea:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
100026ee:	2b00      	cmp	r3, #0
100026f0:	db04      	blt.n	100026fc <alarm_pool_add_alarm_at_force_in_context+0x76>
        // remove from free list
        pool->free_head = entry->next;
100026f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
100026f4:	f9b3 2000 	ldrsh.w	r2, [r3]
100026f8:	68fb      	ldr	r3, [r7, #12]
100026fa:	805a      	strh	r2, [r3, #2]
    }
    spin_unlock(pool->lock, save);
100026fc:	68fb      	ldr	r3, [r7, #12]
100026fe:	691b      	ldr	r3, [r3, #16]
10002700:	653b      	str	r3, [r7, #80]	@ 0x50
10002702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10002704:	64fb      	str	r3, [r7, #76]	@ 0x4c
10002706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10002708:	64bb      	str	r3, [r7, #72]	@ 0x48
    SW_SPIN_LOCK_UNLOCK(lock);
1000270a:	2300      	movs	r3, #0
1000270c:	647b      	str	r3, [r7, #68]	@ 0x44
1000270e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10002710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
10002712:	e8c2 3f8f 	stlb	r3, [r2]
}
10002716:	bf00      	nop
10002718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1000271a:	643b      	str	r3, [r7, #64]	@ 0x40
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
1000271c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000271e:	f383 8810 	msr	PRIMASK, r3
}
10002722:	bf00      	nop
}
10002724:	bf00      	nop
    if (index < 0) return PICO_ERROR_GENERIC; // PICO_ERROR_INSUFFICIENT_RESOURCES - not using to preserve previous -1 return code
10002726:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
1000272a:	2b00      	cmp	r3, #0
1000272c:	da02      	bge.n	10002734 <alarm_pool_add_alarm_at_force_in_context+0xae>
1000272e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10002732:	e072      	b.n	1000281a <alarm_pool_add_alarm_at_force_in_context+0x194>

    // ---- initialize the pool entry
    entry->callback = callback;
10002734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10002736:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
1000273a:	611a      	str	r2, [r3, #16]
    entry->user_data = user_data;
1000273c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
1000273e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
10002742:	615a      	str	r2, [r3, #20]
    entry->target = (int64_t)to_us_since_boot(time);
10002744:	e9d7 0100 	ldrd	r0, r1, [r7]
10002748:	f7ff f9e4 	bl	10001b14 <to_us_since_boot>
1000274c:	4602      	mov	r2, r0
1000274e:	460b      	mov	r3, r1
10002750:	6f39      	ldr	r1, [r7, #112]	@ 0x70
10002752:	e9c1 2302 	strd	r2, r3, [r1, #8]
    uint16_t next_sequence = (entry->sequence + 1) & 0x7fff;
10002756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10002758:	885b      	ldrh	r3, [r3, #2]
1000275a:	b29b      	uxth	r3, r3
1000275c:	3301      	adds	r3, #1
1000275e:	b29b      	uxth	r3, r3
10002760:	f3c3 030e 	ubfx	r3, r3, #0, #15
10002764:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    if (!next_sequence) next_sequence = 1; // zero is not allowed
10002768:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
1000276c:	2b00      	cmp	r3, #0
1000276e:	d102      	bne.n	10002776 <alarm_pool_add_alarm_at_force_in_context+0xf0>
10002770:	2301      	movs	r3, #1
10002772:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    entry->sequence = next_sequence;
10002776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10002778:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
1000277c:	805a      	strh	r2, [r3, #2]
    alarm_id_t id = make_alarm_id(index, next_sequence);
1000277e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
10002782:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
10002786:	4611      	mov	r1, r2
10002788:	4618      	mov	r0, r3
1000278a:	f7ff fbc6 	bl	10001f1a <make_alarm_id>
1000278e:	66f8      	str	r0, [r7, #108]	@ 0x6c

    // ---- and add it to the new list
    save = spin_lock_blocking(pool->lock);
10002790:	68fb      	ldr	r3, [r7, #12]
10002792:	691b      	ldr	r3, [r3, #16]
10002794:	62bb      	str	r3, [r7, #40]	@ 0x28
    pico_default_asm_volatile (
10002796:	f3ef 8310 	mrs	r3, PRIMASK
1000279a:	b672      	cpsid	i
1000279c:	627b      	str	r3, [r7, #36]	@ 0x24
    return status;
1000279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    uint32_t save = save_and_disable_interrupts();
100027a0:	623b      	str	r3, [r7, #32]
100027a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100027a4:	61fb      	str	r3, [r7, #28]
    SW_SPIN_LOCK_LOCK(lock);
100027a6:	69f9      	ldr	r1, [r7, #28]
100027a8:	e8d1 3fcf 	ldaexb	r3, [r1]
100027ac:	2201      	movs	r2, #1
100027ae:	2b00      	cmp	r3, #0
100027b0:	d1fa      	bne.n	100027a8 <alarm_pool_add_alarm_at_force_in_context+0x122>
100027b2:	e8c1 2f43 	strexb	r3, r2, [r1]
100027b6:	2b00      	cmp	r3, #0
100027b8:	d1f6      	bne.n	100027a8 <alarm_pool_add_alarm_at_force_in_context+0x122>
100027ba:	61ba      	str	r2, [r7, #24]
100027bc:	617b      	str	r3, [r7, #20]
    pico_default_asm_volatile ("dmb" : : : "memory");
100027be:	f3bf 8f5f 	dmb	sy
}
100027c2:	bf00      	nop
}
100027c4:	bf00      	nop
}
100027c6:	bf00      	nop
    return save;
100027c8:	6a3b      	ldr	r3, [r7, #32]
100027ca:	67bb      	str	r3, [r7, #120]	@ 0x78
    entry->next = pool->new_head;
100027cc:	68fb      	ldr	r3, [r7, #12]
100027ce:	889b      	ldrh	r3, [r3, #4]
100027d0:	b21a      	sxth	r2, r3
100027d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
100027d4:	801a      	strh	r2, [r3, #0]
    pool->new_head = index;
100027d6:	68fb      	ldr	r3, [r7, #12]
100027d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
100027dc:	809a      	strh	r2, [r3, #4]
    spin_unlock(pool->lock, save);
100027de:	68fb      	ldr	r3, [r7, #12]
100027e0:	691b      	ldr	r3, [r3, #16]
100027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
100027e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100027e6:	63bb      	str	r3, [r7, #56]	@ 0x38
100027e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100027ea:	637b      	str	r3, [r7, #52]	@ 0x34
    SW_SPIN_LOCK_UNLOCK(lock);
100027ec:	2300      	movs	r3, #0
100027ee:	633b      	str	r3, [r7, #48]	@ 0x30
100027f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100027f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100027f4:	e8c2 3f8f 	stlb	r3, [r2]
}
100027f8:	bf00      	nop
100027fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100027fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
100027fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10002800:	f383 8810 	msr	PRIMASK, r3
}
10002804:	bf00      	nop
}
10002806:	bf00      	nop

    // force the IRQ
    ta_force_irq(pool->timer, pool->timer_alarm_num);
10002808:	68fb      	ldr	r3, [r7, #12]
1000280a:	68da      	ldr	r2, [r3, #12]
1000280c:	68fb      	ldr	r3, [r7, #12]
1000280e:	781b      	ldrb	r3, [r3, #0]
10002810:	4619      	mov	r1, r3
10002812:	4610      	mov	r0, r2
10002814:	f7ff fa96 	bl	10001d44 <ta_force_irq>
    return id;
10002818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
1000281a:	4618      	mov	r0, r3
1000281c:	3780      	adds	r7, #128	@ 0x80
1000281e:	46bd      	mov	sp, r7
10002820:	bd80      	pop	{r7, pc}

10002822 <alarm_pool_cancel_alarm>:

bool alarm_pool_cancel_alarm(alarm_pool_t *pool, alarm_id_t alarm_id) {
10002822:	b580      	push	{r7, lr}
10002824:	b092      	sub	sp, #72	@ 0x48
10002826:	af00      	add	r7, sp, #0
10002828:	6078      	str	r0, [r7, #4]
1000282a:	6039      	str	r1, [r7, #0]
    int16_t index = alarm_index(alarm_id);
1000282c:	6838      	ldr	r0, [r7, #0]
1000282e:	f7ff fb5b 	bl	10001ee8 <alarm_index>
10002832:	4603      	mov	r3, r0
10002834:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    if (index >= pool->num_entries) return false;
10002838:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
1000283c:	687a      	ldr	r2, [r7, #4]
1000283e:	8952      	ldrh	r2, [r2, #10]
10002840:	4293      	cmp	r3, r2
10002842:	db01      	blt.n	10002848 <alarm_pool_cancel_alarm+0x26>
10002844:	2300      	movs	r3, #0
10002846:	e06c      	b.n	10002922 <alarm_pool_cancel_alarm+0x100>
    uint16_t sequence = alarm_sequence(alarm_id);
10002848:	6838      	ldr	r0, [r7, #0]
1000284a:	f7ff fb5a 	bl	10001f02 <alarm_sequence>
1000284e:	4603      	mov	r3, r0
10002850:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    bool canceled = false;
10002854:	2300      	movs	r3, #0
10002856:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    alarm_pool_entry_t *entry = &pool->entries[index];
1000285a:	687b      	ldr	r3, [r7, #4]
1000285c:	6959      	ldr	r1, [r3, #20]
1000285e:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
10002862:	4613      	mov	r3, r2
10002864:	005b      	lsls	r3, r3, #1
10002866:	4413      	add	r3, r2
10002868:	00db      	lsls	r3, r3, #3
1000286a:	440b      	add	r3, r1
1000286c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t save = spin_lock_blocking(pool->lock);
1000286e:	687b      	ldr	r3, [r7, #4]
10002870:	691b      	ldr	r3, [r3, #16]
10002872:	633b      	str	r3, [r7, #48]	@ 0x30
    pico_default_asm_volatile (
10002874:	f3ef 8310 	mrs	r3, PRIMASK
10002878:	b672      	cpsid	i
1000287a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return status;
1000287c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    uint32_t save = save_and_disable_interrupts();
1000287e:	62bb      	str	r3, [r7, #40]	@ 0x28
10002880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10002882:	627b      	str	r3, [r7, #36]	@ 0x24
    SW_SPIN_LOCK_LOCK(lock);
10002884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
10002886:	e8d1 3fcf 	ldaexb	r3, [r1]
1000288a:	2201      	movs	r2, #1
1000288c:	2b00      	cmp	r3, #0
1000288e:	d1fa      	bne.n	10002886 <alarm_pool_cancel_alarm+0x64>
10002890:	e8c1 2f43 	strexb	r3, r2, [r1]
10002894:	2b00      	cmp	r3, #0
10002896:	d1f6      	bne.n	10002886 <alarm_pool_cancel_alarm+0x64>
10002898:	623a      	str	r2, [r7, #32]
1000289a:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile ("dmb" : : : "memory");
1000289c:	f3bf 8f5f 	dmb	sy
}
100028a0:	bf00      	nop
}
100028a2:	bf00      	nop
}
100028a4:	bf00      	nop
    return save;
100028a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100028a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    // note this will not be true if the entry is already canceled (as the entry->sequence
    // will have the top bit set)
    uint current_sequence = entry->sequence;
100028aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100028ac:	885b      	ldrh	r3, [r3, #2]
100028ae:	b29b      	uxth	r3, r3
100028b0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (sequence == current_sequence) {
100028b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
100028b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100028b8:	429a      	cmp	r2, r3
100028ba:	d10f      	bne.n	100028dc <alarm_pool_cancel_alarm+0xba>
        entry->sequence = (uint16_t)(current_sequence | 0x8000);
100028bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100028be:	b29b      	uxth	r3, r3
100028c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
100028c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
100028c8:	b29a      	uxth	r2, r3
100028ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100028cc:	805a      	strh	r2, [r3, #2]
100028ce:	bf00      	nop
        __compiler_memory_barrier();
        pool->has_pending_cancellations = true;
100028d0:	687b      	ldr	r3, [r7, #4]
100028d2:	2201      	movs	r2, #1
100028d4:	719a      	strb	r2, [r3, #6]
        canceled = true;
100028d6:	2301      	movs	r3, #1
100028d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    spin_unlock(pool->lock, save);
100028dc:	687b      	ldr	r3, [r7, #4]
100028de:	691b      	ldr	r3, [r3, #16]
100028e0:	61bb      	str	r3, [r7, #24]
100028e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100028e4:	617b      	str	r3, [r7, #20]
100028e6:	69bb      	ldr	r3, [r7, #24]
100028e8:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_UNLOCK(lock);
100028ea:	2300      	movs	r3, #0
100028ec:	60fb      	str	r3, [r7, #12]
100028ee:	68fb      	ldr	r3, [r7, #12]
100028f0:	693a      	ldr	r2, [r7, #16]
100028f2:	e8c2 3f8f 	stlb	r3, [r2]
}
100028f6:	bf00      	nop
100028f8:	697b      	ldr	r3, [r7, #20]
100028fa:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
100028fc:	68bb      	ldr	r3, [r7, #8]
100028fe:	f383 8810 	msr	PRIMASK, r3
}
10002902:	bf00      	nop
}
10002904:	bf00      	nop
    // force the IRQ if we need to clean up an alarm id
    if (canceled) ta_force_irq(pool->timer, pool->timer_alarm_num);
10002906:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
1000290a:	2b00      	cmp	r3, #0
1000290c:	d007      	beq.n	1000291e <alarm_pool_cancel_alarm+0xfc>
1000290e:	687b      	ldr	r3, [r7, #4]
10002910:	68da      	ldr	r2, [r3, #12]
10002912:	687b      	ldr	r3, [r7, #4]
10002914:	781b      	ldrb	r3, [r3, #0]
10002916:	4619      	mov	r1, r3
10002918:	4610      	mov	r0, r2
1000291a:	f7ff fa13 	bl	10001d44 <ta_force_irq>
    return canceled;
1000291e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
10002922:	4618      	mov	r0, r3
10002924:	3748      	adds	r7, #72	@ 0x48
10002926:	46bd      	mov	sp, r7
10002928:	bd80      	pop	{r7, pc}

1000292a <alarm_pool_core_num>:

uint alarm_pool_timer_alarm_num(alarm_pool_t *pool) {
    return pool->timer_alarm_num;
}

uint alarm_pool_core_num(alarm_pool_t *pool) {
1000292a:	b480      	push	{r7}
1000292c:	b083      	sub	sp, #12
1000292e:	af00      	add	r7, sp, #0
10002930:	6078      	str	r0, [r7, #4]
    return pool->core_num;
10002932:	687b      	ldr	r3, [r7, #4]
10002934:	785b      	ldrb	r3, [r3, #1]
}
10002936:	4618      	mov	r0, r3
10002938:	370c      	adds	r7, #12
1000293a:	46bd      	mov	sp, r7
1000293c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002940:	4770      	bx	lr
	...

10002944 <sleep_until_callback>:

#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
static int64_t sleep_until_callback(__unused alarm_id_t id, __unused void *user_data) {
10002944:	b480      	push	{r7}
10002946:	b08f      	sub	sp, #60	@ 0x3c
10002948:	af00      	add	r7, sp, #0
1000294a:	6078      	str	r0, [r7, #4]
1000294c:	6039      	str	r1, [r7, #0]
    uint32_t save = spin_lock_blocking(sleep_notifier.spin_lock);
1000294e:	4b20      	ldr	r3, [pc, #128]	@ (100029d0 <sleep_until_callback+0x8c>)
10002950:	681b      	ldr	r3, [r3, #0]
10002952:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile (
10002954:	f3ef 8310 	mrs	r3, PRIMASK
10002958:	b672      	cpsid	i
1000295a:	61bb      	str	r3, [r7, #24]
    return status;
1000295c:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = save_and_disable_interrupts();
1000295e:	617b      	str	r3, [r7, #20]
10002960:	69fb      	ldr	r3, [r7, #28]
10002962:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_LOCK(lock);
10002964:	6939      	ldr	r1, [r7, #16]
10002966:	e8d1 3fcf 	ldaexb	r3, [r1]
1000296a:	2201      	movs	r2, #1
1000296c:	2b00      	cmp	r3, #0
1000296e:	d1fa      	bne.n	10002966 <sleep_until_callback+0x22>
10002970:	e8c1 2f43 	strexb	r3, r2, [r1]
10002974:	2b00      	cmp	r3, #0
10002976:	d1f6      	bne.n	10002966 <sleep_until_callback+0x22>
10002978:	60fa      	str	r2, [r7, #12]
1000297a:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("dmb" : : : "memory");
1000297c:	f3bf 8f5f 	dmb	sy
}
10002980:	bf00      	nop
}
10002982:	bf00      	nop
}
10002984:	bf00      	nop
    return save;
10002986:	697b      	ldr	r3, [r7, #20]
10002988:	637b      	str	r3, [r7, #52]	@ 0x34
    lock_internal_spin_unlock_with_notify(&sleep_notifier, save);
1000298a:	4b11      	ldr	r3, [pc, #68]	@ (100029d0 <sleep_until_callback+0x8c>)
1000298c:	681b      	ldr	r3, [r3, #0]
1000298e:	633b      	str	r3, [r7, #48]	@ 0x30
10002990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
10002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10002996:	62bb      	str	r3, [r7, #40]	@ 0x28
    SW_SPIN_LOCK_UNLOCK(lock);
10002998:	2300      	movs	r3, #0
1000299a:	627b      	str	r3, [r7, #36]	@ 0x24
1000299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000299e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
100029a0:	e8c2 3f8f 	stlb	r3, [r2]
}
100029a4:	bf00      	nop
100029a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100029a8:	623b      	str	r3, [r7, #32]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
100029aa:	6a3b      	ldr	r3, [r7, #32]
100029ac:	f383 8810 	msr	PRIMASK, r3
}
100029b0:	bf00      	nop
}
100029b2:	bf00      	nop
    pico_default_asm_volatile ("sev");
100029b4:	bf40      	sev
}
100029b6:	bf00      	nop
    return 0;
100029b8:	f04f 0200 	mov.w	r2, #0
100029bc:	f04f 0300 	mov.w	r3, #0
}
100029c0:	4610      	mov	r0, r2
100029c2:	4619      	mov	r1, r3
100029c4:	373c      	adds	r7, #60	@ 0x3c
100029c6:	46bd      	mov	sp, r7
100029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
100029cc:	4770      	bx	lr
100029ce:	bf00      	nop
100029d0:	20002560 	.word	0x20002560

100029d4 <best_effort_wfe_or_timeout>:

void sleep_ms(uint32_t ms) {
    sleep_us(ms * 1000ull);
}

bool best_effort_wfe_or_timeout(absolute_time_t timeout_timestamp) {
100029d4:	b580      	push	{r7, lr}
100029d6:	b086      	sub	sp, #24
100029d8:	af02      	add	r7, sp, #8
100029da:	e9c7 0100 	strd	r0, r1, [r7]
    pico_default_asm_volatile (
100029de:	f3ef 8305 	mrs	r3, IPSR
100029e2:	b2db      	uxtb	r3, r3
100029e4:	60bb      	str	r3, [r7, #8]
    return exception;
100029e6:	68bb      	ldr	r3, [r7, #8]
#if !PICO_TIME_DEFAULT_ALARM_POOL_DISABLED
    if (__get_current_exception()) {
100029e8:	2b00      	cmp	r3, #0
100029ea:	d006      	beq.n	100029fa <best_effort_wfe_or_timeout+0x26>
static __force_inline void tight_loop_contents(void) {}
100029ec:	bf00      	nop
        tight_loop_contents();
        return time_reached(timeout_timestamp);
100029ee:	e9d7 0100 	ldrd	r0, r1, [r7]
100029f2:	f7ff f8e9 	bl	10001bc8 <time_reached>
100029f6:	4603      	mov	r3, r0
100029f8:	e02a      	b.n	10002a50 <best_effort_wfe_or_timeout+0x7c>
    } else {
        alarm_id_t id;
        id = add_alarm_at(timeout_timestamp, sleep_until_callback, NULL, false);
100029fa:	2300      	movs	r3, #0
100029fc:	9300      	str	r3, [sp, #0]
100029fe:	2300      	movs	r3, #0
10002a00:	4a15      	ldr	r2, [pc, #84]	@ (10002a58 <best_effort_wfe_or_timeout+0x84>)
10002a02:	e9d7 0100 	ldrd	r0, r1, [r7]
10002a06:	f7ff f963 	bl	10001cd0 <add_alarm_at>
10002a0a:	60f8      	str	r0, [r7, #12]
        if (id <= 0) {
10002a0c:	68fb      	ldr	r3, [r7, #12]
10002a0e:	2b00      	cmp	r3, #0
10002a10:	dc06      	bgt.n	10002a20 <best_effort_wfe_or_timeout+0x4c>
10002a12:	bf00      	nop
            tight_loop_contents();
            return time_reached(timeout_timestamp);
10002a14:	e9d7 0100 	ldrd	r0, r1, [r7]
10002a18:	f7ff f8d6 	bl	10001bc8 <time_reached>
10002a1c:	4603      	mov	r3, r0
10002a1e:	e017      	b.n	10002a50 <best_effort_wfe_or_timeout+0x7c>
    pico_default_asm_volatile ("sev");
10002a20:	bf40      	sev
}
10002a22:	bf00      	nop
    pico_default_asm_volatile ("wfe");
10002a24:	bf20      	wfe
}
10002a26:	bf00      	nop
            // the above alarm add now may force an IRQ which will wake us up,
            // so we want to consume one __wfe.. we do an explicit __sev
            // just to make sure there is one
            __sev(); // make sure there is an event sow ee don't block
            __wfe();
            if (!time_reached(timeout_timestamp))
10002a28:	e9d7 0100 	ldrd	r0, r1, [r7]
10002a2c:	f7ff f8cc 	bl	10001bc8 <time_reached>
10002a30:	4603      	mov	r3, r0
10002a32:	f083 0301 	eor.w	r3, r3, #1
10002a36:	b2db      	uxtb	r3, r3
10002a38:	2b00      	cmp	r3, #0
10002a3a:	d001      	beq.n	10002a40 <best_effort_wfe_or_timeout+0x6c>
    pico_default_asm_volatile ("wfe");
10002a3c:	bf20      	wfe
}
10002a3e:	bf00      	nop
                // to wait; the event will happen due to IRQ at some point between
                // then and the correct wakeup time
                __wfe();
            }
            // we need to clean up if it wasn't us that caused the wfe; if it was this will be a noop.
            cancel_alarm(id);
10002a40:	68f8      	ldr	r0, [r7, #12]
10002a42:	f7ff f95f 	bl	10001d04 <cancel_alarm>
            return time_reached(timeout_timestamp);
10002a46:	e9d7 0100 	ldrd	r0, r1, [r7]
10002a4a:	f7ff f8bd 	bl	10001bc8 <time_reached>
10002a4e:	4603      	mov	r3, r0
    }
#else
    tight_loop_contents();
    return time_reached(timeout_timestamp);
#endif
}
10002a50:	4618      	mov	r0, r3
10002a52:	3710      	adds	r7, #16
10002a54:	46bd      	mov	sp, r7
10002a56:	bd80      	pop	{r7, pc}
10002a58:	10002945 	.word	0x10002945

10002a5c <alarm_pool_get_default_timer>:

alarm_pool_timer_t *alarm_pool_timer_for_timer_num(uint timer_num) {
    return ta_timer_instance(timer_num);
}

alarm_pool_timer_t *alarm_pool_get_default_timer(void) {
10002a5c:	b580      	push	{r7, lr}
10002a5e:	af00      	add	r7, sp, #0
    return ta_default_timer_instance();
10002a60:	f7ff fa38 	bl	10001ed4 <ta_default_timer_instance>
10002a64:	4603      	mov	r3, r0
}
10002a66:	4618      	mov	r0, r3
10002a68:	bd80      	pop	{r7, pc}

10002a6a <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10002a6a:	b480      	push	{r7}
10002a6c:	b083      	sub	sp, #12
10002a6e:	af00      	add	r7, sp, #0
10002a70:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
10002a74:	e9d7 2300 	ldrd	r2, r3, [r7]
}
10002a78:	4610      	mov	r0, r2
10002a7a:	4619      	mov	r1, r3
10002a7c:	370c      	adds	r7, #12
10002a7e:	46bd      	mov	sp, r7
10002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
10002a84:	4770      	bx	lr

10002a86 <update_us_since_boot>:
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
10002a86:	b480      	push	{r7}
10002a88:	b085      	sub	sp, #20
10002a8a:	af00      	add	r7, sp, #0
10002a8c:	60f8      	str	r0, [r7, #12]
10002a8e:	e9c7 2300 	strd	r2, r3, [r7]
    *t = us_since_boot;
10002a92:	68f9      	ldr	r1, [r7, #12]
10002a94:	e9d7 2300 	ldrd	r2, r3, [r7]
10002a98:	e9c1 2300 	strd	r2, r3, [r1]
}
10002a9c:	bf00      	nop
10002a9e:	3714      	adds	r7, #20
10002aa0:	46bd      	mov	sp, r7
10002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
10002aa6:	4770      	bx	lr

10002aa8 <check_hardware_alarm_num_param>:
static inline void check_hardware_alarm_num_param(__unused uint alarm_num) {
10002aa8:	b480      	push	{r7}
10002aaa:	b083      	sub	sp, #12
10002aac:	af00      	add	r7, sp, #0
10002aae:	6078      	str	r0, [r7, #4]
}
10002ab0:	bf00      	nop
10002ab2:	370c      	adds	r7, #12
10002ab4:	46bd      	mov	sp, r7
10002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
10002aba:	4770      	bx	lr

10002abc <timer_get_index>:
static inline uint timer_get_index(timer_hw_t *timer) {
10002abc:	b480      	push	{r7}
10002abe:	b083      	sub	sp, #12
10002ac0:	af00      	add	r7, sp, #0
10002ac2:	6078      	str	r0, [r7, #4]
    return TIMER_NUM(timer);
10002ac4:	687b      	ldr	r3, [r7, #4]
10002ac6:	4a06      	ldr	r2, [pc, #24]	@ (10002ae0 <timer_get_index+0x24>)
10002ac8:	4293      	cmp	r3, r2
10002aca:	bf0c      	ite	eq
10002acc:	2301      	moveq	r3, #1
10002ace:	2300      	movne	r3, #0
10002ad0:	b2db      	uxtb	r3, r3
}
10002ad2:	4618      	mov	r0, r3
10002ad4:	370c      	adds	r7, #12
10002ad6:	46bd      	mov	sp, r7
10002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
10002adc:	4770      	bx	lr
10002ade:	bf00      	nop
10002ae0:	400b8000 	.word	0x400b8000

10002ae4 <timer_hardware_alarm_claim>:
static uint8_t timer_callbacks_pending[NUM_GENERIC_TIMERS];

static_assert(NUM_ALARMS * NUM_GENERIC_TIMERS <= 8, "");
static uint8_t claimed[NUM_GENERIC_TIMERS];

void timer_hardware_alarm_claim(timer_hw_t *timer, uint alarm_num) {
10002ae4:	b580      	push	{r7, lr}
10002ae6:	b082      	sub	sp, #8
10002ae8:	af00      	add	r7, sp, #0
10002aea:	6078      	str	r0, [r7, #4]
10002aec:	6039      	str	r1, [r7, #0]
    check_hardware_alarm_num_param(alarm_num);
10002aee:	6838      	ldr	r0, [r7, #0]
10002af0:	f7ff ffda 	bl	10002aa8 <check_hardware_alarm_num_param>
    hw_claim_or_assert(&claimed[timer_get_index(timer)], alarm_num, "Hardware alarm %d already claimed");
10002af4:	6878      	ldr	r0, [r7, #4]
10002af6:	f7ff ffe1 	bl	10002abc <timer_get_index>
10002afa:	4603      	mov	r3, r0
10002afc:	4a05      	ldr	r2, [pc, #20]	@ (10002b14 <timer_hardware_alarm_claim+0x30>)
10002afe:	4413      	add	r3, r2
10002b00:	4a05      	ldr	r2, [pc, #20]	@ (10002b18 <timer_hardware_alarm_claim+0x34>)
10002b02:	6839      	ldr	r1, [r7, #0]
10002b04:	4618      	mov	r0, r3
10002b06:	f7fe f948 	bl	10000d9a <hw_claim_or_assert>
}
10002b0a:	bf00      	nop
10002b0c:	3708      	adds	r7, #8
10002b0e:	46bd      	mov	sp, r7
10002b10:	bd80      	pop	{r7, pc}
10002b12:	bf00      	nop
10002b14:	200020b0 	.word	0x200020b0
10002b18:	1000b720 	.word	0x1000b720

10002b1c <timer_time_us_64>:
int hardware_alarm_claim_unused(bool required) {
    return timer_hardware_alarm_claim_unused(PICO_DEFAULT_TIMER_INSTANCE(), required);
}

/// tag::time_us_64[]
uint64_t timer_time_us_64(timer_hw_t *timer) {
10002b1c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
10002b20:	b087      	sub	sp, #28
10002b22:	af00      	add	r7, sp, #0
10002b24:	6078      	str	r0, [r7, #4]
    // Need to make sure that the upper 32 bits of the timer
    // don't change, so read that first
    uint32_t hi = timer->timerawh;
10002b26:	687b      	ldr	r3, [r7, #4]
10002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002b2a:	617b      	str	r3, [r7, #20]
    uint32_t lo;
    do {
        // Read the lower 32 bits
        lo = timer->timerawl;
10002b2c:	687b      	ldr	r3, [r7, #4]
10002b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002b30:	613b      	str	r3, [r7, #16]
        // Now read the upper 32 bits again and
        // check that it hasn't incremented. If it has loop around
        // and read the lower 32 bits again to get an accurate value
        uint32_t next_hi = timer->timerawh;
10002b32:	687b      	ldr	r3, [r7, #4]
10002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002b36:	60fb      	str	r3, [r7, #12]
        if (hi == next_hi) break;
10002b38:	697a      	ldr	r2, [r7, #20]
10002b3a:	68fb      	ldr	r3, [r7, #12]
10002b3c:	429a      	cmp	r2, r3
10002b3e:	d002      	beq.n	10002b46 <timer_time_us_64+0x2a>
        hi = next_hi;
10002b40:	68fb      	ldr	r3, [r7, #12]
10002b42:	617b      	str	r3, [r7, #20]
    do {
10002b44:	e7f2      	b.n	10002b2c <timer_time_us_64+0x10>
        if (hi == next_hi) break;
10002b46:	bf00      	nop
    } while (true);
    return ((uint64_t) hi << 32u) | lo;
10002b48:	697b      	ldr	r3, [r7, #20]
10002b4a:	2200      	movs	r2, #0
10002b4c:	469a      	mov	sl, r3
10002b4e:	4693      	mov	fp, r2
10002b50:	f04f 0200 	mov.w	r2, #0
10002b54:	f04f 0300 	mov.w	r3, #0
10002b58:	4653      	mov	r3, sl
10002b5a:	2200      	movs	r2, #0
10002b5c:	6939      	ldr	r1, [r7, #16]
10002b5e:	2000      	movs	r0, #0
10002b60:	460c      	mov	r4, r1
10002b62:	4605      	mov	r5, r0
10002b64:	ea42 0804 	orr.w	r8, r2, r4
10002b68:	ea43 0905 	orr.w	r9, r3, r5
10002b6c:	4642      	mov	r2, r8
10002b6e:	464b      	mov	r3, r9
}
10002b70:	4610      	mov	r0, r2
10002b72:	4619      	mov	r1, r3
10002b74:	371c      	adds	r7, #28
10002b76:	46bd      	mov	sp, r7
10002b78:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
10002b7c:	4770      	bx	lr

10002b7e <timer_busy_wait_us>:
    } else {
        busy_wait_us(delay_us);
    }
}

void timer_busy_wait_us(timer_hw_t *timer, uint64_t delay_us) {
10002b7e:	b5b0      	push	{r4, r5, r7, lr}
10002b80:	b08a      	sub	sp, #40	@ 0x28
10002b82:	af00      	add	r7, sp, #0
10002b84:	60f8      	str	r0, [r7, #12]
10002b86:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t base = timer_time_us_64(timer);
10002b8a:	68f8      	ldr	r0, [r7, #12]
10002b8c:	f7ff ffc6 	bl	10002b1c <timer_time_us_64>
10002b90:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t target = base + delay_us;
10002b94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
10002b98:	e9d7 2300 	ldrd	r2, r3, [r7]
10002b9c:	1884      	adds	r4, r0, r2
10002b9e:	eb41 0503 	adc.w	r5, r1, r3
10002ba2:	e9c7 4508 	strd	r4, r5, [r7, #32]
    if (target < base) {
10002ba6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
10002baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
10002bae:	4290      	cmp	r0, r2
10002bb0:	eb71 0303 	sbcs.w	r3, r1, r3
10002bb4:	d205      	bcs.n	10002bc2 <timer_busy_wait_us+0x44>
        target = (uint64_t)-1;
10002bb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10002bba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10002bbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    absolute_time_t t;
    update_us_since_boot(&t, target);
10002bc2:	f107 0110 	add.w	r1, r7, #16
10002bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10002bca:	4608      	mov	r0, r1
10002bcc:	f7ff ff5b 	bl	10002a86 <update_us_since_boot>
    timer_busy_wait_until(timer, t);
10002bd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
10002bd4:	68f8      	ldr	r0, [r7, #12]
10002bd6:	f000 f804 	bl	10002be2 <timer_busy_wait_until>
}
10002bda:	bf00      	nop
10002bdc:	3728      	adds	r7, #40	@ 0x28
10002bde:	46bd      	mov	sp, r7
10002be0:	bdb0      	pop	{r4, r5, r7, pc}

10002be2 <timer_busy_wait_until>:
    } else {
        timer_busy_wait_us(timer, delay_ms * 1000ull);
    }
}

void timer_busy_wait_until(timer_hw_t *timer, absolute_time_t t) {
10002be2:	b580      	push	{r7, lr}
10002be4:	b08a      	sub	sp, #40	@ 0x28
10002be6:	af00      	add	r7, sp, #0
10002be8:	60f8      	str	r0, [r7, #12]
10002bea:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t target = to_us_since_boot(t);
10002bee:	e9d7 0100 	ldrd	r0, r1, [r7]
10002bf2:	f7ff ff3a 	bl	10002a6a <to_us_since_boot>
10002bf6:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint32_t hi_target = (uint32_t)(target >> 32u);
10002bfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
10002bfe:	f04f 0200 	mov.w	r2, #0
10002c02:	f04f 0300 	mov.w	r3, #0
10002c06:	000a      	movs	r2, r1
10002c08:	2300      	movs	r3, #0
10002c0a:	4613      	mov	r3, r2
10002c0c:	617b      	str	r3, [r7, #20]
    uint32_t hi = timer->timerawh;
10002c0e:	68fb      	ldr	r3, [r7, #12]
10002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002c12:	627b      	str	r3, [r7, #36]	@ 0x24
    while (hi < hi_target) {
10002c14:	e003      	b.n	10002c1e <timer_busy_wait_until+0x3c>
        hi = timer->timerawh;
10002c16:	68fb      	ldr	r3, [r7, #12]
10002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
10002c1c:	bf00      	nop
    while (hi < hi_target) {
10002c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10002c20:	697b      	ldr	r3, [r7, #20]
10002c22:	429a      	cmp	r2, r3
10002c24:	d3f7      	bcc.n	10002c16 <timer_busy_wait_until+0x34>
        tight_loop_contents();
    }
    while (hi == hi_target && timer->timerawl < (uint32_t) target) {
10002c26:	e003      	b.n	10002c30 <timer_busy_wait_until+0x4e>
        hi = timer->timerawh;
10002c28:	68fb      	ldr	r3, [r7, #12]
10002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
10002c2e:	bf00      	nop
    while (hi == hi_target && timer->timerawl < (uint32_t) target) {
10002c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10002c32:	697b      	ldr	r3, [r7, #20]
10002c34:	429a      	cmp	r2, r3
10002c36:	d104      	bne.n	10002c42 <timer_busy_wait_until+0x60>
10002c38:	68fb      	ldr	r3, [r7, #12]
10002c3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10002c3c:	69bb      	ldr	r3, [r7, #24]
10002c3e:	429a      	cmp	r2, r3
10002c40:	d3f2      	bcc.n	10002c28 <timer_busy_wait_until+0x46>
        tight_loop_contents();
    }
}
10002c42:	bf00      	nop
10002c44:	3728      	adds	r7, #40	@ 0x28
10002c46:	46bd      	mov	sp, r7
10002c48:	bd80      	pop	{r7, pc}
	...

10002c4c <time_us_64>:
/// \end::busy_wait[]

uint64_t time_us_64(void) {
10002c4c:	b580      	push	{r7, lr}
10002c4e:	af00      	add	r7, sp, #0
    return timer_time_us_64(PICO_DEFAULT_TIMER_INSTANCE());
10002c50:	4803      	ldr	r0, [pc, #12]	@ (10002c60 <time_us_64+0x14>)
10002c52:	f7ff ff63 	bl	10002b1c <timer_time_us_64>
10002c56:	4602      	mov	r2, r0
10002c58:	460b      	mov	r3, r1
}
10002c5a:	4610      	mov	r0, r2
10002c5c:	4619      	mov	r1, r3
10002c5e:	bd80      	pop	{r7, pc}
10002c60:	400b0000 	.word	0x400b0000

10002c64 <busy_wait_us>:

void busy_wait_us_32(uint32_t delay_us) {
    timer_busy_wait_us_32(PICO_DEFAULT_TIMER_INSTANCE(), delay_us);
}

void busy_wait_us(uint64_t delay_us) {
10002c64:	b580      	push	{r7, lr}
10002c66:	b082      	sub	sp, #8
10002c68:	af00      	add	r7, sp, #0
10002c6a:	e9c7 0100 	strd	r0, r1, [r7]
    timer_busy_wait_us(PICO_DEFAULT_TIMER_INSTANCE(), delay_us);
10002c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
10002c72:	4803      	ldr	r0, [pc, #12]	@ (10002c80 <busy_wait_us+0x1c>)
10002c74:	f7ff ff83 	bl	10002b7e <timer_busy_wait_us>
}
10002c78:	bf00      	nop
10002c7a:	3708      	adds	r7, #8
10002c7c:	46bd      	mov	sp, r7
10002c7e:	bd80      	pop	{r7, pc}
10002c80:	400b0000 	.word	0x400b0000

10002c84 <reset_block_num>:
/*! \brief Reset the specified HW block
 *  \ingroup hardware_resets
 *
 * \param block_num the block number
 */
static inline void reset_block_num(uint32_t block_num) {
10002c84:	b480      	push	{r7}
10002c86:	b087      	sub	sp, #28
10002c88:	af00      	add	r7, sp, #0
10002c8a:	6078      	str	r0, [r7, #4]
    reset_block_reg_mask(&resets_hw->reset, 1u << block_num);
10002c8c:	2201      	movs	r2, #1
10002c8e:	687b      	ldr	r3, [r7, #4]
10002c90:	fa02 f303 	lsl.w	r3, r2, r3
10002c94:	4a0a      	ldr	r2, [pc, #40]	@ (10002cc0 <reset_block_num+0x3c>)
10002c96:	617a      	str	r2, [r7, #20]
10002c98:	613b      	str	r3, [r7, #16]
10002c9a:	697b      	ldr	r3, [r7, #20]
10002c9c:	60fb      	str	r3, [r7, #12]
10002c9e:	693b      	ldr	r3, [r7, #16]
10002ca0:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10002ca2:	68fb      	ldr	r3, [r7, #12]
10002ca4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10002ca8:	461a      	mov	r2, r3
10002caa:	68bb      	ldr	r3, [r7, #8]
10002cac:	6013      	str	r3, [r2, #0]
}
10002cae:	bf00      	nop
}
10002cb0:	bf00      	nop
}
10002cb2:	bf00      	nop
10002cb4:	371c      	adds	r7, #28
10002cb6:	46bd      	mov	sp, r7
10002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
10002cbc:	4770      	bx	lr
10002cbe:	bf00      	nop
10002cc0:	40020000 	.word	0x40020000

10002cc4 <unreset_block_num_wait_blocking>:
/*! \brief Bring specified HW block out of reset and wait for completion
 *  \ingroup hardware_resets
 *
 * \param block_num the block number
 */
static inline void unreset_block_num_wait_blocking(uint block_num) {
10002cc4:	b480      	push	{r7}
10002cc6:	b089      	sub	sp, #36	@ 0x24
10002cc8:	af00      	add	r7, sp, #0
10002cca:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_RESETS, block_num > NUM_RESETS);
    unreset_block_reg_mask_wait_blocking(&resets_hw->reset, &resets_hw->reset_done, 1u << block_num);
10002ccc:	2201      	movs	r2, #1
10002cce:	687b      	ldr	r3, [r7, #4]
10002cd0:	fa02 f303 	lsl.w	r3, r2, r3
10002cd4:	4a0f      	ldr	r2, [pc, #60]	@ (10002d14 <unreset_block_num_wait_blocking+0x50>)
10002cd6:	61fa      	str	r2, [r7, #28]
10002cd8:	4a0f      	ldr	r2, [pc, #60]	@ (10002d18 <unreset_block_num_wait_blocking+0x54>)
10002cda:	61ba      	str	r2, [r7, #24]
10002cdc:	617b      	str	r3, [r7, #20]
10002cde:	69fb      	ldr	r3, [r7, #28]
10002ce0:	613b      	str	r3, [r7, #16]
10002ce2:	697b      	ldr	r3, [r7, #20]
10002ce4:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002ce6:	693b      	ldr	r3, [r7, #16]
10002ce8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002cec:	461a      	mov	r2, r3
10002cee:	68fb      	ldr	r3, [r7, #12]
10002cf0:	6013      	str	r3, [r2, #0]
}
10002cf2:	bf00      	nop
    while (~*reset_done & mask)
10002cf4:	e000      	b.n	10002cf8 <unreset_block_num_wait_blocking+0x34>
10002cf6:	bf00      	nop
10002cf8:	69bb      	ldr	r3, [r7, #24]
10002cfa:	681b      	ldr	r3, [r3, #0]
10002cfc:	43da      	mvns	r2, r3
10002cfe:	697b      	ldr	r3, [r7, #20]
10002d00:	4013      	ands	r3, r2
10002d02:	2b00      	cmp	r3, #0
10002d04:	d1f7      	bne.n	10002cf6 <unreset_block_num_wait_blocking+0x32>
}
10002d06:	bf00      	nop
}
10002d08:	bf00      	nop
10002d0a:	3724      	adds	r7, #36	@ 0x24
10002d0c:	46bd      	mov	sp, r7
10002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d12:	4770      	bx	lr
10002d14:	40020000 	.word	0x40020000
10002d18:	40020008 	.word	0x40020008

10002d1c <uart_get_index>:
static inline uint uart_get_index(uart_inst_t *uart) {
10002d1c:	b480      	push	{r7}
10002d1e:	b083      	sub	sp, #12
10002d20:	af00      	add	r7, sp, #0
10002d22:	6078      	str	r0, [r7, #4]
    return UART_NUM(uart);
10002d24:	687b      	ldr	r3, [r7, #4]
10002d26:	4a06      	ldr	r2, [pc, #24]	@ (10002d40 <uart_get_index+0x24>)
10002d28:	4293      	cmp	r3, r2
10002d2a:	bf0c      	ite	eq
10002d2c:	2301      	moveq	r3, #1
10002d2e:	2300      	movne	r3, #0
10002d30:	b2db      	uxtb	r3, r3
}
10002d32:	4618      	mov	r0, r3
10002d34:	370c      	adds	r7, #12
10002d36:	46bd      	mov	sp, r7
10002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
10002d3c:	4770      	bx	lr
10002d3e:	bf00      	nop
10002d40:	40078000 	.word	0x40078000

10002d44 <uart_get_hw>:
static inline uart_hw_t *uart_get_hw(uart_inst_t *uart) {
10002d44:	b580      	push	{r7, lr}
10002d46:	b082      	sub	sp, #8
10002d48:	af00      	add	r7, sp, #0
10002d4a:	6078      	str	r0, [r7, #4]
    uart_get_index(uart); // check it is a hw uart
10002d4c:	6878      	ldr	r0, [r7, #4]
10002d4e:	f7ff ffe5 	bl	10002d1c <uart_get_index>
    return (uart_hw_t *)uart;
10002d52:	687b      	ldr	r3, [r7, #4]
}
10002d54:	4618      	mov	r0, r3
10002d56:	3708      	adds	r7, #8
10002d58:	46bd      	mov	sp, r7
10002d5a:	bd80      	pop	{r7, pc}

10002d5c <uart_get_reset_num>:
 *  \ingroup hardware_uart
 *
 * \param uart UART instance. \ref uart0 or \ref uart1
 * \param is_tx true for sending data to the UART instance, false for receiving data from the UART instance
 */
static inline uint uart_get_reset_num(uart_inst_t *uart) {
10002d5c:	b580      	push	{r7, lr}
10002d5e:	b082      	sub	sp, #8
10002d60:	af00      	add	r7, sp, #0
10002d62:	6078      	str	r0, [r7, #4]
    return UART_RESET_NUM(uart);
10002d64:	6878      	ldr	r0, [r7, #4]
10002d66:	f7ff ffd9 	bl	10002d1c <uart_get_index>
10002d6a:	4603      	mov	r3, r0
10002d6c:	2b00      	cmp	r3, #0
10002d6e:	d001      	beq.n	10002d74 <uart_get_reset_num+0x18>
10002d70:	231b      	movs	r3, #27
10002d72:	e000      	b.n	10002d76 <uart_get_reset_num+0x1a>
10002d74:	231a      	movs	r3, #26
}
10002d76:	4618      	mov	r0, r3
10002d78:	3708      	adds	r7, #8
10002d7a:	46bd      	mov	sp, r7
10002d7c:	bd80      	pop	{r7, pc}

10002d7e <uart_clock_get_hz>:

#include "hardware/structs/uart.h"
#include "hardware/resets.h"
#include "hardware/clocks.h"

static inline uint32_t uart_clock_get_hz(__unused uart_inst_t *inst) {
10002d7e:	b580      	push	{r7, lr}
10002d80:	b082      	sub	sp, #8
10002d82:	af00      	add	r7, sp, #0
10002d84:	6078      	str	r0, [r7, #4]
    return clock_get_hz(UART_CLOCK_NUM(inst));
10002d86:	2006      	movs	r0, #6
10002d88:	f000 fa9c 	bl	100032c4 <clock_get_hz>
10002d8c:	4603      	mov	r3, r0
}
10002d8e:	4618      	mov	r0, r3
10002d90:	3708      	adds	r7, #8
10002d92:	46bd      	mov	sp, r7
10002d94:	bd80      	pop	{r7, pc}

10002d96 <uart_reset>:
#if PICO_UART_ENABLE_CRLF_SUPPORT
short uart_char_to_line_feed[NUM_UARTS];
#endif

/// \tag::uart_reset[]
static inline void uart_reset(uart_inst_t *uart) {
10002d96:	b580      	push	{r7, lr}
10002d98:	b082      	sub	sp, #8
10002d9a:	af00      	add	r7, sp, #0
10002d9c:	6078      	str	r0, [r7, #4]
    reset_block_num(uart_get_reset_num(uart));
10002d9e:	6878      	ldr	r0, [r7, #4]
10002da0:	f7ff ffdc 	bl	10002d5c <uart_get_reset_num>
10002da4:	4603      	mov	r3, r0
10002da6:	4618      	mov	r0, r3
10002da8:	f7ff ff6c 	bl	10002c84 <reset_block_num>
}
10002dac:	bf00      	nop
10002dae:	3708      	adds	r7, #8
10002db0:	46bd      	mov	sp, r7
10002db2:	bd80      	pop	{r7, pc}

10002db4 <uart_unreset>:

static inline void uart_unreset(uart_inst_t *uart) {
10002db4:	b580      	push	{r7, lr}
10002db6:	b082      	sub	sp, #8
10002db8:	af00      	add	r7, sp, #0
10002dba:	6078      	str	r0, [r7, #4]
    unreset_block_num_wait_blocking(uart_get_reset_num(uart));
10002dbc:	6878      	ldr	r0, [r7, #4]
10002dbe:	f7ff ffcd 	bl	10002d5c <uart_get_reset_num>
10002dc2:	4603      	mov	r3, r0
10002dc4:	4618      	mov	r0, r3
10002dc6:	f7ff ff7d 	bl	10002cc4 <unreset_block_num_wait_blocking>
}
10002dca:	bf00      	nop
10002dcc:	3708      	adds	r7, #8
10002dce:	46bd      	mov	sp, r7
10002dd0:	bd80      	pop	{r7, pc}

10002dd2 <uart_init>:
/// \end::uart_reset[]

/// \tag::uart_init[]
uint uart_init(uart_inst_t *uart, uint baudrate) {
10002dd2:	b580      	push	{r7, lr}
10002dd4:	b08c      	sub	sp, #48	@ 0x30
10002dd6:	af00      	add	r7, sp, #0
10002dd8:	6078      	str	r0, [r7, #4]
10002dda:	6039      	str	r1, [r7, #0]
    invalid_params_if(HARDWARE_UART, uart != uart0 && uart != uart1);

    if (uart_clock_get_hz(uart) == 0) {
10002ddc:	6878      	ldr	r0, [r7, #4]
10002dde:	f7ff ffce 	bl	10002d7e <uart_clock_get_hz>
10002de2:	4603      	mov	r3, r0
10002de4:	2b00      	cmp	r3, #0
10002de6:	d101      	bne.n	10002dec <uart_init+0x1a>
        return 0;
10002de8:	2300      	movs	r3, #0
10002dea:	e054      	b.n	10002e96 <uart_init+0xc4>
    }

    uart_reset(uart);
10002dec:	6878      	ldr	r0, [r7, #4]
10002dee:	f7ff ffd2 	bl	10002d96 <uart_reset>
    uart_unreset(uart);
10002df2:	6878      	ldr	r0, [r7, #4]
10002df4:	f7ff ffde 	bl	10002db4 <uart_unreset>

#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_set_translate_crlf(uart, PICO_UART_DEFAULT_CRLF);
10002df8:	2100      	movs	r1, #0
10002dfa:	6878      	ldr	r0, [r7, #4]
10002dfc:	f000 f954 	bl	100030a8 <uart_set_translate_crlf>
#endif

    // Any LCR writes need to take place before enabling the UART
    uint baud = uart_set_baudrate(uart, baudrate);
10002e00:	6839      	ldr	r1, [r7, #0]
10002e02:	6878      	ldr	r0, [r7, #4]
10002e04:	f000 f8cb 	bl	10002f9e <uart_set_baudrate>
10002e08:	62f8      	str	r0, [r7, #44]	@ 0x2c
#if 0
    uart_set_format(uart, 8, 1, UART_PARITY_NONE);
    // Enable FIFOs (must be before setting UARTEN, as this is an LCR access)
    hw_set_bits(&uart_get_hw(uart)->lcr_h, UART_UARTLCR_H_FEN_BITS);
#else
    uint data_bits = 8;
10002e0a:	2308      	movs	r3, #8
10002e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint stop_bits = 1;
10002e0e:	2301      	movs	r3, #1
10002e10:	627b      	str	r3, [r7, #36]	@ 0x24
    uint parity = UART_PARITY_NONE;
10002e12:	2300      	movs	r3, #0
10002e14:	623b      	str	r3, [r7, #32]
    hw_write_masked(&uart_get_hw(uart)->lcr_h,
10002e16:	6878      	ldr	r0, [r7, #4]
10002e18:	f7ff ff94 	bl	10002d44 <uart_get_hw>
10002e1c:	4603      	mov	r3, r0
10002e1e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
        ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10002e24:	3b05      	subs	r3, #5
10002e26:	0159      	lsls	r1, r3, #5
            ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002e2a:	3b01      	subs	r3, #1
10002e2c:	00db      	lsls	r3, r3, #3
        ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10002e2e:	430b      	orrs	r3, r1
            (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002e30:	6a39      	ldr	r1, [r7, #32]
10002e32:	2900      	cmp	r1, #0
10002e34:	d001      	beq.n	10002e3a <uart_init+0x68>
10002e36:	2102      	movs	r1, #2
10002e38:	e000      	b.n	10002e3c <uart_init+0x6a>
10002e3a:	2100      	movs	r1, #0
            ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10002e3c:	430b      	orrs	r3, r1
            (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB) |
10002e3e:	6a39      	ldr	r1, [r7, #32]
10002e40:	2901      	cmp	r1, #1
10002e42:	d101      	bne.n	10002e48 <uart_init+0x76>
10002e44:	2104      	movs	r1, #4
10002e46:	e000      	b.n	10002e4a <uart_init+0x78>
10002e48:	2100      	movs	r1, #0
            (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10002e4a:	430b      	orrs	r3, r1
            (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB) |
10002e4c:	f043 0310 	orr.w	r3, r3, #16
10002e50:	61fa      	str	r2, [r7, #28]
10002e52:	61bb      	str	r3, [r7, #24]
10002e54:	237e      	movs	r3, #126	@ 0x7e
10002e56:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002e58:	69fb      	ldr	r3, [r7, #28]
10002e5a:	681a      	ldr	r2, [r3, #0]
10002e5c:	69bb      	ldr	r3, [r7, #24]
10002e5e:	405a      	eors	r2, r3
10002e60:	697b      	ldr	r3, [r7, #20]
10002e62:	4013      	ands	r3, r2
10002e64:	69fa      	ldr	r2, [r7, #28]
10002e66:	613a      	str	r2, [r7, #16]
10002e68:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002e6a:	693b      	ldr	r3, [r7, #16]
10002e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10002e70:	461a      	mov	r2, r3
10002e72:	68fb      	ldr	r3, [r7, #12]
10002e74:	6013      	str	r3, [r2, #0]
}
10002e76:	bf00      	nop
}
10002e78:	bf00      	nop
            UART_UARTLCR_H_PEN_BITS | UART_UARTLCR_H_EPS_BITS |
            UART_UARTLCR_H_FEN_BITS);
#endif

    // Enable the UART, both TX and RX
    uart_get_hw(uart)->cr = UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS;
10002e7a:	6878      	ldr	r0, [r7, #4]
10002e7c:	f7ff ff62 	bl	10002d44 <uart_get_hw>
10002e80:	4603      	mov	r3, r0
10002e82:	f240 3201 	movw	r2, #769	@ 0x301
10002e86:	631a      	str	r2, [r3, #48]	@ 0x30
#if !PICO_UART_NO_DMACR_ENABLE
    // Always enable DREQ signals -- no harm in this if DMA is not listening
    uart_get_hw(uart)->dmacr = UART_UARTDMACR_TXDMAE_BITS | UART_UARTDMACR_RXDMAE_BITS;
10002e88:	6878      	ldr	r0, [r7, #4]
10002e8a:	f7ff ff5b 	bl	10002d44 <uart_get_hw>
10002e8e:	4603      	mov	r3, r0
10002e90:	2203      	movs	r2, #3
10002e92:	649a      	str	r2, [r3, #72]	@ 0x48
#endif

    return baud;
10002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
10002e96:	4618      	mov	r0, r3
10002e98:	3730      	adds	r7, #48	@ 0x30
10002e9a:	46bd      	mov	sp, r7
10002e9c:	bd80      	pop	{r7, pc}
	...

10002ea0 <uart_disable_before_lcr_write>:
void uart_deinit(uart_inst_t *uart) {
    invalid_params_if(HARDWARE_UART, uart != uart0 && uart != uart1);
    uart_reset(uart);
}

static uint32_t uart_disable_before_lcr_write(uart_inst_t *uart) {
10002ea0:	b5b0      	push	{r4, r5, r7, lr}
10002ea2:	b08a      	sub	sp, #40	@ 0x28
10002ea4:	af00      	add	r7, sp, #0
10002ea6:	6078      	str	r0, [r7, #4]
    //
    // So, insert a 15 Baud period delay before changing the settings.
    // 15 Baud is comfortably higher than start + max data + parity + stop.
    // Anything else would require API changes to permit a non-enabled UART
    // state after init() where settings can be changed safely.
    uint32_t cr_save = uart_get_hw(uart)->cr;
10002ea8:	6878      	ldr	r0, [r7, #4]
10002eaa:	f7ff ff4b 	bl	10002d44 <uart_get_hw>
10002eae:	4603      	mov	r3, r0
10002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10002eb2:	627b      	str	r3, [r7, #36]	@ 0x24

    if (cr_save & UART_UARTCR_UARTEN_BITS) {
10002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002eb6:	f003 0301 	and.w	r3, r3, #1
10002eba:	2b00      	cmp	r3, #0
10002ebc:	d039      	beq.n	10002f32 <uart_disable_before_lcr_write+0x92>
        hw_clear_bits(&uart_get_hw(uart)->cr,
10002ebe:	6878      	ldr	r0, [r7, #4]
10002ec0:	f7ff ff40 	bl	10002d44 <uart_get_hw>
10002ec4:	4603      	mov	r3, r0
10002ec6:	3330      	adds	r3, #48	@ 0x30
10002ec8:	60fb      	str	r3, [r7, #12]
10002eca:	f240 3301 	movw	r3, #769	@ 0x301
10002ece:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10002ed0:	68fb      	ldr	r3, [r7, #12]
10002ed2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10002ed6:	461a      	mov	r2, r3
10002ed8:	68bb      	ldr	r3, [r7, #8]
10002eda:	6013      	str	r3, [r2, #0]
}
10002edc:	bf00      	nop
            UART_UARTCR_UARTEN_BITS | UART_UARTCR_TXE_BITS | UART_UARTCR_RXE_BITS);

        uint32_t current_ibrd = uart_get_hw(uart)->ibrd;
10002ede:	6878      	ldr	r0, [r7, #4]
10002ee0:	f7ff ff30 	bl	10002d44 <uart_get_hw>
10002ee4:	4603      	mov	r3, r0
10002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10002ee8:	623b      	str	r3, [r7, #32]
        uint32_t current_fbrd = uart_get_hw(uart)->fbrd;
10002eea:	6878      	ldr	r0, [r7, #4]
10002eec:	f7ff ff2a 	bl	10002d44 <uart_get_hw>
10002ef0:	4603      	mov	r3, r0
10002ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10002ef4:	61fb      	str	r3, [r7, #28]

        // Note: Maximise precision here. Show working, the compiler will mop this up.
        // Create a 16.6 fixed-point fractional division ratio; then scale to 32-bits.
        uint32_t brdiv_ratio = 64u * current_ibrd + current_fbrd;
10002ef6:	6a3b      	ldr	r3, [r7, #32]
10002ef8:	019b      	lsls	r3, r3, #6
10002efa:	69fa      	ldr	r2, [r7, #28]
10002efc:	4413      	add	r3, r2
10002efe:	61bb      	str	r3, [r7, #24]
        brdiv_ratio <<= 10;
10002f00:	69bb      	ldr	r3, [r7, #24]
10002f02:	029b      	lsls	r3, r3, #10
10002f04:	61bb      	str	r3, [r7, #24]
        // 3662 is ~(15 * 244.14) where 244.14 is 16e6 / 2^16
        uint32_t scaled_freq = uart_clock_get_hz(uart) / 3662ul;
10002f06:	6878      	ldr	r0, [r7, #4]
10002f08:	f7ff ff39 	bl	10002d7e <uart_clock_get_hz>
10002f0c:	4603      	mov	r3, r0
10002f0e:	4a0b      	ldr	r2, [pc, #44]	@ (10002f3c <uart_disable_before_lcr_write+0x9c>)
10002f10:	fba2 2303 	umull	r2, r3, r2, r3
10002f14:	0adb      	lsrs	r3, r3, #11
10002f16:	617b      	str	r3, [r7, #20]
        uint32_t wait_time_us = brdiv_ratio / scaled_freq;
10002f18:	69ba      	ldr	r2, [r7, #24]
10002f1a:	697b      	ldr	r3, [r7, #20]
10002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
10002f20:	613b      	str	r3, [r7, #16]
        busy_wait_us(wait_time_us);
10002f22:	693b      	ldr	r3, [r7, #16]
10002f24:	2200      	movs	r2, #0
10002f26:	461c      	mov	r4, r3
10002f28:	4615      	mov	r5, r2
10002f2a:	4620      	mov	r0, r4
10002f2c:	4629      	mov	r1, r5
10002f2e:	f7ff fe99 	bl	10002c64 <busy_wait_us>
    }

    return cr_save;
10002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
10002f34:	4618      	mov	r0, r3
10002f36:	3728      	adds	r7, #40	@ 0x28
10002f38:	46bd      	mov	sp, r7
10002f3a:	bdb0      	pop	{r4, r5, r7, pc}
10002f3c:	8f2b7b75 	.word	0x8f2b7b75

10002f40 <uart_write_lcr_bits_masked>:

static void uart_write_lcr_bits_masked(uart_inst_t *uart, uint32_t values, uint32_t write_mask) {
10002f40:	b580      	push	{r7, lr}
10002f42:	b08a      	sub	sp, #40	@ 0x28
10002f44:	af00      	add	r7, sp, #0
10002f46:	60f8      	str	r0, [r7, #12]
10002f48:	60b9      	str	r1, [r7, #8]
10002f4a:	607a      	str	r2, [r7, #4]
    invalid_params_if(HARDWARE_UART, uart != uart0 && uart != uart1);

    // (Potentially) Cleanly handle disabling the UART before touching LCR
    uint32_t cr_save = uart_disable_before_lcr_write(uart);
10002f4c:	68f8      	ldr	r0, [r7, #12]
10002f4e:	f7ff ffa7 	bl	10002ea0 <uart_disable_before_lcr_write>
10002f52:	6278      	str	r0, [r7, #36]	@ 0x24

    hw_write_masked(&uart_get_hw(uart)->lcr_h, values, write_mask);
10002f54:	68f8      	ldr	r0, [r7, #12]
10002f56:	f7ff fef5 	bl	10002d44 <uart_get_hw>
10002f5a:	4603      	mov	r3, r0
10002f5c:	332c      	adds	r3, #44	@ 0x2c
10002f5e:	623b      	str	r3, [r7, #32]
10002f60:	68bb      	ldr	r3, [r7, #8]
10002f62:	61fb      	str	r3, [r7, #28]
10002f64:	687b      	ldr	r3, [r7, #4]
10002f66:	61bb      	str	r3, [r7, #24]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
10002f68:	6a3b      	ldr	r3, [r7, #32]
10002f6a:	681a      	ldr	r2, [r3, #0]
10002f6c:	69fb      	ldr	r3, [r7, #28]
10002f6e:	405a      	eors	r2, r3
10002f70:	69bb      	ldr	r3, [r7, #24]
10002f72:	4013      	ands	r3, r2
10002f74:	6a3a      	ldr	r2, [r7, #32]
10002f76:	617a      	str	r2, [r7, #20]
10002f78:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10002f7a:	697b      	ldr	r3, [r7, #20]
10002f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10002f80:	461a      	mov	r2, r3
10002f82:	693b      	ldr	r3, [r7, #16]
10002f84:	6013      	str	r3, [r2, #0]
}
10002f86:	bf00      	nop
}
10002f88:	bf00      	nop

    uart_get_hw(uart)->cr = cr_save;
10002f8a:	68f8      	ldr	r0, [r7, #12]
10002f8c:	f7ff feda 	bl	10002d44 <uart_get_hw>
10002f90:	4602      	mov	r2, r0
10002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10002f94:	6313      	str	r3, [r2, #48]	@ 0x30
}
10002f96:	bf00      	nop
10002f98:	3728      	adds	r7, #40	@ 0x28
10002f9a:	46bd      	mov	sp, r7
10002f9c:	bd80      	pop	{r7, pc}

10002f9e <uart_set_baudrate>:

/// \tag::uart_set_baudrate[]
uint uart_set_baudrate(uart_inst_t *uart, uint baudrate) {
10002f9e:	b580      	push	{r7, lr}
10002fa0:	b086      	sub	sp, #24
10002fa2:	af00      	add	r7, sp, #0
10002fa4:	6078      	str	r0, [r7, #4]
10002fa6:	6039      	str	r1, [r7, #0]
    invalid_params_if(HARDWARE_UART, baudrate == 0);
    uint32_t baud_rate_div = (8 * uart_clock_get_hz(uart) / baudrate) + 1;
10002fa8:	6878      	ldr	r0, [r7, #4]
10002faa:	f7ff fee8 	bl	10002d7e <uart_clock_get_hz>
10002fae:	4603      	mov	r3, r0
10002fb0:	00da      	lsls	r2, r3, #3
10002fb2:	683b      	ldr	r3, [r7, #0]
10002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
10002fb8:	3301      	adds	r3, #1
10002fba:	60fb      	str	r3, [r7, #12]
    uint32_t baud_ibrd = baud_rate_div >> 7;
10002fbc:	68fb      	ldr	r3, [r7, #12]
10002fbe:	09db      	lsrs	r3, r3, #7
10002fc0:	617b      	str	r3, [r7, #20]
    uint32_t baud_fbrd;

    if (baud_ibrd == 0) {
10002fc2:	697b      	ldr	r3, [r7, #20]
10002fc4:	2b00      	cmp	r3, #0
10002fc6:	d104      	bne.n	10002fd2 <uart_set_baudrate+0x34>
        baud_ibrd = 1;
10002fc8:	2301      	movs	r3, #1
10002fca:	617b      	str	r3, [r7, #20]
        baud_fbrd = 0;
10002fcc:	2300      	movs	r3, #0
10002fce:	613b      	str	r3, [r7, #16]
10002fd0:	e00f      	b.n	10002ff2 <uart_set_baudrate+0x54>
    } else if (baud_ibrd >= 65535) {
10002fd2:	697b      	ldr	r3, [r7, #20]
10002fd4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
10002fd8:	4293      	cmp	r3, r2
10002fda:	d905      	bls.n	10002fe8 <uart_set_baudrate+0x4a>
        baud_ibrd = 65535;
10002fdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10002fe0:	617b      	str	r3, [r7, #20]
        baud_fbrd = 0;
10002fe2:	2300      	movs	r3, #0
10002fe4:	613b      	str	r3, [r7, #16]
10002fe6:	e004      	b.n	10002ff2 <uart_set_baudrate+0x54>
    }  else {
        baud_fbrd = (baud_rate_div & 0x7f) >> 1;
10002fe8:	68fb      	ldr	r3, [r7, #12]
10002fea:	085b      	lsrs	r3, r3, #1
10002fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10002ff0:	613b      	str	r3, [r7, #16]
    }

    uart_get_hw(uart)->ibrd = baud_ibrd;
10002ff2:	6878      	ldr	r0, [r7, #4]
10002ff4:	f7ff fea6 	bl	10002d44 <uart_get_hw>
10002ff8:	4602      	mov	r2, r0
10002ffa:	697b      	ldr	r3, [r7, #20]
10002ffc:	6253      	str	r3, [r2, #36]	@ 0x24
    uart_get_hw(uart)->fbrd = baud_fbrd;
10002ffe:	6878      	ldr	r0, [r7, #4]
10003000:	f7ff fea0 	bl	10002d44 <uart_get_hw>
10003004:	4602      	mov	r2, r0
10003006:	693b      	ldr	r3, [r7, #16]
10003008:	6293      	str	r3, [r2, #40]	@ 0x28

    // PL011 needs a (dummy) LCR_H write to latch in the divisors.
    // We don't want to actually change LCR_H contents here.
    uart_write_lcr_bits_masked(uart, 0, 0);
1000300a:	2200      	movs	r2, #0
1000300c:	2100      	movs	r1, #0
1000300e:	6878      	ldr	r0, [r7, #4]
10003010:	f7ff ff96 	bl	10002f40 <uart_write_lcr_bits_masked>

    // See datasheet
    return (4 * uart_clock_get_hz(uart)) / (64 * baud_ibrd + baud_fbrd);
10003014:	6878      	ldr	r0, [r7, #4]
10003016:	f7ff feb2 	bl	10002d7e <uart_clock_get_hz>
1000301a:	4603      	mov	r3, r0
1000301c:	009a      	lsls	r2, r3, #2
1000301e:	697b      	ldr	r3, [r7, #20]
10003020:	0199      	lsls	r1, r3, #6
10003022:	693b      	ldr	r3, [r7, #16]
10003024:	440b      	add	r3, r1
10003026:	fbb2 f3f3 	udiv	r3, r2, r3
}
1000302a:	4618      	mov	r0, r3
1000302c:	3718      	adds	r7, #24
1000302e:	46bd      	mov	sp, r7
10003030:	bd80      	pop	{r7, pc}

10003032 <uart_set_format>:
/// \end::uart_set_baudrate[]

void uart_set_format(uart_inst_t *uart, uint data_bits, uint stop_bits, uart_parity_t parity) {
10003032:	b580      	push	{r7, lr}
10003034:	b084      	sub	sp, #16
10003036:	af00      	add	r7, sp, #0
10003038:	60f8      	str	r0, [r7, #12]
1000303a:	60b9      	str	r1, [r7, #8]
1000303c:	607a      	str	r2, [r7, #4]
1000303e:	70fb      	strb	r3, [r7, #3]
    invalid_params_if(HARDWARE_UART, data_bits < 5 || data_bits > 8);
    invalid_params_if(HARDWARE_UART, stop_bits != 1 && stop_bits != 2);
    invalid_params_if(HARDWARE_UART, parity != UART_PARITY_NONE && parity != UART_PARITY_EVEN && parity != UART_PARITY_ODD);

    uart_write_lcr_bits_masked(uart,
        ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
10003040:	68bb      	ldr	r3, [r7, #8]
10003042:	3b05      	subs	r3, #5
10003044:	015a      	lsls	r2, r3, #5
        ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
10003046:	687b      	ldr	r3, [r7, #4]
10003048:	3b01      	subs	r3, #1
1000304a:	00db      	lsls	r3, r3, #3
        ((data_bits - 5u) << UART_UARTLCR_H_WLEN_LSB) |
1000304c:	4313      	orrs	r3, r2
        (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
1000304e:	78fa      	ldrb	r2, [r7, #3]
10003050:	2a00      	cmp	r2, #0
10003052:	d001      	beq.n	10003058 <uart_set_format+0x26>
10003054:	2202      	movs	r2, #2
10003056:	e000      	b.n	1000305a <uart_set_format+0x28>
10003058:	2200      	movs	r2, #0
        ((stop_bits - 1u) << UART_UARTLCR_H_STP2_LSB) |
1000305a:	4313      	orrs	r3, r2
        (bool_to_bit(parity == UART_PARITY_EVEN) << UART_UARTLCR_H_EPS_LSB),
1000305c:	78fa      	ldrb	r2, [r7, #3]
1000305e:	2a01      	cmp	r2, #1
10003060:	d101      	bne.n	10003066 <uart_set_format+0x34>
10003062:	2204      	movs	r2, #4
10003064:	e000      	b.n	10003068 <uart_set_format+0x36>
10003066:	2200      	movs	r2, #0
        (bool_to_bit(parity != UART_PARITY_NONE) << UART_UARTLCR_H_PEN_LSB) |
10003068:	4313      	orrs	r3, r2
    uart_write_lcr_bits_masked(uart,
1000306a:	226e      	movs	r2, #110	@ 0x6e
1000306c:	4619      	mov	r1, r3
1000306e:	68f8      	ldr	r0, [r7, #12]
10003070:	f7ff ff66 	bl	10002f40 <uart_write_lcr_bits_masked>
        UART_UARTLCR_H_WLEN_BITS |
        UART_UARTLCR_H_STP2_BITS |
        UART_UARTLCR_H_PEN_BITS |
        UART_UARTLCR_H_EPS_BITS);
}
10003074:	bf00      	nop
10003076:	3710      	adds	r7, #16
10003078:	46bd      	mov	sp, r7
1000307a:	bd80      	pop	{r7, pc}

1000307c <uart_set_fifo_enabled>:

void uart_set_fifo_enabled(uart_inst_t *uart, bool enabled) {
1000307c:	b580      	push	{r7, lr}
1000307e:	b084      	sub	sp, #16
10003080:	af00      	add	r7, sp, #0
10003082:	6078      	str	r0, [r7, #4]
10003084:	460b      	mov	r3, r1
10003086:	70fb      	strb	r3, [r7, #3]

    uint32_t lcr_h_fen_bits = 0;
10003088:	2300      	movs	r3, #0
1000308a:	60fb      	str	r3, [r7, #12]

    if (enabled) {
1000308c:	78fb      	ldrb	r3, [r7, #3]
1000308e:	2b00      	cmp	r3, #0
10003090:	d001      	beq.n	10003096 <uart_set_fifo_enabled+0x1a>
        lcr_h_fen_bits = UART_UARTLCR_H_FEN_BITS;
10003092:	2310      	movs	r3, #16
10003094:	60fb      	str	r3, [r7, #12]
    }

    uart_write_lcr_bits_masked(uart, lcr_h_fen_bits, UART_UARTLCR_H_FEN_BITS);
10003096:	2210      	movs	r2, #16
10003098:	68f9      	ldr	r1, [r7, #12]
1000309a:	6878      	ldr	r0, [r7, #4]
1000309c:	f7ff ff50 	bl	10002f40 <uart_write_lcr_bits_masked>
}
100030a0:	bf00      	nop
100030a2:	3710      	adds	r7, #16
100030a4:	46bd      	mov	sp, r7
100030a6:	bd80      	pop	{r7, pc}

100030a8 <uart_set_translate_crlf>:
    }

    uart_write_lcr_bits_masked(uart, lcr_h_brk_bits, UART_UARTLCR_H_BRK_BITS);
}

void uart_set_translate_crlf(uart_inst_t *uart, bool crlf) {
100030a8:	b590      	push	{r4, r7, lr}
100030aa:	b083      	sub	sp, #12
100030ac:	af00      	add	r7, sp, #0
100030ae:	6078      	str	r0, [r7, #4]
100030b0:	460b      	mov	r3, r1
100030b2:	70fb      	strb	r3, [r7, #3]
#if PICO_UART_ENABLE_CRLF_SUPPORT
    uart_char_to_line_feed[uart_get_index(uart)] = crlf ? '\n' : 0x100;
100030b4:	78fb      	ldrb	r3, [r7, #3]
100030b6:	2b00      	cmp	r3, #0
100030b8:	d001      	beq.n	100030be <uart_set_translate_crlf+0x16>
100030ba:	240a      	movs	r4, #10
100030bc:	e001      	b.n	100030c2 <uart_set_translate_crlf+0x1a>
100030be:	f44f 7480 	mov.w	r4, #256	@ 0x100
100030c2:	6878      	ldr	r0, [r7, #4]
100030c4:	f7ff fe2a 	bl	10002d1c <uart_get_index>
100030c8:	4603      	mov	r3, r0
100030ca:	4a04      	ldr	r2, [pc, #16]	@ (100030dc <uart_set_translate_crlf+0x34>)
100030cc:	4621      	mov	r1, r4
100030ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#else
    panic_unsupported();
#endif
}
100030d2:	bf00      	nop
100030d4:	370c      	adds	r7, #12
100030d6:	46bd      	mov	sp, r7
100030d8:	bd90      	pop	{r4, r7, pc}
100030da:	bf00      	nop
100030dc:	2000256c 	.word	0x2000256c

100030e0 <busy_wait_at_least_cycles>:
static inline void busy_wait_at_least_cycles(uint32_t minimum_cycles) {
100030e0:	b480      	push	{r7}
100030e2:	b083      	sub	sp, #12
100030e4:	af00      	add	r7, sp, #0
100030e6:	6078      	str	r0, [r7, #4]
    pico_default_asm_volatile (
100030e8:	687b      	ldr	r3, [r7, #4]
100030ea:	3b03      	subs	r3, #3
100030ec:	d2fd      	bcs.n	100030ea <busy_wait_at_least_cycles+0xa>
100030ee:	607b      	str	r3, [r7, #4]
}
100030f0:	bf00      	nop
100030f2:	370c      	adds	r7, #12
100030f4:	46bd      	mov	sp, r7
100030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100030fa:	4770      	bx	lr

100030fc <has_glitchless_mux>:
// - A glitchless mux, which can be switched freely, but whose inputs must be
//   free-running
// - An auxiliary (glitchy) mux, whose output glitches when switched, but has
//   no constraints on its inputs
// Not all clocks have both types of mux.
static inline bool has_glitchless_mux(clock_handle_t clock) {
100030fc:	b480      	push	{r7}
100030fe:	b083      	sub	sp, #12
10003100:	af00      	add	r7, sp, #0
10003102:	4603      	mov	r3, r0
10003104:	71fb      	strb	r3, [r7, #7]
    return clock == clk_sys || clock == clk_ref;
10003106:	79fb      	ldrb	r3, [r7, #7]
10003108:	2b05      	cmp	r3, #5
1000310a:	d002      	beq.n	10003112 <has_glitchless_mux+0x16>
1000310c:	79fb      	ldrb	r3, [r7, #7]
1000310e:	2b04      	cmp	r3, #4
10003110:	d101      	bne.n	10003116 <has_glitchless_mux+0x1a>
10003112:	2301      	movs	r3, #1
10003114:	e000      	b.n	10003118 <has_glitchless_mux+0x1c>
10003116:	2300      	movs	r3, #0
10003118:	f003 0301 	and.w	r3, r3, #1
1000311c:	b2db      	uxtb	r3, r3
}
1000311e:	4618      	mov	r0, r3
10003120:	370c      	adds	r7, #12
10003122:	46bd      	mov	sp, r7
10003124:	f85d 7b04 	ldr.w	r7, [sp], #4
10003128:	4770      	bx	lr
	...

1000312c <clock_configure_internal>:
    hw_clear_bits(&clock_hw->ctrl, CLOCKS_CLK_USB_CTRL_ENABLE_BITS);
    configured_freq[clock] = 0;
}

/// \tag::clock_configure[]
static void clock_configure_internal(clock_handle_t clock, uint32_t src, uint32_t auxsrc, uint32_t actual_freq, uint32_t div) {
1000312c:	b580      	push	{r7, lr}
1000312e:	b096      	sub	sp, #88	@ 0x58
10003130:	af00      	add	r7, sp, #0
10003132:	60b9      	str	r1, [r7, #8]
10003134:	607a      	str	r2, [r7, #4]
10003136:	603b      	str	r3, [r7, #0]
10003138:	4603      	mov	r3, r0
1000313a:	73fb      	strb	r3, [r7, #15]
    clock_hw_t *clock_hw = &clocks_hw->clk[clock];
1000313c:	7bfa      	ldrb	r2, [r7, #15]
1000313e:	4613      	mov	r3, r2
10003140:	005b      	lsls	r3, r3, #1
10003142:	4413      	add	r3, r2
10003144:	009b      	lsls	r3, r3, #2
10003146:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
1000314a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
1000314e:	657b      	str	r3, [r7, #84]	@ 0x54

    // If increasing divisor, set divisor before source. Otherwise set source
    // before divisor. This avoids a momentary overspeed when e.g. switching
    // to a faster source and increasing divisor to compensate.
    if (div > clock_hw->div)
10003150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003152:	685b      	ldr	r3, [r3, #4]
10003154:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10003156:	429a      	cmp	r2, r3
10003158:	d902      	bls.n	10003160 <clock_configure_internal+0x34>
        clock_hw->div = div;
1000315a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000315c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
1000315e:	605a      	str	r2, [r3, #4]

    // If switching a glitchless slice (ref or sys) to an aux source, switch
    // away from aux *first* to avoid passing glitches when changing aux mux.
    // Assume (!!!) glitchless source 0 is no faster than the aux source.
    if (has_glitchless_mux(clock) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
10003160:	7bfb      	ldrb	r3, [r7, #15]
10003162:	4618      	mov	r0, r3
10003164:	f7ff ffca 	bl	100030fc <has_glitchless_mux>
10003168:	4603      	mov	r3, r0
1000316a:	2b00      	cmp	r3, #0
1000316c:	d016      	beq.n	1000319c <clock_configure_internal+0x70>
1000316e:	68bb      	ldr	r3, [r7, #8]
10003170:	2b01      	cmp	r3, #1
10003172:	d113      	bne.n	1000319c <clock_configure_internal+0x70>
        hw_clear_bits(&clock_hw->ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
10003174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003176:	64fb      	str	r3, [r7, #76]	@ 0x4c
10003178:	2303      	movs	r3, #3
1000317a:	64bb      	str	r3, [r7, #72]	@ 0x48
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000317c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1000317e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003182:	461a      	mov	r2, r3
10003184:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10003186:	6013      	str	r3, [r2, #0]
}
10003188:	bf00      	nop
        while (!(clock_hw->selected & 1u))
1000318a:	e000      	b.n	1000318e <clock_configure_internal+0x62>
static __force_inline void tight_loop_contents(void) {}
1000318c:	bf00      	nop
1000318e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003190:	689b      	ldr	r3, [r3, #8]
10003192:	f003 0301 	and.w	r3, r3, #1
10003196:	2b00      	cmp	r3, #0
10003198:	d0f8      	beq.n	1000318c <clock_configure_internal+0x60>
    if (has_glitchless_mux(clock) && src == CLOCKS_CLK_SYS_CTRL_SRC_VALUE_CLKSRC_CLK_SYS_AUX) {
1000319a:	e022      	b.n	100031e2 <clock_configure_internal+0xb6>
    // propagating when changing aux mux. Note it would be a really bad idea
    // to do this on one of the glitchless clocks (clk_sys, clk_ref).
    else {
        // Disable clock. On clk_ref and clk_sys this does nothing,
        // all other clocks have the ENABLE bit in the same position.
        hw_clear_bits(&clock_hw->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
1000319c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000319e:	647b      	str	r3, [r7, #68]	@ 0x44
100031a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
100031a4:	643b      	str	r3, [r7, #64]	@ 0x40
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100031a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100031a8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
100031ac:	461a      	mov	r2, r3
100031ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100031b0:	6013      	str	r3, [r2, #0]
}
100031b2:	bf00      	nop
        if (configured_freq[clock] > 0) {
100031b4:	7bfb      	ldrb	r3, [r7, #15]
100031b6:	4a37      	ldr	r2, [pc, #220]	@ (10003294 <clock_configure_internal+0x168>)
100031b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100031bc:	2b00      	cmp	r3, #0
100031be:	d010      	beq.n	100031e2 <clock_configure_internal+0xb6>
            // Delay for 3 cycles of the target clock, for ENABLE propagation.
            // Note XOSC_COUNT is not helpful here because XOSC is not
            // necessarily running, nor is timer...
            uint delay_cyc = configured_freq[clk_sys] / configured_freq[clock] + 1;
100031c0:	4b34      	ldr	r3, [pc, #208]	@ (10003294 <clock_configure_internal+0x168>)
100031c2:	695a      	ldr	r2, [r3, #20]
100031c4:	7bfb      	ldrb	r3, [r7, #15]
100031c6:	4933      	ldr	r1, [pc, #204]	@ (10003294 <clock_configure_internal+0x168>)
100031c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100031cc:	fbb2 f3f3 	udiv	r3, r2, r3
100031d0:	3301      	adds	r3, #1
100031d2:	653b      	str	r3, [r7, #80]	@ 0x50
            busy_wait_at_least_cycles(delay_cyc * 3);
100031d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
100031d6:	4613      	mov	r3, r2
100031d8:	005b      	lsls	r3, r3, #1
100031da:	4413      	add	r3, r2
100031dc:	4618      	mov	r0, r3
100031de:	f7ff ff7f 	bl	100030e0 <busy_wait_at_least_cycles>
        }
    }

    // Set aux mux first, and then glitchless mux if this clock has one
    hw_write_masked(&clock_hw->ctrl,
100031e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100031e4:	687b      	ldr	r3, [r7, #4]
100031e6:	015b      	lsls	r3, r3, #5
100031e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
100031ea:	63bb      	str	r3, [r7, #56]	@ 0x38
100031ec:	23e0      	movs	r3, #224	@ 0xe0
100031ee:	637b      	str	r3, [r7, #52]	@ 0x34
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
100031f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100031f2:	681a      	ldr	r2, [r3, #0]
100031f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100031f6:	405a      	eors	r2, r3
100031f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100031fa:	4013      	ands	r3, r2
100031fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100031fe:	633a      	str	r2, [r7, #48]	@ 0x30
10003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
10003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10003208:	461a      	mov	r2, r3
1000320a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000320c:	6013      	str	r3, [r2, #0]
}
1000320e:	bf00      	nop
}
10003210:	bf00      	nop
        (auxsrc << CLOCKS_CLK_SYS_CTRL_AUXSRC_LSB),
        CLOCKS_CLK_SYS_CTRL_AUXSRC_BITS
    );

    if (has_glitchless_mux(clock)) {
10003212:	7bfb      	ldrb	r3, [r7, #15]
10003214:	4618      	mov	r0, r3
10003216:	f7ff ff71 	bl	100030fc <has_glitchless_mux>
1000321a:	4603      	mov	r3, r0
1000321c:	2b00      	cmp	r3, #0
1000321e:	d021      	beq.n	10003264 <clock_configure_internal+0x138>
        hw_write_masked(&clock_hw->ctrl,
10003220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003222:	62bb      	str	r3, [r7, #40]	@ 0x28
10003224:	68bb      	ldr	r3, [r7, #8]
10003226:	627b      	str	r3, [r7, #36]	@ 0x24
10003228:	2303      	movs	r3, #3
1000322a:	623b      	str	r3, [r7, #32]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000322e:	681a      	ldr	r2, [r3, #0]
10003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10003232:	405a      	eors	r2, r3
10003234:	6a3b      	ldr	r3, [r7, #32]
10003236:	4013      	ands	r3, r2
10003238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000323a:	61fa      	str	r2, [r7, #28]
1000323c:	61bb      	str	r3, [r7, #24]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000323e:	69fb      	ldr	r3, [r7, #28]
10003240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
10003244:	461a      	mov	r2, r3
10003246:	69bb      	ldr	r3, [r7, #24]
10003248:	6013      	str	r3, [r2, #0]
}
1000324a:	bf00      	nop
}
1000324c:	bf00      	nop
            src << CLOCKS_CLK_REF_CTRL_SRC_LSB,
            CLOCKS_CLK_REF_CTRL_SRC_BITS
        );
        while (!(clock_hw->selected & (1u << src)))
1000324e:	e000      	b.n	10003252 <clock_configure_internal+0x126>
10003250:	bf00      	nop
10003252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003254:	689a      	ldr	r2, [r3, #8]
10003256:	2101      	movs	r1, #1
10003258:	68bb      	ldr	r3, [r7, #8]
1000325a:	fa01 f303 	lsl.w	r3, r1, r3
1000325e:	4013      	ands	r3, r2
10003260:	2b00      	cmp	r3, #0
10003262:	d0f5      	beq.n	10003250 <clock_configure_internal+0x124>
            tight_loop_contents();
    }

    // Enable clock. On clk_ref and clk_sys this does nothing,
    // all other clocks have the ENABLE bit in the same position.
    hw_set_bits(&clock_hw->ctrl, CLOCKS_CLK_GPOUT0_CTRL_ENABLE_BITS);
10003264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10003266:	617b      	str	r3, [r7, #20]
10003268:	f44f 6300 	mov.w	r3, #2048	@ 0x800
1000326c:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000326e:	697b      	ldr	r3, [r7, #20]
10003270:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10003274:	461a      	mov	r2, r3
10003276:	693b      	ldr	r3, [r7, #16]
10003278:	6013      	str	r3, [r2, #0]
}
1000327a:	bf00      	nop

    // Now that the source is configured, we can trust that the user-supplied
    // divisor is a safe value.
    clock_hw->div = div;
1000327c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000327e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10003280:	605a      	str	r2, [r3, #4]
    configured_freq[clock] = actual_freq;
10003282:	7bfb      	ldrb	r3, [r7, #15]
10003284:	4903      	ldr	r1, [pc, #12]	@ (10003294 <clock_configure_internal+0x168>)
10003286:	683a      	ldr	r2, [r7, #0]
10003288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1000328c:	bf00      	nop
1000328e:	3758      	adds	r7, #88	@ 0x58
10003290:	46bd      	mov	sp, r7
10003292:	bd80      	pop	{r7, pc}
10003294:	200020b4 	.word	0x200020b4

10003298 <clock_configure_undivided>:

void clock_configure_int_divider(clock_handle_t clock, uint32_t src, uint32_t auxsrc, uint32_t src_freq, uint32_t int_divider) {
    clock_configure_internal(clock, src, auxsrc, src_freq / int_divider, int_divider << CLOCKS_CLK_GPOUT0_DIV_INT_LSB);
}

void clock_configure_undivided(clock_handle_t clock, uint32_t src, uint32_t auxsrc, uint32_t src_freq) {
10003298:	b580      	push	{r7, lr}
1000329a:	b086      	sub	sp, #24
1000329c:	af02      	add	r7, sp, #8
1000329e:	60b9      	str	r1, [r7, #8]
100032a0:	607a      	str	r2, [r7, #4]
100032a2:	603b      	str	r3, [r7, #0]
100032a4:	4603      	mov	r3, r0
100032a6:	73fb      	strb	r3, [r7, #15]
    clock_configure_internal(clock, src, auxsrc, src_freq, 1u << CLOCKS_CLK_GPOUT0_DIV_INT_LSB);
100032a8:	7bf8      	ldrb	r0, [r7, #15]
100032aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
100032ae:	9300      	str	r3, [sp, #0]
100032b0:	683b      	ldr	r3, [r7, #0]
100032b2:	687a      	ldr	r2, [r7, #4]
100032b4:	68b9      	ldr	r1, [r7, #8]
100032b6:	f7ff ff39 	bl	1000312c <clock_configure_internal>
}
100032ba:	bf00      	nop
100032bc:	3710      	adds	r7, #16
100032be:	46bd      	mov	sp, r7
100032c0:	bd80      	pop	{r7, pc}
	...

100032c4 <clock_get_hz>:

/// \end::clock_configure[]

/// \tag::clock_get_hz[]
uint32_t clock_get_hz(clock_handle_t clock) {
100032c4:	b480      	push	{r7}
100032c6:	b083      	sub	sp, #12
100032c8:	af00      	add	r7, sp, #0
100032ca:	4603      	mov	r3, r0
100032cc:	71fb      	strb	r3, [r7, #7]
    return configured_freq[clock];
100032ce:	79fb      	ldrb	r3, [r7, #7]
100032d0:	4a04      	ldr	r2, [pc, #16]	@ (100032e4 <clock_get_hz+0x20>)
100032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
100032d6:	4618      	mov	r0, r3
100032d8:	370c      	adds	r7, #12
100032da:	46bd      	mov	sp, r7
100032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
100032e0:	4770      	bx	lr
100032e2:	bf00      	nop
100032e4:	200020b4 	.word	0x200020b4

100032e8 <clock_set_reported_hz>:
/// \end::clock_get_hz[]

void clock_set_reported_hz(clock_handle_t clock, uint hz) {
100032e8:	b480      	push	{r7}
100032ea:	b083      	sub	sp, #12
100032ec:	af00      	add	r7, sp, #0
100032ee:	4603      	mov	r3, r0
100032f0:	6039      	str	r1, [r7, #0]
100032f2:	71fb      	strb	r3, [r7, #7]
    configured_freq[clock] = hz;
100032f4:	79fb      	ldrb	r3, [r7, #7]
100032f6:	4905      	ldr	r1, [pc, #20]	@ (1000330c <clock_set_reported_hz+0x24>)
100032f8:	683a      	ldr	r2, [r7, #0]
100032fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
100032fe:	bf00      	nop
10003300:	370c      	adds	r7, #12
10003302:	46bd      	mov	sp, r7
10003304:	f85d 7b04 	ldr.w	r7, [sp], #4
10003308:	4770      	bx	lr
1000330a:	bf00      	nop
1000330c:	200020b4 	.word	0x200020b4

10003310 <reset_unreset_block_num_wait_blocking>:
/*! \brief Reset the specified HW block, and then bring at back out of reset and wait for completion
 *  \ingroup hardware_resets
 *
 * \param block_num the block number
 */
static inline void reset_unreset_block_num_wait_blocking(uint block_num) {
10003310:	b480      	push	{r7}
10003312:	b08d      	sub	sp, #52	@ 0x34
10003314:	af00      	add	r7, sp, #0
10003316:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_RESETS, block_num > NUM_RESETS);
    reset_block_reg_mask(&resets_hw->reset, 1u << block_num);
10003318:	2201      	movs	r2, #1
1000331a:	687b      	ldr	r3, [r7, #4]
1000331c:	fa02 f303 	lsl.w	r3, r2, r3
10003320:	4a19      	ldr	r2, [pc, #100]	@ (10003388 <reset_unreset_block_num_wait_blocking+0x78>)
10003322:	61ba      	str	r2, [r7, #24]
10003324:	617b      	str	r3, [r7, #20]
10003326:	69bb      	ldr	r3, [r7, #24]
10003328:	613b      	str	r3, [r7, #16]
1000332a:	697b      	ldr	r3, [r7, #20]
1000332c:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000332e:	693b      	ldr	r3, [r7, #16]
10003330:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10003334:	461a      	mov	r2, r3
10003336:	68fb      	ldr	r3, [r7, #12]
10003338:	6013      	str	r3, [r2, #0]
}
1000333a:	bf00      	nop
}
1000333c:	bf00      	nop
    unreset_block_reg_mask_wait_blocking(&resets_hw->reset, &resets_hw->reset_done, 1u << block_num);
1000333e:	2201      	movs	r2, #1
10003340:	687b      	ldr	r3, [r7, #4]
10003342:	fa02 f303 	lsl.w	r3, r2, r3
10003346:	4a10      	ldr	r2, [pc, #64]	@ (10003388 <reset_unreset_block_num_wait_blocking+0x78>)
10003348:	62fa      	str	r2, [r7, #44]	@ 0x2c
1000334a:	4a10      	ldr	r2, [pc, #64]	@ (1000338c <reset_unreset_block_num_wait_blocking+0x7c>)
1000334c:	62ba      	str	r2, [r7, #40]	@ 0x28
1000334e:	627b      	str	r3, [r7, #36]	@ 0x24
10003350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10003352:	623b      	str	r3, [r7, #32]
10003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10003356:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003358:	6a3b      	ldr	r3, [r7, #32]
1000335a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
1000335e:	461a      	mov	r2, r3
10003360:	69fb      	ldr	r3, [r7, #28]
10003362:	6013      	str	r3, [r2, #0]
}
10003364:	bf00      	nop
    while (~*reset_done & mask)
10003366:	e000      	b.n	1000336a <reset_unreset_block_num_wait_blocking+0x5a>
10003368:	bf00      	nop
1000336a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000336c:	681b      	ldr	r3, [r3, #0]
1000336e:	43da      	mvns	r2, r3
10003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10003372:	4013      	ands	r3, r2
10003374:	2b00      	cmp	r3, #0
10003376:	d1f7      	bne.n	10003368 <reset_unreset_block_num_wait_blocking+0x58>
}
10003378:	bf00      	nop
}
1000337a:	bf00      	nop
1000337c:	3734      	adds	r7, #52	@ 0x34
1000337e:	46bd      	mov	sp, r7
10003380:	f85d 7b04 	ldr.w	r7, [sp], #4
10003384:	4770      	bx	lr
10003386:	bf00      	nop
10003388:	40020000 	.word	0x40020000
1000338c:	40020008 	.word	0x40020008

10003390 <pll_init>:
#include "hardware/clocks.h"
#include "hardware/pll.h"
#include "hardware/resets.h"

/// \tag::pll_init_calculations[]
void pll_init(PLL pll, uint refdiv, uint vco_freq, uint post_div1, uint post_div2) {
10003390:	b580      	push	{r7, lr}
10003392:	b08c      	sub	sp, #48	@ 0x30
10003394:	af00      	add	r7, sp, #0
10003396:	60f8      	str	r0, [r7, #12]
10003398:	60b9      	str	r1, [r7, #8]
1000339a:	607a      	str	r2, [r7, #4]
1000339c:	603b      	str	r3, [r7, #0]
    uint32_t ref_freq = XOSC_HZ / refdiv;
1000339e:	4a4c      	ldr	r2, [pc, #304]	@ (100034d0 <pll_init+0x140>)
100033a0:	68bb      	ldr	r3, [r7, #8]
100033a2:	fbb2 f3f3 	udiv	r3, r2, r3
100033a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Check vco freq is in an acceptable range
    assert(vco_freq >= PICO_PLL_VCO_MIN_FREQ_HZ && vco_freq <= PICO_PLL_VCO_MAX_FREQ_HZ);
100033a8:	687b      	ldr	r3, [r7, #4]
100033aa:	4a4a      	ldr	r2, [pc, #296]	@ (100034d4 <pll_init+0x144>)
100033ac:	4293      	cmp	r3, r2
100033ae:	d903      	bls.n	100033b8 <pll_init+0x28>
100033b0:	687b      	ldr	r3, [r7, #4]
100033b2:	4a49      	ldr	r2, [pc, #292]	@ (100034d8 <pll_init+0x148>)
100033b4:	4293      	cmp	r3, r2
100033b6:	d905      	bls.n	100033c4 <pll_init+0x34>
100033b8:	4b48      	ldr	r3, [pc, #288]	@ (100034dc <pll_init+0x14c>)
100033ba:	4a49      	ldr	r2, [pc, #292]	@ (100034e0 <pll_init+0x150>)
100033bc:	2111      	movs	r1, #17
100033be:	4849      	ldr	r0, [pc, #292]	@ (100034e4 <pll_init+0x154>)
100033c0:	f002 fa58 	bl	10005874 <__assert_func>

    // What are we multiplying the reference clock by to get the vco freq
    // (The regs are called div, because you divide the vco output and compare it to the refclk)
    uint32_t fbdiv = vco_freq / ref_freq;
100033c4:	687a      	ldr	r2, [r7, #4]
100033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100033c8:	fbb2 f3f3 	udiv	r3, r2, r3
100033cc:	62bb      	str	r3, [r7, #40]	@ 0x28
/// \end::pll_init_calculations[]

    // fbdiv
    assert(fbdiv >= 16 && fbdiv <= 320);
100033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100033d0:	2b0f      	cmp	r3, #15
100033d2:	d903      	bls.n	100033dc <pll_init+0x4c>
100033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100033d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
100033da:	d905      	bls.n	100033e8 <pll_init+0x58>
100033dc:	4b42      	ldr	r3, [pc, #264]	@ (100034e8 <pll_init+0x158>)
100033de:	4a40      	ldr	r2, [pc, #256]	@ (100034e0 <pll_init+0x150>)
100033e0:	2119      	movs	r1, #25
100033e2:	4840      	ldr	r0, [pc, #256]	@ (100034e4 <pll_init+0x154>)
100033e4:	f002 fa46 	bl	10005874 <__assert_func>

    // Check divider ranges
    assert((post_div1 >= 1 && post_div1 <= 7) && (post_div2 >= 1 && post_div2 <= 7));
100033e8:	683b      	ldr	r3, [r7, #0]
100033ea:	2b00      	cmp	r3, #0
100033ec:	d008      	beq.n	10003400 <pll_init+0x70>
100033ee:	683b      	ldr	r3, [r7, #0]
100033f0:	2b07      	cmp	r3, #7
100033f2:	d805      	bhi.n	10003400 <pll_init+0x70>
100033f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100033f6:	2b00      	cmp	r3, #0
100033f8:	d002      	beq.n	10003400 <pll_init+0x70>
100033fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100033fc:	2b07      	cmp	r3, #7
100033fe:	d905      	bls.n	1000340c <pll_init+0x7c>
10003400:	4b3a      	ldr	r3, [pc, #232]	@ (100034ec <pll_init+0x15c>)
10003402:	4a37      	ldr	r2, [pc, #220]	@ (100034e0 <pll_init+0x150>)
10003404:	211c      	movs	r1, #28
10003406:	4837      	ldr	r0, [pc, #220]	@ (100034e4 <pll_init+0x154>)
10003408:	f002 fa34 	bl	10005874 <__assert_func>
    // post_div1 should be >= post_div2
    // from appnote page 11
    // postdiv1 is designed to operate with a higher input frequency than postdiv2

    // Check that reference frequency is no greater than vco / 16
    assert(ref_freq <= (vco_freq / 16));
1000340c:	687b      	ldr	r3, [r7, #4]
1000340e:	091b      	lsrs	r3, r3, #4
10003410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10003412:	429a      	cmp	r2, r3
10003414:	d905      	bls.n	10003422 <pll_init+0x92>
10003416:	4b36      	ldr	r3, [pc, #216]	@ (100034f0 <pll_init+0x160>)
10003418:	4a31      	ldr	r2, [pc, #196]	@ (100034e0 <pll_init+0x150>)
1000341a:	2123      	movs	r1, #35	@ 0x23
1000341c:	4831      	ldr	r0, [pc, #196]	@ (100034e4 <pll_init+0x154>)
1000341e:	f002 fa29 	bl	10005874 <__assert_func>

    // div1 feeds into div2 so if div1 is 5 and div2 is 2 then you get a divide by 10
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
10003422:	683b      	ldr	r3, [r7, #0]
10003424:	041a      	lsls	r2, r3, #16
                    (post_div2 << PLL_PRIM_POSTDIV2_LSB);
10003426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10003428:	031b      	lsls	r3, r3, #12
    uint32_t pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB) |
1000342a:	4313      	orrs	r3, r2
1000342c:	627b      	str	r3, [r7, #36]	@ 0x24

/// \tag::pll_init_finish[]
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000342e:	68fb      	ldr	r3, [r7, #12]
10003430:	681b      	ldr	r3, [r3, #0]
10003432:	2b00      	cmp	r3, #0
10003434:	da14      	bge.n	10003460 <pll_init+0xd0>
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
10003436:	68fb      	ldr	r3, [r7, #12]
10003438:	681b      	ldr	r3, [r3, #0]
1000343a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
    if ((pll->cs & PLL_CS_LOCK_BITS) &&
1000343e:	68ba      	ldr	r2, [r7, #8]
10003440:	429a      	cmp	r2, r3
10003442:	d10d      	bne.n	10003460 <pll_init+0xd0>
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
10003444:	68fb      	ldr	r3, [r7, #12]
10003446:	689b      	ldr	r3, [r3, #8]
10003448:	f3c3 030b 	ubfx	r3, r3, #0, #12
        (refdiv == (pll->cs & PLL_CS_REFDIV_BITS)) &&
1000344c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000344e:	429a      	cmp	r2, r3
10003450:	d106      	bne.n	10003460 <pll_init+0xd0>
        (pdiv   == (pll->prim & (PLL_PRIM_POSTDIV1_BITS | PLL_PRIM_POSTDIV2_BITS)))) {
10003452:	68fb      	ldr	r3, [r7, #12]
10003454:	68db      	ldr	r3, [r3, #12]
10003456:	f403 23ee 	and.w	r3, r3, #487424	@ 0x77000
        (fbdiv  == (pll->fbdiv_int & PLL_FBDIV_INT_BITS)) &&
1000345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1000345c:	429a      	cmp	r2, r3
1000345e:	d032      	beq.n	100034c6 <pll_init+0x136>
        // do not disrupt PLL that is already correctly configured and operating
        return;
    }

    reset_unreset_block_num_wait_blocking(PLL_RESET_NUM(pll));
10003460:	68fb      	ldr	r3, [r7, #12]
10003462:	4a24      	ldr	r2, [pc, #144]	@ (100034f4 <pll_init+0x164>)
10003464:	4293      	cmp	r3, r2
10003466:	d101      	bne.n	1000346c <pll_init+0xdc>
10003468:	230f      	movs	r3, #15
1000346a:	e000      	b.n	1000346e <pll_init+0xde>
1000346c:	230e      	movs	r3, #14
1000346e:	4618      	mov	r0, r3
10003470:	f7ff ff4e 	bl	10003310 <reset_unreset_block_num_wait_blocking>

    // Load VCO-related dividers before starting VCO
    pll->cs = refdiv;
10003474:	68fb      	ldr	r3, [r7, #12]
10003476:	68ba      	ldr	r2, [r7, #8]
10003478:	601a      	str	r2, [r3, #0]
    pll->fbdiv_int = fbdiv;
1000347a:	68fb      	ldr	r3, [r7, #12]
1000347c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000347e:	609a      	str	r2, [r3, #8]

    // Turn on PLL
    uint32_t power = PLL_PWR_PD_BITS | // Main power
10003480:	2321      	movs	r3, #33	@ 0x21
10003482:	623b      	str	r3, [r7, #32]
                     PLL_PWR_VCOPD_BITS; // VCO Power

    hw_clear_bits(&pll->pwr, power);
10003484:	68fb      	ldr	r3, [r7, #12]
10003486:	3304      	adds	r3, #4
10003488:	61fb      	str	r3, [r7, #28]
1000348a:	6a3b      	ldr	r3, [r7, #32]
1000348c:	61bb      	str	r3, [r7, #24]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000348e:	69fb      	ldr	r3, [r7, #28]
10003490:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003494:	461a      	mov	r2, r3
10003496:	69bb      	ldr	r3, [r7, #24]
10003498:	6013      	str	r3, [r2, #0]
}
1000349a:	bf00      	nop

    // Wait for PLL to lock
    while (!(pll->cs & PLL_CS_LOCK_BITS)) tight_loop_contents();
1000349c:	e000      	b.n	100034a0 <pll_init+0x110>
1000349e:	bf00      	nop
100034a0:	68fb      	ldr	r3, [r7, #12]
100034a2:	681b      	ldr	r3, [r3, #0]
100034a4:	2b00      	cmp	r3, #0
100034a6:	dafa      	bge.n	1000349e <pll_init+0x10e>

    // Set up post dividers
    pll->prim = pdiv;
100034a8:	68fb      	ldr	r3, [r7, #12]
100034aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100034ac:	60da      	str	r2, [r3, #12]

    // Turn on post divider
    hw_clear_bits(&pll->pwr, PLL_PWR_POSTDIVPD_BITS);
100034ae:	68fb      	ldr	r3, [r7, #12]
100034b0:	3304      	adds	r3, #4
100034b2:	617b      	str	r3, [r7, #20]
100034b4:	2308      	movs	r3, #8
100034b6:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100034b8:	697b      	ldr	r3, [r7, #20]
100034ba:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
100034be:	461a      	mov	r2, r3
100034c0:	693b      	ldr	r3, [r7, #16]
100034c2:	6013      	str	r3, [r2, #0]
}
100034c4:	e000      	b.n	100034c8 <pll_init+0x138>
        return;
100034c6:	bf00      	nop
/// \end::pll_init_finish[]
}
100034c8:	3730      	adds	r7, #48	@ 0x30
100034ca:	46bd      	mov	sp, r7
100034cc:	bd80      	pop	{r7, pc}
100034ce:	bf00      	nop
100034d0:	00b71b00 	.word	0x00b71b00
100034d4:	2cb4177f 	.word	0x2cb4177f
100034d8:	5f5e1000 	.word	0x5f5e1000
100034dc:	1000b7bc 	.word	0x1000b7bc
100034e0:	1000b8d0 	.word	0x1000b8d0
100034e4:	1000b80c 	.word	0x1000b80c
100034e8:	1000b84c 	.word	0x1000b84c
100034ec:	1000b868 	.word	0x1000b868
100034f0:	1000b8b4 	.word	0x1000b8b4
100034f4:	40058000 	.word	0x40058000

100034f8 <watchdog_update>:
// Value to load when updating the watchdog

// tag::watchdog_update[]
static uint32_t load_value;

void watchdog_update(void) {
100034f8:	b480      	push	{r7}
100034fa:	af00      	add	r7, sp, #0
    watchdog_hw->load = load_value;
100034fc:	4a04      	ldr	r2, [pc, #16]	@ (10003510 <watchdog_update+0x18>)
100034fe:	4b05      	ldr	r3, [pc, #20]	@ (10003514 <watchdog_update+0x1c>)
10003500:	681b      	ldr	r3, [r3, #0]
10003502:	6053      	str	r3, [r2, #4]
}
10003504:	bf00      	nop
10003506:	46bd      	mov	sp, r7
10003508:	f85d 7b04 	ldr.w	r7, [sp], #4
1000350c:	4770      	bx	lr
1000350e:	bf00      	nop
10003510:	400d8000 	.word	0x400d8000
10003514:	20002510 	.word	0x20002510

10003518 <_watchdog_enable>:
#else
#define WATCHDOG_XFACTOR 1
#endif
// tag::watchdog_enable[]
// Helper function used by both watchdog_enable and watchdog_reboot
void _watchdog_enable(uint32_t delay_ms, bool pause_on_debug) {
10003518:	b580      	push	{r7, lr}
1000351a:	b090      	sub	sp, #64	@ 0x40
1000351c:	af00      	add	r7, sp, #0
1000351e:	6078      	str	r0, [r7, #4]
10003520:	460b      	mov	r3, r1
10003522:	70fb      	strb	r3, [r7, #3]
10003524:	4b31      	ldr	r3, [pc, #196]	@ (100035ec <_watchdog_enable+0xd4>)
10003526:	633b      	str	r3, [r7, #48]	@ 0x30
10003528:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
1000352c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10003530:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003534:	461a      	mov	r2, r3
10003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10003538:	6013      	str	r3, [r2, #0]
}
1000353a:	bf00      	nop
1000353c:	4b2c      	ldr	r3, [pc, #176]	@ (100035f0 <_watchdog_enable+0xd8>)
1000353e:	63bb      	str	r3, [r7, #56]	@ 0x38
10003540:	4b2c      	ldr	r3, [pc, #176]	@ (100035f4 <_watchdog_enable+0xdc>)
10003542:	637b      	str	r3, [r7, #52]	@ 0x34
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10003546:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
1000354a:	461a      	mov	r2, r3
1000354c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000354e:	6013      	str	r3, [r2, #0]
}
10003550:	bf00      	nop
    hw_clear_bits(&watchdog_hw->ctrl, WATCHDOG_CTRL_ENABLE_BITS);

    // Reset everything apart from ROSC and XOSC
    hw_set_bits(&psm_hw->wdsel, PSM_WDSEL_BITS & ~(PSM_WDSEL_ROSC_BITS | PSM_WDSEL_XOSC_BITS));

    uint32_t dbg_bits = WATCHDOG_CTRL_PAUSE_DBG0_BITS |
10003552:	f04f 63e0 	mov.w	r3, #117440512	@ 0x7000000
10003556:	63fb      	str	r3, [r7, #60]	@ 0x3c
                        WATCHDOG_CTRL_PAUSE_DBG1_BITS |
                        WATCHDOG_CTRL_PAUSE_JTAG_BITS;

    if (pause_on_debug) {
10003558:	78fb      	ldrb	r3, [r7, #3]
1000355a:	2b00      	cmp	r3, #0
1000355c:	d00a      	beq.n	10003574 <_watchdog_enable+0x5c>
1000355e:	4b23      	ldr	r3, [pc, #140]	@ (100035ec <_watchdog_enable+0xd4>)
10003560:	62bb      	str	r3, [r7, #40]	@ 0x28
10003562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10003564:	627b      	str	r3, [r7, #36]	@ 0x24
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10003568:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
1000356c:	461a      	mov	r2, r3
1000356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10003570:	6013      	str	r3, [r2, #0]
}
10003572:	e00a      	b.n	1000358a <_watchdog_enable+0x72>
10003574:	4b1d      	ldr	r3, [pc, #116]	@ (100035ec <_watchdog_enable+0xd4>)
10003576:	623b      	str	r3, [r7, #32]
10003578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1000357a:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000357c:	6a3b      	ldr	r3, [r7, #32]
1000357e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003582:	461a      	mov	r2, r3
10003584:	69fb      	ldr	r3, [r7, #28]
10003586:	6013      	str	r3, [r2, #0]
}
10003588:	bf00      	nop
        hw_set_bits(&watchdog_hw->ctrl, dbg_bits);
    } else {
        hw_clear_bits(&watchdog_hw->ctrl, dbg_bits);
    }

    if (!delay_ms) {
1000358a:	687b      	ldr	r3, [r7, #4]
1000358c:	2b00      	cmp	r3, #0
1000358e:	d10b      	bne.n	100035a8 <_watchdog_enable+0x90>
10003590:	4b16      	ldr	r3, [pc, #88]	@ (100035ec <_watchdog_enable+0xd4>)
10003592:	61bb      	str	r3, [r7, #24]
10003594:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
10003598:	617b      	str	r3, [r7, #20]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000359a:	69bb      	ldr	r3, [r7, #24]
1000359c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100035a0:	461a      	mov	r2, r3
100035a2:	697b      	ldr	r3, [r7, #20]
100035a4:	6013      	str	r3, [r2, #0]
}
100035a6:	e01d      	b.n	100035e4 <_watchdog_enable+0xcc>
        hw_set_bits(&watchdog_hw->ctrl, WATCHDOG_CTRL_TRIGGER_BITS);
    } else {
        load_value = delay_ms * 1000;
100035a8:	687b      	ldr	r3, [r7, #4]
100035aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
100035ae:	fb02 f303 	mul.w	r3, r2, r3
100035b2:	4a11      	ldr	r2, [pc, #68]	@ (100035f8 <_watchdog_enable+0xe0>)
100035b4:	6013      	str	r3, [r2, #0]
#if PICO_RP2040
        load_value *= 2;
#endif
        if (load_value > WATCHDOG_LOAD_BITS)
100035b6:	4b10      	ldr	r3, [pc, #64]	@ (100035f8 <_watchdog_enable+0xe0>)
100035b8:	681b      	ldr	r3, [r3, #0]
100035ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
100035be:	d303      	bcc.n	100035c8 <_watchdog_enable+0xb0>
            load_value = WATCHDOG_LOAD_BITS;
100035c0:	4b0d      	ldr	r3, [pc, #52]	@ (100035f8 <_watchdog_enable+0xe0>)
100035c2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
100035c6:	601a      	str	r2, [r3, #0]

        watchdog_update();
100035c8:	f7ff ff96 	bl	100034f8 <watchdog_update>
100035cc:	4b07      	ldr	r3, [pc, #28]	@ (100035ec <_watchdog_enable+0xd4>)
100035ce:	613b      	str	r3, [r7, #16]
100035d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
100035d4:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100035d6:	693b      	ldr	r3, [r7, #16]
100035d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100035dc:	461a      	mov	r2, r3
100035de:	68fb      	ldr	r3, [r7, #12]
100035e0:	6013      	str	r3, [r2, #0]
}
100035e2:	bf00      	nop

        hw_set_bits(&watchdog_hw->ctrl, WATCHDOG_CTRL_ENABLE_BITS);
    }
}
100035e4:	bf00      	nop
100035e6:	3740      	adds	r7, #64	@ 0x40
100035e8:	46bd      	mov	sp, r7
100035ea:	bd80      	pop	{r7, pc}
100035ec:	400d8000 	.word	0x400d8000
100035f0:	40018008 	.word	0x40018008
100035f4:	01fffff3 	.word	0x01fffff3
100035f8:	20002510 	.word	0x20002510

100035fc <watchdog_enable>:
// end::watchdog_enable[]

#define WATCHDOG_NON_REBOOT_MAGIC 0x6ab73121

void watchdog_enable(uint32_t delay_ms, bool pause_on_debug) {
100035fc:	b580      	push	{r7, lr}
100035fe:	b082      	sub	sp, #8
10003600:	af00      	add	r7, sp, #0
10003602:	6078      	str	r0, [r7, #4]
10003604:	460b      	mov	r3, r1
10003606:	70fb      	strb	r3, [r7, #3]
    // update scratch[4] to distinguish from magic used for reboot to specific address, or 0 used to reboot
    // into regular flash path
    watchdog_hw->scratch[4] = WATCHDOG_NON_REBOOT_MAGIC;
10003608:	4b05      	ldr	r3, [pc, #20]	@ (10003620 <watchdog_enable+0x24>)
1000360a:	4a06      	ldr	r2, [pc, #24]	@ (10003624 <watchdog_enable+0x28>)
1000360c:	61da      	str	r2, [r3, #28]
    _watchdog_enable(delay_ms, pause_on_debug);
1000360e:	78fb      	ldrb	r3, [r7, #3]
10003610:	4619      	mov	r1, r3
10003612:	6878      	ldr	r0, [r7, #4]
10003614:	f7ff ff80 	bl	10003518 <_watchdog_enable>
}
10003618:	bf00      	nop
1000361a:	3708      	adds	r7, #8
1000361c:	46bd      	mov	sp, r7
1000361e:	bd80      	pop	{r7, pc}
10003620:	400d8000 	.word	0x400d8000
10003624:	6ab73121 	.word	0x6ab73121

10003628 <watchdog_reboot>:

void watchdog_disable(void) {
    hw_clear_bits(&watchdog_hw->ctrl, WATCHDOG_CTRL_ENABLE_BITS);
}

void watchdog_reboot(uint32_t pc, uint32_t sp, uint32_t delay_ms) {
10003628:	b580      	push	{r7, lr}
1000362a:	b086      	sub	sp, #24
1000362c:	af00      	add	r7, sp, #0
1000362e:	60f8      	str	r0, [r7, #12]
10003630:	60b9      	str	r1, [r7, #8]
10003632:	607a      	str	r2, [r7, #4]
10003634:	4b16      	ldr	r3, [pc, #88]	@ (10003690 <watchdog_reboot+0x68>)
10003636:	617b      	str	r3, [r7, #20]
10003638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
1000363c:	613b      	str	r3, [r7, #16]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000363e:	697b      	ldr	r3, [r7, #20]
10003640:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003644:	461a      	mov	r2, r3
10003646:	693b      	ldr	r3, [r7, #16]
10003648:	6013      	str	r3, [r2, #0]
}
1000364a:	bf00      	nop
    check_hw_layout(watchdog_hw_t, scratch[7], WATCHDOG_SCRATCH7_OFFSET);

    // Clear enable before setting up scratch registers
    hw_clear_bits(&watchdog_hw->ctrl, WATCHDOG_CTRL_ENABLE_BITS);

    if (pc) {
1000364c:	68fb      	ldr	r3, [r7, #12]
1000364e:	2b00      	cmp	r3, #0
10003650:	d012      	beq.n	10003678 <watchdog_reboot+0x50>
#ifndef __riscv
        pc |= 1u; // thumb mode
10003652:	68fb      	ldr	r3, [r7, #12]
10003654:	f043 0301 	orr.w	r3, r3, #1
10003658:	60fb      	str	r3, [r7, #12]
#endif
        watchdog_hw->scratch[4] = 0xb007c0d3;
1000365a:	4b0d      	ldr	r3, [pc, #52]	@ (10003690 <watchdog_reboot+0x68>)
1000365c:	4a0d      	ldr	r2, [pc, #52]	@ (10003694 <watchdog_reboot+0x6c>)
1000365e:	61da      	str	r2, [r3, #28]
        watchdog_hw->scratch[5] = pc ^ -0xb007c0d3;
10003660:	490b      	ldr	r1, [pc, #44]	@ (10003690 <watchdog_reboot+0x68>)
10003662:	68fa      	ldr	r2, [r7, #12]
10003664:	4b0c      	ldr	r3, [pc, #48]	@ (10003698 <watchdog_reboot+0x70>)
10003666:	4053      	eors	r3, r2
10003668:	620b      	str	r3, [r1, #32]
        watchdog_hw->scratch[6] = sp;
1000366a:	4a09      	ldr	r2, [pc, #36]	@ (10003690 <watchdog_reboot+0x68>)
1000366c:	68bb      	ldr	r3, [r7, #8]
1000366e:	6253      	str	r3, [r2, #36]	@ 0x24
        watchdog_hw->scratch[7] = pc;
10003670:	4a07      	ldr	r2, [pc, #28]	@ (10003690 <watchdog_reboot+0x68>)
10003672:	68fb      	ldr	r3, [r7, #12]
10003674:	6293      	str	r3, [r2, #40]	@ 0x28
10003676:	e002      	b.n	1000367e <watchdog_reboot+0x56>
//        printf("rebooting %08x/%08x in %dms...\n", (uint) pc, (uint) sp, (uint) delay_ms);
    } else {
        watchdog_hw->scratch[4] = 0;
10003678:	4b05      	ldr	r3, [pc, #20]	@ (10003690 <watchdog_reboot+0x68>)
1000367a:	2200      	movs	r2, #0
1000367c:	61da      	str	r2, [r3, #28]
//        printf("rebooting (regular)) in %dms...\n", (uint) delay_ms);
    }

    // Don't pause watchdog for debug
    _watchdog_enable(delay_ms, 0);
1000367e:	2100      	movs	r1, #0
10003680:	6878      	ldr	r0, [r7, #4]
10003682:	f7ff ff49 	bl	10003518 <_watchdog_enable>
}
10003686:	bf00      	nop
10003688:	3718      	adds	r7, #24
1000368a:	46bd      	mov	sp, r7
1000368c:	bd80      	pop	{r7, pc}
1000368e:	bf00      	nop
10003690:	400d8000 	.word	0x400d8000
10003694:	b007c0d3 	.word	0xb007c0d3
10003698:	4ff83f2d 	.word	0x4ff83f2d

1000369c <tick_start>:
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include "hardware/ticks.h"

void tick_start(tick_gen_num_t tick, uint cycles) {
1000369c:	b480      	push	{r7}
1000369e:	b083      	sub	sp, #12
100036a0:	af00      	add	r7, sp, #0
100036a2:	4603      	mov	r3, r0
100036a4:	6039      	str	r1, [r7, #0]
100036a6:	71fb      	strb	r3, [r7, #7]
    watchdog_hw->tick = cycles | WATCHDOG_TICK_ENABLE_BITS;
#else
    cycles <<= TICKS_WATCHDOG_CYCLES_LSB;
    valid_params_if(HARDWARE_TICKS, cycles <= TICKS_WATCHDOG_CYCLES_BITS);
    // On later hardware, separate tick generators for every tick destination.
    ticks_hw->ticks[tick].cycles = cycles;
100036a8:	490c      	ldr	r1, [pc, #48]	@ (100036dc <tick_start+0x40>)
100036aa:	79fa      	ldrb	r2, [r7, #7]
100036ac:	4613      	mov	r3, r2
100036ae:	005b      	lsls	r3, r3, #1
100036b0:	4413      	add	r3, r2
100036b2:	009b      	lsls	r3, r3, #2
100036b4:	440b      	add	r3, r1
100036b6:	3304      	adds	r3, #4
100036b8:	683a      	ldr	r2, [r7, #0]
100036ba:	601a      	str	r2, [r3, #0]
    ticks_hw->ticks[tick].ctrl = TICKS_WATCHDOG_CTRL_ENABLE_BITS;
100036bc:	4907      	ldr	r1, [pc, #28]	@ (100036dc <tick_start+0x40>)
100036be:	79fa      	ldrb	r2, [r7, #7]
100036c0:	4613      	mov	r3, r2
100036c2:	005b      	lsls	r3, r3, #1
100036c4:	4413      	add	r3, r2
100036c6:	009b      	lsls	r3, r3, #2
100036c8:	440b      	add	r3, r1
100036ca:	2201      	movs	r2, #1
100036cc:	601a      	str	r2, [r3, #0]
#endif
}
100036ce:	bf00      	nop
100036d0:	370c      	adds	r7, #12
100036d2:	46bd      	mov	sp, r7
100036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
100036d8:	4770      	bx	lr
100036da:	bf00      	nop
100036dc:	40108000 	.word	0x40108000

100036e0 <xosc_init>:
// The DELAY field in xosc_hw->startup is 14 bits wide.
#if STARTUP_DELAY >= (1 << 13)
#error PICO_XOSC_STARTUP_DELAY_MULTIPLIER is too large: XOSC STARTUP.DELAY must be < 8192
#endif

void xosc_init(void) {
100036e0:	b480      	push	{r7}
100036e2:	b083      	sub	sp, #12
100036e4:	af00      	add	r7, sp, #0
    // Assumes 1-15 MHz input, checked above.
    xosc_hw->ctrl = XOSC_CTRL_FREQ_RANGE_VALUE_1_15MHZ;
100036e6:	4b0f      	ldr	r3, [pc, #60]	@ (10003724 <xosc_init+0x44>)
100036e8:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
100036ec:	601a      	str	r2, [r3, #0]

    // Set xosc startup delay
    xosc_hw->startup = STARTUP_DELAY;
100036ee:	4b0d      	ldr	r3, [pc, #52]	@ (10003724 <xosc_init+0x44>)
100036f0:	222f      	movs	r2, #47	@ 0x2f
100036f2:	60da      	str	r2, [r3, #12]
100036f4:	4b0b      	ldr	r3, [pc, #44]	@ (10003724 <xosc_init+0x44>)
100036f6:	607b      	str	r3, [r7, #4]
100036f8:	4b0b      	ldr	r3, [pc, #44]	@ (10003728 <xosc_init+0x48>)
100036fa:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100036fc:	687b      	ldr	r3, [r7, #4]
100036fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10003702:	461a      	mov	r2, r3
10003704:	683b      	ldr	r3, [r7, #0]
10003706:	6013      	str	r3, [r2, #0]
}
10003708:	bf00      	nop

    // Set the enable bit now that we have set freq range and startup delay
    hw_set_bits(&xosc_hw->ctrl, XOSC_CTRL_ENABLE_VALUE_ENABLE << XOSC_CTRL_ENABLE_LSB);

    // Wait for XOSC to be stable
    while(!(xosc_hw->status & XOSC_STATUS_STABLE_BITS)) {
1000370a:	e000      	b.n	1000370e <xosc_init+0x2e>
1000370c:	bf00      	nop
1000370e:	4b05      	ldr	r3, [pc, #20]	@ (10003724 <xosc_init+0x44>)
10003710:	685b      	ldr	r3, [r3, #4]
10003712:	2b00      	cmp	r3, #0
10003714:	dafa      	bge.n	1000370c <xosc_init+0x2c>
        tight_loop_contents();
    }
}
10003716:	bf00      	nop
10003718:	bf00      	nop
1000371a:	370c      	adds	r7, #12
1000371c:	46bd      	mov	sp, r7
1000371e:	f85d 7b04 	ldr.w	r7, [sp], #4
10003722:	4770      	bx	lr
10003724:	40048000 	.word	0x40048000
10003728:	00fab000 	.word	0x00fab000

1000372c <runtime_run_initializers_from>:

void __weak hard_assertion_failure(void) {
    panic("Hard assert");
}

static void runtime_run_initializers_from(uintptr_t *from) {
1000372c:	b580      	push	{r7, lr}
1000372e:	b084      	sub	sp, #16
10003730:	af00      	add	r7, sp, #0
10003732:	6078      	str	r0, [r7, #4]
    extern uintptr_t __preinit_array_end;

    // Call each function in the list, based on the mask
    // We have to take the address of the symbols, as __preinit_array_start *is*
    // the first function value, not the address of it.
    for (uintptr_t *p = from; p < &__preinit_array_end; p++) {
10003734:	687b      	ldr	r3, [r7, #4]
10003736:	60fb      	str	r3, [r7, #12]
10003738:	e007      	b.n	1000374a <runtime_run_initializers_from+0x1e>
        uintptr_t val = *p;
1000373a:	68fb      	ldr	r3, [r7, #12]
1000373c:	681b      	ldr	r3, [r3, #0]
1000373e:	60bb      	str	r3, [r7, #8]
        ((void (*)(void))val)();
10003740:	68bb      	ldr	r3, [r7, #8]
10003742:	4798      	blx	r3
    for (uintptr_t *p = from; p < &__preinit_array_end; p++) {
10003744:	68fb      	ldr	r3, [r7, #12]
10003746:	3304      	adds	r3, #4
10003748:	60fb      	str	r3, [r7, #12]
1000374a:	68fb      	ldr	r3, [r7, #12]
1000374c:	4a03      	ldr	r2, [pc, #12]	@ (1000375c <runtime_run_initializers_from+0x30>)
1000374e:	4293      	cmp	r3, r2
10003750:	d3f3      	bcc.n	1000373a <runtime_run_initializers_from+0xe>
    }
}
10003752:	bf00      	nop
10003754:	bf00      	nop
10003756:	3710      	adds	r7, #16
10003758:	46bd      	mov	sp, r7
1000375a:	bd80      	pop	{r7, pc}
1000375c:	1000b1c0 	.word	0x1000b1c0

10003760 <runtime_run_initializers>:

void runtime_run_initializers(void) {
10003760:	b580      	push	{r7, lr}
10003762:	af00      	add	r7, sp, #0
    extern uintptr_t __preinit_array_start;
    runtime_run_initializers_from(&__preinit_array_start);
10003764:	4802      	ldr	r0, [pc, #8]	@ (10003770 <runtime_run_initializers+0x10>)
10003766:	f7ff ffe1 	bl	1000372c <runtime_run_initializers_from>
}
1000376a:	bf00      	nop
1000376c:	bd80      	pop	{r7, pc}
1000376e:	bf00      	nop
10003770:	1000b180 	.word	0x1000b180

10003774 <first_per_core_initializer>:
//
// We create a dummy initializer in __preinit_array.YYYYY (between the standard initializers
// and the per core initializers), so we find the first per core initializer. Whilst we could
// have done this via an entry in the linker script, we want to preserve backwards compatibility
// with RP2040 custom linker scripts.
static void first_per_core_initializer(void) {}
10003774:	b480      	push	{r7}
10003776:	af00      	add	r7, sp, #0
10003778:	bf00      	nop
1000377a:	46bd      	mov	sp, r7
1000377c:	f85d 7b04 	ldr.w	r7, [sp], #4
10003780:	4770      	bx	lr

10003782 <runtime_init_bootrom_reset>:
// -------------------------------------
// 00050 PICO_RUNTIME_INIT_BOOTROM_RESET
// -------------------------------------
#if !PICO_RUNTIME_NO_INIT_BOOTROM_RESET
#include "pico/bootrom.h"
void __weak runtime_init_bootrom_reset(void) {
10003782:	b580      	push	{r7, lr}
10003784:	b082      	sub	sp, #8
10003786:	af00      	add	r7, sp, #0
    // todo can we tell if we came in thru the bootrom where this is not necessary (this is necessary for debugger)
    rom_bootrom_state_reset_fn state_reset = rom_func_lookup(ROM_FUNC_BOOTROM_STATE_RESET);
10003788:	f245 2053 	movw	r0, #21075	@ 0x5253
1000378c:	f000 f9db 	bl	10003b46 <rom_func_lookup>
10003790:	4603      	mov	r3, r0
10003792:	607b      	str	r3, [r7, #4]
    state_reset(BOOTROM_STATE_RESET_GLOBAL_STATE);
10003794:	687b      	ldr	r3, [r7, #4]
10003796:	2004      	movs	r0, #4
10003798:	4798      	blx	r3
}
1000379a:	bf00      	nop
1000379c:	3708      	adds	r7, #8
1000379e:	46bd      	mov	sp, r7
100037a0:	bd80      	pop	{r7, pc}

100037a2 <runtime_init_per_core_bootrom_reset>:
// ----------------------------------------------
// 00051 PICO_RUNTIME_INIT_PER_CORE_BOOTROM_RESET
// ----------------------------------------------
#if !PICO_RUNTIME_NO_INIT_PER_CORE_BOOTROM_RESET
#include "pico/bootrom.h"
void __weak runtime_init_per_core_bootrom_reset(void) {
100037a2:	b580      	push	{r7, lr}
100037a4:	b082      	sub	sp, #8
100037a6:	af00      	add	r7, sp, #0
    // todo can we tell if we came in thru the bootrom where this is not necessary (this is necessary for debugger)
    rom_bootrom_state_reset_fn state_reset = rom_func_lookup(ROM_FUNC_BOOTROM_STATE_RESET);
100037a8:	f245 2053 	movw	r0, #21075	@ 0x5253
100037ac:	f000 f9cb 	bl	10003b46 <rom_func_lookup>
100037b0:	4603      	mov	r3, r0
100037b2:	607b      	str	r3, [r7, #4]
    state_reset(BOOTROM_STATE_RESET_CURRENT_CORE);
100037b4:	687b      	ldr	r3, [r7, #4]
100037b6:	2001      	movs	r0, #1
100037b8:	4798      	blx	r3
}
100037ba:	bf00      	nop
100037bc:	3708      	adds	r7, #8
100037be:	46bd      	mov	sp, r7
100037c0:	bd80      	pop	{r7, pc}
	...

100037c4 <runtime_init_early_resets>:
// ------------------------------------
// 00100 PICO_RUNTIME_INIT_EARLY_RESETS
// ------------------------------------
#if !PICO_RUNTIME_NO_INIT_EARLY_RESETS
#include "hardware/resets.h"
void __weak runtime_init_early_resets(void) {
100037c4:	b480      	push	{r7}
100037c6:	b08d      	sub	sp, #52	@ 0x34
100037c8:	af00      	add	r7, sp, #0
100037ca:	4b1b      	ldr	r3, [pc, #108]	@ (10003838 <runtime_init_early_resets+0x74>)
100037cc:	617b      	str	r3, [r7, #20]
100037ce:	4b1b      	ldr	r3, [pc, #108]	@ (1000383c <runtime_init_early_resets+0x78>)
100037d0:	613b      	str	r3, [r7, #16]
100037d2:	697b      	ldr	r3, [r7, #20]
100037d4:	60fb      	str	r3, [r7, #12]
100037d6:	693b      	ldr	r3, [r7, #16]
100037d8:	60bb      	str	r3, [r7, #8]
100037da:	68fb      	ldr	r3, [r7, #12]
100037dc:	607b      	str	r3, [r7, #4]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100037de:	68bb      	ldr	r3, [r7, #8]
100037e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100037e4:	461a      	mov	r2, r3
100037e6:	687b      	ldr	r3, [r7, #4]
100037e8:	6013      	str	r3, [r2, #0]
}
100037ea:	bf00      	nop
}
100037ec:	bf00      	nop
}
100037ee:	bf00      	nop
100037f0:	4b13      	ldr	r3, [pc, #76]	@ (10003840 <runtime_init_early_resets+0x7c>)
100037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
100037f4:	4b11      	ldr	r3, [pc, #68]	@ (1000383c <runtime_init_early_resets+0x78>)
100037f6:	62bb      	str	r3, [r7, #40]	@ 0x28
100037f8:	4b12      	ldr	r3, [pc, #72]	@ (10003844 <runtime_init_early_resets+0x80>)
100037fa:	627b      	str	r3, [r7, #36]	@ 0x24
100037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100037fe:	623b      	str	r3, [r7, #32]
10003800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10003802:	61fb      	str	r3, [r7, #28]
10003804:	6a3b      	ldr	r3, [r7, #32]
10003806:	61bb      	str	r3, [r7, #24]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003808:	69fb      	ldr	r3, [r7, #28]
1000380a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
1000380e:	461a      	mov	r2, r3
10003810:	69bb      	ldr	r3, [r7, #24]
10003812:	6013      	str	r3, [r2, #0]
}
10003814:	bf00      	nop
    while (~*reset_done & mask)
10003816:	e000      	b.n	1000381a <runtime_init_early_resets+0x56>
10003818:	bf00      	nop
1000381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000381c:	681b      	ldr	r3, [r3, #0]
1000381e:	43da      	mvns	r2, r3
10003820:	6a3b      	ldr	r3, [r7, #32]
10003822:	4013      	ands	r3, r2
10003824:	2b00      	cmp	r3, #0
10003826:	d1f7      	bne.n	10003818 <runtime_init_early_resets+0x54>
}
10003828:	bf00      	nop
}
1000382a:	bf00      	nop
            (1u << RESET_UART0) |
            (1u << RESET_UART1) |
            (1u << RESET_USBCTRL)
    ));

}
1000382c:	bf00      	nop
1000382e:	3734      	adds	r7, #52	@ 0x34
10003830:	46bd      	mov	sp, r7
10003832:	f85d 7b04 	ldr.w	r7, [sp], #4
10003836:	4770      	bx	lr
10003838:	efef3b7f 	.word	0xefef3b7f
1000383c:	40020000 	.word	0x40020000
10003840:	03f3fff6 	.word	0x03f3fff6
10003844:	40020008 	.word	0x40020008

10003848 <runtime_init_usb_power_down>:
PICO_RUNTIME_INIT_FUNC_HW(runtime_init_early_resets, PICO_RUNTIME_INIT_EARLY_RESETS);
#endif

#if !PICO_RUNTIME_NO_INIT_USB_POWER_DOWN
#include "hardware/structs/usb.h"
void __weak runtime_init_usb_power_down(void) {
10003848:	b480      	push	{r7}
1000384a:	b083      	sub	sp, #12
1000384c:	af00      	add	r7, sp, #0
    // Ensure USB PHY is in low-power state -- must be cleared before beginning USB operations. Only
    // do this if USB appears to be in the reset state, to avoid breaking core1-as-debugger.
    if (usb_hw->sie_ctrl == USB_SIE_CTRL_RESET) {
1000384e:	4b0b      	ldr	r3, [pc, #44]	@ (1000387c <runtime_init_usb_power_down+0x34>)
10003850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10003852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
10003856:	d10b      	bne.n	10003870 <runtime_init_usb_power_down+0x28>
10003858:	4b09      	ldr	r3, [pc, #36]	@ (10003880 <runtime_init_usb_power_down+0x38>)
1000385a:	607b      	str	r3, [r7, #4]
1000385c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
10003860:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
10003862:	687b      	ldr	r3, [r7, #4]
10003864:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
10003868:	461a      	mov	r2, r3
1000386a:	683b      	ldr	r3, [r7, #0]
1000386c:	6013      	str	r3, [r2, #0]
}
1000386e:	bf00      	nop
        hw_set_bits(&usb_hw->sie_ctrl, USB_SIE_CTRL_TRANSCEIVER_PD_BITS);
    }
}
10003870:	bf00      	nop
10003872:	370c      	adds	r7, #12
10003874:	46bd      	mov	sp, r7
10003876:	f85d 7b04 	ldr.w	r7, [sp], #4
1000387a:	4770      	bx	lr
1000387c:	50110000 	.word	0x50110000
10003880:	5011004c 	.word	0x5011004c

10003884 <runtime_init_per_core_enable_coprocessors>:
#include "hardware/gpio.h" // PICO_USE_GPIO_COPROCESSOR is defined here
#include "hardware/structs/m33.h"
// ----------------------------------------------------
// 00200 PICO_RUNTIME_INIT_PER_CORE_ENABLE_COPROCESSORS
// ----------------------------------------------------
void __weak runtime_init_per_core_enable_coprocessors(void) {
10003884:	b480      	push	{r7}
10003886:	b083      	sub	sp, #12
10003888:	af00      	add	r7, sp, #0
    // VFP copro (float)
    uint32_t cpacr = M33_CPACR_CP10_BITS;
1000388a:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
1000388e:	607b      	str	r3, [r7, #4]
#if HAS_DOUBLE_COPROCESSOR
    cpacr |= M33_CPACR_CP4_BITS;
10003890:	687b      	ldr	r3, [r7, #4]
10003892:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
10003896:	607b      	str	r3, [r7, #4]
#endif
#if PICO_USE_GPIO_COPROCESSOR
    cpacr |= M33_CPACR_CP0_BITS;
10003898:	687b      	ldr	r3, [r7, #4]
1000389a:	f043 0303 	orr.w	r3, r3, #3
1000389e:	607b      	str	r3, [r7, #4]
#endif
    arm_cpu_hw->cpacr |= cpacr;
100038a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
100038a4:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
100038a8:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
100038ac:	f04f 4160 	mov.w	r1, #3758096384	@ 0xe0000000
100038b0:	687b      	ldr	r3, [r7, #4]
100038b2:	4313      	orrs	r3, r2
100038b4:	f501 4260 	add.w	r2, r1, #57344	@ 0xe000
100038b8:	f8c2 3d88 	str.w	r3, [r2, #3464]	@ 0xd88
#if HAS_DOUBLE_COPROCESSOR
    asm volatile ("mrc p4,#0,r0,c0,c0,#1" : : : "r0"); // clear engaged flag via RCMP
100038bc:	ee10 0430 	cfmvrdh	r0, mvd0
#endif
}
100038c0:	bf00      	nop
100038c2:	370c      	adds	r7, #12
100038c4:	46bd      	mov	sp, r7
100038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
100038ca:	4770      	bx	lr

100038cc <runtime_init_post_clock_resets>:
// ----------------------------------------------------
// 00600 PICO_RUNTIME_INIT_POST_CLOCK_RESETS
// ----------------------------------------------------
#if !PICO_RUNTIME_NO_INIT_POST_CLOCK_RESETS
#include "hardware/resets.h"
void __weak runtime_init_post_clock_resets(void) {
100038cc:	b480      	push	{r7}
100038ce:	b087      	sub	sp, #28
100038d0:	af00      	add	r7, sp, #0
100038d2:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
100038d6:	617b      	str	r3, [r7, #20]
100038d8:	4b10      	ldr	r3, [pc, #64]	@ (1000391c <runtime_init_post_clock_resets+0x50>)
100038da:	613b      	str	r3, [r7, #16]
100038dc:	4b10      	ldr	r3, [pc, #64]	@ (10003920 <runtime_init_post_clock_resets+0x54>)
100038de:	60fb      	str	r3, [r7, #12]
100038e0:	697b      	ldr	r3, [r7, #20]
100038e2:	60bb      	str	r3, [r7, #8]
100038e4:	693b      	ldr	r3, [r7, #16]
100038e6:	607b      	str	r3, [r7, #4]
100038e8:	68bb      	ldr	r3, [r7, #8]
100038ea:	603b      	str	r3, [r7, #0]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100038ec:	687b      	ldr	r3, [r7, #4]
100038ee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
100038f2:	461a      	mov	r2, r3
100038f4:	683b      	ldr	r3, [r7, #0]
100038f6:	6013      	str	r3, [r2, #0]
}
100038f8:	bf00      	nop
    while (~*reset_done & mask)
100038fa:	e000      	b.n	100038fe <runtime_init_post_clock_resets+0x32>
100038fc:	bf00      	nop
100038fe:	68fb      	ldr	r3, [r7, #12]
10003900:	681b      	ldr	r3, [r3, #0]
10003902:	43da      	mvns	r2, r3
10003904:	68bb      	ldr	r3, [r7, #8]
10003906:	4013      	ands	r3, r2
10003908:	2b00      	cmp	r3, #0
1000390a:	d1f7      	bne.n	100038fc <runtime_init_post_clock_resets+0x30>
}
1000390c:	bf00      	nop
}
1000390e:	bf00      	nop
    // Peripheral clocks should now all be running
    static_assert(NUM_RESETS <= 32, "");
    unreset_block_mask_wait_blocking(RESETS_RESET_BITS);
}
10003910:	bf00      	nop
10003912:	371c      	adds	r7, #28
10003914:	46bd      	mov	sp, r7
10003916:	f85d 7b04 	ldr.w	r7, [sp], #4
1000391a:	4770      	bx	lr
1000391c:	40020000 	.word	0x40020000
10003920:	40020008 	.word	0x40020008

10003924 <runtime_init_spin_locks_reset>:
PICO_RUNTIME_INIT_FUNC_HW(runtime_init_rp2040_gpio_ie_disable, PICO_RUNTIME_INIT_RP2040_GPIO_IE_DISABLE);
#endif

#if !PICO_RUNTIME_NO_INIT_SPIN_LOCKS_RESET
#include "hardware/sync.h"
void __weak runtime_init_spin_locks_reset(void) {
10003924:	b580      	push	{r7, lr}
10003926:	af00      	add	r7, sp, #0
    spin_locks_reset();
10003928:	f7fd fade 	bl	10000ee8 <spin_locks_reset>
}
1000392c:	bf00      	nop
1000392e:	bd80      	pop	{r7, pc}

10003930 <runtime_init_install_ram_vector_table>:

#if !PICO_RUNTIME_NO_INIT_INSTALL_RAM_VECTOR_TABLE
uint32_t __attribute__((section(".ram_vector_table"))) ram_vector_table[PICO_RAM_VECTOR_TABLE_SIZE];

#include "hardware/structs/scb.h"
void runtime_init_install_ram_vector_table(void) {
10003930:	b580      	push	{r7, lr}
10003932:	af00      	add	r7, sp, #0
    // Note on RISC-V the RAM vector table is initialised during crt0
#if !(PICO_NO_RAM_VECTOR_TABLE || PICO_NO_FLASH) && !defined(__riscv)
#if !PICO_NO_STORED_VECTOR_TABLE
    __builtin_memcpy(ram_vector_table, (uint32_t *) scb_hw->vtor, sizeof(ram_vector_table));
10003934:	4b07      	ldr	r3, [pc, #28]	@ (10003954 <runtime_init_install_ram_vector_table+0x24>)
10003936:	689b      	ldr	r3, [r3, #8]
10003938:	461a      	mov	r2, r3
1000393a:	4b07      	ldr	r3, [pc, #28]	@ (10003958 <runtime_init_install_ram_vector_table+0x28>)
1000393c:	4618      	mov	r0, r3
1000393e:	4611      	mov	r1, r2
10003940:	f44f 7388 	mov.w	r3, #272	@ 0x110
10003944:	461a      	mov	r2, r3
10003946:	f007 faf7 	bl	1000af38 <memcpy>
    for(uint i = VTABLE_FIRST_IRQ; i<count_of(ram_vector_table); i++) {
        ram_vector_table[i] = (uintptr_t)__unhandled_user_irq;
    }
#endif

    scb_hw->vtor = (uintptr_t) ram_vector_table;
1000394a:	4b02      	ldr	r3, [pc, #8]	@ (10003954 <runtime_init_install_ram_vector_table+0x24>)
1000394c:	4a02      	ldr	r2, [pc, #8]	@ (10003958 <runtime_init_install_ram_vector_table+0x28>)
1000394e:	609a      	str	r2, [r3, #8]
#endif
}
10003950:	bf00      	nop
10003952:	bd80      	pop	{r7, pc}
10003954:	e000ed00 	.word	0xe000ed00
10003958:	20000000 	.word	0x20000000

1000395c <running_on_fpga>:
static inline bool running_on_fpga(void) {return false;}
1000395c:	b480      	push	{r7}
1000395e:	af00      	add	r7, sp, #0
10003960:	2300      	movs	r3, #0
10003962:	4618      	mov	r0, r3
10003964:	46bd      	mov	sp, r7
10003966:	f85d 7b04 	ldr.w	r7, [sp], #4
1000396a:	4770      	bx	lr

1000396c <start_all_ticks>:
// an RTC clock tick of 46875Hz.  This frequency is relatively close to the
// customary 32 or 32.768kHz 'slow clock' crystals and provides good timing resolution.
#define RTC_CLOCK_FREQ_HZ       (USB_CLK_HZ / 1024)
#endif

static void start_all_ticks(void) {
1000396c:	b580      	push	{r7, lr}
1000396e:	b082      	sub	sp, #8
10003970:	af00      	add	r7, sp, #0
    uint32_t cycles = clock_get_hz(clk_ref) / MHZ;
10003972:	2004      	movs	r0, #4
10003974:	f7ff fca6 	bl	100032c4 <clock_get_hz>
10003978:	4603      	mov	r3, r0
1000397a:	4a0c      	ldr	r2, [pc, #48]	@ (100039ac <start_all_ticks+0x40>)
1000397c:	fba2 2303 	umull	r2, r3, r2, r3
10003980:	0c9b      	lsrs	r3, r3, #18
10003982:	603b      	str	r3, [r7, #0]
    // Note RP2040 has a single tick generator in the watchdog which serves
    // watchdog, system timer and M0+ SysTick; The tick generator is clocked from clk_ref
    // but is now adapted by the hardware_ticks library for compatibility with RP2350
    // npte: hardware_ticks library now provides an adapter for RP2040

    for (int i = 0; i < (int)TICK_COUNT; ++i) {
10003984:	2300      	movs	r3, #0
10003986:	607b      	str	r3, [r7, #4]
10003988:	e008      	b.n	1000399c <start_all_ticks+0x30>
        tick_start((tick_gen_num_t)i, cycles);
1000398a:	687b      	ldr	r3, [r7, #4]
1000398c:	b2db      	uxtb	r3, r3
1000398e:	6839      	ldr	r1, [r7, #0]
10003990:	4618      	mov	r0, r3
10003992:	f7ff fe83 	bl	1000369c <tick_start>
    for (int i = 0; i < (int)TICK_COUNT; ++i) {
10003996:	687b      	ldr	r3, [r7, #4]
10003998:	3301      	adds	r3, #1
1000399a:	607b      	str	r3, [r7, #4]
1000399c:	687b      	ldr	r3, [r7, #4]
1000399e:	2b05      	cmp	r3, #5
100039a0:	ddf3      	ble.n	1000398a <start_all_ticks+0x1e>
    }
}
100039a2:	bf00      	nop
100039a4:	bf00      	nop
100039a6:	3708      	adds	r7, #8
100039a8:	46bd      	mov	sp, r7
100039aa:	bd80      	pop	{r7, pc}
100039ac:	431bde83 	.word	0x431bde83

100039b0 <runtime_init_clocks>:

void __weak runtime_init_clocks(void) {
100039b0:	b580      	push	{r7, lr}
100039b2:	b088      	sub	sp, #32
100039b4:	af02      	add	r7, sp, #8
    // Note: These need setting *before* the ticks are started
    if (running_on_fpga()) {
100039b6:	f7ff ffd1 	bl	1000395c <running_on_fpga>
100039ba:	4603      	mov	r3, r0
100039bc:	2b00      	cmp	r3, #0
100039be:	d013      	beq.n	100039e8 <runtime_init_clocks+0x38>
        for (uint i = 0; i < CLK_COUNT; i++) {
100039c0:	2300      	movs	r3, #0
100039c2:	617b      	str	r3, [r7, #20]
100039c4:	e008      	b.n	100039d8 <runtime_init_clocks+0x28>
            clock_set_reported_hz(i, 48 * MHZ);
100039c6:	697b      	ldr	r3, [r7, #20]
100039c8:	b2db      	uxtb	r3, r3
100039ca:	4938      	ldr	r1, [pc, #224]	@ (10003aac <runtime_init_clocks+0xfc>)
100039cc:	4618      	mov	r0, r3
100039ce:	f7ff fc8b 	bl	100032e8 <clock_set_reported_hz>
        for (uint i = 0; i < CLK_COUNT; i++) {
100039d2:	697b      	ldr	r3, [r7, #20]
100039d4:	3301      	adds	r3, #1
100039d6:	617b      	str	r3, [r7, #20]
100039d8:	697b      	ldr	r3, [r7, #20]
100039da:	2b09      	cmp	r3, #9
100039dc:	d9f3      	bls.n	100039c6 <runtime_init_clocks+0x16>
        }
        // clk_ref is 12MHz in both RP2040 and RP2350 FPGA
        clock_set_reported_hz(clk_ref, 12 * MHZ);
100039de:	4934      	ldr	r1, [pc, #208]	@ (10003ab0 <runtime_init_clocks+0x100>)
100039e0:	2004      	movs	r0, #4
100039e2:	f7ff fc81 	bl	100032e8 <clock_set_reported_hz>
100039e6:	e05b      	b.n	10003aa0 <runtime_init_clocks+0xf0>
#if HAS_RP2040_RTC
        clock_set_reported_hz(clk_rtc, RTC_CLOCK_FREQ_HZ);
#endif
    } else {
        // Disable resus that may be enabled from previous software
        clocks_hw->resus.ctrl = 0;
100039e8:	4b32      	ldr	r3, [pc, #200]	@ (10003ab4 <runtime_init_clocks+0x104>)
100039ea:	2200      	movs	r2, #0
100039ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        // Enable the xosc
        xosc_init();
100039f0:	f7ff fe76 	bl	100036e0 <xosc_init>
100039f4:	4b30      	ldr	r3, [pc, #192]	@ (10003ab8 <runtime_init_clocks+0x108>)
100039f6:	613b      	str	r3, [r7, #16]
100039f8:	2301      	movs	r3, #1
100039fa:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100039fc:	693b      	ldr	r3, [r7, #16]
100039fe:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003a02:	461a      	mov	r2, r3
10003a04:	68fb      	ldr	r3, [r7, #12]
10003a06:	6013      	str	r3, [r2, #0]
}
10003a08:	bf00      	nop

        // Before we touch PLLs, switch sys and ref cleanly away from their aux sources.
        hw_clear_bits(&clocks_hw->clk[clk_sys].ctrl, CLOCKS_CLK_SYS_CTRL_SRC_BITS);
        while (clocks_hw->clk[clk_sys].selected != 0x1)
10003a0a:	e000      	b.n	10003a0e <runtime_init_clocks+0x5e>
static __force_inline void tight_loop_contents(void) {}
10003a0c:	bf00      	nop
10003a0e:	4b29      	ldr	r3, [pc, #164]	@ (10003ab4 <runtime_init_clocks+0x104>)
10003a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10003a12:	2b01      	cmp	r3, #1
10003a14:	d1fa      	bne.n	10003a0c <runtime_init_clocks+0x5c>
10003a16:	4b29      	ldr	r3, [pc, #164]	@ (10003abc <runtime_init_clocks+0x10c>)
10003a18:	60bb      	str	r3, [r7, #8]
10003a1a:	2303      	movs	r3, #3
10003a1c:	607b      	str	r3, [r7, #4]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
10003a1e:	68bb      	ldr	r3, [r7, #8]
10003a20:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
10003a24:	461a      	mov	r2, r3
10003a26:	687b      	ldr	r3, [r7, #4]
10003a28:	6013      	str	r3, [r2, #0]
}
10003a2a:	bf00      	nop
            tight_loop_contents();
        hw_clear_bits(&clocks_hw->clk[clk_ref].ctrl, CLOCKS_CLK_REF_CTRL_SRC_BITS);
        while (clocks_hw->clk[clk_ref].selected != 0x1)
10003a2c:	e000      	b.n	10003a30 <runtime_init_clocks+0x80>
10003a2e:	bf00      	nop
10003a30:	4b20      	ldr	r3, [pc, #128]	@ (10003ab4 <runtime_init_clocks+0x104>)
10003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10003a34:	2b01      	cmp	r3, #1
10003a36:	d1fa      	bne.n	10003a2e <runtime_init_clocks+0x7e>
            tight_loop_contents();

        /// \tag::pll_init[]
        pll_init(pll_sys, PLL_SYS_REFDIV, PLL_SYS_VCO_FREQ_HZ, PLL_SYS_POSTDIV1, PLL_SYS_POSTDIV2);
10003a38:	2302      	movs	r3, #2
10003a3a:	9300      	str	r3, [sp, #0]
10003a3c:	2305      	movs	r3, #5
10003a3e:	4a20      	ldr	r2, [pc, #128]	@ (10003ac0 <runtime_init_clocks+0x110>)
10003a40:	2101      	movs	r1, #1
10003a42:	4820      	ldr	r0, [pc, #128]	@ (10003ac4 <runtime_init_clocks+0x114>)
10003a44:	f7ff fca4 	bl	10003390 <pll_init>
        pll_init(pll_usb, PLL_USB_REFDIV, PLL_USB_VCO_FREQ_HZ, PLL_USB_POSTDIV1, PLL_USB_POSTDIV2);
10003a48:	2305      	movs	r3, #5
10003a4a:	9300      	str	r3, [sp, #0]
10003a4c:	2305      	movs	r3, #5
10003a4e:	4a1e      	ldr	r2, [pc, #120]	@ (10003ac8 <runtime_init_clocks+0x118>)
10003a50:	2101      	movs	r1, #1
10003a52:	481e      	ldr	r0, [pc, #120]	@ (10003acc <runtime_init_clocks+0x11c>)
10003a54:	f7ff fc9c 	bl	10003390 <pll_init>
        //
        // - RP2350: there is an aux mux, but we are selecting one of the
        //   non-aux inputs to the glitchless mux, so the aux select doesn't
        //   matter. The value of 0 here happens to be the sys PLL.

        clock_configure_undivided(clk_ref,
10003a58:	4b15      	ldr	r3, [pc, #84]	@ (10003ab0 <runtime_init_clocks+0x100>)
10003a5a:	2200      	movs	r2, #0
10003a5c:	2102      	movs	r1, #2
10003a5e:	2004      	movs	r0, #4
10003a60:	f7ff fc1a 	bl	10003298 <clock_configure_undivided>
                        0,
                        XOSC_HZ);

        /// \tag::configure_clk_sys[]
        // CLK SYS = PLL SYS (usually) 125MHz / 1 = 125MHz
        clock_configure_undivided(clk_sys,
10003a64:	4b1a      	ldr	r3, [pc, #104]	@ (10003ad0 <runtime_init_clocks+0x120>)
10003a66:	2200      	movs	r2, #0
10003a68:	2101      	movs	r1, #1
10003a6a:	2005      	movs	r0, #5
10003a6c:	f7ff fc14 	bl	10003298 <clock_configure_undivided>
                        CLOCKS_CLK_SYS_CTRL_AUXSRC_VALUE_CLKSRC_PLL_SYS,
                        SYS_CLK_HZ);
        /// \end::configure_clk_sys[]

        // CLK USB = PLL USB 48MHz / 1 = 48MHz
        clock_configure_undivided(clk_usb,
10003a70:	4b0e      	ldr	r3, [pc, #56]	@ (10003aac <runtime_init_clocks+0xfc>)
10003a72:	2200      	movs	r2, #0
10003a74:	2100      	movs	r1, #0
10003a76:	2008      	movs	r0, #8
10003a78:	f7ff fc0e 	bl	10003298 <clock_configure_undivided>
                        0, // No GLMUX
                        CLOCKS_CLK_USB_CTRL_AUXSRC_VALUE_CLKSRC_PLL_USB,
                        USB_CLK_HZ);

        // CLK ADC = PLL USB 48MHZ / 1 = 48MHz
        clock_configure_undivided(clk_adc,
10003a7c:	4b0b      	ldr	r3, [pc, #44]	@ (10003aac <runtime_init_clocks+0xfc>)
10003a7e:	2200      	movs	r2, #0
10003a80:	2100      	movs	r1, #0
10003a82:	2009      	movs	r0, #9
10003a84:	f7ff fc08 	bl	10003298 <clock_configure_undivided>

#endif
#endif

        // CLK PERI = clk_sys. Used as reference clock for UART and SPI serial.
        clock_configure_undivided(clk_peri,
10003a88:	4b11      	ldr	r3, [pc, #68]	@ (10003ad0 <runtime_init_clocks+0x120>)
10003a8a:	2200      	movs	r2, #0
10003a8c:	2100      	movs	r1, #0
10003a8e:	2006      	movs	r0, #6
10003a90:	f7ff fc02 	bl	10003298 <clock_configure_undivided>
                        CLOCKS_CLK_PERI_CTRL_AUXSRC_VALUE_CLK_SYS,
                        SYS_CLK_HZ);

#if HAS_HSTX
        // CLK_HSTX = clk_sys. Transmit bit clock for the HSTX peripheral.
        clock_configure_undivided(clk_hstx,
10003a94:	4b0e      	ldr	r3, [pc, #56]	@ (10003ad0 <runtime_init_clocks+0x120>)
10003a96:	2200      	movs	r2, #0
10003a98:	2100      	movs	r1, #0
10003a9a:	2007      	movs	r0, #7
10003a9c:	f7ff fbfc 	bl	10003298 <clock_configure_undivided>
#endif
    }

    // Finally, all clocks are configured so start the ticks
    // The ticks use clk_ref so now that is configured we can start them
    start_all_ticks();
10003aa0:	f7ff ff64 	bl	1000396c <start_all_ticks>
}
10003aa4:	bf00      	nop
10003aa6:	3718      	adds	r7, #24
10003aa8:	46bd      	mov	sp, r7
10003aaa:	bd80      	pop	{r7, pc}
10003aac:	02dc6c00 	.word	0x02dc6c00
10003ab0:	00b71b00 	.word	0x00b71b00
10003ab4:	40010000 	.word	0x40010000
10003ab8:	4001003c 	.word	0x4001003c
10003abc:	40010030 	.word	0x40010030
10003ac0:	59682f00 	.word	0x59682f00
10003ac4:	40050000 	.word	0x40050000
10003ac8:	47868c00 	.word	0x47868c00
10003acc:	40058000 	.word	0x40058000
10003ad0:	08f0d180 	.word	0x08f0d180

10003ad4 <rom_reboot>:
 * \param flags the reboot flags, as detailed above
 * \param delay_ms millisecond delay before the reboot occurs
 * \param p0 parameter 0, depends on flags
 * \param p1 parameter 1, depends on flags
 */
static inline int rom_reboot(uint32_t flags, uint32_t delay_ms, uint32_t p0, uint32_t p1) {
10003ad4:	b590      	push	{r4, r7, lr}
10003ad6:	b089      	sub	sp, #36	@ 0x24
10003ad8:	af00      	add	r7, sp, #0
10003ada:	60f8      	str	r0, [r7, #12]
10003adc:	60b9      	str	r1, [r7, #8]
10003ade:	607a      	str	r2, [r7, #4]
10003ae0:	603b      	str	r3, [r7, #0]
10003ae2:	f244 2352 	movw	r3, #16978	@ 0x4252
10003ae6:	61bb      	str	r3, [r7, #24]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) (uintptr_t)*(uint16_t*)(BOOTROM_TABLE_LOOKUP_OFFSET);
10003ae8:	2313      	movs	r3, #19
10003aea:	781b      	ldrb	r3, [r3, #0]
10003aec:	b2db      	uxtb	r3, r3
10003aee:	2b02      	cmp	r3, #2
10003af0:	d101      	bne.n	10003af6 <rom_reboot+0x22>
10003af2:	2316      	movs	r3, #22
10003af4:	e000      	b.n	10003af8 <rom_reboot+0x24>
10003af6:	2318      	movs	r3, #24
10003af8:	881b      	ldrh	r3, [r3, #0]
10003afa:	617b      	str	r3, [r7, #20]
#ifndef __riscv
    // todo add a define to disable NS checking at all?
    // IDAU-Exempt addresses return S=1 when tested in the Secure state,
    // whereas executing a tt in the NonSecure state will always return S=0.
    uint32_t tt;
    pico_default_asm_volatile (
10003afc:	2300      	movs	r3, #0
10003afe:	e843 f300 	tt	r3, r3
10003b02:	613b      	str	r3, [r7, #16]
        "movs %0, #0\n"
        "tt %0, %0\n"
        : "=r" (tt) : : "cc"
    );
    return !(tt & (1u << 22));
10003b04:	693b      	ldr	r3, [r7, #16]
10003b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
10003b0a:	2b00      	cmp	r3, #0
10003b0c:	bf0c      	ite	eq
10003b0e:	2301      	moveq	r3, #1
10003b10:	2300      	movne	r3, #0
10003b12:	b2db      	uxtb	r3, r3
    if (pico_processor_state_is_nonsecure()) {
10003b14:	2b00      	cmp	r3, #0
10003b16:	d005      	beq.n	10003b24 <rom_reboot+0x50>
        return rom_table_lookup(code, RT_FLAG_FUNC_ARM_NONSEC);
10003b18:	697b      	ldr	r3, [r7, #20]
10003b1a:	2110      	movs	r1, #16
10003b1c:	69b8      	ldr	r0, [r7, #24]
10003b1e:	4798      	blx	r3
10003b20:	4603      	mov	r3, r0
10003b22:	e004      	b.n	10003b2e <rom_reboot+0x5a>
        return rom_table_lookup(code, RT_FLAG_FUNC_ARM_SEC);
10003b24:	697b      	ldr	r3, [r7, #20]
10003b26:	2104      	movs	r1, #4
10003b28:	69b8      	ldr	r0, [r7, #24]
10003b2a:	4798      	blx	r3
10003b2c:	4603      	mov	r3, r0
    rom_reboot_fn func = (rom_reboot_fn) rom_func_lookup_inline(ROM_FUNC_REBOOT);
10003b2e:	61fb      	str	r3, [r7, #28]
    return func(flags, delay_ms, p0, p1);
10003b30:	69fc      	ldr	r4, [r7, #28]
10003b32:	683b      	ldr	r3, [r7, #0]
10003b34:	687a      	ldr	r2, [r7, #4]
10003b36:	68b9      	ldr	r1, [r7, #8]
10003b38:	68f8      	ldr	r0, [r7, #12]
10003b3a:	47a0      	blx	r4
10003b3c:	4603      	mov	r3, r0
}
10003b3e:	4618      	mov	r0, r3
10003b40:	3724      	adds	r7, #36	@ 0x24
10003b42:	46bd      	mov	sp, r7
10003b44:	bd90      	pop	{r4, r7, pc}

10003b46 <rom_func_lookup>:
#include "boot/picoboot.h"
#include "boot/picobin.h"

/// \tag::table_lookup[]

void *rom_func_lookup(uint32_t code) {
10003b46:	b580      	push	{r7, lr}
10003b48:	b086      	sub	sp, #24
10003b4a:	af00      	add	r7, sp, #0
10003b4c:	6078      	str	r0, [r7, #4]
10003b4e:	687b      	ldr	r3, [r7, #4]
10003b50:	617b      	str	r3, [r7, #20]
    rom_table_lookup_fn rom_table_lookup = (rom_table_lookup_fn) (uintptr_t)*(uint16_t*)(BOOTROM_TABLE_LOOKUP_OFFSET);
10003b52:	2313      	movs	r3, #19
10003b54:	781b      	ldrb	r3, [r3, #0]
10003b56:	b2db      	uxtb	r3, r3
10003b58:	2b02      	cmp	r3, #2
10003b5a:	d101      	bne.n	10003b60 <rom_func_lookup+0x1a>
10003b5c:	2316      	movs	r3, #22
10003b5e:	e000      	b.n	10003b62 <rom_func_lookup+0x1c>
10003b60:	2318      	movs	r3, #24
10003b62:	881b      	ldrh	r3, [r3, #0]
10003b64:	613b      	str	r3, [r7, #16]
    pico_default_asm_volatile (
10003b66:	2300      	movs	r3, #0
10003b68:	e843 f300 	tt	r3, r3
10003b6c:	60fb      	str	r3, [r7, #12]
    return !(tt & (1u << 22));
10003b6e:	68fb      	ldr	r3, [r7, #12]
10003b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
10003b74:	2b00      	cmp	r3, #0
10003b76:	bf0c      	ite	eq
10003b78:	2301      	moveq	r3, #1
10003b7a:	2300      	movne	r3, #0
10003b7c:	b2db      	uxtb	r3, r3
    if (pico_processor_state_is_nonsecure()) {
10003b7e:	2b00      	cmp	r3, #0
10003b80:	d005      	beq.n	10003b8e <rom_func_lookup+0x48>
        return rom_table_lookup(code, RT_FLAG_FUNC_ARM_NONSEC);
10003b82:	693b      	ldr	r3, [r7, #16]
10003b84:	2110      	movs	r1, #16
10003b86:	6978      	ldr	r0, [r7, #20]
10003b88:	4798      	blx	r3
10003b8a:	4603      	mov	r3, r0
10003b8c:	e004      	b.n	10003b98 <rom_func_lookup+0x52>
        return rom_table_lookup(code, RT_FLAG_FUNC_ARM_SEC);
10003b8e:	693b      	ldr	r3, [r7, #16]
10003b90:	2104      	movs	r1, #4
10003b92:	6978      	ldr	r0, [r7, #20]
10003b94:	4798      	blx	r3
10003b96:	4603      	mov	r3, r0
    return rom_func_lookup_inline(code);
}
10003b98:	4618      	mov	r0, r3
10003b9a:	3718      	adds	r7, #24
10003b9c:	46bd      	mov	sp, r7
10003b9e:	bd80      	pop	{r7, pc}

10003ba0 <rom_reset_usb_boot>:
    }
    return ok;
}


void __attribute__((noreturn)) rom_reset_usb_boot(uint32_t usb_activity_gpio_pin_mask, uint32_t disable_interface_mask) {
10003ba0:	b580      	push	{r7, lr}
10003ba2:	b084      	sub	sp, #16
10003ba4:	af00      	add	r7, sp, #0
10003ba6:	6078      	str	r0, [r7, #4]
10003ba8:	6039      	str	r1, [r7, #0]
#ifdef ROM_FUNC_RESET_USB_BOOT
    rom_reset_usb_boot_fn func = (rom_reset_usb_boot_fn) rom_func_lookup(ROM_FUNC_RESET_USB_BOOT);
    func(usb_activity_gpio_pin_mask, disable_interface_mask);
#elif defined(ROM_FUNC_REBOOT)
    uint32_t flags = disable_interface_mask;
10003baa:	683b      	ldr	r3, [r7, #0]
10003bac:	60fb      	str	r3, [r7, #12]
    if (usb_activity_gpio_pin_mask) {
10003bae:	687b      	ldr	r3, [r7, #4]
10003bb0:	2b00      	cmp	r3, #0
10003bb2:	d009      	beq.n	10003bc8 <rom_reset_usb_boot+0x28>
        flags |= BOOTSEL_FLAG_GPIO_PIN_SPECIFIED;
10003bb4:	68fb      	ldr	r3, [r7, #12]
10003bb6:	f043 0320 	orr.w	r3, r3, #32
10003bba:	60fb      	str	r3, [r7, #12]
        // the parameter is actually the gpio number, but we only care if BOOTSEL_FLAG_GPIO_PIN_SPECIFIED
        usb_activity_gpio_pin_mask = (uint32_t)__builtin_ctz(usb_activity_gpio_pin_mask);
10003bbc:	687b      	ldr	r3, [r7, #4]
10003bbe:	fa93 f3a3 	rbit	r3, r3
10003bc2:	fab3 f383 	clz	r3, r3
10003bc6:	607b      	str	r3, [r7, #4]
    }
    rom_reboot(REBOOT2_FLAG_REBOOT_TYPE_BOOTSEL | REBOOT2_FLAG_NO_RETURN_ON_SUCCESS, 10, flags, usb_activity_gpio_pin_mask);
10003bc8:	687b      	ldr	r3, [r7, #4]
10003bca:	68fa      	ldr	r2, [r7, #12]
10003bcc:	210a      	movs	r1, #10
10003bce:	f44f 7081 	mov.w	r0, #258	@ 0x102
10003bd2:	f7ff ff7f 	bl	10003ad4 <rom_reboot>
	...

10003bd8 <bootrom_acquire_lock_blocking>:
 *
 * If PICO_BOOTROM_LOCKING_ENABLED is false, this method does nothing
 *
 * \param lock_num the lock numbers - BOOTROM_LOCK_SHA_256, BOOTROM_LOCK_FLASH_OP or BOOTROM_LOCK_OTP
 */
static inline void bootrom_acquire_lock_blocking(uint lock_num) {
10003bd8:	b480      	push	{r7}
10003bda:	b085      	sub	sp, #20
10003bdc:	af00      	add	r7, sp, #0
10003bde:	6078      	str	r0, [r7, #4]
10003be0:	687b      	ldr	r3, [r7, #4]
10003be2:	60bb      	str	r3, [r7, #8]
 * \param lock_num Bootlock ID
 * \return The bootlock instance
 */
__force_inline static boot_lock_t *boot_lock_instance(uint lock_num) {
    invalid_params_if(HARDWARE_BOOT_LOCK, lock_num >= NUM_BOOT_LOCKS);
    return (boot_lock_t *) (BOOTRAM_BASE + BOOTRAM_BOOTLOCK0_OFFSET + lock_num * 4);
10003be4:	68ba      	ldr	r2, [r7, #8]
10003be6:	4b0d      	ldr	r3, [pc, #52]	@ (10003c1c <bootrom_acquire_lock_blocking+0x44>)
10003be8:	4413      	add	r3, r2
10003bea:	009b      	lsls	r3, r3, #2
10003bec:	60fb      	str	r3, [r7, #12]
 */
__force_inline static void boot_lock_unsafe_blocking(boot_lock_t *lock) {
    // Note we don't do a wfe or anything, because by convention these boot_locks are VERY SHORT LIVED and NEVER BLOCK and run
    // with INTERRUPTS disabled (to ensure that)... therefore nothing on our core could be blocking us, so we just need to wait on another core
    // anyway which should be finished soon
    while (__builtin_expect(!*lock, 0)) { // read from bootlock register (tries to acquire the lock)
10003bee:	e000      	b.n	10003bf2 <bootrom_acquire_lock_blocking+0x1a>
static __force_inline void tight_loop_contents(void) {}
10003bf0:	bf00      	nop
10003bf2:	68fb      	ldr	r3, [r7, #12]
10003bf4:	681b      	ldr	r3, [r3, #0]
10003bf6:	2b00      	cmp	r3, #0
10003bf8:	bf0c      	ite	eq
10003bfa:	2301      	moveq	r3, #1
10003bfc:	2300      	movne	r3, #0
10003bfe:	b2db      	uxtb	r3, r3
10003c00:	2b00      	cmp	r3, #0
10003c02:	d1f5      	bne.n	10003bf0 <bootrom_acquire_lock_blocking+0x18>
    pico_default_asm_volatile ("dmb" : : : "memory");
10003c04:	f3bf 8f5f 	dmb	sy
}
10003c08:	bf00      	nop
}
10003c0a:	bf00      	nop
        tight_loop_contents();
    }
    __mem_fence_acquire();
}
10003c0c:	bf00      	nop
    // unsafe as this is a long term lock (so no irq disable)
    boot_lock_unsafe_blocking(boot_lock_instance(lock_num));
#else
    (void)lock_num;
#endif
}
10003c0e:	bf00      	nop
10003c10:	3714      	adds	r7, #20
10003c12:	46bd      	mov	sp, r7
10003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
10003c18:	4770      	bx	lr
10003c1a:	bf00      	nop
10003c1c:	10038203 	.word	0x10038203

10003c20 <runtime_init_bootrom_locking_enable>:
#include "pico/runtime_init.h"

#if PICO_BOOTROM_LOCKING_ENABLED
#if !PICO_RUNTIME_NO_INIT_BOOTROM_LOCKING_ENABLE
#include "hardware/sync.h"
void __weak runtime_init_bootrom_locking_enable(void) {
10003c20:	b580      	push	{r7, lr}
10003c22:	af00      	add	r7, sp, #0
    bootrom_acquire_lock_blocking(BOOTROM_LOCK_ENABLE);
10003c24:	2007      	movs	r0, #7
10003c26:	f7ff ffd7 	bl	10003bd8 <bootrom_acquire_lock_blocking>
}
10003c2a:	bf00      	nop
10003c2c:	bd80      	pop	{r7, pc}
	...

10003c30 <boot_locks_reset>:
 */
#include "hardware/boot_lock.h"
#include "pico/runtime_init.h"

#if NUM_BOOT_LOCKS > 0
void boot_locks_reset(void) {
10003c30:	b480      	push	{r7}
10003c32:	b085      	sub	sp, #20
10003c34:	af00      	add	r7, sp, #0
    GCC_Pragma("GCC unroll 1") // prevent GCC unrolling this loop which is 8 bytes per
    for (uint i = 0; i < NUM_BOOT_LOCKS; i++) {
10003c36:	2300      	movs	r3, #0
10003c38:	60fb      	str	r3, [r7, #12]
10003c3a:	e011      	b.n	10003c60 <boot_locks_reset+0x30>
10003c3c:	68fb      	ldr	r3, [r7, #12]
10003c3e:	607b      	str	r3, [r7, #4]
    return (boot_lock_t *) (BOOTRAM_BASE + BOOTRAM_BOOTLOCK0_OFFSET + lock_num * 4);
10003c40:	687a      	ldr	r2, [r7, #4]
10003c42:	4b0f      	ldr	r3, [pc, #60]	@ (10003c80 <boot_locks_reset+0x50>)
10003c44:	4413      	add	r3, r2
10003c46:	009b      	lsls	r3, r3, #2
10003c48:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("dmb" : : : "memory");
10003c4a:	f3bf 8f5f 	dmb	sy
}
10003c4e:	bf00      	nop
}
10003c50:	bf00      	nop
 *
 * \param lock Bootlock instance
 */
__force_inline static void boot_unlock_unsafe(boot_lock_t *lock) {
    __mem_fence_release();
    *lock = 0; // write to bootlock register (release lock)
10003c52:	68bb      	ldr	r3, [r7, #8]
10003c54:	2200      	movs	r2, #0
10003c56:	601a      	str	r2, [r3, #0]
}
10003c58:	bf00      	nop
10003c5a:	68fb      	ldr	r3, [r7, #12]
10003c5c:	3301      	adds	r3, #1
10003c5e:	60fb      	str	r3, [r7, #12]
10003c60:	68fb      	ldr	r3, [r7, #12]
10003c62:	2b07      	cmp	r3, #7
10003c64:	bf94      	ite	ls
10003c66:	2301      	movls	r3, #1
10003c68:	2300      	movhi	r3, #0
10003c6a:	b2db      	uxtb	r3, r3
10003c6c:	2b00      	cmp	r3, #0
10003c6e:	d1e5      	bne.n	10003c3c <boot_locks_reset+0xc>
        boot_unlock_unsafe(boot_lock_instance(i));
    }
}
10003c70:	bf00      	nop
10003c72:	bf00      	nop
10003c74:	3714      	adds	r7, #20
10003c76:	46bd      	mov	sp, r7
10003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
10003c7c:	4770      	bx	lr
10003c7e:	bf00      	nop
10003c80:	10038203 	.word	0x10038203

10003c84 <runtime_init_boot_locks_reset>:
    return lock;
}

#if !PICO_RUNTIME_NO_INIT_BOOT_LOCKS_RESET
#include "hardware/sync.h"
void __weak runtime_init_boot_locks_reset(void) {
10003c84:	b580      	push	{r7, lr}
10003c86:	af00      	add	r7, sp, #0
    boot_locks_reset();
10003c88:	f7ff ffd2 	bl	10003c30 <boot_locks_reset>
}
10003c8c:	bf00      	nop
10003c8e:	bd80      	pop	{r7, pc}

10003c90 <generic_save_state>:
.endm

double_section __rp2350_dcp_engaged_state_save_restore
.thumb_func
generic_save_state:
  sub sp, #24
10003c90:	b086      	sub	sp, #24
  push {r0, r1}
10003c92:	b403      	push	{r0, r1}
  // do save here
  PXMD r0, r1
10003c94:	fc51 0408 	mrrc2	4, 0, r0, r1, cr8
  strd r0, r1, [sp, #8 + 0]
10003c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PYMD r0, r1
10003c9c:	fc51 0409 	mrrc2	4, 0, r0, r1, cr9
  strd r0, r1, [sp, #8 + 8]
10003ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  REFD r0, r1
10003ca4:	ec51 040a 	cfldrd	mvd0, [r1], {10}
  strd r0, r1, [sp, #8 + 16]
10003ca8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  pop {r0, r1}
10003cac:	bc03      	pop	{r0, r1}
  blx lr
10003cae:	47f0      	blx	lr

10003cb0 <generic_restore_state>:
  // <- wrapped function returns here
  // fall through into restore:
.thumb_func
generic_restore_state:
  // do restore here
  pop {r12, r14}
10003cb0:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
  WXMD r12, r14
10003cb4:	ec4e c400 	cfstrd	mvd12, [lr], {-0}
  pop {r12, r14}
10003cb8:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
  WYMD r12, r14
10003cbc:	ec4e c401 	cfstrd	mvd12, [lr], {1}
  pop {r12, r14}
10003cc0:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
  WEFD r12, r14
10003cc4:	ec4e c402 	cfstrd	mvd12, [lr], {2}
  pop {pc}
10003cc8:	bd00      	pop	{pc}
10003cca:	0000      	movs	r0, r0

// ============== ARITHMETIC FUNCTIONS ===============

double_wrapper_section __aeabi_dadd
saving_func wrapper __aeabi_dadd
10003ccc:	b500      	push	{lr}
10003cce:	f7ff ffdf 	bl	10003c90 <generic_save_state>
10003cd2:	e002      	b.n	10003cda <__wrap___aeabi_dadd+0x6>

10003cd4 <__wrap___aeabi_dadd>:
10003cd4:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003cd8:	d4f8      	bmi.n	10003ccc <generic_restore_state+0x1c>
  dcp_dadd_m r0,r1,r0,r1,r2,r3
10003cda:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003cde:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003ce2:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003ce6:	ee10 0401 	cfmuls	mvf0, mvf0, mvf1
10003cea:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
10003cee:	ec51 0410 	cfldrd	mvd0, [r1], {16}
  saving_func_return
10003cf2:	4770      	bx	lr

double_wrapper_section __aeabi_dsub
saving_func wrapper __aeabi_dsub
10003cf4:	b500      	push	{lr}
10003cf6:	f7ff ffcb 	bl	10003c90 <generic_save_state>
10003cfa:	e002      	b.n	10003d02 <__wrap___aeabi_dsub+0x6>

10003cfc <__wrap___aeabi_dsub>:
10003cfc:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003d00:	d4f8      	bmi.n	10003cf4 <__wrap___aeabi_dadd+0x20>
  dcp_dsub_m r0,r1,r0,r1,r2,r3
10003d02:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003d06:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003d0a:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003d0e:	ee10 0421 	cfmuld	mvd0, mvd0, mvd1
10003d12:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
10003d16:	ec51 0430 	cfldrd	mvd0, [r1], {48}	@ 0x30
  saving_func_return
10003d1a:	4770      	bx	lr
saving_func wrapper __aeabi_drsub
  dcp_dsub_m r0,r1,r2,r3,r0,r1
  saving_func_return

double_wrapper_section __aeabi_dmul
saving_func wrapper __aeabi_dmul
10003d1c:	b500      	push	{lr}
10003d1e:	f7ff ffb7 	bl	10003c90 <generic_save_state>
10003d22:	e002      	b.n	10003d2a <__wrap___aeabi_dmul+0x6>

10003d24 <__wrap___aeabi_dmul>:
10003d24:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003d28:	d4f8      	bmi.n	10003d1c <__wrap___aeabi_dsub+0x20>

 // todo optimize this based on final decision on saving_func_entry
  push {r4,r14}
10003d2a:	b510      	push	{r4, lr}
  dcp_dmul_m r0,r1,r0,r1,r2,r3,r0,r1,r2,r3,r4,r12,r14
10003d2c:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003d30:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003d34:	ec51 0404 	cfldrd	mvd0, [r1], {4}
10003d38:	ec53 2405 	cfldrd	mvd2, [r3], {5}
10003d3c:	fba0 4c02 	umull	r4, ip, r0, r2
10003d40:	f05f 0e00 	movs.w	lr, #0
10003d44:	fbe0 ce03 	umlal	ip, lr, r0, r3
10003d48:	fbe1 ce02 	umlal	ip, lr, r1, r2
10003d4c:	ec4c 4420 	cfstrd	mvd4, [ip], {32}
10003d50:	2400      	movs	r4, #0
10003d52:	fbe1 e403 	umlal	lr, r4, r1, r3
10003d56:	ec44 e430 	cfstrd	mvd14, [r4], {48}	@ 0x30
10003d5a:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
10003d5e:	ec51 0450 	cfldrd	mvd0, [r1], {80}	@ 0x50
 // todo optimize this based on final decision on saving_func_entry
  pop {r4,lr}
10003d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  saving_func_return
10003d66:	4770      	bx	lr
saving_func regular ddiv_fast
  dcp_ddiv_fast_m r0,r1,r0,r1,r2,r3,r0,r1,r2,r3,r12
  saving_func_return

double_wrapper_section __aeabi_ddiv
saving_func wrapper __aeabi_ddiv
10003d68:	b500      	push	{lr}
10003d6a:	f7ff ff91 	bl	10003c90 <generic_save_state>
10003d6e:	e002      	b.n	10003d76 <__wrap___aeabi_ddiv+0x6>

10003d70 <__wrap___aeabi_ddiv>:
10003d70:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003d74:	d4f8      	bmi.n	10003d68 <__wrap___aeabi_dmul+0x44>
@ with correct rounding
  dcp_ddiv_m r0,r1,r0,r1,r2,r3,r0,r1,r2,r3,r12
10003d76:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003d7a:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003d7e:	ec51 0421 	cfldrd	mvd0, [r1], {33}	@ 0x21
10003d82:	fba0 1201 	umull	r1, r2, r0, r1
10003d86:	ea6f 0282 	mvn.w	r2, r2, lsl #2
10003d8a:	fb52 0010 	smmlar	r0, r2, r0, r0
10003d8e:	fb52 f212 	smmulr	r2, r2, r2
10003d92:	fb52 0010 	smmlar	r0, r2, r0, r0
10003d96:	eba0 7cd0 	sub.w	ip, r0, r0, lsr #31
10003d9a:	ec53 2404 	cfldrd	mvd2, [r3], {4}
10003d9e:	fb5c f113 	smmulr	r1, ip, r3
10003da2:	ec53 2415 	cfldrd	mvd2, [r3], {21}
10003da6:	fba1 2002 	umull	r2, r0, r1, r2
10003daa:	fb01 0003 	mla	r0, r1, r3, r0
10003dae:	ec53 2444 	cfldrd	mvd2, [r3], {68}	@ 0x44
10003db2:	eba2 0000 	sub.w	r0, r2, r0
10003db6:	fb50 f21c 	smmulr	r2, r0, ip
10003dba:	ea4f 1311 	mov.w	r3, r1, lsr #4
10003dbe:	eb12 7001 	adds.w	r0, r2, r1, lsl #28
10003dc2:	eb43 71e2 	adc.w	r1, r3, r2, asr #31
10003dc6:	ea40 5051 	orr.w	r0, r0, r1, lsr #21
10003dca:	ea20 5091 	bic.w	r0, r0, r1, lsr #22
10003dce:	f020 0007 	bic.w	r0, r0, #7
10003dd2:	ec53 2475 	cfldrd	mvd2, [r3], {117}	@ 0x75
10003dd6:	fba0 3c02 	umull	r3, ip, r0, r2
10003dda:	ec53 2475 	cfldrd	mvd2, [r3], {117}	@ 0x75
10003dde:	fb00 cc03 	mla	ip, r0, r3, ip
10003de2:	fb01 cc02 	mla	ip, r1, r2, ip
10003de6:	ec53 2404 	cfldrd	mvd2, [r3], {4}
10003dea:	ebac 4c82 	sub.w	ip, ip, r2, lsl #18
10003dee:	ea40 705c 	orr.w	r0, r0, ip, lsr #29
10003df2:	f1a0 0001 	sub.w	r0, r0, #1
10003df6:	ec41 0440 	cfstrd	mvd0, [r1], {64}	@ 0x40
10003dfa:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
10003dfe:	ec51 0470 	cfldrd	mvd0, [r1], {112}	@ 0x70
  saving_func_return
10003e02:	4770      	bx	lr
@ with rounding
  dcp_double2float_m r0,r0,r1
  saving_func_return

double_wrapper_section __aeabi_i2d
saving_func wrapper __aeabi_i2d
10003e04:	b500      	push	{lr}
10003e06:	f7ff ff43 	bl	10003c90 <generic_save_state>
10003e0a:	e002      	b.n	10003e12 <__wrap___aeabi_i2d+0x6>

10003e0c <__wrap___aeabi_i2d>:
10003e0c:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003e10:	d4f8      	bmi.n	10003e04 <__wrap___aeabi_ddiv+0x94>
  dcp_int2double_m r0,r1,r0
10003e12:	ec40 0470 	cfstrd	mvd0, [r0], {112}	@ 0x70
10003e16:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003e1a:	ee10 0421 	cfmuld	mvd0, mvd0, mvd1
10003e1e:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
10003e22:	ec51 0430 	cfldrd	mvd0, [r1], {48}	@ 0x30
  saving_func_return
10003e26:	4770      	bx	lr

double_wrapper_section __aeabi_ui2d
saving_func wrapper __aeabi_ui2d
10003e28:	b500      	push	{lr}
10003e2a:	f7ff ff31 	bl	10003c90 <generic_save_state>
10003e2e:	e002      	b.n	10003e36 <__wrap___aeabi_ui2d+0x6>

10003e30 <__wrap___aeabi_ui2d>:
10003e30:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003e34:	d4f8      	bmi.n	10003e28 <__wrap___aeabi_i2d+0x1c>
  dcp_uint2double_m r0,r1,r0
10003e36:	ec40 0460 	cfstrd	mvd0, [r0], {96}	@ 0x60
10003e3a:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003e3e:	ee10 0421 	cfmuld	mvd0, mvd0, mvd1
10003e42:	ee80 0420 	cdp	4, 8, cr0, cr0, cr0, {1}
10003e46:	ec51 0430 	cfldrd	mvd0, [r1], {48}	@ 0x30
  saving_func_return
10003e4a:	4770      	bx	lr

double_wrapper_section __aeabi_d2iz
saving_func wrapper __aeabi_d2iz
10003e4c:	b500      	push	{lr}
10003e4e:	f7ff ff1f 	bl	10003c90 <generic_save_state>
10003e52:	e002      	b.n	10003e5a <__wrap___aeabi_d2iz+0x6>

10003e54 <__wrap___aeabi_d2iz>:
10003e54:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003e58:	d4f8      	bmi.n	10003e4c <__wrap___aeabi_ui2d+0x1c>
@ with truncation towards 0
  dcp_double2int_m r0,r0,r1
10003e5a:	ec41 0480 	cfstrd	mvd0, [r1], {128}	@ 0x80
10003e5e:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003e62:	ee10 0401 	cfmuls	mvf0, mvf0, mvf1
10003e66:	ee80 0440 	cdp	4, 8, cr0, cr0, cr0, {2}
10003e6a:	ee10 0413 	cfmvrdl	r0, mvd0
  saving_func_return
10003e6e:	4770      	bx	lr

double_wrapper_section __aeabi_d2uiz
saving_func wrapper __aeabi_d2uiz
10003e70:	b500      	push	{lr}
10003e72:	f7ff ff0d 	bl	10003c90 <generic_save_state>
10003e76:	e002      	b.n	10003e7e <__wrap___aeabi_d2uiz+0x6>

10003e78 <__wrap___aeabi_d2uiz>:
10003e78:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003e7c:	d4f8      	bmi.n	10003e70 <__wrap___aeabi_d2iz+0x1c>
@ with truncation towards 0
  dcp_double2uint_m r0,r0,r1
10003e7e:	ec41 0480 	cfstrd	mvd0, [r1], {128}	@ 0x80
10003e82:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003e86:	ee10 0401 	cfmuls	mvf0, mvf0, mvf1
10003e8a:	ee80 0440 	cdp	4, 8, cr0, cr0, cr0, {2}
10003e8e:	ee10 0433 	mrc	4, 0, r0, cr0, cr3, {1}
  saving_func_return
10003e92:	4770      	bx	lr
  saving_func_return

// ============== COMPARISON FUNCTIONS ===============

double_wrapper_section __aeabi_dcmpun
saving_func wrapper __aeabi_dcmpun
10003e94:	b500      	push	{lr}
10003e96:	f7ff fefb 	bl	10003c90 <generic_save_state>
10003e9a:	e002      	b.n	10003ea2 <__wrap___aeabi_dcmpun+0x6>

10003e9c <__wrap___aeabi_dcmpun>:
10003e9c:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003ea0:	d4f8      	bmi.n	10003e94 <__wrap___aeabi_d2uiz+0x1c>
  dcp_dcmp_m r0,r0,r1,r2,r3
10003ea2:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003ea6:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003eaa:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003eae:	ee10 0430 	cfmvrdh	r0, mvd0
  // extract unordered bit
  ubfx r0, r0, #28, #1
10003eb2:	f3c0 7000 	ubfx	r0, r0, #28, #1
  saving_func_return
10003eb6:	4770      	bx	lr
  ubfx r0, r0, #30, #1
  saving_func_return

// int FUNC_NAME(__aeabi_dcmplt)(double, double)         result (1, 0) denotes (<, ?>=) [2], use for C <
double_wrapper_section __aeabi_dcmplt
saving_func wrapper __aeabi_dcmplt
10003eb8:	b500      	push	{lr}
10003eba:	f7ff fee9 	bl	10003c90 <generic_save_state>
10003ebe:	e002      	b.n	10003ec6 <__wrap___aeabi_dcmplt+0x6>

10003ec0 <__wrap___aeabi_dcmplt>:
10003ec0:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003ec4:	d4f8      	bmi.n	10003eb8 <__wrap___aeabi_dcmpun+0x1c>
  dcp_dcmp_m apsr_nzcv,r2,r3,r0,r1
10003ec6:	ec43 2410 	cfstrd	mvd2, [r3], {16}
10003eca:	ec41 0411 	cfstrd	mvd0, [r1], {17}
10003ece:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003ed2:	ee10 f430 	cfmvrdh	pc, mvd0
  ite hi
10003ed6:	bf8c      	ite	hi
  movhi r0,#1
10003ed8:	2001      	movhi	r0, #1
  movls r0,#0
10003eda:	2000      	movls	r0, #0
  saving_func_return
10003edc:	4770      	bx	lr
10003ede:	bf00      	nop
  movlo r0,#0
  saving_func_return

// int FUNC_NAME(__aeabi_dcmpge)(double, double)         result (1, 0) denotes (>=, ?<) [2], use for C >=
double_wrapper_section __aeabi_dcmpge
saving_func wrapper __aeabi_dcmpge
10003ee0:	b500      	push	{lr}
10003ee2:	f7ff fed5 	bl	10003c90 <generic_save_state>
10003ee6:	e002      	b.n	10003eee <__wrap___aeabi_dcmpge+0x6>

10003ee8 <__wrap___aeabi_dcmpge>:
10003ee8:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003eec:	d4f8      	bmi.n	10003ee0 <__wrap___aeabi_dcmplt+0x20>
  dcp_dcmp_m apsr_nzcv,r0,r1,r2,r3
10003eee:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003ef2:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003ef6:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003efa:	ee10 f430 	cfmvrdh	pc, mvd0
  ite hs
10003efe:	bf2c      	ite	cs
  movhs r0,#1
10003f00:	2001      	movcs	r0, #1
  movlo r0,#0
10003f02:	2000      	movcc	r0, #0
  saving_func_return
10003f04:	4770      	bx	lr
10003f06:	bf00      	nop

// int FUNC_NAME(__aeabi_dcmpgt)(double, double)         result (1, 0) denotes (>, ?<=) [2], use for C >
double_wrapper_section __aeabi_dcmpgt
saving_func wrapper __aeabi_dcmpgt
10003f08:	b500      	push	{lr}
10003f0a:	f7ff fec1 	bl	10003c90 <generic_save_state>
10003f0e:	e002      	b.n	10003f16 <__wrap___aeabi_dcmpgt+0x6>

10003f10 <__wrap___aeabi_dcmpgt>:
10003f10:	fe10 f430 	mrc2	4, 0, pc, cr0, cr0, {1}
10003f14:	d4f8      	bmi.n	10003f08 <__wrap___aeabi_dcmpge+0x20>
  dcp_dcmp_m apsr_nzcv,r0,r1,r2,r3
10003f16:	ec41 0410 	cfstrd	mvd0, [r1], {16}
10003f1a:	ec43 2411 	cfstrd	mvd2, [r3], {17}
10003f1e:	ee00 0401 	cdp	4, 0, cr0, cr0, cr1, {0}
10003f22:	ee10 f430 	cfmvrdh	pc, mvd0
  ite hi
10003f26:	bf8c      	ite	hi
  movhi r0,#1
10003f28:	2001      	movhi	r0, #1
  movls r0,#0
10003f2a:	2000      	movls	r0, #0
  saving_func_return
10003f2c:	4770      	bx	lr
10003f2e:	bf00      	nop

10003f30 <_out_null>:
        ((char *) buffer)[idx] = character;
    }
}

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx, size_t maxlen) {
10003f30:	b480      	push	{r7}
10003f32:	b085      	sub	sp, #20
10003f34:	af00      	add	r7, sp, #0
10003f36:	60b9      	str	r1, [r7, #8]
10003f38:	607a      	str	r2, [r7, #4]
10003f3a:	603b      	str	r3, [r7, #0]
10003f3c:	4603      	mov	r3, r0
10003f3e:	73fb      	strb	r3, [r7, #15]
    (void) character;
    (void) buffer;
    (void) idx;
    (void) maxlen;
}
10003f40:	bf00      	nop
10003f42:	3714      	adds	r7, #20
10003f44:	46bd      	mov	sp, r7
10003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
10003f4a:	4770      	bx	lr

10003f4c <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx, size_t maxlen) {
10003f4c:	b580      	push	{r7, lr}
10003f4e:	b084      	sub	sp, #16
10003f50:	af00      	add	r7, sp, #0
10003f52:	60b9      	str	r1, [r7, #8]
10003f54:	607a      	str	r2, [r7, #4]
10003f56:	603b      	str	r3, [r7, #0]
10003f58:	4603      	mov	r3, r0
10003f5a:	73fb      	strb	r3, [r7, #15]
    (void) idx;
    (void) maxlen;
    if (character) {
10003f5c:	7bfb      	ldrb	r3, [r7, #15]
10003f5e:	2b00      	cmp	r3, #0
10003f60:	d006      	beq.n	10003f70 <_out_fct+0x24>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *) buffer)->fct(character, ((out_fct_wrap_type *) buffer)->arg);
10003f62:	68bb      	ldr	r3, [r7, #8]
10003f64:	681b      	ldr	r3, [r3, #0]
10003f66:	68ba      	ldr	r2, [r7, #8]
10003f68:	6851      	ldr	r1, [r2, #4]
10003f6a:	7bfa      	ldrb	r2, [r7, #15]
10003f6c:	4610      	mov	r0, r2
10003f6e:	4798      	blx	r3
    }
}
10003f70:	bf00      	nop
10003f72:	3710      	adds	r7, #16
10003f74:	46bd      	mov	sp, r7
10003f76:	bd80      	pop	{r7, pc}

10003f78 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize) {
10003f78:	b480      	push	{r7}
10003f7a:	b085      	sub	sp, #20
10003f7c:	af00      	add	r7, sp, #0
10003f7e:	6078      	str	r0, [r7, #4]
10003f80:	6039      	str	r1, [r7, #0]
    const char *s;
    for (s = str; *s && maxsize--; ++s);
10003f82:	687b      	ldr	r3, [r7, #4]
10003f84:	60fb      	str	r3, [r7, #12]
10003f86:	e002      	b.n	10003f8e <_strnlen_s+0x16>
10003f88:	68fb      	ldr	r3, [r7, #12]
10003f8a:	3301      	adds	r3, #1
10003f8c:	60fb      	str	r3, [r7, #12]
10003f8e:	68fb      	ldr	r3, [r7, #12]
10003f90:	781b      	ldrb	r3, [r3, #0]
10003f92:	2b00      	cmp	r3, #0
10003f94:	d004      	beq.n	10003fa0 <_strnlen_s+0x28>
10003f96:	683b      	ldr	r3, [r7, #0]
10003f98:	1e5a      	subs	r2, r3, #1
10003f9a:	603a      	str	r2, [r7, #0]
10003f9c:	2b00      	cmp	r3, #0
10003f9e:	d1f3      	bne.n	10003f88 <_strnlen_s+0x10>
    return (unsigned int) (s - str);
10003fa0:	68fa      	ldr	r2, [r7, #12]
10003fa2:	687b      	ldr	r3, [r7, #4]
10003fa4:	1ad3      	subs	r3, r2, r3
}
10003fa6:	4618      	mov	r0, r3
10003fa8:	3714      	adds	r7, #20
10003faa:	46bd      	mov	sp, r7
10003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
10003fb0:	4770      	bx	lr

10003fb2 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) {
10003fb2:	b480      	push	{r7}
10003fb4:	b083      	sub	sp, #12
10003fb6:	af00      	add	r7, sp, #0
10003fb8:	4603      	mov	r3, r0
10003fba:	71fb      	strb	r3, [r7, #7]
    return (ch >= '0') && (ch <= '9');
10003fbc:	79fb      	ldrb	r3, [r7, #7]
10003fbe:	2b2f      	cmp	r3, #47	@ 0x2f
10003fc0:	d904      	bls.n	10003fcc <_is_digit+0x1a>
10003fc2:	79fb      	ldrb	r3, [r7, #7]
10003fc4:	2b39      	cmp	r3, #57	@ 0x39
10003fc6:	d801      	bhi.n	10003fcc <_is_digit+0x1a>
10003fc8:	2301      	movs	r3, #1
10003fca:	e000      	b.n	10003fce <_is_digit+0x1c>
10003fcc:	2300      	movs	r3, #0
10003fce:	f003 0301 	and.w	r3, r3, #1
10003fd2:	b2db      	uxtb	r3, r3
}
10003fd4:	4618      	mov	r0, r3
10003fd6:	370c      	adds	r7, #12
10003fd8:	46bd      	mov	sp, r7
10003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
10003fde:	4770      	bx	lr

10003fe0 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str) {
10003fe0:	b580      	push	{r7, lr}
10003fe2:	b084      	sub	sp, #16
10003fe4:	af00      	add	r7, sp, #0
10003fe6:	6078      	str	r0, [r7, #4]
    unsigned int i = 0U;
10003fe8:	2300      	movs	r3, #0
10003fea:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
10003fec:	e00e      	b.n	1000400c <_atoi+0x2c>
        i = i * 10U + (unsigned int) (*((*str)++) - '0');
10003fee:	68fa      	ldr	r2, [r7, #12]
10003ff0:	4613      	mov	r3, r2
10003ff2:	009b      	lsls	r3, r3, #2
10003ff4:	4413      	add	r3, r2
10003ff6:	005b      	lsls	r3, r3, #1
10003ff8:	4618      	mov	r0, r3
10003ffa:	687b      	ldr	r3, [r7, #4]
10003ffc:	681b      	ldr	r3, [r3, #0]
10003ffe:	1c59      	adds	r1, r3, #1
10004000:	687a      	ldr	r2, [r7, #4]
10004002:	6011      	str	r1, [r2, #0]
10004004:	781b      	ldrb	r3, [r3, #0]
10004006:	4403      	add	r3, r0
10004008:	3b30      	subs	r3, #48	@ 0x30
1000400a:	60fb      	str	r3, [r7, #12]
    while (_is_digit(**str)) {
1000400c:	687b      	ldr	r3, [r7, #4]
1000400e:	681b      	ldr	r3, [r3, #0]
10004010:	781b      	ldrb	r3, [r3, #0]
10004012:	4618      	mov	r0, r3
10004014:	f7ff ffcd 	bl	10003fb2 <_is_digit>
10004018:	4603      	mov	r3, r0
1000401a:	2b00      	cmp	r3, #0
1000401c:	d1e7      	bne.n	10003fee <_atoi+0xe>
    }
    return i;
1000401e:	68fb      	ldr	r3, [r7, #12]
}
10004020:	4618      	mov	r0, r3
10004022:	3710      	adds	r7, #16
10004024:	46bd      	mov	sp, r7
10004026:	bd80      	pop	{r7, pc}

10004028 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx, size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags) {
10004028:	b590      	push	{r4, r7, lr}
1000402a:	b087      	sub	sp, #28
1000402c:	af00      	add	r7, sp, #0
1000402e:	60f8      	str	r0, [r7, #12]
10004030:	60b9      	str	r1, [r7, #8]
10004032:	607a      	str	r2, [r7, #4]
10004034:	603b      	str	r3, [r7, #0]
    const size_t start_idx = idx;
10004036:	687b      	ldr	r3, [r7, #4]
10004038:	613b      	str	r3, [r7, #16]

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
1000403a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000403c:	f003 0302 	and.w	r3, r3, #2
10004040:	2b00      	cmp	r3, #0
10004042:	d125      	bne.n	10004090 <_out_rev+0x68>
10004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10004046:	f003 0301 	and.w	r3, r3, #1
1000404a:	2b00      	cmp	r3, #0
1000404c:	d120      	bne.n	10004090 <_out_rev+0x68>
        for (size_t i = len; i < width; i++) {
1000404e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004050:	617b      	str	r3, [r7, #20]
10004052:	e00a      	b.n	1000406a <_out_rev+0x42>
            out(' ', buffer, idx++, maxlen);
10004054:	687a      	ldr	r2, [r7, #4]
10004056:	1c53      	adds	r3, r2, #1
10004058:	607b      	str	r3, [r7, #4]
1000405a:	68fc      	ldr	r4, [r7, #12]
1000405c:	683b      	ldr	r3, [r7, #0]
1000405e:	68b9      	ldr	r1, [r7, #8]
10004060:	2020      	movs	r0, #32
10004062:	47a0      	blx	r4
        for (size_t i = len; i < width; i++) {
10004064:	697b      	ldr	r3, [r7, #20]
10004066:	3301      	adds	r3, #1
10004068:	617b      	str	r3, [r7, #20]
1000406a:	697a      	ldr	r2, [r7, #20]
1000406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000406e:	429a      	cmp	r2, r3
10004070:	d3f0      	bcc.n	10004054 <_out_rev+0x2c>
        }
    }

    // reverse string
    while (len) {
10004072:	e00d      	b.n	10004090 <_out_rev+0x68>
        out(buf[--len], buffer, idx++, maxlen);
10004074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004076:	3b01      	subs	r3, #1
10004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
1000407a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1000407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000407e:	4413      	add	r3, r2
10004080:	7818      	ldrb	r0, [r3, #0]
10004082:	687a      	ldr	r2, [r7, #4]
10004084:	1c53      	adds	r3, r2, #1
10004086:	607b      	str	r3, [r7, #4]
10004088:	68fc      	ldr	r4, [r7, #12]
1000408a:	683b      	ldr	r3, [r7, #0]
1000408c:	68b9      	ldr	r1, [r7, #8]
1000408e:	47a0      	blx	r4
    while (len) {
10004090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004092:	2b00      	cmp	r3, #0
10004094:	d1ee      	bne.n	10004074 <_out_rev+0x4c>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
10004096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10004098:	f003 0302 	and.w	r3, r3, #2
1000409c:	2b00      	cmp	r3, #0
1000409e:	d00e      	beq.n	100040be <_out_rev+0x96>
        while (idx - start_idx < width) {
100040a0:	e007      	b.n	100040b2 <_out_rev+0x8a>
            out(' ', buffer, idx++, maxlen);
100040a2:	687a      	ldr	r2, [r7, #4]
100040a4:	1c53      	adds	r3, r2, #1
100040a6:	607b      	str	r3, [r7, #4]
100040a8:	68fc      	ldr	r4, [r7, #12]
100040aa:	683b      	ldr	r3, [r7, #0]
100040ac:	68b9      	ldr	r1, [r7, #8]
100040ae:	2020      	movs	r0, #32
100040b0:	47a0      	blx	r4
        while (idx - start_idx < width) {
100040b2:	687a      	ldr	r2, [r7, #4]
100040b4:	693b      	ldr	r3, [r7, #16]
100040b6:	1ad3      	subs	r3, r2, r3
100040b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100040ba:	429a      	cmp	r2, r3
100040bc:	d8f1      	bhi.n	100040a2 <_out_rev+0x7a>
        }
    }

    return idx;
100040be:	687b      	ldr	r3, [r7, #4]
}
100040c0:	4618      	mov	r0, r3
100040c2:	371c      	adds	r7, #28
100040c4:	46bd      	mov	sp, r7
100040c6:	bd90      	pop	{r4, r7, pc}

100040c8 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx, size_t maxlen, char *buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width,
                           unsigned int flags) {
100040c8:	b580      	push	{r7, lr}
100040ca:	b088      	sub	sp, #32
100040cc:	af04      	add	r7, sp, #16
100040ce:	60f8      	str	r0, [r7, #12]
100040d0:	60b9      	str	r1, [r7, #8]
100040d2:	607a      	str	r2, [r7, #4]
100040d4:	603b      	str	r3, [r7, #0]
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
100040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100040d8:	f003 0302 	and.w	r3, r3, #2
100040dc:	2b00      	cmp	r3, #0
100040de:	d136      	bne.n	1000414e <_ntoa_format+0x86>
        if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
100040e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100040e2:	2b00      	cmp	r3, #0
100040e4:	d018      	beq.n	10004118 <_ntoa_format+0x50>
100040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100040e8:	f003 0301 	and.w	r3, r3, #1
100040ec:	2b00      	cmp	r3, #0
100040ee:	d013      	beq.n	10004118 <_ntoa_format+0x50>
100040f0:	f897 3020 	ldrb.w	r3, [r7, #32]
100040f4:	2b00      	cmp	r3, #0
100040f6:	d104      	bne.n	10004102 <_ntoa_format+0x3a>
100040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100040fa:	f003 030c 	and.w	r3, r3, #12
100040fe:	2b00      	cmp	r3, #0
10004100:	d00a      	beq.n	10004118 <_ntoa_format+0x50>
            width--;
10004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004104:	3b01      	subs	r3, #1
10004106:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10004108:	e006      	b.n	10004118 <_ntoa_format+0x50>
            buf[len++] = '0';
1000410a:	69fb      	ldr	r3, [r7, #28]
1000410c:	1c5a      	adds	r2, r3, #1
1000410e:	61fa      	str	r2, [r7, #28]
10004110:	69ba      	ldr	r2, [r7, #24]
10004112:	4413      	add	r3, r2
10004114:	2230      	movs	r2, #48	@ 0x30
10004116:	701a      	strb	r2, [r3, #0]
        while ((len < prec) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10004118:	69fa      	ldr	r2, [r7, #28]
1000411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000411c:	429a      	cmp	r2, r3
1000411e:	d20a      	bcs.n	10004136 <_ntoa_format+0x6e>
10004120:	69fb      	ldr	r3, [r7, #28]
10004122:	2b1f      	cmp	r3, #31
10004124:	d9f1      	bls.n	1000410a <_ntoa_format+0x42>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10004126:	e006      	b.n	10004136 <_ntoa_format+0x6e>
            buf[len++] = '0';
10004128:	69fb      	ldr	r3, [r7, #28]
1000412a:	1c5a      	adds	r2, r3, #1
1000412c:	61fa      	str	r2, [r7, #28]
1000412e:	69ba      	ldr	r2, [r7, #24]
10004130:	4413      	add	r3, r2
10004132:	2230      	movs	r2, #48	@ 0x30
10004134:	701a      	strb	r2, [r3, #0]
        while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10004138:	f003 0301 	and.w	r3, r3, #1
1000413c:	2b00      	cmp	r3, #0
1000413e:	d006      	beq.n	1000414e <_ntoa_format+0x86>
10004140:	69fa      	ldr	r2, [r7, #28]
10004142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004144:	429a      	cmp	r2, r3
10004146:	d202      	bcs.n	1000414e <_ntoa_format+0x86>
10004148:	69fb      	ldr	r3, [r7, #28]
1000414a:	2b1f      	cmp	r3, #31
1000414c:	d9ec      	bls.n	10004128 <_ntoa_format+0x60>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
1000414e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10004150:	f003 0310 	and.w	r3, r3, #16
10004154:	2b00      	cmp	r3, #0
10004156:	d058      	beq.n	1000420a <_ntoa_format+0x142>
        if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
10004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000415a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
1000415e:	2b00      	cmp	r3, #0
10004160:	d116      	bne.n	10004190 <_ntoa_format+0xc8>
10004162:	69fb      	ldr	r3, [r7, #28]
10004164:	2b00      	cmp	r3, #0
10004166:	d013      	beq.n	10004190 <_ntoa_format+0xc8>
10004168:	69fa      	ldr	r2, [r7, #28]
1000416a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000416c:	429a      	cmp	r2, r3
1000416e:	d003      	beq.n	10004178 <_ntoa_format+0xb0>
10004170:	69fa      	ldr	r2, [r7, #28]
10004172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004174:	429a      	cmp	r2, r3
10004176:	d10b      	bne.n	10004190 <_ntoa_format+0xc8>
            len--;
10004178:	69fb      	ldr	r3, [r7, #28]
1000417a:	3b01      	subs	r3, #1
1000417c:	61fb      	str	r3, [r7, #28]
            if (len && (base == 16U)) {
1000417e:	69fb      	ldr	r3, [r7, #28]
10004180:	2b00      	cmp	r3, #0
10004182:	d005      	beq.n	10004190 <_ntoa_format+0xc8>
10004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004186:	2b10      	cmp	r3, #16
10004188:	d102      	bne.n	10004190 <_ntoa_format+0xc8>
                len--;
1000418a:	69fb      	ldr	r3, [r7, #28]
1000418c:	3b01      	subs	r3, #1
1000418e:	61fb      	str	r3, [r7, #28]
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
10004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10004192:	2b10      	cmp	r3, #16
10004194:	d10f      	bne.n	100041b6 <_ntoa_format+0xee>
10004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10004198:	f003 0320 	and.w	r3, r3, #32
1000419c:	2b00      	cmp	r3, #0
1000419e:	d10a      	bne.n	100041b6 <_ntoa_format+0xee>
100041a0:	69fb      	ldr	r3, [r7, #28]
100041a2:	2b1f      	cmp	r3, #31
100041a4:	d807      	bhi.n	100041b6 <_ntoa_format+0xee>
            buf[len++] = 'x';
100041a6:	69fb      	ldr	r3, [r7, #28]
100041a8:	1c5a      	adds	r2, r3, #1
100041aa:	61fa      	str	r2, [r7, #28]
100041ac:	69ba      	ldr	r2, [r7, #24]
100041ae:	4413      	add	r3, r2
100041b0:	2278      	movs	r2, #120	@ 0x78
100041b2:	701a      	strb	r2, [r3, #0]
100041b4:	e01f      	b.n	100041f6 <_ntoa_format+0x12e>
        } else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100041b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100041b8:	2b10      	cmp	r3, #16
100041ba:	d10f      	bne.n	100041dc <_ntoa_format+0x114>
100041bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100041be:	f003 0320 	and.w	r3, r3, #32
100041c2:	2b00      	cmp	r3, #0
100041c4:	d00a      	beq.n	100041dc <_ntoa_format+0x114>
100041c6:	69fb      	ldr	r3, [r7, #28]
100041c8:	2b1f      	cmp	r3, #31
100041ca:	d807      	bhi.n	100041dc <_ntoa_format+0x114>
            buf[len++] = 'X';
100041cc:	69fb      	ldr	r3, [r7, #28]
100041ce:	1c5a      	adds	r2, r3, #1
100041d0:	61fa      	str	r2, [r7, #28]
100041d2:	69ba      	ldr	r2, [r7, #24]
100041d4:	4413      	add	r3, r2
100041d6:	2258      	movs	r2, #88	@ 0x58
100041d8:	701a      	strb	r2, [r3, #0]
100041da:	e00c      	b.n	100041f6 <_ntoa_format+0x12e>
        } else if ((base == 2U) && (len < PICO_PRINTF_NTOA_BUFFER_SIZE)) {
100041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100041de:	2b02      	cmp	r3, #2
100041e0:	d109      	bne.n	100041f6 <_ntoa_format+0x12e>
100041e2:	69fb      	ldr	r3, [r7, #28]
100041e4:	2b1f      	cmp	r3, #31
100041e6:	d806      	bhi.n	100041f6 <_ntoa_format+0x12e>
            buf[len++] = 'b';
100041e8:	69fb      	ldr	r3, [r7, #28]
100041ea:	1c5a      	adds	r2, r3, #1
100041ec:	61fa      	str	r2, [r7, #28]
100041ee:	69ba      	ldr	r2, [r7, #24]
100041f0:	4413      	add	r3, r2
100041f2:	2262      	movs	r2, #98	@ 0x62
100041f4:	701a      	strb	r2, [r3, #0]
        }
        if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
100041f6:	69fb      	ldr	r3, [r7, #28]
100041f8:	2b1f      	cmp	r3, #31
100041fa:	d806      	bhi.n	1000420a <_ntoa_format+0x142>
            buf[len++] = '0';
100041fc:	69fb      	ldr	r3, [r7, #28]
100041fe:	1c5a      	adds	r2, r3, #1
10004200:	61fa      	str	r2, [r7, #28]
10004202:	69ba      	ldr	r2, [r7, #24]
10004204:	4413      	add	r3, r2
10004206:	2230      	movs	r2, #48	@ 0x30
10004208:	701a      	strb	r2, [r3, #0]
        }
    }

    if (len < PICO_PRINTF_NTOA_BUFFER_SIZE) {
1000420a:	69fb      	ldr	r3, [r7, #28]
1000420c:	2b1f      	cmp	r3, #31
1000420e:	d824      	bhi.n	1000425a <_ntoa_format+0x192>
        if (negative) {
10004210:	f897 3020 	ldrb.w	r3, [r7, #32]
10004214:	2b00      	cmp	r3, #0
10004216:	d007      	beq.n	10004228 <_ntoa_format+0x160>
            buf[len++] = '-';
10004218:	69fb      	ldr	r3, [r7, #28]
1000421a:	1c5a      	adds	r2, r3, #1
1000421c:	61fa      	str	r2, [r7, #28]
1000421e:	69ba      	ldr	r2, [r7, #24]
10004220:	4413      	add	r3, r2
10004222:	222d      	movs	r2, #45	@ 0x2d
10004224:	701a      	strb	r2, [r3, #0]
10004226:	e018      	b.n	1000425a <_ntoa_format+0x192>
        } else if (flags & FLAGS_PLUS) {
10004228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000422a:	f003 0304 	and.w	r3, r3, #4
1000422e:	2b00      	cmp	r3, #0
10004230:	d007      	beq.n	10004242 <_ntoa_format+0x17a>
            buf[len++] = '+';  // ignore the space if the '+' exists
10004232:	69fb      	ldr	r3, [r7, #28]
10004234:	1c5a      	adds	r2, r3, #1
10004236:	61fa      	str	r2, [r7, #28]
10004238:	69ba      	ldr	r2, [r7, #24]
1000423a:	4413      	add	r3, r2
1000423c:	222b      	movs	r2, #43	@ 0x2b
1000423e:	701a      	strb	r2, [r3, #0]
10004240:	e00b      	b.n	1000425a <_ntoa_format+0x192>
        } else if (flags & FLAGS_SPACE) {
10004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10004244:	f003 0308 	and.w	r3, r3, #8
10004248:	2b00      	cmp	r3, #0
1000424a:	d006      	beq.n	1000425a <_ntoa_format+0x192>
            buf[len++] = ' ';
1000424c:	69fb      	ldr	r3, [r7, #28]
1000424e:	1c5a      	adds	r2, r3, #1
10004250:	61fa      	str	r2, [r7, #28]
10004252:	69ba      	ldr	r2, [r7, #24]
10004254:	4413      	add	r3, r2
10004256:	2220      	movs	r2, #32
10004258:	701a      	strb	r2, [r3, #0]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
1000425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000425c:	9303      	str	r3, [sp, #12]
1000425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004260:	9302      	str	r3, [sp, #8]
10004262:	69fb      	ldr	r3, [r7, #28]
10004264:	9301      	str	r3, [sp, #4]
10004266:	69bb      	ldr	r3, [r7, #24]
10004268:	9300      	str	r3, [sp, #0]
1000426a:	683b      	ldr	r3, [r7, #0]
1000426c:	687a      	ldr	r2, [r7, #4]
1000426e:	68b9      	ldr	r1, [r7, #8]
10004270:	68f8      	ldr	r0, [r7, #12]
10004272:	f7ff fed9 	bl	10004028 <_out_rev>
10004276:	4603      	mov	r3, r0
}
10004278:	4618      	mov	r0, r3
1000427a:	3710      	adds	r7, #16
1000427c:	46bd      	mov	sp, r7
1000427e:	bd80      	pop	{r7, pc}

10004280 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags) {
10004280:	b580      	push	{r7, lr}
10004282:	b096      	sub	sp, #88	@ 0x58
10004284:	af08      	add	r7, sp, #32
10004286:	60f8      	str	r0, [r7, #12]
10004288:	60b9      	str	r1, [r7, #8]
1000428a:	607a      	str	r2, [r7, #4]
1000428c:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
1000428e:	2300      	movs	r3, #0
10004290:	637b      	str	r3, [r7, #52]	@ 0x34

    // no hash for 0 values
    if (!value) {
10004292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004294:	2b00      	cmp	r3, #0
10004296:	d103      	bne.n	100042a0 <_ntoa_long+0x20>
        flags &= ~FLAGS_HASH;
10004298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000429a:	f023 0310 	bic.w	r3, r3, #16
1000429e:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
100042a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100042a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
100042a6:	2b00      	cmp	r3, #0
100042a8:	d002      	beq.n	100042b0 <_ntoa_long+0x30>
100042aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100042ac:	2b00      	cmp	r3, #0
100042ae:	d032      	beq.n	10004316 <_ntoa_long+0x96>
        do {
            const char digit = (char) (value % base);
100042b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100042b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
100042b4:	fbb3 f2f2 	udiv	r2, r3, r2
100042b8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
100042ba:	fb01 f202 	mul.w	r2, r1, r2
100042be:	1a9b      	subs	r3, r3, r2
100042c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
100042c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
100042c8:	2b09      	cmp	r3, #9
100042ca:	d804      	bhi.n	100042d6 <_ntoa_long+0x56>
100042cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
100042d0:	3330      	adds	r3, #48	@ 0x30
100042d2:	b2da      	uxtb	r2, r3
100042d4:	e00d      	b.n	100042f2 <_ntoa_long+0x72>
100042d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100042d8:	f003 0320 	and.w	r3, r3, #32
100042dc:	2b00      	cmp	r3, #0
100042de:	d001      	beq.n	100042e4 <_ntoa_long+0x64>
100042e0:	2241      	movs	r2, #65	@ 0x41
100042e2:	e000      	b.n	100042e6 <_ntoa_long+0x66>
100042e4:	2261      	movs	r2, #97	@ 0x61
100042e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
100042ea:	4413      	add	r3, r2
100042ec:	b2db      	uxtb	r3, r3
100042ee:	3b0a      	subs	r3, #10
100042f0:	b2da      	uxtb	r2, r3
100042f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100042f4:	1c59      	adds	r1, r3, #1
100042f6:	6379      	str	r1, [r7, #52]	@ 0x34
100042f8:	3338      	adds	r3, #56	@ 0x38
100042fa:	443b      	add	r3, r7
100042fc:	f803 2c28 	strb.w	r2, [r3, #-40]
            value /= base;
10004300:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10004302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004304:	fbb2 f3f3 	udiv	r3, r2, r3
10004308:	643b      	str	r3, [r7, #64]	@ 0x40
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
1000430a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000430c:	2b00      	cmp	r3, #0
1000430e:	d002      	beq.n	10004316 <_ntoa_long+0x96>
10004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10004312:	2b1f      	cmp	r3, #31
10004314:	d9cc      	bls.n	100042b0 <_ntoa_long+0x30>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
10004316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004318:	9306      	str	r3, [sp, #24]
1000431a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
1000431c:	9305      	str	r3, [sp, #20]
1000431e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10004320:	9304      	str	r3, [sp, #16]
10004322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004324:	9303      	str	r3, [sp, #12]
10004326:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
1000432a:	9302      	str	r3, [sp, #8]
1000432c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000432e:	9301      	str	r3, [sp, #4]
10004330:	f107 0310 	add.w	r3, r7, #16
10004334:	9300      	str	r3, [sp, #0]
10004336:	683b      	ldr	r3, [r7, #0]
10004338:	687a      	ldr	r2, [r7, #4]
1000433a:	68b9      	ldr	r1, [r7, #8]
1000433c:	68f8      	ldr	r0, [r7, #12]
1000433e:	f7ff fec3 	bl	100040c8 <_ntoa_format>
10004342:	4603      	mov	r3, r0
}
10004344:	4618      	mov	r0, r3
10004346:	3738      	adds	r7, #56	@ 0x38
10004348:	46bd      	mov	sp, r7
1000434a:	bd80      	pop	{r7, pc}

1000434c <_ntoa_long_long>:
// internal itoa for 'long long' type
#if PICO_PRINTF_SUPPORT_LONG_LONG

static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width,
                              unsigned int flags) {
1000434c:	b580      	push	{r7, lr}
1000434e:	b096      	sub	sp, #88	@ 0x58
10004350:	af08      	add	r7, sp, #32
10004352:	60f8      	str	r0, [r7, #12]
10004354:	60b9      	str	r1, [r7, #8]
10004356:	607a      	str	r2, [r7, #4]
10004358:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
1000435a:	2300      	movs	r3, #0
1000435c:	637b      	str	r3, [r7, #52]	@ 0x34

    // no hash for 0 values
    if (!value) {
1000435e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
10004362:	4313      	orrs	r3, r2
10004364:	d103      	bne.n	1000436e <_ntoa_long_long+0x22>
        flags &= ~FLAGS_HASH;
10004366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10004368:	f023 0310 	bic.w	r3, r3, #16
1000436c:	663b      	str	r3, [r7, #96]	@ 0x60
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
1000436e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10004370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10004374:	2b00      	cmp	r3, #0
10004376:	d003      	beq.n	10004380 <_ntoa_long_long+0x34>
10004378:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
1000437c:	4313      	orrs	r3, r2
1000437e:	d037      	beq.n	100043f0 <_ntoa_long_long+0xa4>
        do {
            const char digit = (char) (value % base);
10004380:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
10004384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
10004388:	f006 fee2 	bl	1000b150 <____aeabi_uldivmod_veneer>
1000438c:	4613      	mov	r3, r2
1000438e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
10004392:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
10004396:	2b09      	cmp	r3, #9
10004398:	d804      	bhi.n	100043a4 <_ntoa_long_long+0x58>
1000439a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
1000439e:	3330      	adds	r3, #48	@ 0x30
100043a0:	b2da      	uxtb	r2, r3
100043a2:	e00d      	b.n	100043c0 <_ntoa_long_long+0x74>
100043a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
100043a6:	f003 0320 	and.w	r3, r3, #32
100043aa:	2b00      	cmp	r3, #0
100043ac:	d001      	beq.n	100043b2 <_ntoa_long_long+0x66>
100043ae:	2241      	movs	r2, #65	@ 0x41
100043b0:	e000      	b.n	100043b4 <_ntoa_long_long+0x68>
100043b2:	2261      	movs	r2, #97	@ 0x61
100043b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
100043b8:	4413      	add	r3, r2
100043ba:	b2db      	uxtb	r3, r3
100043bc:	3b0a      	subs	r3, #10
100043be:	b2da      	uxtb	r2, r3
100043c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100043c2:	1c59      	adds	r1, r3, #1
100043c4:	6379      	str	r1, [r7, #52]	@ 0x34
100043c6:	3338      	adds	r3, #56	@ 0x38
100043c8:	443b      	add	r3, r7
100043ca:	f803 2c28 	strb.w	r2, [r3, #-40]
            value /= base;
100043ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
100043d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
100043d6:	f006 febb 	bl	1000b150 <____aeabi_uldivmod_veneer>
100043da:	4602      	mov	r2, r0
100043dc:	460b      	mov	r3, r1
100043de:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
        } while (value && (len < PICO_PRINTF_NTOA_BUFFER_SIZE));
100043e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
100043e6:	4313      	orrs	r3, r2
100043e8:	d002      	beq.n	100043f0 <_ntoa_long_long+0xa4>
100043ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100043ec:	2b1f      	cmp	r3, #31
100043ee:	d9c7      	bls.n	10004380 <_ntoa_long_long+0x34>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int) base, prec, width, flags);
100043f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
100043f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
100043f4:	9206      	str	r2, [sp, #24]
100043f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
100043f8:	9205      	str	r2, [sp, #20]
100043fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
100043fc:	9204      	str	r2, [sp, #16]
100043fe:	9303      	str	r3, [sp, #12]
10004400:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
10004404:	9302      	str	r3, [sp, #8]
10004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10004408:	9301      	str	r3, [sp, #4]
1000440a:	f107 0310 	add.w	r3, r7, #16
1000440e:	9300      	str	r3, [sp, #0]
10004410:	683b      	ldr	r3, [r7, #0]
10004412:	687a      	ldr	r2, [r7, #4]
10004414:	68b9      	ldr	r1, [r7, #8]
10004416:	68f8      	ldr	r0, [r7, #12]
10004418:	f7ff fe56 	bl	100040c8 <_ntoa_format>
1000441c:	4603      	mov	r3, r0
}
1000441e:	4618      	mov	r0, r3
10004420:	3738      	adds	r7, #56	@ 0x38
10004422:	46bd      	mov	sp, r7
10004424:	bd80      	pop	{r7, pc}
	...

10004428 <_ftoa>:

#define is_nan __builtin_isnan

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
10004428:	b590      	push	{r4, r7, lr}
1000442a:	b09d      	sub	sp, #116	@ 0x74
1000442c:	af06      	add	r7, sp, #24
1000442e:	60f8      	str	r0, [r7, #12]
10004430:	60b9      	str	r1, [r7, #8]
10004432:	607a      	str	r2, [r7, #4]
10004434:	603b      	str	r3, [r7, #0]
    char buf[PICO_PRINTF_FTOA_BUFFER_SIZE];
    size_t len = 0U;
10004436:	2300      	movs	r3, #0
10004438:	657b      	str	r3, [r7, #84]	@ 0x54
    double diff = 0.0;
1000443a:	f04f 0200 	mov.w	r2, #0
1000443e:	f04f 0300 	mov.w	r3, #0
10004442:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    // powers of 10
    static const double pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};

    // test for special values
    if (is_nan(value))
10004446:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
1000444a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
1000444e:	f7ff fd25 	bl	10003e9c <__wrap___aeabi_dcmpun>
10004452:	4603      	mov	r3, r0
10004454:	2b00      	cmp	r3, #0
10004456:	d00f      	beq.n	10004478 <_ftoa+0x50>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
10004458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
1000445a:	9303      	str	r3, [sp, #12]
1000445c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
1000445e:	9302      	str	r3, [sp, #8]
10004460:	2303      	movs	r3, #3
10004462:	9301      	str	r3, [sp, #4]
10004464:	4b82      	ldr	r3, [pc, #520]	@ (10004670 <_ftoa+0x248>)
10004466:	9300      	str	r3, [sp, #0]
10004468:	683b      	ldr	r3, [r7, #0]
1000446a:	687a      	ldr	r2, [r7, #4]
1000446c:	68b9      	ldr	r1, [r7, #8]
1000446e:	68f8      	ldr	r0, [r7, #12]
10004470:	f7ff fdda 	bl	10004028 <_out_rev>
10004474:	4603      	mov	r3, r0
10004476:	e22f      	b.n	100048d8 <_ftoa+0x4b0>
    if (value < -DBL_MAX)
10004478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1000447c:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
10004480:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10004484:	f7ff fd1c 	bl	10003ec0 <__wrap___aeabi_dcmplt>
10004488:	4603      	mov	r3, r0
1000448a:	2b00      	cmp	r3, #0
1000448c:	d00f      	beq.n	100044ae <_ftoa+0x86>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
1000448e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10004490:	9303      	str	r3, [sp, #12]
10004492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10004494:	9302      	str	r3, [sp, #8]
10004496:	2304      	movs	r3, #4
10004498:	9301      	str	r3, [sp, #4]
1000449a:	4b76      	ldr	r3, [pc, #472]	@ (10004674 <_ftoa+0x24c>)
1000449c:	9300      	str	r3, [sp, #0]
1000449e:	683b      	ldr	r3, [r7, #0]
100044a0:	687a      	ldr	r2, [r7, #4]
100044a2:	68b9      	ldr	r1, [r7, #8]
100044a4:	68f8      	ldr	r0, [r7, #12]
100044a6:	f7ff fdbf 	bl	10004028 <_out_rev>
100044aa:	4603      	mov	r3, r0
100044ac:	e214      	b.n	100048d8 <_ftoa+0x4b0>
    if (value > DBL_MAX)
100044ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100044b2:	4b71      	ldr	r3, [pc, #452]	@ (10004678 <_ftoa+0x250>)
100044b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
100044b8:	f7ff fd2a 	bl	10003f10 <__wrap___aeabi_dcmpgt>
100044bc:	4603      	mov	r3, r0
100044be:	2b00      	cmp	r3, #0
100044c0:	d01d      	beq.n	100044fe <_ftoa+0xd6>
        return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U,
100044c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100044c4:	f003 0304 	and.w	r3, r3, #4
100044c8:	2b00      	cmp	r3, #0
100044ca:	d001      	beq.n	100044d0 <_ftoa+0xa8>
100044cc:	4b6b      	ldr	r3, [pc, #428]	@ (1000467c <_ftoa+0x254>)
100044ce:	e000      	b.n	100044d2 <_ftoa+0xaa>
100044d0:	4b6b      	ldr	r3, [pc, #428]	@ (10004680 <_ftoa+0x258>)
100044d2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
100044d4:	f002 0204 	and.w	r2, r2, #4
100044d8:	2a00      	cmp	r2, #0
100044da:	d001      	beq.n	100044e0 <_ftoa+0xb8>
100044dc:	2204      	movs	r2, #4
100044de:	e000      	b.n	100044e2 <_ftoa+0xba>
100044e0:	2203      	movs	r2, #3
100044e2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
100044e4:	9103      	str	r1, [sp, #12]
100044e6:	6f79      	ldr	r1, [r7, #116]	@ 0x74
100044e8:	9102      	str	r1, [sp, #8]
100044ea:	9201      	str	r2, [sp, #4]
100044ec:	9300      	str	r3, [sp, #0]
100044ee:	683b      	ldr	r3, [r7, #0]
100044f0:	687a      	ldr	r2, [r7, #4]
100044f2:	68b9      	ldr	r1, [r7, #8]
100044f4:	68f8      	ldr	r0, [r7, #12]
100044f6:	f7ff fd97 	bl	10004028 <_out_rev>
100044fa:	4603      	mov	r3, r0
100044fc:	e1ec      	b.n	100048d8 <_ftoa+0x4b0>
                        width, flags);

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
    if ((value > PICO_PRINTF_MAX_FLOAT) || (value < -PICO_PRINTF_MAX_FLOAT)) {
100044fe:	a358      	add	r3, pc, #352	@ (adr r3, 10004660 <_ftoa+0x238>)
10004500:	e9d3 2300 	ldrd	r2, r3, [r3]
10004504:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
10004508:	f7ff fd02 	bl	10003f10 <__wrap___aeabi_dcmpgt>
1000450c:	4603      	mov	r3, r0
1000450e:	2b00      	cmp	r3, #0
10004510:	d109      	bne.n	10004526 <_ftoa+0xfe>
10004512:	a355      	add	r3, pc, #340	@ (adr r3, 10004668 <_ftoa+0x240>)
10004514:	e9d3 2300 	ldrd	r2, r3, [r3]
10004518:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
1000451c:	f7ff fcd0 	bl	10003ec0 <__wrap___aeabi_dcmplt>
10004520:	4603      	mov	r3, r0
10004522:	2b00      	cmp	r3, #0
10004524:	d011      	beq.n	1000454a <_ftoa+0x122>
#if PICO_PRINTF_SUPPORT_EXPONENTIAL
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
10004526:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10004528:	9304      	str	r3, [sp, #16]
1000452a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
1000452c:	9303      	str	r3, [sp, #12]
1000452e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10004530:	9302      	str	r3, [sp, #8]
10004532:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
10004536:	e9cd 2300 	strd	r2, r3, [sp]
1000453a:	683b      	ldr	r3, [r7, #0]
1000453c:	687a      	ldr	r2, [r7, #4]
1000453e:	68b9      	ldr	r1, [r7, #8]
10004540:	68f8      	ldr	r0, [r7, #12]
10004542:	f000 f9d5 	bl	100048f0 <_etoa>
10004546:	4603      	mov	r3, r0
10004548:	e1c6      	b.n	100048d8 <_ftoa+0x4b0>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
1000454a:	2300      	movs	r3, #0
1000454c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    if (value < 0) {
10004550:	f04f 0200 	mov.w	r2, #0
10004554:	f04f 0300 	mov.w	r3, #0
10004558:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
1000455c:	f7ff fcb0 	bl	10003ec0 <__wrap___aeabi_dcmplt>
10004560:	4603      	mov	r3, r0
10004562:	2b00      	cmp	r3, #0
10004564:	d00e      	beq.n	10004584 <_ftoa+0x15c>
        negative = true;
10004566:	2301      	movs	r3, #1
10004568:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        value = 0 - value;
1000456c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
10004570:	f04f 0000 	mov.w	r0, #0
10004574:	f04f 0100 	mov.w	r1, #0
10004578:	f7ff fbc0 	bl	10003cfc <__wrap___aeabi_dsub>
1000457c:	4602      	mov	r2, r0
1000457e:	460b      	mov	r3, r1
10004580:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
10004584:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10004586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
1000458a:	2b00      	cmp	r3, #0
1000458c:	d10d      	bne.n	100045aa <_ftoa+0x182>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
1000458e:	2306      	movs	r3, #6
10004590:	673b      	str	r3, [r7, #112]	@ 0x70
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
10004592:	e00a      	b.n	100045aa <_ftoa+0x182>
        buf[len++] = '0';
10004594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004596:	1c5a      	adds	r2, r3, #1
10004598:	657a      	str	r2, [r7, #84]	@ 0x54
1000459a:	3358      	adds	r3, #88	@ 0x58
1000459c:	443b      	add	r3, r7
1000459e:	2230      	movs	r2, #48	@ 0x30
100045a0:	f803 2c48 	strb.w	r2, [r3, #-72]
        prec--;
100045a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
100045a6:	3b01      	subs	r3, #1
100045a8:	673b      	str	r3, [r7, #112]	@ 0x70
    while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
100045aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100045ac:	2b1f      	cmp	r3, #31
100045ae:	d802      	bhi.n	100045b6 <_ftoa+0x18e>
100045b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
100045b2:	2b09      	cmp	r3, #9
100045b4:	d8ee      	bhi.n	10004594 <_ftoa+0x16c>
    }

    int whole = (int) value;
100045b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
100045ba:	f7ff fc4b 	bl	10003e54 <__wrap___aeabi_d2iz>
100045be:	4603      	mov	r3, r0
100045c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    double tmp = (value - whole) * pow10[prec];
100045c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
100045c4:	f7ff fc22 	bl	10003e0c <__wrap___aeabi_i2d>
100045c8:	4602      	mov	r2, r0
100045ca:	460b      	mov	r3, r1
100045cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
100045d0:	f7ff fb94 	bl	10003cfc <__wrap___aeabi_dsub>
100045d4:	4602      	mov	r2, r0
100045d6:	460b      	mov	r3, r1
100045d8:	4610      	mov	r0, r2
100045da:	4619      	mov	r1, r3
100045dc:	4a29      	ldr	r2, [pc, #164]	@ (10004684 <_ftoa+0x25c>)
100045de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
100045e0:	00db      	lsls	r3, r3, #3
100045e2:	4413      	add	r3, r2
100045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100045e8:	f7ff fb9c 	bl	10003d24 <__wrap___aeabi_dmul>
100045ec:	4602      	mov	r2, r0
100045ee:	460b      	mov	r3, r1
100045f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    unsigned long frac = (unsigned long) tmp;
100045f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
100045f8:	f7ff fc3e 	bl	10003e78 <__wrap___aeabi_d2uiz>
100045fc:	4603      	mov	r3, r0
100045fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    diff = tmp - frac;
10004600:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10004602:	f7ff fc15 	bl	10003e30 <__wrap___aeabi_ui2d>
10004606:	4602      	mov	r2, r0
10004608:	460b      	mov	r3, r1
1000460a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
1000460e:	f7ff fb75 	bl	10003cfc <__wrap___aeabi_dsub>
10004612:	4602      	mov	r2, r0
10004614:	460b      	mov	r3, r1
10004616:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    if (diff > 0.5) {
1000461a:	f04f 0200 	mov.w	r2, #0
1000461e:	4b1a      	ldr	r3, [pc, #104]	@ (10004688 <_ftoa+0x260>)
10004620:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10004624:	f7ff fc74 	bl	10003f10 <__wrap___aeabi_dcmpgt>
10004628:	4603      	mov	r3, r0
1000462a:	2b00      	cmp	r3, #0
1000462c:	d02e      	beq.n	1000468c <_ftoa+0x264>
        ++frac;
1000462e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004630:	3301      	adds	r3, #1
10004632:	64bb      	str	r3, [r7, #72]	@ 0x48
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
10004634:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10004636:	f7ff fbfb 	bl	10003e30 <__wrap___aeabi_ui2d>
1000463a:	4a12      	ldr	r2, [pc, #72]	@ (10004684 <_ftoa+0x25c>)
1000463c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
1000463e:	00db      	lsls	r3, r3, #3
10004640:	4413      	add	r3, r2
10004642:	e9d3 2300 	ldrd	r2, r3, [r3]
10004646:	f7ff fc4f 	bl	10003ee8 <__wrap___aeabi_dcmpge>
1000464a:	4603      	mov	r3, r0
1000464c:	2b00      	cmp	r3, #0
1000464e:	d032      	beq.n	100046b6 <_ftoa+0x28e>
            frac = 0;
10004650:	2300      	movs	r3, #0
10004652:	64bb      	str	r3, [r7, #72]	@ 0x48
            ++whole;
10004654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10004656:	3301      	adds	r3, #1
10004658:	64fb      	str	r3, [r7, #76]	@ 0x4c
1000465a:	e02c      	b.n	100046b6 <_ftoa+0x28e>
1000465c:	f3af 8000 	nop.w
10004660:	00000000 	.word	0x00000000
10004664:	41cdcd65 	.word	0x41cdcd65
10004668:	00000000 	.word	0x00000000
1000466c:	c1cdcd65 	.word	0xc1cdcd65
10004670:	1000b974 	.word	0x1000b974
10004674:	1000b978 	.word	0x1000b978
10004678:	7fefffff 	.word	0x7fefffff
1000467c:	1000b980 	.word	0x1000b980
10004680:	1000b988 	.word	0x1000b988
10004684:	1000b990 	.word	0x1000b990
10004688:	3fe00000 	.word	0x3fe00000
        }
    } else if (diff < 0.5) {
1000468c:	f04f 0200 	mov.w	r2, #0
10004690:	4b93      	ldr	r3, [pc, #588]	@ (100048e0 <_ftoa+0x4b8>)
10004692:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10004696:	f7ff fc13 	bl	10003ec0 <__wrap___aeabi_dcmplt>
1000469a:	4603      	mov	r3, r0
1000469c:	2b00      	cmp	r3, #0
1000469e:	d10a      	bne.n	100046b6 <_ftoa+0x28e>
    } else if ((frac == 0U) || (frac & 1U)) {
100046a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100046a2:	2b00      	cmp	r3, #0
100046a4:	d004      	beq.n	100046b0 <_ftoa+0x288>
100046a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100046a8:	f003 0301 	and.w	r3, r3, #1
100046ac:	2b00      	cmp	r3, #0
100046ae:	d002      	beq.n	100046b6 <_ftoa+0x28e>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
100046b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100046b2:	3301      	adds	r3, #1
100046b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    if (prec == 0U) {
100046b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
100046b8:	2b00      	cmp	r3, #0
100046ba:	d13e      	bne.n	1000473a <_ftoa+0x312>
        diff = value - (double) whole;
100046bc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
100046be:	f7ff fba5 	bl	10003e0c <__wrap___aeabi_i2d>
100046c2:	4602      	mov	r2, r0
100046c4:	460b      	mov	r3, r1
100046c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
100046ca:	f7ff fb17 	bl	10003cfc <__wrap___aeabi_dsub>
100046ce:	4602      	mov	r2, r0
100046d0:	460b      	mov	r3, r1
100046d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        if (!((diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
100046d6:	2301      	movs	r3, #1
100046d8:	461c      	mov	r4, r3
100046da:	f04f 0200 	mov.w	r2, #0
100046de:	4b80      	ldr	r3, [pc, #512]	@ (100048e0 <_ftoa+0x4b8>)
100046e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
100046e4:	f7ff fbec 	bl	10003ec0 <__wrap___aeabi_dcmplt>
100046e8:	4603      	mov	r3, r0
100046ea:	2b00      	cmp	r3, #0
100046ec:	d101      	bne.n	100046f2 <_ftoa+0x2ca>
100046ee:	2300      	movs	r3, #0
100046f0:	461c      	mov	r4, r3
100046f2:	b2e3      	uxtb	r3, r4
100046f4:	f083 0301 	eor.w	r3, r3, #1
100046f8:	b2db      	uxtb	r3, r3
100046fa:	2b00      	cmp	r3, #0
100046fc:	f000 8083 	beq.w	10004806 <_ftoa+0x3de>
10004700:	2301      	movs	r3, #1
10004702:	461c      	mov	r4, r3
10004704:	f04f 0200 	mov.w	r2, #0
10004708:	4b75      	ldr	r3, [pc, #468]	@ (100048e0 <_ftoa+0x4b8>)
1000470a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
1000470e:	f7ff fbff 	bl	10003f10 <__wrap___aeabi_dcmpgt>
10004712:	4603      	mov	r3, r0
10004714:	2b00      	cmp	r3, #0
10004716:	d101      	bne.n	1000471c <_ftoa+0x2f4>
10004718:	2300      	movs	r3, #0
1000471a:	461c      	mov	r4, r3
1000471c:	b2e3      	uxtb	r3, r4
1000471e:	f083 0301 	eor.w	r3, r3, #1
10004722:	b2db      	uxtb	r3, r3
10004724:	2b00      	cmp	r3, #0
10004726:	d06e      	beq.n	10004806 <_ftoa+0x3de>
10004728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1000472a:	f003 0301 	and.w	r3, r3, #1
1000472e:	2b00      	cmp	r3, #0
10004730:	d069      	beq.n	10004806 <_ftoa+0x3de>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
10004732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10004734:	3301      	adds	r3, #1
10004736:	64fb      	str	r3, [r7, #76]	@ 0x4c
10004738:	e065      	b.n	10004806 <_ftoa+0x3de>
        }
    } else {
        unsigned int count = prec;
1000473a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
1000473c:	647b      	str	r3, [r7, #68]	@ 0x44
        // now do fractional part, as an unsigned number
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
1000473e:	e01f      	b.n	10004780 <_ftoa+0x358>
            --count;
10004740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10004742:	3b01      	subs	r3, #1
10004744:	647b      	str	r3, [r7, #68]	@ 0x44
            buf[len++] = (char) (48U + (frac % 10U));
10004746:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
10004748:	4b66      	ldr	r3, [pc, #408]	@ (100048e4 <_ftoa+0x4bc>)
1000474a:	fba3 2301 	umull	r2, r3, r3, r1
1000474e:	08da      	lsrs	r2, r3, #3
10004750:	4613      	mov	r3, r2
10004752:	009b      	lsls	r3, r3, #2
10004754:	4413      	add	r3, r2
10004756:	005b      	lsls	r3, r3, #1
10004758:	1aca      	subs	r2, r1, r3
1000475a:	b2d2      	uxtb	r2, r2
1000475c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000475e:	1c59      	adds	r1, r3, #1
10004760:	6579      	str	r1, [r7, #84]	@ 0x54
10004762:	3230      	adds	r2, #48	@ 0x30
10004764:	b2d2      	uxtb	r2, r2
10004766:	3358      	adds	r3, #88	@ 0x58
10004768:	443b      	add	r3, r7
1000476a:	f803 2c48 	strb.w	r2, [r3, #-72]
            if (!(frac /= 10U)) {
1000476e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10004770:	4a5c      	ldr	r2, [pc, #368]	@ (100048e4 <_ftoa+0x4bc>)
10004772:	fba2 2303 	umull	r2, r3, r2, r3
10004776:	08db      	lsrs	r3, r3, #3
10004778:	64bb      	str	r3, [r7, #72]	@ 0x48
1000477a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1000477c:	2b00      	cmp	r3, #0
1000477e:	d003      	beq.n	10004788 <_ftoa+0x360>
        while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10004780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004782:	2b1f      	cmp	r3, #31
10004784:	d9dc      	bls.n	10004740 <_ftoa+0x318>
10004786:	e009      	b.n	1000479c <_ftoa+0x374>
                break;
10004788:	bf00      	nop
            }
        }
        // add extra 0s
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
1000478a:	e007      	b.n	1000479c <_ftoa+0x374>
            buf[len++] = '0';
1000478c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000478e:	1c5a      	adds	r2, r3, #1
10004790:	657a      	str	r2, [r7, #84]	@ 0x54
10004792:	3358      	adds	r3, #88	@ 0x58
10004794:	443b      	add	r3, r7
10004796:	2230      	movs	r2, #48	@ 0x30
10004798:	f803 2c48 	strb.w	r2, [r3, #-72]
        while ((len < PICO_PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
1000479c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000479e:	2b1f      	cmp	r3, #31
100047a0:	d804      	bhi.n	100047ac <_ftoa+0x384>
100047a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100047a4:	1e5a      	subs	r2, r3, #1
100047a6:	647a      	str	r2, [r7, #68]	@ 0x44
100047a8:	2b00      	cmp	r3, #0
100047aa:	d1ef      	bne.n	1000478c <_ftoa+0x364>
        }
        if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
100047ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100047ae:	2b1f      	cmp	r3, #31
100047b0:	d829      	bhi.n	10004806 <_ftoa+0x3de>
            // add decimal
            buf[len++] = '.';
100047b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100047b4:	1c5a      	adds	r2, r3, #1
100047b6:	657a      	str	r2, [r7, #84]	@ 0x54
100047b8:	3358      	adds	r3, #88	@ 0x58
100047ba:	443b      	add	r3, r7
100047bc:	222e      	movs	r2, #46	@ 0x2e
100047be:	f803 2c48 	strb.w	r2, [r3, #-72]
        }
    }

    // do whole part, number is reversed
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
100047c2:	e020      	b.n	10004806 <_ftoa+0x3de>
        buf[len++] = (char) (48 + (whole % 10));
100047c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
100047c6:	4b48      	ldr	r3, [pc, #288]	@ (100048e8 <_ftoa+0x4c0>)
100047c8:	fb83 1302 	smull	r1, r3, r3, r2
100047cc:	1099      	asrs	r1, r3, #2
100047ce:	17d3      	asrs	r3, r2, #31
100047d0:	1ac9      	subs	r1, r1, r3
100047d2:	460b      	mov	r3, r1
100047d4:	009b      	lsls	r3, r3, #2
100047d6:	440b      	add	r3, r1
100047d8:	005b      	lsls	r3, r3, #1
100047da:	1ad1      	subs	r1, r2, r3
100047dc:	b2ca      	uxtb	r2, r1
100047de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100047e0:	1c59      	adds	r1, r3, #1
100047e2:	6579      	str	r1, [r7, #84]	@ 0x54
100047e4:	3230      	adds	r2, #48	@ 0x30
100047e6:	b2d2      	uxtb	r2, r2
100047e8:	3358      	adds	r3, #88	@ 0x58
100047ea:	443b      	add	r3, r7
100047ec:	f803 2c48 	strb.w	r2, [r3, #-72]
        if (!(whole /= 10)) {
100047f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100047f2:	4a3d      	ldr	r2, [pc, #244]	@ (100048e8 <_ftoa+0x4c0>)
100047f4:	fb82 1203 	smull	r1, r2, r2, r3
100047f8:	1092      	asrs	r2, r2, #2
100047fa:	17db      	asrs	r3, r3, #31
100047fc:	1ad3      	subs	r3, r2, r3
100047fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
10004800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10004802:	2b00      	cmp	r3, #0
10004804:	d003      	beq.n	1000480e <_ftoa+0x3e6>
    while (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10004806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004808:	2b1f      	cmp	r3, #31
1000480a:	d9db      	bls.n	100047c4 <_ftoa+0x39c>
1000480c:	e000      	b.n	10004810 <_ftoa+0x3e8>
            break;
1000480e:	bf00      	nop
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
10004810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10004812:	f003 0302 	and.w	r3, r3, #2
10004816:	2b00      	cmp	r3, #0
10004818:	d123      	bne.n	10004862 <_ftoa+0x43a>
1000481a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
1000481c:	f003 0301 	and.w	r3, r3, #1
10004820:	2b00      	cmp	r3, #0
10004822:	d01e      	beq.n	10004862 <_ftoa+0x43a>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
10004824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10004826:	2b00      	cmp	r3, #0
10004828:	d014      	beq.n	10004854 <_ftoa+0x42c>
1000482a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
1000482e:	2b00      	cmp	r3, #0
10004830:	d104      	bne.n	1000483c <_ftoa+0x414>
10004832:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10004834:	f003 030c 	and.w	r3, r3, #12
10004838:	2b00      	cmp	r3, #0
1000483a:	d00b      	beq.n	10004854 <_ftoa+0x42c>
            width--;
1000483c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
1000483e:	3b01      	subs	r3, #1
10004840:	677b      	str	r3, [r7, #116]	@ 0x74
        }
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10004842:	e007      	b.n	10004854 <_ftoa+0x42c>
            buf[len++] = '0';
10004844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004846:	1c5a      	adds	r2, r3, #1
10004848:	657a      	str	r2, [r7, #84]	@ 0x54
1000484a:	3358      	adds	r3, #88	@ 0x58
1000484c:	443b      	add	r3, r7
1000484e:	2230      	movs	r2, #48	@ 0x30
10004850:	f803 2c48 	strb.w	r2, [r3, #-72]
        while ((len < width) && (len < PICO_PRINTF_FTOA_BUFFER_SIZE)) {
10004854:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
10004858:	429a      	cmp	r2, r3
1000485a:	d202      	bcs.n	10004862 <_ftoa+0x43a>
1000485c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000485e:	2b1f      	cmp	r3, #31
10004860:	d9f0      	bls.n	10004844 <_ftoa+0x41c>
        }
    }

    if (len < PICO_PRINTF_FTOA_BUFFER_SIZE) {
10004862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004864:	2b1f      	cmp	r3, #31
10004866:	d827      	bhi.n	100048b8 <_ftoa+0x490>
        if (negative) {
10004868:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
1000486c:	2b00      	cmp	r3, #0
1000486e:	d008      	beq.n	10004882 <_ftoa+0x45a>
            buf[len++] = '-';
10004870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004872:	1c5a      	adds	r2, r3, #1
10004874:	657a      	str	r2, [r7, #84]	@ 0x54
10004876:	3358      	adds	r3, #88	@ 0x58
10004878:	443b      	add	r3, r7
1000487a:	222d      	movs	r2, #45	@ 0x2d
1000487c:	f803 2c48 	strb.w	r2, [r3, #-72]
10004880:	e01a      	b.n	100048b8 <_ftoa+0x490>
        } else if (flags & FLAGS_PLUS) {
10004882:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
10004884:	f003 0304 	and.w	r3, r3, #4
10004888:	2b00      	cmp	r3, #0
1000488a:	d008      	beq.n	1000489e <_ftoa+0x476>
            buf[len++] = '+';  // ignore the space if the '+' exists
1000488c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000488e:	1c5a      	adds	r2, r3, #1
10004890:	657a      	str	r2, [r7, #84]	@ 0x54
10004892:	3358      	adds	r3, #88	@ 0x58
10004894:	443b      	add	r3, r7
10004896:	222b      	movs	r2, #43	@ 0x2b
10004898:	f803 2c48 	strb.w	r2, [r3, #-72]
1000489c:	e00c      	b.n	100048b8 <_ftoa+0x490>
        } else if (flags & FLAGS_SPACE) {
1000489e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100048a0:	f003 0308 	and.w	r3, r3, #8
100048a4:	2b00      	cmp	r3, #0
100048a6:	d007      	beq.n	100048b8 <_ftoa+0x490>
            buf[len++] = ' ';
100048a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100048aa:	1c5a      	adds	r2, r3, #1
100048ac:	657a      	str	r2, [r7, #84]	@ 0x54
100048ae:	3358      	adds	r3, #88	@ 0x58
100048b0:	443b      	add	r3, r7
100048b2:	2220      	movs	r2, #32
100048b4:	f803 2c48 	strb.w	r2, [r3, #-72]
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
100048b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
100048ba:	9303      	str	r3, [sp, #12]
100048bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
100048be:	9302      	str	r3, [sp, #8]
100048c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100048c2:	9301      	str	r3, [sp, #4]
100048c4:	f107 0310 	add.w	r3, r7, #16
100048c8:	9300      	str	r3, [sp, #0]
100048ca:	683b      	ldr	r3, [r7, #0]
100048cc:	687a      	ldr	r2, [r7, #4]
100048ce:	68b9      	ldr	r1, [r7, #8]
100048d0:	68f8      	ldr	r0, [r7, #12]
100048d2:	f7ff fba9 	bl	10004028 <_out_rev>
100048d6:	4603      	mov	r3, r0
}
100048d8:	4618      	mov	r0, r3
100048da:	375c      	adds	r7, #92	@ 0x5c
100048dc:	46bd      	mov	sp, r7
100048de:	bd90      	pop	{r4, r7, pc}
100048e0:	3fe00000 	.word	0x3fe00000
100048e4:	cccccccd 	.word	0xcccccccd
100048e8:	66666667 	.word	0x66666667
100048ec:	00000000 	.word	0x00000000

100048f0 <_etoa>:

#if PICO_PRINTF_SUPPORT_EXPONENTIAL

// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen, double value, unsigned int prec,
                    unsigned int width, unsigned int flags) {
100048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100048f4:	b09d      	sub	sp, #116	@ 0x74
100048f6:	af06      	add	r7, sp, #24
100048f8:	61f8      	str	r0, [r7, #28]
100048fa:	61b9      	str	r1, [r7, #24]
100048fc:	617a      	str	r2, [r7, #20]
100048fe:	613b      	str	r3, [r7, #16]
    // check for NaN and special values
    if (is_nan(value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
10004900:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
10004904:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
10004908:	f7ff fac8 	bl	10003e9c <__wrap___aeabi_dcmpun>
1000490c:	4603      	mov	r3, r0
1000490e:	2b00      	cmp	r3, #0
10004910:	d114      	bne.n	1000493c <_etoa+0x4c>
10004912:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10004916:	4bc8      	ldr	r3, [pc, #800]	@ (10004c38 <_etoa+0x348>)
10004918:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
1000491c:	f7ff faf8 	bl	10003f10 <__wrap___aeabi_dcmpgt>
10004920:	4603      	mov	r3, r0
10004922:	2b00      	cmp	r3, #0
10004924:	d10a      	bne.n	1000493c <_etoa+0x4c>
10004926:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1000492a:	f46f 1380 	mvn.w	r3, #1048576	@ 0x100000
1000492e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
10004932:	f7ff fac5 	bl	10003ec0 <__wrap___aeabi_dcmplt>
10004936:	4603      	mov	r3, r0
10004938:	2b00      	cmp	r3, #0
1000493a:	d014      	beq.n	10004966 <_etoa+0x76>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
1000493c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004940:	9304      	str	r3, [sp, #16]
10004942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
10004946:	9303      	str	r3, [sp, #12]
10004948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
1000494c:	9302      	str	r3, [sp, #8]
1000494e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
10004952:	e9cd 2300 	strd	r2, r3, [sp]
10004956:	693b      	ldr	r3, [r7, #16]
10004958:	697a      	ldr	r2, [r7, #20]
1000495a:	69b9      	ldr	r1, [r7, #24]
1000495c:	69f8      	ldr	r0, [r7, #28]
1000495e:	f7ff fd63 	bl	10004428 <_ftoa>
10004962:	4603      	mov	r3, r0
10004964:	e253      	b.n	10004e0e <_etoa+0x51e>
    }

    // determine the sign
    const bool negative = value < 0;
10004966:	2301      	movs	r3, #1
10004968:	461e      	mov	r6, r3
1000496a:	f04f 0200 	mov.w	r2, #0
1000496e:	f04f 0300 	mov.w	r3, #0
10004972:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
10004976:	f7ff faa3 	bl	10003ec0 <__wrap___aeabi_dcmplt>
1000497a:	4603      	mov	r3, r0
1000497c:	2b00      	cmp	r3, #0
1000497e:	d101      	bne.n	10004984 <_etoa+0x94>
10004980:	2300      	movs	r3, #0
10004982:	461e      	mov	r6, r3
10004984:	f887 604b 	strb.w	r6, [r7, #75]	@ 0x4b
    if (negative) {
10004988:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
1000498c:	2b00      	cmp	r3, #0
1000498e:	d00b      	beq.n	100049a8 <_etoa+0xb8>
        value = -value;
10004990:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
10004994:	603b      	str	r3, [r7, #0]
10004996:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
1000499a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
1000499e:	607b      	str	r3, [r7, #4]
100049a0:	ed97 7b00 	vldr	d7, [r7]
100049a4:	ed87 7b20 	vstr	d7, [r7, #128]	@ 0x80
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
100049a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
100049ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
100049b0:	2b00      	cmp	r3, #0
100049b2:	d102      	bne.n	100049ba <_etoa+0xca>
        prec = PICO_PRINTF_DEFAULT_FLOAT_PRECISION;
100049b4:	2306      	movs	r3, #6
100049b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F = value;
100049ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
100049be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int expval;
    if (conv.U) {
100049c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100049c6:	4313      	orrs	r3, r2
100049c8:	f000 8111 	beq.w	10004bee <_etoa+0x2fe>
        int exp2 = (int) ((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
100049cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
100049d0:	f04f 0200 	mov.w	r2, #0
100049d4:	f04f 0300 	mov.w	r3, #0
100049d8:	0d0a      	lsrs	r2, r1, #20
100049da:	2300      	movs	r3, #0
100049dc:	4613      	mov	r3, r2
100049de:	f3c3 030a 	ubfx	r3, r3, #0, #11
100049e2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
100049e6:	647b      	str	r3, [r7, #68]	@ 0x44
        conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
100049e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100049ec:	4690      	mov	r8, r2
100049ee:	f3c3 0913 	ubfx	r9, r3, #0, #20
100049f2:	4644      	mov	r4, r8
100049f4:	f049 557f 	orr.w	r5, r9, #1069547520	@ 0x3fc00000
100049f8:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
100049fc:	e9c7 4508 	strd	r4, r5, [r7, #32]
        // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
        expval = (int) (0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
10004a00:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10004a02:	f7ff fa03 	bl	10003e0c <__wrap___aeabi_i2d>
10004a06:	a380      	add	r3, pc, #512	@ (adr r3, 10004c08 <_etoa+0x318>)
10004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a0c:	f7ff f98a 	bl	10003d24 <__wrap___aeabi_dmul>
10004a10:	4602      	mov	r2, r0
10004a12:	460b      	mov	r3, r1
10004a14:	4610      	mov	r0, r2
10004a16:	4619      	mov	r1, r3
10004a18:	a37d      	add	r3, pc, #500	@ (adr r3, 10004c10 <_etoa+0x320>)
10004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a1e:	f7ff f959 	bl	10003cd4 <__wrap___aeabi_dadd>
10004a22:	4602      	mov	r2, r0
10004a24:	460b      	mov	r3, r1
10004a26:	4614      	mov	r4, r2
10004a28:	461d      	mov	r5, r3
10004a2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
10004a2e:	f04f 0200 	mov.w	r2, #0
10004a32:	4b82      	ldr	r3, [pc, #520]	@ (10004c3c <_etoa+0x34c>)
10004a34:	f7ff f962 	bl	10003cfc <__wrap___aeabi_dsub>
10004a38:	4602      	mov	r2, r0
10004a3a:	460b      	mov	r3, r1
10004a3c:	4610      	mov	r0, r2
10004a3e:	4619      	mov	r1, r3
10004a40:	a375      	add	r3, pc, #468	@ (adr r3, 10004c18 <_etoa+0x328>)
10004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a46:	f7ff f96d 	bl	10003d24 <__wrap___aeabi_dmul>
10004a4a:	4602      	mov	r2, r0
10004a4c:	460b      	mov	r3, r1
10004a4e:	4620      	mov	r0, r4
10004a50:	4629      	mov	r1, r5
10004a52:	f7ff f93f 	bl	10003cd4 <__wrap___aeabi_dadd>
10004a56:	4602      	mov	r2, r0
10004a58:	460b      	mov	r3, r1
10004a5a:	4610      	mov	r0, r2
10004a5c:	4619      	mov	r1, r3
10004a5e:	f7ff f9f9 	bl	10003e54 <__wrap___aeabi_d2iz>
10004a62:	4603      	mov	r3, r0
10004a64:	657b      	str	r3, [r7, #84]	@ 0x54
        // now we want to compute 10^expval but we want to be sure it won't overflow
        exp2 = (int) (expval * 3.321928094887362 + 0.5);
10004a66:	6d78      	ldr	r0, [r7, #84]	@ 0x54
10004a68:	f7ff f9d0 	bl	10003e0c <__wrap___aeabi_i2d>
10004a6c:	a36c      	add	r3, pc, #432	@ (adr r3, 10004c20 <_etoa+0x330>)
10004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a72:	f7ff f957 	bl	10003d24 <__wrap___aeabi_dmul>
10004a76:	4602      	mov	r2, r0
10004a78:	460b      	mov	r3, r1
10004a7a:	4610      	mov	r0, r2
10004a7c:	4619      	mov	r1, r3
10004a7e:	f04f 0200 	mov.w	r2, #0
10004a82:	4b6f      	ldr	r3, [pc, #444]	@ (10004c40 <_etoa+0x350>)
10004a84:	f7ff f926 	bl	10003cd4 <__wrap___aeabi_dadd>
10004a88:	4602      	mov	r2, r0
10004a8a:	460b      	mov	r3, r1
10004a8c:	4610      	mov	r0, r2
10004a8e:	4619      	mov	r1, r3
10004a90:	f7ff f9e0 	bl	10003e54 <__wrap___aeabi_d2iz>
10004a94:	4603      	mov	r3, r0
10004a96:	647b      	str	r3, [r7, #68]	@ 0x44
        const double z = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
10004a98:	6d78      	ldr	r0, [r7, #84]	@ 0x54
10004a9a:	f7ff f9b7 	bl	10003e0c <__wrap___aeabi_i2d>
10004a9e:	a362      	add	r3, pc, #392	@ (adr r3, 10004c28 <_etoa+0x338>)
10004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
10004aa4:	f7ff f93e 	bl	10003d24 <__wrap___aeabi_dmul>
10004aa8:	4602      	mov	r2, r0
10004aaa:	460b      	mov	r3, r1
10004aac:	4614      	mov	r4, r2
10004aae:	461d      	mov	r5, r3
10004ab0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
10004ab2:	f7ff f9ab 	bl	10003e0c <__wrap___aeabi_i2d>
10004ab6:	a35e      	add	r3, pc, #376	@ (adr r3, 10004c30 <_etoa+0x340>)
10004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
10004abc:	f7ff f932 	bl	10003d24 <__wrap___aeabi_dmul>
10004ac0:	4602      	mov	r2, r0
10004ac2:	460b      	mov	r3, r1
10004ac4:	4620      	mov	r0, r4
10004ac6:	4629      	mov	r1, r5
10004ac8:	f7ff f918 	bl	10003cfc <__wrap___aeabi_dsub>
10004acc:	4602      	mov	r2, r0
10004ace:	460b      	mov	r3, r1
10004ad0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        const double z2 = z * z;
10004ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
10004ad8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10004adc:	f7ff f922 	bl	10003d24 <__wrap___aeabi_dmul>
10004ae0:	4602      	mov	r2, r0
10004ae2:	460b      	mov	r3, r1
10004ae4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
        conv.U = (uint64_t) (exp2 + 1023) << 52U;
10004ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10004aea:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
10004aee:	17da      	asrs	r2, r3, #31
10004af0:	469a      	mov	sl, r3
10004af2:	4693      	mov	fp, r2
10004af4:	f04f 0200 	mov.w	r2, #0
10004af8:	f04f 0300 	mov.w	r3, #0
10004afc:	ea4f 530a 	mov.w	r3, sl, lsl #20
10004b00:	2200      	movs	r2, #0
10004b02:	e9c7 2308 	strd	r2, r3, [r7, #32]
        // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
        conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
10004b06:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
10004b0a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
10004b0e:	4602      	mov	r2, r0
10004b10:	460b      	mov	r3, r1
10004b12:	f7ff f8df 	bl	10003cd4 <__wrap___aeabi_dadd>
10004b16:	4602      	mov	r2, r0
10004b18:	460b      	mov	r3, r1
10004b1a:	4690      	mov	r8, r2
10004b1c:	4699      	mov	r9, r3
10004b1e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
10004b22:	f04f 0000 	mov.w	r0, #0
10004b26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
10004b2a:	f7ff f8e7 	bl	10003cfc <__wrap___aeabi_dsub>
10004b2e:	4602      	mov	r2, r0
10004b30:	460b      	mov	r3, r1
10004b32:	4692      	mov	sl, r2
10004b34:	469b      	mov	fp, r3
10004b36:	f04f 0200 	mov.w	r2, #0
10004b3a:	4b42      	ldr	r3, [pc, #264]	@ (10004c44 <_etoa+0x354>)
10004b3c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
10004b40:	f7ff f916 	bl	10003d70 <__wrap___aeabi_ddiv>
10004b44:	4602      	mov	r2, r0
10004b46:	460b      	mov	r3, r1
10004b48:	4610      	mov	r0, r2
10004b4a:	4619      	mov	r1, r3
10004b4c:	f04f 0200 	mov.w	r2, #0
10004b50:	4b3d      	ldr	r3, [pc, #244]	@ (10004c48 <_etoa+0x358>)
10004b52:	f7ff f8bf 	bl	10003cd4 <__wrap___aeabi_dadd>
10004b56:	4602      	mov	r2, r0
10004b58:	460b      	mov	r3, r1
10004b5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
10004b5e:	f7ff f907 	bl	10003d70 <__wrap___aeabi_ddiv>
10004b62:	4602      	mov	r2, r0
10004b64:	460b      	mov	r3, r1
10004b66:	4610      	mov	r0, r2
10004b68:	4619      	mov	r1, r3
10004b6a:	f04f 0200 	mov.w	r2, #0
10004b6e:	4b37      	ldr	r3, [pc, #220]	@ (10004c4c <_etoa+0x35c>)
10004b70:	f7ff f8b0 	bl	10003cd4 <__wrap___aeabi_dadd>
10004b74:	4602      	mov	r2, r0
10004b76:	460b      	mov	r3, r1
10004b78:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
10004b7c:	f7ff f8f8 	bl	10003d70 <__wrap___aeabi_ddiv>
10004b80:	4602      	mov	r2, r0
10004b82:	460b      	mov	r3, r1
10004b84:	4650      	mov	r0, sl
10004b86:	4659      	mov	r1, fp
10004b88:	f7ff f8a4 	bl	10003cd4 <__wrap___aeabi_dadd>
10004b8c:	4602      	mov	r2, r0
10004b8e:	460b      	mov	r3, r1
10004b90:	4640      	mov	r0, r8
10004b92:	4649      	mov	r1, r9
10004b94:	f7ff f8ec 	bl	10003d70 <__wrap___aeabi_ddiv>
10004b98:	4602      	mov	r2, r0
10004b9a:	460b      	mov	r3, r1
10004b9c:	4610      	mov	r0, r2
10004b9e:	4619      	mov	r1, r3
10004ba0:	f04f 0200 	mov.w	r2, #0
10004ba4:	4b2a      	ldr	r3, [pc, #168]	@ (10004c50 <_etoa+0x360>)
10004ba6:	f7ff f895 	bl	10003cd4 <__wrap___aeabi_dadd>
10004baa:	4602      	mov	r2, r0
10004bac:	460b      	mov	r3, r1
10004bae:	4620      	mov	r0, r4
10004bb0:	4629      	mov	r1, r5
10004bb2:	f7ff f8b7 	bl	10003d24 <__wrap___aeabi_dmul>
10004bb6:	4602      	mov	r2, r0
10004bb8:	460b      	mov	r3, r1
10004bba:	e9c7 2308 	strd	r2, r3, [r7, #32]
        // correct for rounding errors
        if (value < conv.F) {
10004bbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10004bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
10004bc6:	f7ff f97b 	bl	10003ec0 <__wrap___aeabi_dcmplt>
10004bca:	4603      	mov	r3, r0
10004bcc:	2b00      	cmp	r3, #0
10004bce:	d010      	beq.n	10004bf2 <_etoa+0x302>
            expval--;
10004bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004bd2:	3b01      	subs	r3, #1
10004bd4:	657b      	str	r3, [r7, #84]	@ 0x54
            conv.F /= 10;
10004bd6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
10004bda:	f04f 0200 	mov.w	r2, #0
10004bde:	4b1a      	ldr	r3, [pc, #104]	@ (10004c48 <_etoa+0x358>)
10004be0:	f7ff f8c6 	bl	10003d70 <__wrap___aeabi_ddiv>
10004be4:	4602      	mov	r2, r0
10004be6:	460b      	mov	r3, r1
10004be8:	e9c7 2308 	strd	r2, r3, [r7, #32]
10004bec:	e001      	b.n	10004bf2 <_etoa+0x302>
        }
    } else {
        expval = 0;
10004bee:	2300      	movs	r3, #0
10004bf0:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
10004bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004bf4:	2b63      	cmp	r3, #99	@ 0x63
10004bf6:	dc2d      	bgt.n	10004c54 <_etoa+0x364>
10004bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004bfa:	f113 0f63 	cmn.w	r3, #99	@ 0x63
10004bfe:	db29      	blt.n	10004c54 <_etoa+0x364>
10004c00:	2304      	movs	r3, #4
10004c02:	e028      	b.n	10004c56 <_etoa+0x366>
10004c04:	f3af 8000 	nop.w
10004c08:	509f79fb 	.word	0x509f79fb
10004c0c:	3fd34413 	.word	0x3fd34413
10004c10:	8b60c8b3 	.word	0x8b60c8b3
10004c14:	3fc68a28 	.word	0x3fc68a28
10004c18:	636f4361 	.word	0x636f4361
10004c1c:	3fd287a7 	.word	0x3fd287a7
10004c20:	0979a371 	.word	0x0979a371
10004c24:	400a934f 	.word	0x400a934f
10004c28:	bbb55516 	.word	0xbbb55516
10004c2c:	40026bb1 	.word	0x40026bb1
10004c30:	fefa39ef 	.word	0xfefa39ef
10004c34:	3fe62e42 	.word	0x3fe62e42
10004c38:	7fefffff 	.word	0x7fefffff
10004c3c:	3ff80000 	.word	0x3ff80000
10004c40:	3fe00000 	.word	0x3fe00000
10004c44:	402c0000 	.word	0x402c0000
10004c48:	40240000 	.word	0x40240000
10004c4c:	40180000 	.word	0x40180000
10004c50:	3ff00000 	.word	0x3ff00000
10004c54:	2305      	movs	r3, #5
10004c56:	653b      	str	r3, [r7, #80]	@ 0x50

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
10004c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
10004c60:	2b00      	cmp	r3, #0
10004c62:	d041      	beq.n	10004ce8 <_etoa+0x3f8>
        // do we want to fall-back to "%f" mode?
        if ((conv.U == 0) || ((value >= 1e-4) && (value < 1e6))) {
10004c64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10004c68:	4313      	orrs	r3, r2
10004c6a:	d013      	beq.n	10004c94 <_etoa+0x3a4>
10004c6c:	a36a      	add	r3, pc, #424	@ (adr r3, 10004e18 <_etoa+0x528>)
10004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
10004c72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
10004c76:	f7ff f937 	bl	10003ee8 <__wrap___aeabi_dcmpge>
10004c7a:	4603      	mov	r3, r0
10004c7c:	2b00      	cmp	r3, #0
10004c7e:	d024      	beq.n	10004cca <_etoa+0x3da>
10004c80:	a367      	add	r3, pc, #412	@ (adr r3, 10004e20 <_etoa+0x530>)
10004c82:	e9d3 2300 	ldrd	r2, r3, [r3]
10004c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
10004c8a:	f7ff f919 	bl	10003ec0 <__wrap___aeabi_dcmplt>
10004c8e:	4603      	mov	r3, r0
10004c90:	2b00      	cmp	r3, #0
10004c92:	d01a      	beq.n	10004cca <_etoa+0x3da>
            if ((int) prec > expval) {
10004c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004c9a:	429a      	cmp	r2, r3
10004c9c:	da07      	bge.n	10004cae <_etoa+0x3be>
                prec = (unsigned) ((int) prec - expval - 1);
10004c9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
10004ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004ca4:	1ad3      	subs	r3, r2, r3
10004ca6:	3b01      	subs	r3, #1
10004ca8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
10004cac:	e002      	b.n	10004cb4 <_etoa+0x3c4>
            } else {
                prec = 0;
10004cae:	2300      	movs	r3, #0
10004cb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
            flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
10004cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004cb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10004cbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            // no characters in exponent
            minwidth = 0U;
10004cc0:	2300      	movs	r3, #0
10004cc2:	653b      	str	r3, [r7, #80]	@ 0x50
            expval = 0;
10004cc4:	2300      	movs	r3, #0
10004cc6:	657b      	str	r3, [r7, #84]	@ 0x54
10004cc8:	e00e      	b.n	10004ce8 <_etoa+0x3f8>
        } else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
10004cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004cce:	2b00      	cmp	r3, #0
10004cd0:	d00a      	beq.n	10004ce8 <_etoa+0x3f8>
10004cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10004cda:	2b00      	cmp	r3, #0
10004cdc:	d004      	beq.n	10004ce8 <_etoa+0x3f8>
                --prec;
10004cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004ce2:	3b01      	subs	r3, #1
10004ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
10004ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
10004cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (width > minwidth) {
10004cee:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
10004cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10004cf4:	429a      	cmp	r2, r3
10004cf6:	d904      	bls.n	10004d02 <_etoa+0x412>
        // we didn't fall-back so subtract the characters required for the exponent
        fwidth -= minwidth;
10004cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
10004cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10004cfc:	1ad3      	subs	r3, r2, r3
10004cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
10004d00:	e001      	b.n	10004d06 <_etoa+0x416>
    } else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
10004d02:	2300      	movs	r3, #0
10004d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
10004d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004d0a:	f003 0302 	and.w	r3, r3, #2
10004d0e:	2b00      	cmp	r3, #0
10004d10:	d004      	beq.n	10004d1c <_etoa+0x42c>
10004d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10004d14:	2b00      	cmp	r3, #0
10004d16:	d001      	beq.n	10004d1c <_etoa+0x42c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
10004d18:	2300      	movs	r3, #0
10004d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    // rescale the float value
    if (expval) {
10004d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004d1e:	2b00      	cmp	r3, #0
10004d20:	d009      	beq.n	10004d36 <_etoa+0x446>
        value /= conv.F;
10004d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10004d26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
10004d2a:	f7ff f821 	bl	10003d70 <__wrap___aeabi_ddiv>
10004d2e:	4602      	mov	r2, r0
10004d30:	460b      	mov	r3, r1
10004d32:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    }

    // output the floating part
    const size_t start_idx = idx;
10004d36:	697b      	ldr	r3, [r7, #20]
10004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
10004d3a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
10004d3e:	2b00      	cmp	r3, #0
10004d40:	d008      	beq.n	10004d54 <_etoa+0x464>
10004d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
10004d46:	60bb      	str	r3, [r7, #8]
10004d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
10004d4c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
10004d50:	60fb      	str	r3, [r7, #12]
10004d52:	e003      	b.n	10004d5c <_etoa+0x46c>
10004d54:	ed97 7b20 	vldr	d7, [r7, #128]	@ 0x80
10004d58:	ed87 7b02 	vstr	d7, [r7, #8]
10004d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004d60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
10004d64:	9304      	str	r3, [sp, #16]
10004d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10004d68:	9303      	str	r3, [sp, #12]
10004d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004d6e:	9302      	str	r3, [sp, #8]
10004d70:	ed97 7b02 	vldr	d7, [r7, #8]
10004d74:	ed8d 7b00 	vstr	d7, [sp]
10004d78:	693b      	ldr	r3, [r7, #16]
10004d7a:	697a      	ldr	r2, [r7, #20]
10004d7c:	69b9      	ldr	r1, [r7, #24]
10004d7e:	69f8      	ldr	r0, [r7, #28]
10004d80:	f7ff fb52 	bl	10004428 <_ftoa>
10004d84:	6178      	str	r0, [r7, #20]

    // output the exponent part
    if (minwidth) {
10004d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10004d88:	2b00      	cmp	r3, #0
10004d8a:	d03f      	beq.n	10004e0c <_etoa+0x51c>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
10004d8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004d90:	f003 0320 	and.w	r3, r3, #32
10004d94:	2b00      	cmp	r3, #0
10004d96:	d001      	beq.n	10004d9c <_etoa+0x4ac>
10004d98:	2045      	movs	r0, #69	@ 0x45
10004d9a:	e000      	b.n	10004d9e <_etoa+0x4ae>
10004d9c:	2065      	movs	r0, #101	@ 0x65
10004d9e:	697a      	ldr	r2, [r7, #20]
10004da0:	1c53      	adds	r3, r2, #1
10004da2:	617b      	str	r3, [r7, #20]
10004da4:	69fc      	ldr	r4, [r7, #28]
10004da6:	693b      	ldr	r3, [r7, #16]
10004da8:	69b9      	ldr	r1, [r7, #24]
10004daa:	47a0      	blx	r4
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen, (uint)((expval < 0) ? -expval : expval), expval < 0, 10, 0, minwidth - 1,
10004dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004dae:	2b00      	cmp	r3, #0
10004db0:	bfb8      	it	lt
10004db2:	425b      	neglt	r3, r3
10004db4:	4618      	mov	r0, r3
10004db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10004db8:	0fdb      	lsrs	r3, r3, #31
10004dba:	b2db      	uxtb	r3, r3
10004dbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10004dbe:	3a01      	subs	r2, #1
10004dc0:	2105      	movs	r1, #5
10004dc2:	9105      	str	r1, [sp, #20]
10004dc4:	9204      	str	r2, [sp, #16]
10004dc6:	2200      	movs	r2, #0
10004dc8:	9203      	str	r2, [sp, #12]
10004dca:	220a      	movs	r2, #10
10004dcc:	9202      	str	r2, [sp, #8]
10004dce:	9301      	str	r3, [sp, #4]
10004dd0:	9000      	str	r0, [sp, #0]
10004dd2:	693b      	ldr	r3, [r7, #16]
10004dd4:	697a      	ldr	r2, [r7, #20]
10004dd6:	69b9      	ldr	r1, [r7, #24]
10004dd8:	69f8      	ldr	r0, [r7, #28]
10004dda:	f7ff fa51 	bl	10004280 <_ntoa_long>
10004dde:	6178      	str	r0, [r7, #20]
                         FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
10004de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
10004de4:	f003 0302 	and.w	r3, r3, #2
10004de8:	2b00      	cmp	r3, #0
10004dea:	d00f      	beq.n	10004e0c <_etoa+0x51c>
            while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
10004dec:	e007      	b.n	10004dfe <_etoa+0x50e>
10004dee:	697a      	ldr	r2, [r7, #20]
10004df0:	1c53      	adds	r3, r2, #1
10004df2:	617b      	str	r3, [r7, #20]
10004df4:	69fc      	ldr	r4, [r7, #28]
10004df6:	693b      	ldr	r3, [r7, #16]
10004df8:	69b9      	ldr	r1, [r7, #24]
10004dfa:	2020      	movs	r0, #32
10004dfc:	47a0      	blx	r4
10004dfe:	697a      	ldr	r2, [r7, #20]
10004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10004e02:	1ad3      	subs	r3, r2, r3
10004e04:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
10004e08:	429a      	cmp	r2, r3
10004e0a:	d8f0      	bhi.n	10004dee <_etoa+0x4fe>
        }
    }
    return idx;
10004e0c:	697b      	ldr	r3, [r7, #20]
}
10004e0e:	4618      	mov	r0, r3
10004e10:	375c      	adds	r7, #92	@ 0x5c
10004e12:	46bd      	mov	sp, r7
10004e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10004e18:	eb1c432d 	.word	0xeb1c432d
10004e1c:	3f1a36e2 	.word	0x3f1a36e2
10004e20:	00000000 	.word	0x00000000
10004e24:	412e8480 	.word	0x412e8480

10004e28 <_vsnprintf>:

#endif  // PICO_PRINTF_SUPPORT_EXPONENTIAL
#endif  // PICO_PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen, const char *format, va_list va) {
10004e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10004e2c:	b0a4      	sub	sp, #144	@ 0x90
10004e2e:	af0a      	add	r7, sp, #40	@ 0x28
10004e30:	61f8      	str	r0, [r7, #28]
10004e32:	61b9      	str	r1, [r7, #24]
10004e34:	617a      	str	r2, [r7, #20]
10004e36:	613b      	str	r3, [r7, #16]
#if !PICO_PRINTF_ALWAYS_INCLUDED
    lazy_vsnprintf = _vsnprintf;
#endif
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
10004e38:	2300      	movs	r3, #0
10004e3a:	657b      	str	r3, [r7, #84]	@ 0x54

    if (!buffer) {
10004e3c:	69bb      	ldr	r3, [r7, #24]
10004e3e:	2b00      	cmp	r3, #0
10004e40:	f040 84d5 	bne.w	100057ee <_vsnprintf+0x9c6>
        // use null output function
        out = _out_null;
10004e44:	4ba8      	ldr	r3, [pc, #672]	@ (100050e8 <_vsnprintf+0x2c0>)
10004e46:	61fb      	str	r3, [r7, #28]
    }

    while (*format) {
10004e48:	f000 bcd1 	b.w	100057ee <_vsnprintf+0x9c6>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
10004e4c:	693b      	ldr	r3, [r7, #16]
10004e4e:	781b      	ldrb	r3, [r3, #0]
10004e50:	2b25      	cmp	r3, #37	@ 0x25
10004e52:	d00d      	beq.n	10004e70 <_vsnprintf+0x48>
            // no
            out(*format, buffer, idx++, maxlen);
10004e54:	693b      	ldr	r3, [r7, #16]
10004e56:	7818      	ldrb	r0, [r3, #0]
10004e58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10004e5a:	1c53      	adds	r3, r2, #1
10004e5c:	657b      	str	r3, [r7, #84]	@ 0x54
10004e5e:	69fc      	ldr	r4, [r7, #28]
10004e60:	697b      	ldr	r3, [r7, #20]
10004e62:	69b9      	ldr	r1, [r7, #24]
10004e64:	47a0      	blx	r4
            format++;
10004e66:	693b      	ldr	r3, [r7, #16]
10004e68:	3301      	adds	r3, #1
10004e6a:	613b      	str	r3, [r7, #16]
            continue;
10004e6c:	f000 bcbf 	b.w	100057ee <_vsnprintf+0x9c6>
        } else {
            // yes, evaluate it
            format++;
10004e70:	693b      	ldr	r3, [r7, #16]
10004e72:	3301      	adds	r3, #1
10004e74:	613b      	str	r3, [r7, #16]
        }

        // evaluate flags
        flags = 0U;
10004e76:	2300      	movs	r3, #0
10004e78:	667b      	str	r3, [r7, #100]	@ 0x64
        do {
            switch (*format) {
10004e7a:	693b      	ldr	r3, [r7, #16]
10004e7c:	781b      	ldrb	r3, [r3, #0]
10004e7e:	3b20      	subs	r3, #32
10004e80:	2b10      	cmp	r3, #16
10004e82:	d857      	bhi.n	10004f34 <_vsnprintf+0x10c>
10004e84:	a201      	add	r2, pc, #4	@ (adr r2, 10004e8c <_vsnprintf+0x64>)
10004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004e8a:	bf00      	nop
10004e8c:	10004f0d 	.word	0x10004f0d
10004e90:	10004f35 	.word	0x10004f35
10004e94:	10004f35 	.word	0x10004f35
10004e98:	10004f21 	.word	0x10004f21
10004e9c:	10004f35 	.word	0x10004f35
10004ea0:	10004f35 	.word	0x10004f35
10004ea4:	10004f35 	.word	0x10004f35
10004ea8:	10004f35 	.word	0x10004f35
10004eac:	10004f35 	.word	0x10004f35
10004eb0:	10004f35 	.word	0x10004f35
10004eb4:	10004f35 	.word	0x10004f35
10004eb8:	10004ef9 	.word	0x10004ef9
10004ebc:	10004f35 	.word	0x10004f35
10004ec0:	10004ee5 	.word	0x10004ee5
10004ec4:	10004f35 	.word	0x10004f35
10004ec8:	10004f35 	.word	0x10004f35
10004ecc:	10004ed1 	.word	0x10004ed1
                case '0':
                    flags |= FLAGS_ZEROPAD;
10004ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004ed2:	f043 0301 	orr.w	r3, r3, #1
10004ed6:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
10004ed8:	693b      	ldr	r3, [r7, #16]
10004eda:	3301      	adds	r3, #1
10004edc:	613b      	str	r3, [r7, #16]
                    n = 1U;
10004ede:	2301      	movs	r3, #1
10004ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
10004ee2:	e02a      	b.n	10004f3a <_vsnprintf+0x112>
                case '-':
                    flags |= FLAGS_LEFT;
10004ee4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004ee6:	f043 0302 	orr.w	r3, r3, #2
10004eea:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
10004eec:	693b      	ldr	r3, [r7, #16]
10004eee:	3301      	adds	r3, #1
10004ef0:	613b      	str	r3, [r7, #16]
                    n = 1U;
10004ef2:	2301      	movs	r3, #1
10004ef4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
10004ef6:	e020      	b.n	10004f3a <_vsnprintf+0x112>
                case '+':
                    flags |= FLAGS_PLUS;
10004ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004efa:	f043 0304 	orr.w	r3, r3, #4
10004efe:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
10004f00:	693b      	ldr	r3, [r7, #16]
10004f02:	3301      	adds	r3, #1
10004f04:	613b      	str	r3, [r7, #16]
                    n = 1U;
10004f06:	2301      	movs	r3, #1
10004f08:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
10004f0a:	e016      	b.n	10004f3a <_vsnprintf+0x112>
                case ' ':
                    flags |= FLAGS_SPACE;
10004f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004f0e:	f043 0308 	orr.w	r3, r3, #8
10004f12:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
10004f14:	693b      	ldr	r3, [r7, #16]
10004f16:	3301      	adds	r3, #1
10004f18:	613b      	str	r3, [r7, #16]
                    n = 1U;
10004f1a:	2301      	movs	r3, #1
10004f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
10004f1e:	e00c      	b.n	10004f3a <_vsnprintf+0x112>
                case '#':
                    flags |= FLAGS_HASH;
10004f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004f22:	f043 0310 	orr.w	r3, r3, #16
10004f26:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
10004f28:	693b      	ldr	r3, [r7, #16]
10004f2a:	3301      	adds	r3, #1
10004f2c:	613b      	str	r3, [r7, #16]
                    n = 1U;
10004f2e:	2301      	movs	r3, #1
10004f30:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
10004f32:	e002      	b.n	10004f3a <_vsnprintf+0x112>
                default :
                    n = 0U;
10004f34:	2300      	movs	r3, #0
10004f36:	65bb      	str	r3, [r7, #88]	@ 0x58
                    break;
10004f38:	bf00      	nop
            }
        } while (n);
10004f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10004f3c:	2b00      	cmp	r3, #0
10004f3e:	d19c      	bne.n	10004e7a <_vsnprintf+0x52>

        // evaluate width field
        width = 0U;
10004f40:	2300      	movs	r3, #0
10004f42:	663b      	str	r3, [r7, #96]	@ 0x60
        if (_is_digit(*format)) {
10004f44:	693b      	ldr	r3, [r7, #16]
10004f46:	781b      	ldrb	r3, [r3, #0]
10004f48:	4618      	mov	r0, r3
10004f4a:	f7ff f832 	bl	10003fb2 <_is_digit>
10004f4e:	4603      	mov	r3, r0
10004f50:	2b00      	cmp	r3, #0
10004f52:	d006      	beq.n	10004f62 <_vsnprintf+0x13a>
            width = _atoi(&format);
10004f54:	f107 0310 	add.w	r3, r7, #16
10004f58:	4618      	mov	r0, r3
10004f5a:	f7ff f841 	bl	10003fe0 <_atoi>
10004f5e:	6638      	str	r0, [r7, #96]	@ 0x60
10004f60:	e01a      	b.n	10004f98 <_vsnprintf+0x170>
        } else if (*format == '*') {
10004f62:	693b      	ldr	r3, [r7, #16]
10004f64:	781b      	ldrb	r3, [r3, #0]
10004f66:	2b2a      	cmp	r3, #42	@ 0x2a
10004f68:	d116      	bne.n	10004f98 <_vsnprintf+0x170>
            const int w = va_arg(va, int);
10004f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004f6e:	1d1a      	adds	r2, r3, #4
10004f70:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004f74:	681b      	ldr	r3, [r3, #0]
10004f76:	643b      	str	r3, [r7, #64]	@ 0x40
            if (w < 0) {
10004f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004f7a:	2b00      	cmp	r3, #0
10004f7c:	da07      	bge.n	10004f8e <_vsnprintf+0x166>
                flags |= FLAGS_LEFT;    // reverse padding
10004f7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004f80:	f043 0302 	orr.w	r3, r3, #2
10004f84:	667b      	str	r3, [r7, #100]	@ 0x64
                width = (unsigned int) -w;
10004f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004f88:	425b      	negs	r3, r3
10004f8a:	663b      	str	r3, [r7, #96]	@ 0x60
10004f8c:	e001      	b.n	10004f92 <_vsnprintf+0x16a>
            } else {
                width = (unsigned int) w;
10004f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10004f90:	663b      	str	r3, [r7, #96]	@ 0x60
            }
            format++;
10004f92:	693b      	ldr	r3, [r7, #16]
10004f94:	3301      	adds	r3, #1
10004f96:	613b      	str	r3, [r7, #16]
        }

        // evaluate precision field
        precision = 0U;
10004f98:	2300      	movs	r3, #0
10004f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (*format == '.') {
10004f9c:	693b      	ldr	r3, [r7, #16]
10004f9e:	781b      	ldrb	r3, [r3, #0]
10004fa0:	2b2e      	cmp	r3, #46	@ 0x2e
10004fa2:	d127      	bne.n	10004ff4 <_vsnprintf+0x1cc>
            flags |= FLAGS_PRECISION;
10004fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10004fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
10004faa:	667b      	str	r3, [r7, #100]	@ 0x64
            format++;
10004fac:	693b      	ldr	r3, [r7, #16]
10004fae:	3301      	adds	r3, #1
10004fb0:	613b      	str	r3, [r7, #16]
            if (_is_digit(*format)) {
10004fb2:	693b      	ldr	r3, [r7, #16]
10004fb4:	781b      	ldrb	r3, [r3, #0]
10004fb6:	4618      	mov	r0, r3
10004fb8:	f7fe fffb 	bl	10003fb2 <_is_digit>
10004fbc:	4603      	mov	r3, r0
10004fbe:	2b00      	cmp	r3, #0
10004fc0:	d006      	beq.n	10004fd0 <_vsnprintf+0x1a8>
                precision = _atoi(&format);
10004fc2:	f107 0310 	add.w	r3, r7, #16
10004fc6:	4618      	mov	r0, r3
10004fc8:	f7ff f80a 	bl	10003fe0 <_atoi>
10004fcc:	65f8      	str	r0, [r7, #92]	@ 0x5c
10004fce:	e011      	b.n	10004ff4 <_vsnprintf+0x1cc>
            } else if (*format == '*') {
10004fd0:	693b      	ldr	r3, [r7, #16]
10004fd2:	781b      	ldrb	r3, [r3, #0]
10004fd4:	2b2a      	cmp	r3, #42	@ 0x2a
10004fd6:	d10d      	bne.n	10004ff4 <_vsnprintf+0x1cc>
                const int prec = (int) va_arg(va, int);
10004fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10004fdc:	1d1a      	adds	r2, r3, #4
10004fde:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10004fe2:	681b      	ldr	r3, [r3, #0]
10004fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                precision = prec > 0 ? (unsigned int) prec : 0U;
10004fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10004fe8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
10004fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
                format++;
10004fee:	693b      	ldr	r3, [r7, #16]
10004ff0:	3301      	adds	r3, #1
10004ff2:	613b      	str	r3, [r7, #16]
            }
        }

        // evaluate length field
        switch (*format) {
10004ff4:	693b      	ldr	r3, [r7, #16]
10004ff6:	781b      	ldrb	r3, [r3, #0]
10004ff8:	3b68      	subs	r3, #104	@ 0x68
10004ffa:	2b12      	cmp	r3, #18
10004ffc:	d866      	bhi.n	100050cc <_vsnprintf+0x2a4>
10004ffe:	a201      	add	r2, pc, #4	@ (adr r2, 10005004 <_vsnprintf+0x1dc>)
10005000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005004:	10005077 	.word	0x10005077
10005008:	100050cd 	.word	0x100050cd
1000500c:	100050ad 	.word	0x100050ad
10005010:	100050cd 	.word	0x100050cd
10005014:	10005051 	.word	0x10005051
10005018:	100050cd 	.word	0x100050cd
1000501c:	100050cd 	.word	0x100050cd
10005020:	100050cd 	.word	0x100050cd
10005024:	100050cd 	.word	0x100050cd
10005028:	100050cd 	.word	0x100050cd
1000502c:	100050cd 	.word	0x100050cd
10005030:	100050cd 	.word	0x100050cd
10005034:	1000509d 	.word	0x1000509d
10005038:	100050cd 	.word	0x100050cd
1000503c:	100050cd 	.word	0x100050cd
10005040:	100050cd 	.word	0x100050cd
10005044:	100050cd 	.word	0x100050cd
10005048:	100050cd 	.word	0x100050cd
1000504c:	100050bd 	.word	0x100050bd
            case 'l' :
                flags |= FLAGS_LONG;
10005050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
10005056:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
10005058:	693b      	ldr	r3, [r7, #16]
1000505a:	3301      	adds	r3, #1
1000505c:	613b      	str	r3, [r7, #16]
                if (*format == 'l') {
1000505e:	693b      	ldr	r3, [r7, #16]
10005060:	781b      	ldrb	r3, [r3, #0]
10005062:	2b6c      	cmp	r3, #108	@ 0x6c
10005064:	d134      	bne.n	100050d0 <_vsnprintf+0x2a8>
                    flags |= FLAGS_LONG_LONG;
10005066:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005068:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
1000506c:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
1000506e:	693b      	ldr	r3, [r7, #16]
10005070:	3301      	adds	r3, #1
10005072:	613b      	str	r3, [r7, #16]
                }
                break;
10005074:	e02c      	b.n	100050d0 <_vsnprintf+0x2a8>
            case 'h' :
                flags |= FLAGS_SHORT;
10005076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1000507c:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
1000507e:	693b      	ldr	r3, [r7, #16]
10005080:	3301      	adds	r3, #1
10005082:	613b      	str	r3, [r7, #16]
                if (*format == 'h') {
10005084:	693b      	ldr	r3, [r7, #16]
10005086:	781b      	ldrb	r3, [r3, #0]
10005088:	2b68      	cmp	r3, #104	@ 0x68
1000508a:	d123      	bne.n	100050d4 <_vsnprintf+0x2ac>
                    flags |= FLAGS_CHAR;
1000508c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000508e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
10005092:	667b      	str	r3, [r7, #100]	@ 0x64
                    format++;
10005094:	693b      	ldr	r3, [r7, #16]
10005096:	3301      	adds	r3, #1
10005098:	613b      	str	r3, [r7, #16]
                }
                break;
1000509a:	e01b      	b.n	100050d4 <_vsnprintf+0x2ac>
#if PICO_PRINTF_SUPPORT_PTRDIFF_T
            case 't' :
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
1000509c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000509e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100050a2:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
100050a4:	693b      	ldr	r3, [r7, #16]
100050a6:	3301      	adds	r3, #1
100050a8:	613b      	str	r3, [r7, #16]
                break;
100050aa:	e014      	b.n	100050d6 <_vsnprintf+0x2ae>
#endif
            case 'j' :
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
100050ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100050ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
100050b2:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
100050b4:	693b      	ldr	r3, [r7, #16]
100050b6:	3301      	adds	r3, #1
100050b8:	613b      	str	r3, [r7, #16]
                break;
100050ba:	e00c      	b.n	100050d6 <_vsnprintf+0x2ae>
            case 'z' :
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
100050bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100050be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
100050c2:	667b      	str	r3, [r7, #100]	@ 0x64
                format++;
100050c4:	693b      	ldr	r3, [r7, #16]
100050c6:	3301      	adds	r3, #1
100050c8:	613b      	str	r3, [r7, #16]
                break;
100050ca:	e004      	b.n	100050d6 <_vsnprintf+0x2ae>
            default :
                break;
100050cc:	bf00      	nop
100050ce:	e002      	b.n	100050d6 <_vsnprintf+0x2ae>
                break;
100050d0:	bf00      	nop
100050d2:	e000      	b.n	100050d6 <_vsnprintf+0x2ae>
                break;
100050d4:	bf00      	nop
        }

        // evaluate specifier
        switch (*format) {
100050d6:	693b      	ldr	r3, [r7, #16]
100050d8:	781b      	ldrb	r3, [r3, #0]
100050da:	2b67      	cmp	r3, #103	@ 0x67
100050dc:	f300 80b8 	bgt.w	10005250 <_vsnprintf+0x428>
100050e0:	2b25      	cmp	r3, #37	@ 0x25
100050e2:	da27      	bge.n	10005134 <_vsnprintf+0x30c>
100050e4:	e376      	b.n	100057d4 <_vsnprintf+0x9ac>
100050e6:	bf00      	nop
100050e8:	10003f31 	.word	0x10003f31
100050ec:	3b69      	subs	r3, #105	@ 0x69
100050ee:	2201      	movs	r2, #1
100050f0:	fa02 f303 	lsl.w	r3, r2, r3
100050f4:	f249 0241 	movw	r2, #36929	@ 0x9041
100050f8:	401a      	ands	r2, r3
100050fa:	2a00      	cmp	r2, #0
100050fc:	bf14      	ite	ne
100050fe:	2201      	movne	r2, #1
10005100:	2200      	moveq	r2, #0
10005102:	b2d2      	uxtb	r2, r2
10005104:	2a00      	cmp	r2, #0
10005106:	f040 80aa 	bne.w	1000525e <_vsnprintf+0x436>
1000510a:	f003 0280 	and.w	r2, r3, #128	@ 0x80
1000510e:	2a00      	cmp	r2, #0
10005110:	bf14      	ite	ne
10005112:	2201      	movne	r2, #1
10005114:	2200      	moveq	r2, #0
10005116:	b2d2      	uxtb	r2, r2
10005118:	2a00      	cmp	r2, #0
1000511a:	f040 8301 	bne.w	10005720 <_vsnprintf+0x8f8>
1000511e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10005122:	2b00      	cmp	r3, #0
10005124:	bf14      	ite	ne
10005126:	2301      	movne	r3, #1
10005128:	2300      	moveq	r3, #0
1000512a:	b2db      	uxtb	r3, r3
1000512c:	2b00      	cmp	r3, #0
1000512e:	f040 8293 	bne.w	10005658 <_vsnprintf+0x830>
10005132:	e34f      	b.n	100057d4 <_vsnprintf+0x9ac>
10005134:	3b25      	subs	r3, #37	@ 0x25
10005136:	2b42      	cmp	r3, #66	@ 0x42
10005138:	f200 834c 	bhi.w	100057d4 <_vsnprintf+0x9ac>
1000513c:	a201      	add	r2, pc, #4	@ (adr r2, 10005144 <_vsnprintf+0x31c>)
1000513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005142:	bf00      	nop
10005144:	100057bd 	.word	0x100057bd
10005148:	100057d5 	.word	0x100057d5
1000514c:	100057d5 	.word	0x100057d5
10005150:	100057d5 	.word	0x100057d5
10005154:	100057d5 	.word	0x100057d5
10005158:	100057d5 	.word	0x100057d5
1000515c:	100057d5 	.word	0x100057d5
10005160:	100057d5 	.word	0x100057d5
10005164:	100057d5 	.word	0x100057d5
10005168:	100057d5 	.word	0x100057d5
1000516c:	100057d5 	.word	0x100057d5
10005170:	100057d5 	.word	0x100057d5
10005174:	100057d5 	.word	0x100057d5
10005178:	100057d5 	.word	0x100057d5
1000517c:	100057d5 	.word	0x100057d5
10005180:	100057d5 	.word	0x100057d5
10005184:	100057d5 	.word	0x100057d5
10005188:	100057d5 	.word	0x100057d5
1000518c:	100057d5 	.word	0x100057d5
10005190:	100057d5 	.word	0x100057d5
10005194:	100057d5 	.word	0x100057d5
10005198:	100057d5 	.word	0x100057d5
1000519c:	100057d5 	.word	0x100057d5
100051a0:	100057d5 	.word	0x100057d5
100051a4:	100057d5 	.word	0x100057d5
100051a8:	100057d5 	.word	0x100057d5
100051ac:	100057d5 	.word	0x100057d5
100051b0:	100057d5 	.word	0x100057d5
100051b4:	100057d5 	.word	0x100057d5
100051b8:	100057d5 	.word	0x100057d5
100051bc:	100057d5 	.word	0x100057d5
100051c0:	100057d5 	.word	0x100057d5
100051c4:	10005575 	.word	0x10005575
100051c8:	10005529 	.word	0x10005529
100051cc:	10005575 	.word	0x10005575
100051d0:	100057d5 	.word	0x100057d5
100051d4:	100057d5 	.word	0x100057d5
100051d8:	100057d5 	.word	0x100057d5
100051dc:	100057d5 	.word	0x100057d5
100051e0:	100057d5 	.word	0x100057d5
100051e4:	100057d5 	.word	0x100057d5
100051e8:	100057d5 	.word	0x100057d5
100051ec:	100057d5 	.word	0x100057d5
100051f0:	100057d5 	.word	0x100057d5
100051f4:	100057d5 	.word	0x100057d5
100051f8:	100057d5 	.word	0x100057d5
100051fc:	100057d5 	.word	0x100057d5
10005200:	100057d5 	.word	0x100057d5
10005204:	100057d5 	.word	0x100057d5
10005208:	100057d5 	.word	0x100057d5
1000520c:	100057d5 	.word	0x100057d5
10005210:	1000525f 	.word	0x1000525f
10005214:	100057d5 	.word	0x100057d5
10005218:	100057d5 	.word	0x100057d5
1000521c:	100057d5 	.word	0x100057d5
10005220:	100057d5 	.word	0x100057d5
10005224:	100057d5 	.word	0x100057d5
10005228:	100057d5 	.word	0x100057d5
1000522c:	100057d5 	.word	0x100057d5
10005230:	100057d5 	.word	0x100057d5
10005234:	100057d5 	.word	0x100057d5
10005238:	1000525f 	.word	0x1000525f
1000523c:	100055e1 	.word	0x100055e1
10005240:	1000525f 	.word	0x1000525f
10005244:	10005575 	.word	0x10005575
10005248:	10005529 	.word	0x10005529
1000524c:	10005575 	.word	0x10005575
10005250:	2b78      	cmp	r3, #120	@ 0x78
10005252:	f300 82bf 	bgt.w	100057d4 <_vsnprintf+0x9ac>
10005256:	2b69      	cmp	r3, #105	@ 0x69
10005258:	f6bf af48 	bge.w	100050ec <_vsnprintf+0x2c4>
1000525c:	e2ba      	b.n	100057d4 <_vsnprintf+0x9ac>
            case 'X' :
            case 'o' :
            case 'b' : {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
1000525e:	693b      	ldr	r3, [r7, #16]
10005260:	781b      	ldrb	r3, [r3, #0]
10005262:	2b78      	cmp	r3, #120	@ 0x78
10005264:	d003      	beq.n	1000526e <_vsnprintf+0x446>
10005266:	693b      	ldr	r3, [r7, #16]
10005268:	781b      	ldrb	r3, [r3, #0]
1000526a:	2b58      	cmp	r3, #88	@ 0x58
1000526c:	d102      	bne.n	10005274 <_vsnprintf+0x44c>
                    base = 16U;
1000526e:	2310      	movs	r3, #16
10005270:	653b      	str	r3, [r7, #80]	@ 0x50
10005272:	e013      	b.n	1000529c <_vsnprintf+0x474>
                } else if (*format == 'o') {
10005274:	693b      	ldr	r3, [r7, #16]
10005276:	781b      	ldrb	r3, [r3, #0]
10005278:	2b6f      	cmp	r3, #111	@ 0x6f
1000527a:	d102      	bne.n	10005282 <_vsnprintf+0x45a>
                    base = 8U;
1000527c:	2308      	movs	r3, #8
1000527e:	653b      	str	r3, [r7, #80]	@ 0x50
10005280:	e00c      	b.n	1000529c <_vsnprintf+0x474>
                } else if (*format == 'b') {
10005282:	693b      	ldr	r3, [r7, #16]
10005284:	781b      	ldrb	r3, [r3, #0]
10005286:	2b62      	cmp	r3, #98	@ 0x62
10005288:	d102      	bne.n	10005290 <_vsnprintf+0x468>
                    base = 2U;
1000528a:	2302      	movs	r3, #2
1000528c:	653b      	str	r3, [r7, #80]	@ 0x50
1000528e:	e005      	b.n	1000529c <_vsnprintf+0x474>
                } else {
                    base = 10U;
10005290:	230a      	movs	r3, #10
10005292:	653b      	str	r3, [r7, #80]	@ 0x50
                    flags &= ~FLAGS_HASH;   // no hash for dec format
10005294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005296:	f023 0310 	bic.w	r3, r3, #16
1000529a:	667b      	str	r3, [r7, #100]	@ 0x64
                }
                // uppercase
                if (*format == 'X') {
1000529c:	693b      	ldr	r3, [r7, #16]
1000529e:	781b      	ldrb	r3, [r3, #0]
100052a0:	2b58      	cmp	r3, #88	@ 0x58
100052a2:	d103      	bne.n	100052ac <_vsnprintf+0x484>
                    flags |= FLAGS_UPPERCASE;
100052a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100052a6:	f043 0320 	orr.w	r3, r3, #32
100052aa:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
100052ac:	693b      	ldr	r3, [r7, #16]
100052ae:	781b      	ldrb	r3, [r3, #0]
100052b0:	2b69      	cmp	r3, #105	@ 0x69
100052b2:	d007      	beq.n	100052c4 <_vsnprintf+0x49c>
100052b4:	693b      	ldr	r3, [r7, #16]
100052b6:	781b      	ldrb	r3, [r3, #0]
100052b8:	2b64      	cmp	r3, #100	@ 0x64
100052ba:	d003      	beq.n	100052c4 <_vsnprintf+0x49c>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
100052bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100052be:	f023 030c 	bic.w	r3, r3, #12
100052c2:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
100052c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100052c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
100052ca:	2b00      	cmp	r3, #0
100052cc:	d003      	beq.n	100052d6 <_vsnprintf+0x4ae>
                    flags &= ~FLAGS_ZEROPAD;
100052ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100052d0:	f023 0301 	bic.w	r3, r3, #1
100052d4:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
100052d6:	693b      	ldr	r3, [r7, #16]
100052d8:	781b      	ldrb	r3, [r3, #0]
100052da:	2b69      	cmp	r3, #105	@ 0x69
100052dc:	d004      	beq.n	100052e8 <_vsnprintf+0x4c0>
100052de:	693b      	ldr	r3, [r7, #16]
100052e0:	781b      	ldrb	r3, [r3, #0]
100052e2:	2b64      	cmp	r3, #100	@ 0x64
100052e4:	f040 80a0 	bne.w	10005428 <_vsnprintf+0x600>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
100052e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100052ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
100052ee:	2b00      	cmp	r3, #0
100052f0:	d039      	beq.n	10005366 <_vsnprintf+0x53e>
#if PICO_PRINTF_SUPPORT_LONG_LONG
                        const long long value = va_arg(va, long long);
100052f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100052f6:	3307      	adds	r3, #7
100052f8:	f023 0307 	bic.w	r3, r3, #7
100052fc:	f103 0208 	add.w	r2, r3, #8
10005300:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10005304:	e9d3 2300 	ldrd	r2, r3, [r3]
10005308:	e9c7 2308 	strd	r2, r3, [r7, #32]
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                              (unsigned long long) (value > 0 ? value : 0 - value), value < 0, base,
1000530c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10005310:	2b00      	cmp	r3, #0
10005312:	da06      	bge.n	10005322 <_vsnprintf+0x4fa>
10005314:	2100      	movs	r1, #0
10005316:	f1d2 0800 	rsbs	r8, r2, #0
1000531a:	eb61 0903 	sbc.w	r9, r1, r3
1000531e:	4642      	mov	r2, r8
10005320:	464b      	mov	r3, r9
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
10005322:	4614      	mov	r4, r2
10005324:	461d      	mov	r5, r3
10005326:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
1000532a:	f04f 0200 	mov.w	r2, #0
1000532e:	f04f 0300 	mov.w	r3, #0
10005332:	0fca      	lsrs	r2, r1, #31
10005334:	2300      	movs	r3, #0
10005336:	b2d3      	uxtb	r3, r2
10005338:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
1000533a:	2100      	movs	r1, #0
1000533c:	4692      	mov	sl, r2
1000533e:	468b      	mov	fp, r1
10005340:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
10005342:	9208      	str	r2, [sp, #32]
10005344:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10005346:	9207      	str	r2, [sp, #28]
10005348:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
1000534a:	9206      	str	r2, [sp, #24]
1000534c:	e9cd ab04 	strd	sl, fp, [sp, #16]
10005350:	9302      	str	r3, [sp, #8]
10005352:	e9cd 4500 	strd	r4, r5, [sp]
10005356:	697b      	ldr	r3, [r7, #20]
10005358:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
1000535a:	69b9      	ldr	r1, [r7, #24]
1000535c:	69f8      	ldr	r0, [r7, #28]
1000535e:	f7fe fff5 	bl	1000434c <_ntoa_long_long>
10005362:	6578      	str	r0, [r7, #84]	@ 0x54
                    if (flags & FLAGS_LONG_LONG) {
10005364:	e0dc      	b.n	10005520 <_vsnprintf+0x6f8>
                                              precision, width, flags);
#endif
                    } else if (flags & FLAGS_LONG) {
10005366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
1000536c:	2b00      	cmp	r3, #0
1000536e:	d020      	beq.n	100053b2 <_vsnprintf+0x58a>
                        const long value = va_arg(va, long);
10005370:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10005374:	1d1a      	adds	r2, r3, #4
10005376:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
1000537a:	681b      	ldr	r3, [r3, #0]
1000537c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) (value > 0 ? value : 0 - value),
1000537e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10005380:	2b00      	cmp	r3, #0
10005382:	bfb8      	it	lt
10005384:	425b      	neglt	r3, r3
10005386:	4619      	mov	r1, r3
10005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000538a:	0fdb      	lsrs	r3, r3, #31
1000538c:	b2db      	uxtb	r3, r3
1000538e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
10005390:	9205      	str	r2, [sp, #20]
10005392:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10005394:	9204      	str	r2, [sp, #16]
10005396:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
10005398:	9203      	str	r2, [sp, #12]
1000539a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
1000539c:	9202      	str	r2, [sp, #8]
1000539e:	9301      	str	r3, [sp, #4]
100053a0:	9100      	str	r1, [sp, #0]
100053a2:	697b      	ldr	r3, [r7, #20]
100053a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100053a6:	69b9      	ldr	r1, [r7, #24]
100053a8:	69f8      	ldr	r0, [r7, #28]
100053aa:	f7fe ff69 	bl	10004280 <_ntoa_long>
100053ae:	6578      	str	r0, [r7, #84]	@ 0x54
                    if (flags & FLAGS_LONG_LONG) {
100053b0:	e0b6      	b.n	10005520 <_vsnprintf+0x6f8>
                                         value < 0, base, precision, width, flags);
                    } else {
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
100053b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
100053b8:	2b00      	cmp	r3, #0
100053ba:	d007      	beq.n	100053cc <_vsnprintf+0x5a4>
100053bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100053c0:	1d1a      	adds	r2, r3, #4
100053c2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
100053c6:	681b      	ldr	r3, [r3, #0]
100053c8:	b2db      	uxtb	r3, r3
100053ca:	e012      	b.n	100053f2 <_vsnprintf+0x5ca>
100053cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100053ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                                                                                          ? (short int) va_arg(va, int)
                                                                                          : va_arg(va, int);
100053d2:	2b00      	cmp	r3, #0
100053d4:	d007      	beq.n	100053e6 <_vsnprintf+0x5be>
                                                                                          ? (short int) va_arg(va, int)
100053d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100053da:	1d1a      	adds	r2, r3, #4
100053dc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
100053e0:	681b      	ldr	r3, [r3, #0]
100053e2:	b21b      	sxth	r3, r3
100053e4:	e005      	b.n	100053f2 <_vsnprintf+0x5ca>
                                                                                          : va_arg(va, int);
100053e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100053ea:	1d1a      	adds	r2, r3, #4
100053ec:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
100053f0:	681b      	ldr	r3, [r3, #0]
                        const int value = (flags & FLAGS_CHAR) ? (char) va_arg(va, int) : (flags & FLAGS_SHORT)
100053f2:	633b      	str	r3, [r7, #48]	@ 0x30
                        idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int) (value > 0 ? value : 0 - value),
100053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100053f6:	2b00      	cmp	r3, #0
100053f8:	bfb8      	it	lt
100053fa:	425b      	neglt	r3, r3
100053fc:	4619      	mov	r1, r3
100053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10005400:	0fdb      	lsrs	r3, r3, #31
10005402:	b2db      	uxtb	r3, r3
10005404:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
10005406:	9205      	str	r2, [sp, #20]
10005408:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
1000540a:	9204      	str	r2, [sp, #16]
1000540c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
1000540e:	9203      	str	r2, [sp, #12]
10005410:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
10005412:	9202      	str	r2, [sp, #8]
10005414:	9301      	str	r3, [sp, #4]
10005416:	9100      	str	r1, [sp, #0]
10005418:	697b      	ldr	r3, [r7, #20]
1000541a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
1000541c:	69b9      	ldr	r1, [r7, #24]
1000541e:	69f8      	ldr	r0, [r7, #28]
10005420:	f7fe ff2e 	bl	10004280 <_ntoa_long>
10005424:	6578      	str	r0, [r7, #84]	@ 0x54
                    if (flags & FLAGS_LONG_LONG) {
10005426:	e07b      	b.n	10005520 <_vsnprintf+0x6f8>
                                         value < 0, base, precision, width, flags);
                    }
                } else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
10005428:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000542a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
1000542e:	2b00      	cmp	r3, #0
10005430:	d024      	beq.n	1000547c <_vsnprintf+0x654>
#if PICO_PRINTF_SUPPORT_LONG_LONG
                        idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base,
10005432:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10005436:	3307      	adds	r3, #7
10005438:	f023 0307 	bic.w	r3, r3, #7
1000543c:	f103 0208 	add.w	r2, r3, #8
10005440:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10005444:	e9d3 2300 	ldrd	r2, r3, [r3]
10005448:	6d39      	ldr	r1, [r7, #80]	@ 0x50
1000544a:	2000      	movs	r0, #0
1000544c:	60b9      	str	r1, [r7, #8]
1000544e:	60f8      	str	r0, [r7, #12]
10005450:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10005452:	9108      	str	r1, [sp, #32]
10005454:	6e39      	ldr	r1, [r7, #96]	@ 0x60
10005456:	9107      	str	r1, [sp, #28]
10005458:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
1000545a:	9106      	str	r1, [sp, #24]
1000545c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
10005460:	e9cd 0104 	strd	r0, r1, [sp, #16]
10005464:	2100      	movs	r1, #0
10005466:	9102      	str	r1, [sp, #8]
10005468:	e9cd 2300 	strd	r2, r3, [sp]
1000546c:	697b      	ldr	r3, [r7, #20]
1000546e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005470:	69b9      	ldr	r1, [r7, #24]
10005472:	69f8      	ldr	r0, [r7, #28]
10005474:	f7fe ff6a 	bl	1000434c <_ntoa_long_long>
10005478:	6578      	str	r0, [r7, #84]	@ 0x54
1000547a:	e051      	b.n	10005520 <_vsnprintf+0x6f8>
                                              precision, width, flags);
#endif
                    } else if (flags & FLAGS_LONG) {
1000547c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10005482:	2b00      	cmp	r3, #0
10005484:	d018      	beq.n	100054b8 <_vsnprintf+0x690>
                        idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision,
10005486:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
1000548a:	1d1a      	adds	r2, r3, #4
1000548c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10005490:	681b      	ldr	r3, [r3, #0]
10005492:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
10005494:	9205      	str	r2, [sp, #20]
10005496:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10005498:	9204      	str	r2, [sp, #16]
1000549a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
1000549c:	9203      	str	r2, [sp, #12]
1000549e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
100054a0:	9202      	str	r2, [sp, #8]
100054a2:	2200      	movs	r2, #0
100054a4:	9201      	str	r2, [sp, #4]
100054a6:	9300      	str	r3, [sp, #0]
100054a8:	697b      	ldr	r3, [r7, #20]
100054aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100054ac:	69b9      	ldr	r1, [r7, #24]
100054ae:	69f8      	ldr	r0, [r7, #28]
100054b0:	f7fe fee6 	bl	10004280 <_ntoa_long>
100054b4:	6578      	str	r0, [r7, #84]	@ 0x54
100054b6:	e033      	b.n	10005520 <_vsnprintf+0x6f8>
                                         width, flags);
                    } else {
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
100054b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100054ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
                                                                        : (flags & FLAGS_SHORT)
100054be:	2b00      	cmp	r3, #0
100054c0:	d007      	beq.n	100054d2 <_vsnprintf+0x6aa>
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
100054c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100054c6:	1d1a      	adds	r2, r3, #4
100054c8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
100054cc:	681b      	ldr	r3, [r3, #0]
100054ce:	b2db      	uxtb	r3, r3
100054d0:	e012      	b.n	100054f8 <_vsnprintf+0x6d0>
                                                                        : (flags & FLAGS_SHORT)
100054d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100054d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
                                                                          ? (unsigned short int) va_arg(va,
                                                                                                        unsigned int)
                                                                          : va_arg(va, unsigned int);
100054d8:	2b00      	cmp	r3, #0
100054da:	d007      	beq.n	100054ec <_vsnprintf+0x6c4>
                                                                          ? (unsigned short int) va_arg(va,
100054dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100054e0:	1d1a      	adds	r2, r3, #4
100054e2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
100054e6:	681b      	ldr	r3, [r3, #0]
100054e8:	b29b      	uxth	r3, r3
100054ea:	e005      	b.n	100054f8 <_vsnprintf+0x6d0>
                                                                          : va_arg(va, unsigned int);
100054ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100054f0:	1d1a      	adds	r2, r3, #4
100054f2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
100054f6:	681b      	ldr	r3, [r3, #0]
                        const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char) va_arg(va, unsigned int)
100054f8:	637b      	str	r3, [r7, #52]	@ 0x34
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
100054fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100054fc:	9305      	str	r3, [sp, #20]
100054fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10005500:	9304      	str	r3, [sp, #16]
10005502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10005504:	9303      	str	r3, [sp, #12]
10005506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10005508:	9302      	str	r3, [sp, #8]
1000550a:	2300      	movs	r3, #0
1000550c:	9301      	str	r3, [sp, #4]
1000550e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10005510:	9300      	str	r3, [sp, #0]
10005512:	697b      	ldr	r3, [r7, #20]
10005514:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005516:	69b9      	ldr	r1, [r7, #24]
10005518:	69f8      	ldr	r0, [r7, #28]
1000551a:	f7fe feb1 	bl	10004280 <_ntoa_long>
1000551e:	6578      	str	r0, [r7, #84]	@ 0x54
                    }
                }
                format++;
10005520:	693b      	ldr	r3, [r7, #16]
10005522:	3301      	adds	r3, #1
10005524:	613b      	str	r3, [r7, #16]
                break;
10005526:	e162      	b.n	100057ee <_vsnprintf+0x9c6>
            }
            case 'f' :
            case 'F' :
#if PICO_PRINTF_SUPPORT_FLOAT
                if (*format == 'F') flags |= FLAGS_UPPERCASE;
10005528:	693b      	ldr	r3, [r7, #16]
1000552a:	781b      	ldrb	r3, [r3, #0]
1000552c:	2b46      	cmp	r3, #70	@ 0x46
1000552e:	d103      	bne.n	10005538 <_vsnprintf+0x710>
10005530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005532:	f043 0320 	orr.w	r3, r3, #32
10005536:	667b      	str	r3, [r7, #100]	@ 0x64
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
10005538:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
1000553c:	3307      	adds	r3, #7
1000553e:	f023 0307 	bic.w	r3, r3, #7
10005542:	f103 0208 	add.w	r2, r3, #8
10005546:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
1000554a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000554e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10005550:	9104      	str	r1, [sp, #16]
10005552:	6e39      	ldr	r1, [r7, #96]	@ 0x60
10005554:	9103      	str	r1, [sp, #12]
10005556:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
10005558:	9102      	str	r1, [sp, #8]
1000555a:	e9cd 2300 	strd	r2, r3, [sp]
1000555e:	697b      	ldr	r3, [r7, #20]
10005560:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005562:	69b9      	ldr	r1, [r7, #24]
10005564:	69f8      	ldr	r0, [r7, #28]
10005566:	f7fe ff5f 	bl	10004428 <_ftoa>
1000556a:	6578      	str	r0, [r7, #84]	@ 0x54
#else
                for(int i=0;i<2;i++) out('?', buffer, idx++, maxlen);
                va_arg(va, double);
#endif
                format++;
1000556c:	693b      	ldr	r3, [r7, #16]
1000556e:	3301      	adds	r3, #1
10005570:	613b      	str	r3, [r7, #16]
                break;
10005572:	e13c      	b.n	100057ee <_vsnprintf+0x9c6>
            case 'e':
            case 'E':
            case 'g':
            case 'G':
#if PICO_PRINTF_SUPPORT_FLOAT && PICO_PRINTF_SUPPORT_EXPONENTIAL
                if ((*format == 'g') || (*format == 'G')) flags |= FLAGS_ADAPT_EXP;
10005574:	693b      	ldr	r3, [r7, #16]
10005576:	781b      	ldrb	r3, [r3, #0]
10005578:	2b67      	cmp	r3, #103	@ 0x67
1000557a:	d003      	beq.n	10005584 <_vsnprintf+0x75c>
1000557c:	693b      	ldr	r3, [r7, #16]
1000557e:	781b      	ldrb	r3, [r3, #0]
10005580:	2b47      	cmp	r3, #71	@ 0x47
10005582:	d103      	bne.n	1000558c <_vsnprintf+0x764>
10005584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005586:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
1000558a:	667b      	str	r3, [r7, #100]	@ 0x64
                if ((*format == 'E') || (*format == 'G')) flags |= FLAGS_UPPERCASE;
1000558c:	693b      	ldr	r3, [r7, #16]
1000558e:	781b      	ldrb	r3, [r3, #0]
10005590:	2b45      	cmp	r3, #69	@ 0x45
10005592:	d003      	beq.n	1000559c <_vsnprintf+0x774>
10005594:	693b      	ldr	r3, [r7, #16]
10005596:	781b      	ldrb	r3, [r3, #0]
10005598:	2b47      	cmp	r3, #71	@ 0x47
1000559a:	d103      	bne.n	100055a4 <_vsnprintf+0x77c>
1000559c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000559e:	f043 0320 	orr.w	r3, r3, #32
100055a2:	667b      	str	r3, [r7, #100]	@ 0x64
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
100055a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
100055a8:	3307      	adds	r3, #7
100055aa:	f023 0307 	bic.w	r3, r3, #7
100055ae:	f103 0208 	add.w	r2, r3, #8
100055b2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
100055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
100055ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
100055bc:	9104      	str	r1, [sp, #16]
100055be:	6e39      	ldr	r1, [r7, #96]	@ 0x60
100055c0:	9103      	str	r1, [sp, #12]
100055c2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
100055c4:	9102      	str	r1, [sp, #8]
100055c6:	e9cd 2300 	strd	r2, r3, [sp]
100055ca:	697b      	ldr	r3, [r7, #20]
100055cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100055ce:	69b9      	ldr	r1, [r7, #24]
100055d0:	69f8      	ldr	r0, [r7, #28]
100055d2:	f7ff f98d 	bl	100048f0 <_etoa>
100055d6:	6578      	str	r0, [r7, #84]	@ 0x54
#else
                for(int i=0;i<2;i++) out('?', buffer, idx++, maxlen);
                va_arg(va, double);
#endif
                format++;
100055d8:	693b      	ldr	r3, [r7, #16]
100055da:	3301      	adds	r3, #1
100055dc:	613b      	str	r3, [r7, #16]
                break;
100055de:	e106      	b.n	100057ee <_vsnprintf+0x9c6>
            case 'c' : {
                unsigned int l = 1U;
100055e0:	2301      	movs	r3, #1
100055e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
100055e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100055e6:	f003 0302 	and.w	r3, r3, #2
100055ea:	2b00      	cmp	r3, #0
100055ec:	d10e      	bne.n	1000560c <_vsnprintf+0x7e4>
                    while (l++ < width) {
100055ee:	e007      	b.n	10005600 <_vsnprintf+0x7d8>
                        out(' ', buffer, idx++, maxlen);
100055f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100055f2:	1c53      	adds	r3, r2, #1
100055f4:	657b      	str	r3, [r7, #84]	@ 0x54
100055f6:	69fc      	ldr	r4, [r7, #28]
100055f8:	697b      	ldr	r3, [r7, #20]
100055fa:	69b9      	ldr	r1, [r7, #24]
100055fc:	2020      	movs	r0, #32
100055fe:	47a0      	blx	r4
                    while (l++ < width) {
10005600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10005602:	1c5a      	adds	r2, r3, #1
10005604:	64fa      	str	r2, [r7, #76]	@ 0x4c
10005606:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10005608:	429a      	cmp	r2, r3
1000560a:	d8f1      	bhi.n	100055f0 <_vsnprintf+0x7c8>
                    }
                }
                // char output
                out((char) va_arg(va, int), buffer, idx++, maxlen);
1000560c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10005610:	1d1a      	adds	r2, r3, #4
10005612:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10005616:	681b      	ldr	r3, [r3, #0]
10005618:	b2d8      	uxtb	r0, r3
1000561a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
1000561c:	1c53      	adds	r3, r2, #1
1000561e:	657b      	str	r3, [r7, #84]	@ 0x54
10005620:	69fc      	ldr	r4, [r7, #28]
10005622:	697b      	ldr	r3, [r7, #20]
10005624:	69b9      	ldr	r1, [r7, #24]
10005626:	47a0      	blx	r4
                // post padding
                if (flags & FLAGS_LEFT) {
10005628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1000562a:	f003 0302 	and.w	r3, r3, #2
1000562e:	2b00      	cmp	r3, #0
10005630:	d00e      	beq.n	10005650 <_vsnprintf+0x828>
                    while (l++ < width) {
10005632:	e007      	b.n	10005644 <_vsnprintf+0x81c>
                        out(' ', buffer, idx++, maxlen);
10005634:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005636:	1c53      	adds	r3, r2, #1
10005638:	657b      	str	r3, [r7, #84]	@ 0x54
1000563a:	69fc      	ldr	r4, [r7, #28]
1000563c:	697b      	ldr	r3, [r7, #20]
1000563e:	69b9      	ldr	r1, [r7, #24]
10005640:	2020      	movs	r0, #32
10005642:	47a0      	blx	r4
                    while (l++ < width) {
10005644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10005646:	1c5a      	adds	r2, r3, #1
10005648:	64fa      	str	r2, [r7, #76]	@ 0x4c
1000564a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
1000564c:	429a      	cmp	r2, r3
1000564e:	d8f1      	bhi.n	10005634 <_vsnprintf+0x80c>
                    }
                }
                format++;
10005650:	693b      	ldr	r3, [r7, #16]
10005652:	3301      	adds	r3, #1
10005654:	613b      	str	r3, [r7, #16]
                break;
10005656:	e0ca      	b.n	100057ee <_vsnprintf+0x9c6>
            }

            case 's' : {
                const char *p = va_arg(va, char*);
10005658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
1000565c:	1d1a      	adds	r2, r3, #4
1000565e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10005662:	681b      	ldr	r3, [r3, #0]
10005664:	64bb      	str	r3, [r7, #72]	@ 0x48
                unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
10005666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10005668:	2b00      	cmp	r3, #0
1000566a:	d001      	beq.n	10005670 <_vsnprintf+0x848>
1000566c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1000566e:	e001      	b.n	10005674 <_vsnprintf+0x84c>
10005670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10005674:	4619      	mov	r1, r3
10005676:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10005678:	f7fe fc7e 	bl	10003f78 <_strnlen_s>
1000567c:	6478      	str	r0, [r7, #68]	@ 0x44
                // pre padding
                if (flags & FLAGS_PRECISION) {
1000567e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
10005684:	2b00      	cmp	r3, #0
10005686:	d005      	beq.n	10005694 <_vsnprintf+0x86c>
                    l = (l < precision ? l : precision);
10005688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1000568a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1000568c:	4293      	cmp	r3, r2
1000568e:	bf28      	it	cs
10005690:	4613      	movcs	r3, r2
10005692:	647b      	str	r3, [r7, #68]	@ 0x44
                }
                if (!(flags & FLAGS_LEFT)) {
10005694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005696:	f003 0302 	and.w	r3, r3, #2
1000569a:	2b00      	cmp	r3, #0
1000569c:	d11a      	bne.n	100056d4 <_vsnprintf+0x8ac>
                    while (l++ < width) {
1000569e:	e007      	b.n	100056b0 <_vsnprintf+0x888>
                        out(' ', buffer, idx++, maxlen);
100056a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100056a2:	1c53      	adds	r3, r2, #1
100056a4:	657b      	str	r3, [r7, #84]	@ 0x54
100056a6:	69fc      	ldr	r4, [r7, #28]
100056a8:	697b      	ldr	r3, [r7, #20]
100056aa:	69b9      	ldr	r1, [r7, #24]
100056ac:	2020      	movs	r0, #32
100056ae:	47a0      	blx	r4
                    while (l++ < width) {
100056b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
100056b2:	1c5a      	adds	r2, r3, #1
100056b4:	647a      	str	r2, [r7, #68]	@ 0x44
100056b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
100056b8:	429a      	cmp	r2, r3
100056ba:	d8f1      	bhi.n	100056a0 <_vsnprintf+0x878>
                    }
                }
                // string output
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100056bc:	e00a      	b.n	100056d4 <_vsnprintf+0x8ac>
                    out(*(p++), buffer, idx++, maxlen);
100056be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100056c0:	1c5a      	adds	r2, r3, #1
100056c2:	64ba      	str	r2, [r7, #72]	@ 0x48
100056c4:	7818      	ldrb	r0, [r3, #0]
100056c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100056c8:	1c53      	adds	r3, r2, #1
100056ca:	657b      	str	r3, [r7, #84]	@ 0x54
100056cc:	69fc      	ldr	r4, [r7, #28]
100056ce:	697b      	ldr	r3, [r7, #20]
100056d0:	69b9      	ldr	r1, [r7, #24]
100056d2:	47a0      	blx	r4
                while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
100056d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
100056d6:	781b      	ldrb	r3, [r3, #0]
100056d8:	2b00      	cmp	r3, #0
100056da:	d009      	beq.n	100056f0 <_vsnprintf+0x8c8>
100056dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100056de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
100056e2:	2b00      	cmp	r3, #0
100056e4:	d0eb      	beq.n	100056be <_vsnprintf+0x896>
100056e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
100056e8:	1e5a      	subs	r2, r3, #1
100056ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
100056ec:	2b00      	cmp	r3, #0
100056ee:	d1e6      	bne.n	100056be <_vsnprintf+0x896>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
100056f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
100056f2:	f003 0302 	and.w	r3, r3, #2
100056f6:	2b00      	cmp	r3, #0
100056f8:	d00e      	beq.n	10005718 <_vsnprintf+0x8f0>
                    while (l++ < width) {
100056fa:	e007      	b.n	1000570c <_vsnprintf+0x8e4>
                        out(' ', buffer, idx++, maxlen);
100056fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100056fe:	1c53      	adds	r3, r2, #1
10005700:	657b      	str	r3, [r7, #84]	@ 0x54
10005702:	69fc      	ldr	r4, [r7, #28]
10005704:	697b      	ldr	r3, [r7, #20]
10005706:	69b9      	ldr	r1, [r7, #24]
10005708:	2020      	movs	r0, #32
1000570a:	47a0      	blx	r4
                    while (l++ < width) {
1000570c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000570e:	1c5a      	adds	r2, r3, #1
10005710:	647a      	str	r2, [r7, #68]	@ 0x44
10005712:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
10005714:	429a      	cmp	r2, r3
10005716:	d8f1      	bhi.n	100056fc <_vsnprintf+0x8d4>
                    }
                }
                format++;
10005718:	693b      	ldr	r3, [r7, #16]
1000571a:	3301      	adds	r3, #1
1000571c:	613b      	str	r3, [r7, #16]
                break;
1000571e:	e066      	b.n	100057ee <_vsnprintf+0x9c6>
            }

            case 'p' : {
                width = sizeof(void *) * 2U;
10005720:	2308      	movs	r3, #8
10005722:	663b      	str	r3, [r7, #96]	@ 0x60
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
10005724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005726:	f043 0321 	orr.w	r3, r3, #33	@ 0x21
1000572a:	667b      	str	r3, [r7, #100]	@ 0x64
#if PICO_PRINTF_SUPPORT_LONG_LONG
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
1000572c:	2300      	movs	r3, #0
1000572e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                if (is_ll) {
10005732:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
10005736:	2b00      	cmp	r3, #0
10005738:	d023      	beq.n	10005782 <_vsnprintf+0x95a>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t) va_arg(va, void*), false, 16U,
1000573a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
1000573e:	1d1a      	adds	r2, r3, #4
10005740:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
10005744:	681b      	ldr	r3, [r3, #0]
10005746:	461a      	mov	r2, r3
10005748:	2300      	movs	r3, #0
1000574a:	603a      	str	r2, [r7, #0]
1000574c:	607b      	str	r3, [r7, #4]
1000574e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005750:	9308      	str	r3, [sp, #32]
10005752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10005754:	9307      	str	r3, [sp, #28]
10005756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10005758:	9306      	str	r3, [sp, #24]
1000575a:	f04f 0210 	mov.w	r2, #16
1000575e:	f04f 0300 	mov.w	r3, #0
10005762:	e9cd 2304 	strd	r2, r3, [sp, #16]
10005766:	2300      	movs	r3, #0
10005768:	9302      	str	r3, [sp, #8]
1000576a:	e9d7 3400 	ldrd	r3, r4, [r7]
1000576e:	e9cd 3400 	strd	r3, r4, [sp]
10005772:	697b      	ldr	r3, [r7, #20]
10005774:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005776:	69b9      	ldr	r1, [r7, #24]
10005778:	69f8      	ldr	r0, [r7, #28]
1000577a:	f7fe fde7 	bl	1000434c <_ntoa_long_long>
1000577e:	6578      	str	r0, [r7, #84]	@ 0x54
10005780:	e018      	b.n	100057b4 <_vsnprintf+0x98c>
                                          precision, width, flags);
                } else {
#endif
                    idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long) ((uintptr_t) va_arg(va, void*)), false,
10005782:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
10005786:	1d1a      	adds	r2, r3, #4
10005788:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
1000578c:	681b      	ldr	r3, [r3, #0]
1000578e:	461a      	mov	r2, r3
10005790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10005792:	9305      	str	r3, [sp, #20]
10005794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10005796:	9304      	str	r3, [sp, #16]
10005798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1000579a:	9303      	str	r3, [sp, #12]
1000579c:	2310      	movs	r3, #16
1000579e:	9302      	str	r3, [sp, #8]
100057a0:	2300      	movs	r3, #0
100057a2:	9301      	str	r3, [sp, #4]
100057a4:	9200      	str	r2, [sp, #0]
100057a6:	697b      	ldr	r3, [r7, #20]
100057a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100057aa:	69b9      	ldr	r1, [r7, #24]
100057ac:	69f8      	ldr	r0, [r7, #28]
100057ae:	f7fe fd67 	bl	10004280 <_ntoa_long>
100057b2:	6578      	str	r0, [r7, #84]	@ 0x54
                                     16U, precision, width, flags);
#if PICO_PRINTF_SUPPORT_LONG_LONG
                }
#endif
                format++;
100057b4:	693b      	ldr	r3, [r7, #16]
100057b6:	3301      	adds	r3, #1
100057b8:	613b      	str	r3, [r7, #16]
                break;
100057ba:	e018      	b.n	100057ee <_vsnprintf+0x9c6>
            }

            case '%' :
                out('%', buffer, idx++, maxlen);
100057bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100057be:	1c53      	adds	r3, r2, #1
100057c0:	657b      	str	r3, [r7, #84]	@ 0x54
100057c2:	69fc      	ldr	r4, [r7, #28]
100057c4:	697b      	ldr	r3, [r7, #20]
100057c6:	69b9      	ldr	r1, [r7, #24]
100057c8:	2025      	movs	r0, #37	@ 0x25
100057ca:	47a0      	blx	r4
                format++;
100057cc:	693b      	ldr	r3, [r7, #16]
100057ce:	3301      	adds	r3, #1
100057d0:	613b      	str	r3, [r7, #16]
                break;
100057d2:	e00c      	b.n	100057ee <_vsnprintf+0x9c6>

            default :
                out(*format, buffer, idx++, maxlen);
100057d4:	693b      	ldr	r3, [r7, #16]
100057d6:	7818      	ldrb	r0, [r3, #0]
100057d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100057da:	1c53      	adds	r3, r2, #1
100057dc:	657b      	str	r3, [r7, #84]	@ 0x54
100057de:	69fc      	ldr	r4, [r7, #28]
100057e0:	697b      	ldr	r3, [r7, #20]
100057e2:	69b9      	ldr	r1, [r7, #24]
100057e4:	47a0      	blx	r4
                format++;
100057e6:	693b      	ldr	r3, [r7, #16]
100057e8:	3301      	adds	r3, #1
100057ea:	613b      	str	r3, [r7, #16]
                break;
100057ec:	bf00      	nop
    while (*format) {
100057ee:	693b      	ldr	r3, [r7, #16]
100057f0:	781b      	ldrb	r3, [r3, #0]
100057f2:	2b00      	cmp	r3, #0
100057f4:	f47f ab2a 	bne.w	10004e4c <_vsnprintf+0x24>
        }
    }

    // termination
    out((char) 0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
100057f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100057fa:	697b      	ldr	r3, [r7, #20]
100057fc:	429a      	cmp	r2, r3
100057fe:	d302      	bcc.n	10005806 <_vsnprintf+0x9de>
10005800:	697b      	ldr	r3, [r7, #20]
10005802:	1e5a      	subs	r2, r3, #1
10005804:	e000      	b.n	10005808 <_vsnprintf+0x9e0>
10005806:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10005808:	69fc      	ldr	r4, [r7, #28]
1000580a:	697b      	ldr	r3, [r7, #20]
1000580c:	69b9      	ldr	r1, [r7, #24]
1000580e:	2000      	movs	r0, #0
10005810:	47a0      	blx	r4

    // return written chars without terminating \0
    return (int) idx;
10005812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
10005814:	4618      	mov	r0, r3
10005816:	3768      	adds	r7, #104	@ 0x68
10005818:	46bd      	mov	sp, r7
1000581a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
1000581e:	bf00      	nop

10005820 <vfctprintf>:

int WRAPPER_FUNC(vsnprintf)(char *buffer, size_t count, const char *format, va_list va) {
    return _vsnprintf(_out_buffer, buffer, count, format, va);
}

int vfctprintf(void (*out)(char character, void *arg), void *arg, const char *format, va_list va) {
10005820:	b580      	push	{r7, lr}
10005822:	b088      	sub	sp, #32
10005824:	af02      	add	r7, sp, #8
10005826:	60f8      	str	r0, [r7, #12]
10005828:	60b9      	str	r1, [r7, #8]
1000582a:	607a      	str	r2, [r7, #4]
1000582c:	603b      	str	r3, [r7, #0]
    const out_fct_wrap_type out_fct_wrap = {out, arg};
1000582e:	68fb      	ldr	r3, [r7, #12]
10005830:	613b      	str	r3, [r7, #16]
10005832:	68bb      	ldr	r3, [r7, #8]
10005834:	617b      	str	r3, [r7, #20]
    return _vsnprintf(_out_fct, (char *) (uintptr_t) &out_fct_wrap, (size_t) -1, format, va);
10005836:	f107 0110 	add.w	r1, r7, #16
1000583a:	683b      	ldr	r3, [r7, #0]
1000583c:	9300      	str	r3, [sp, #0]
1000583e:	687b      	ldr	r3, [r7, #4]
10005840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10005844:	4803      	ldr	r0, [pc, #12]	@ (10005854 <vfctprintf+0x34>)
10005846:	f7ff faef 	bl	10004e28 <_vsnprintf>
1000584a:	4603      	mov	r3, r0
}
1000584c:	4618      	mov	r0, r3
1000584e:	3718      	adds	r7, #24
10005850:	46bd      	mov	sp, r7
10005852:	bd80      	pop	{r7, pc}
10005854:	10003f4d 	.word	0x10003f4d

10005858 <_exit>:

#define STDIO_HANDLE_STDIN  0
#define STDIO_HANDLE_STDOUT 1
#define STDIO_HANDLE_STDERR 2

void __attribute__((noreturn)) __weak _exit(__unused int status) {
10005858:	b480      	push	{r7}
1000585a:	b083      	sub	sp, #12
1000585c:	af00      	add	r7, sp, #0
1000585e:	6078      	str	r0, [r7, #4]
    pico_default_asm_volatile ("bkpt #0" : : : "memory");
10005860:	be00      	bkpt	0x0000
}
10005862:	bf00      	nop
#if PICO_ENTER_USB_BOOT_ON_EXIT
    reset_usb_boot(0,0);
#else
    while (1) {
        __breakpoint();
10005864:	e7fc      	b.n	10005860 <_exit+0x8>

10005866 <exit>:
int __attribute__((weak)) _isatty(int fd) {
    return fd == STDIO_HANDLE_STDIN || fd == STDIO_HANDLE_STDOUT || fd == STDIO_HANDLE_STDERR;
}

// exit is not useful... no desire to pull in __call_exitprocs
void exit(int status) {
10005866:	b580      	push	{r7, lr}
10005868:	b082      	sub	sp, #8
1000586a:	af00      	add	r7, sp, #0
1000586c:	6078      	str	r0, [r7, #4]
    _exit(status);
1000586e:	6878      	ldr	r0, [r7, #4]
10005870:	f7ff fff2 	bl	10005858 <_exit>

10005874 <__assert_func>:
}

// incorrect warning from GCC 6
GCC_Pragma("GCC diagnostic push")
GCC_Pragma("GCC diagnostic ignored \"-Wsuggest-attribute=format\"")
void __weak __assert_func(const char *file, int line, const char *func, const char *failedexpr) {
10005874:	b580      	push	{r7, lr}
10005876:	b086      	sub	sp, #24
10005878:	af02      	add	r7, sp, #8
1000587a:	60f8      	str	r0, [r7, #12]
1000587c:	60b9      	str	r1, [r7, #8]
1000587e:	607a      	str	r2, [r7, #4]
10005880:	603b      	str	r3, [r7, #0]
    weak_raw_printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
10005882:	687b      	ldr	r3, [r7, #4]
10005884:	2b00      	cmp	r3, #0
10005886:	d001      	beq.n	1000588c <__assert_func+0x18>
10005888:	4a09      	ldr	r2, [pc, #36]	@ (100058b0 <__assert_func+0x3c>)
1000588a:	e000      	b.n	1000588e <__assert_func+0x1a>
1000588c:	4a09      	ldr	r2, [pc, #36]	@ (100058b4 <__assert_func+0x40>)
1000588e:	687b      	ldr	r3, [r7, #4]
10005890:	2b00      	cmp	r3, #0
10005892:	d001      	beq.n	10005898 <__assert_func+0x24>
10005894:	687b      	ldr	r3, [r7, #4]
10005896:	e000      	b.n	1000589a <__assert_func+0x26>
10005898:	4b06      	ldr	r3, [pc, #24]	@ (100058b4 <__assert_func+0x40>)
1000589a:	9301      	str	r3, [sp, #4]
1000589c:	9200      	str	r2, [sp, #0]
1000589e:	68bb      	ldr	r3, [r7, #8]
100058a0:	68fa      	ldr	r2, [r7, #12]
100058a2:	6839      	ldr	r1, [r7, #0]
100058a4:	4804      	ldr	r0, [pc, #16]	@ (100058b8 <__assert_func+0x44>)
100058a6:	f000 fac7 	bl	10005e38 <__wrap_printf>
                    failedexpr, file, line, func ? ", function: " : "",
                    func ? func : "");

    _exit(1);
100058aa:	2001      	movs	r0, #1
100058ac:	f7ff ffd4 	bl	10005858 <_exit>
100058b0:	1000b9e0 	.word	0x1000b9e0
100058b4:	1000b9f0 	.word	0x1000b9f0
100058b8:	1000b9f4 	.word	0x1000b9f4

100058bc <runtime_init>:
}
GCC_Pragma("GCC diagnostic pop")

void runtime_init(void) {
100058bc:	b580      	push	{r7, lr}
100058be:	b082      	sub	sp, #8
100058c0:	af00      	add	r7, sp, #0
    pico_default_asm_volatile (
100058c2:	f3ef 8305 	mrs	r3, IPSR
100058c6:	b2db      	uxtb	r3, r3
100058c8:	603b      	str	r3, [r7, #0]
    return exception;
100058ca:	683b      	ldr	r3, [r7, #0]
#ifndef NDEBUG
    if (__get_current_exception()) {
100058cc:	2b00      	cmp	r3, #0
100058ce:	d001      	beq.n	100058d4 <runtime_init+0x18>
    pico_default_asm_volatile ("bkpt #0" : : : "memory");
100058d0:	be00      	bkpt	0x0000
}
100058d2:	bf00      	nop
    //      which we didn't do in previous SDKs
    //extern void __libc_init_array(void);
    //__libc_init_array();

    // ... so instead just do the __preinit_array
    runtime_run_initializers();
100058d4:	f7fd ff44 	bl	10003760 <runtime_run_initializers>
    // ... and the __init_array
    extern void (*__init_array_start)(void);
    extern void (*__init_array_end)(void);
    for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
100058d8:	4b08      	ldr	r3, [pc, #32]	@ (100058fc <runtime_init+0x40>)
100058da:	607b      	str	r3, [r7, #4]
100058dc:	e005      	b.n	100058ea <runtime_init+0x2e>
        (*p)();
100058de:	687b      	ldr	r3, [r7, #4]
100058e0:	681b      	ldr	r3, [r3, #0]
100058e2:	4798      	blx	r3
    for (void (**p)(void) = &__init_array_start; p < &__init_array_end; ++p) {
100058e4:	687b      	ldr	r3, [r7, #4]
100058e6:	3304      	adds	r3, #4
100058e8:	607b      	str	r3, [r7, #4]
100058ea:	687b      	ldr	r3, [r7, #4]
100058ec:	4a04      	ldr	r2, [pc, #16]	@ (10005900 <runtime_init+0x44>)
100058ee:	4293      	cmp	r3, r2
100058f0:	d3f5      	bcc.n	100058de <runtime_init+0x22>
    }
100058f2:	bf00      	nop
100058f4:	bf00      	nop
100058f6:	3708      	adds	r7, #8
100058f8:	46bd      	mov	sp, r7
100058fa:	bd80      	pop	{r7, pc}
100058fc:	1000b1c0 	.word	0x1000b1c0
10005900:	1000b1c8 	.word	0x1000b1c8

10005904 <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10005904:	b480      	push	{r7}
10005906:	b083      	sub	sp, #12
10005908:	af00      	add	r7, sp, #0
1000590a:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
1000590e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
10005912:	4610      	mov	r0, r2
10005914:	4619      	mov	r1, r3
10005916:	370c      	adds	r7, #12
10005918:	46bd      	mov	sp, r7
1000591a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000591e:	4770      	bx	lr

10005920 <update_us_since_boot>:
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
10005920:	b480      	push	{r7}
10005922:	b085      	sub	sp, #20
10005924:	af00      	add	r7, sp, #0
10005926:	60f8      	str	r0, [r7, #12]
10005928:	e9c7 2300 	strd	r2, r3, [r7]
    *t = us_since_boot;
1000592c:	68f9      	ldr	r1, [r7, #12]
1000592e:	e9d7 2300 	ldrd	r2, r3, [r7]
10005932:	e9c1 2300 	strd	r2, r3, [r1]
}
10005936:	bf00      	nop
10005938:	3714      	adds	r7, #20
1000593a:	46bd      	mov	sp, r7
1000593c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005940:	4770      	bx	lr

10005942 <get_absolute_time>:
static inline absolute_time_t get_absolute_time(void) {
10005942:	b580      	push	{r7, lr}
10005944:	b082      	sub	sp, #8
10005946:	af00      	add	r7, sp, #0
    update_us_since_boot(&t, time_us_64());
10005948:	f7fd f980 	bl	10002c4c <time_us_64>
1000594c:	4602      	mov	r2, r0
1000594e:	460b      	mov	r3, r1
10005950:	4639      	mov	r1, r7
10005952:	4608      	mov	r0, r1
10005954:	f7ff ffe4 	bl	10005920 <update_us_since_boot>
    return t;
10005958:	e9d7 2300 	ldrd	r2, r3, [r7]
}
1000595c:	4610      	mov	r0, r2
1000595e:	4619      	mov	r1, r3
10005960:	3708      	adds	r7, #8
10005962:	46bd      	mov	sp, r7
10005964:	bd80      	pop	{r7, pc}

10005966 <delayed_by_ms>:
static inline absolute_time_t delayed_by_ms(const absolute_time_t t, uint32_t ms) {
10005966:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
1000596a:	b08c      	sub	sp, #48	@ 0x30
1000596c:	af00      	add	r7, sp, #0
1000596e:	e9c7 0104 	strd	r0, r1, [r7, #16]
10005972:	60fa      	str	r2, [r7, #12]
    uint64_t base = to_us_since_boot(t);
10005974:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
10005978:	f7ff ffc4 	bl	10005904 <to_us_since_boot>
1000597c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    uint64_t delayed = base + ms * 1000ull;
10005980:	68fb      	ldr	r3, [r7, #12]
10005982:	2200      	movs	r2, #0
10005984:	4698      	mov	r8, r3
10005986:	4691      	mov	r9, r2
10005988:	4642      	mov	r2, r8
1000598a:	464b      	mov	r3, r9
1000598c:	f04f 0000 	mov.w	r0, #0
10005990:	f04f 0100 	mov.w	r1, #0
10005994:	0159      	lsls	r1, r3, #5
10005996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
1000599a:	0150      	lsls	r0, r2, #5
1000599c:	4602      	mov	r2, r0
1000599e:	460b      	mov	r3, r1
100059a0:	ebb2 0408 	subs.w	r4, r2, r8
100059a4:	eb63 0509 	sbc.w	r5, r3, r9
100059a8:	f04f 0200 	mov.w	r2, #0
100059ac:	f04f 0300 	mov.w	r3, #0
100059b0:	00ab      	lsls	r3, r5, #2
100059b2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
100059b6:	00a2      	lsls	r2, r4, #2
100059b8:	4614      	mov	r4, r2
100059ba:	461d      	mov	r5, r3
100059bc:	eb14 0a08 	adds.w	sl, r4, r8
100059c0:	eb45 0b09 	adc.w	fp, r5, r9
100059c4:	f04f 0200 	mov.w	r2, #0
100059c8:	f04f 0300 	mov.w	r3, #0
100059cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
100059d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
100059d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
100059d8:	4692      	mov	sl, r2
100059da:	469b      	mov	fp, r3
100059dc:	4650      	mov	r0, sl
100059de:	4659      	mov	r1, fp
100059e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100059e4:	1814      	adds	r4, r2, r0
100059e6:	603c      	str	r4, [r7, #0]
100059e8:	414b      	adcs	r3, r1
100059ea:	607b      	str	r3, [r7, #4]
100059ec:	e9d7 3400 	ldrd	r3, r4, [r7]
100059f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
    if ((int64_t)delayed < 0) {
100059f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
100059f8:	2b00      	cmp	r3, #0
100059fa:	da05      	bge.n	10005a08 <delayed_by_ms+0xa2>
        delayed = INT64_MAX;
100059fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
10005a00:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
10005a04:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    update_us_since_boot(&t2, delayed);
10005a08:	f107 0118 	add.w	r1, r7, #24
10005a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
10005a10:	4608      	mov	r0, r1
10005a12:	f7ff ff85 	bl	10005920 <update_us_since_boot>
    return t2;
10005a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
10005a1a:	4610      	mov	r0, r2
10005a1c:	4619      	mov	r1, r3
10005a1e:	3730      	adds	r7, #48	@ 0x30
10005a20:	46bd      	mov	sp, r7
10005a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

10005a26 <make_timeout_time_ms>:
static inline absolute_time_t make_timeout_time_ms(uint32_t ms) {
10005a26:	b580      	push	{r7, lr}
10005a28:	b082      	sub	sp, #8
10005a2a:	af00      	add	r7, sp, #0
10005a2c:	6078      	str	r0, [r7, #4]
    return delayed_by_ms(get_absolute_time(), ms);
10005a2e:	f7ff ff88 	bl	10005942 <get_absolute_time>
10005a32:	687a      	ldr	r2, [r7, #4]
10005a34:	f7ff ff97 	bl	10005966 <delayed_by_ms>
10005a38:	4602      	mov	r2, r0
10005a3a:	460b      	mov	r3, r1
}
10005a3c:	4610      	mov	r0, r2
10005a3e:	4619      	mov	r1, r3
10005a40:	3708      	adds	r7, #8
10005a42:	46bd      	mov	sp, r7
10005a44:	bd80      	pop	{r7, pc}
	...

10005a48 <stdout_serialize_begin>:
static stdio_driver_t *filter;

#if PICO_STDOUT_MUTEX
auto_init_mutex(print_mutex);

bool stdout_serialize_begin(void) {
10005a48:	b580      	push	{r7, lr}
10005a4a:	af00      	add	r7, sp, #0
    return mutex_try_enter_block_until(&print_mutex, make_timeout_time_ms(PICO_STDIO_DEADLOCK_TIMEOUT_MS));
10005a4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10005a50:	f7ff ffe9 	bl	10005a26 <make_timeout_time_ms>
10005a54:	4602      	mov	r2, r0
10005a56:	460b      	mov	r3, r1
10005a58:	4802      	ldr	r0, [pc, #8]	@ (10005a64 <stdout_serialize_begin+0x1c>)
10005a5a:	f005 fb85 	bl	1000b168 <__mutex_try_enter_block_until_veneer>
10005a5e:	4603      	mov	r3, r0
}
10005a60:	4618      	mov	r0, r3
10005a62:	bd80      	pop	{r7, pc}
10005a64:	200015cc 	.word	0x200015cc

10005a68 <stdout_serialize_end>:

void stdout_serialize_end(void) {
10005a68:	b580      	push	{r7, lr}
10005a6a:	af00      	add	r7, sp, #0
    mutex_exit(&print_mutex);
10005a6c:	4802      	ldr	r0, [pc, #8]	@ (10005a78 <stdout_serialize_end+0x10>)
10005a6e:	f005 fb73 	bl	1000b158 <__mutex_exit_veneer>
}
10005a72:	bf00      	nop
10005a74:	bd80      	pop	{r7, pc}
10005a76:	bf00      	nop
10005a78:	200015cc 	.word	0x200015cc

10005a7c <stdio_out_chars_no_crlf>:
    return true;
}
static void stdout_serialize_end(void) {
}
#endif
static void stdio_out_chars_no_crlf(stdio_driver_t *driver, const char *s, int len) {
10005a7c:	b580      	push	{r7, lr}
10005a7e:	b084      	sub	sp, #16
10005a80:	af00      	add	r7, sp, #0
10005a82:	60f8      	str	r0, [r7, #12]
10005a84:	60b9      	str	r1, [r7, #8]
10005a86:	607a      	str	r2, [r7, #4]
    driver->out_chars(s, len);
10005a88:	68fb      	ldr	r3, [r7, #12]
10005a8a:	681b      	ldr	r3, [r3, #0]
10005a8c:	6879      	ldr	r1, [r7, #4]
10005a8e:	68b8      	ldr	r0, [r7, #8]
10005a90:	4798      	blx	r3
}
10005a92:	bf00      	nop
10005a94:	3710      	adds	r7, #16
10005a96:	46bd      	mov	sp, r7
10005a98:	bd80      	pop	{r7, pc}
	...

10005a9c <stdio_out_chars_crlf>:

static void stdio_out_chars_crlf(stdio_driver_t *driver, const char *s, int len) {
10005a9c:	b580      	push	{r7, lr}
10005a9e:	b088      	sub	sp, #32
10005aa0:	af00      	add	r7, sp, #0
10005aa2:	60f8      	str	r0, [r7, #12]
10005aa4:	60b9      	str	r1, [r7, #8]
10005aa6:	607a      	str	r2, [r7, #4]
#if PICO_STDIO_ENABLE_CRLF_SUPPORT
    if (!driver->crlf_enabled) {
10005aa8:	68fb      	ldr	r3, [r7, #12]
10005aaa:	7d5b      	ldrb	r3, [r3, #21]
10005aac:	f083 0301 	eor.w	r3, r3, #1
10005ab0:	b2db      	uxtb	r3, r3
10005ab2:	2b00      	cmp	r3, #0
10005ab4:	d005      	beq.n	10005ac2 <stdio_out_chars_crlf+0x26>
        driver->out_chars(s, len);
10005ab6:	68fb      	ldr	r3, [r7, #12]
10005ab8:	681b      	ldr	r3, [r3, #0]
10005aba:	6879      	ldr	r1, [r7, #4]
10005abc:	68b8      	ldr	r0, [r7, #8]
10005abe:	4798      	blx	r3
        return;
10005ac0:	e060      	b.n	10005b84 <stdio_out_chars_crlf+0xe8>
    }
    int first_of_chunk = 0;
10005ac2:	2300      	movs	r3, #0
10005ac4:	61fb      	str	r3, [r7, #28]
    static const char crlf_str[] = {'\r', '\n'};
    for (int i = 0; i < len; i++) {
10005ac6:	2300      	movs	r3, #0
10005ac8:	61bb      	str	r3, [r7, #24]
10005aca:	e03a      	b.n	10005b42 <stdio_out_chars_crlf+0xa6>
        bool prev_char_was_cr = i > 0 ? s[i - 1] == '\r' : driver->last_ended_with_cr;
10005acc:	69bb      	ldr	r3, [r7, #24]
10005ace:	2b00      	cmp	r3, #0
10005ad0:	dd0a      	ble.n	10005ae8 <stdio_out_chars_crlf+0x4c>
10005ad2:	69bb      	ldr	r3, [r7, #24]
10005ad4:	3b01      	subs	r3, #1
10005ad6:	68ba      	ldr	r2, [r7, #8]
10005ad8:	4413      	add	r3, r2
10005ada:	781b      	ldrb	r3, [r3, #0]
10005adc:	2b0d      	cmp	r3, #13
10005ade:	bf0c      	ite	eq
10005ae0:	2301      	moveq	r3, #1
10005ae2:	2300      	movne	r3, #0
10005ae4:	b2db      	uxtb	r3, r3
10005ae6:	e006      	b.n	10005af6 <stdio_out_chars_crlf+0x5a>
10005ae8:	68fb      	ldr	r3, [r7, #12]
10005aea:	7d1b      	ldrb	r3, [r3, #20]
10005aec:	2b00      	cmp	r3, #0
10005aee:	bf14      	ite	ne
10005af0:	2301      	movne	r3, #1
10005af2:	2300      	moveq	r3, #0
10005af4:	b2db      	uxtb	r3, r3
10005af6:	75fb      	strb	r3, [r7, #23]
        if (s[i] == '\n' && !prev_char_was_cr) {
10005af8:	69bb      	ldr	r3, [r7, #24]
10005afa:	68ba      	ldr	r2, [r7, #8]
10005afc:	4413      	add	r3, r2
10005afe:	781b      	ldrb	r3, [r3, #0]
10005b00:	2b0a      	cmp	r3, #10
10005b02:	d11b      	bne.n	10005b3c <stdio_out_chars_crlf+0xa0>
10005b04:	7dfb      	ldrb	r3, [r7, #23]
10005b06:	f083 0301 	eor.w	r3, r3, #1
10005b0a:	b2db      	uxtb	r3, r3
10005b0c:	2b00      	cmp	r3, #0
10005b0e:	d015      	beq.n	10005b3c <stdio_out_chars_crlf+0xa0>
            if (i > first_of_chunk) {
10005b10:	69ba      	ldr	r2, [r7, #24]
10005b12:	69fb      	ldr	r3, [r7, #28]
10005b14:	429a      	cmp	r2, r3
10005b16:	dd09      	ble.n	10005b2c <stdio_out_chars_crlf+0x90>
                driver->out_chars(&s[first_of_chunk], i - first_of_chunk);
10005b18:	68fb      	ldr	r3, [r7, #12]
10005b1a:	681b      	ldr	r3, [r3, #0]
10005b1c:	69fa      	ldr	r2, [r7, #28]
10005b1e:	68b9      	ldr	r1, [r7, #8]
10005b20:	1888      	adds	r0, r1, r2
10005b22:	69b9      	ldr	r1, [r7, #24]
10005b24:	69fa      	ldr	r2, [r7, #28]
10005b26:	1a8a      	subs	r2, r1, r2
10005b28:	4611      	mov	r1, r2
10005b2a:	4798      	blx	r3
            }
            driver->out_chars(crlf_str, 2);
10005b2c:	68fb      	ldr	r3, [r7, #12]
10005b2e:	681b      	ldr	r3, [r3, #0]
10005b30:	2102      	movs	r1, #2
10005b32:	4816      	ldr	r0, [pc, #88]	@ (10005b8c <stdio_out_chars_crlf+0xf0>)
10005b34:	4798      	blx	r3
            first_of_chunk = i + 1;
10005b36:	69bb      	ldr	r3, [r7, #24]
10005b38:	3301      	adds	r3, #1
10005b3a:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < len; i++) {
10005b3c:	69bb      	ldr	r3, [r7, #24]
10005b3e:	3301      	adds	r3, #1
10005b40:	61bb      	str	r3, [r7, #24]
10005b42:	69ba      	ldr	r2, [r7, #24]
10005b44:	687b      	ldr	r3, [r7, #4]
10005b46:	429a      	cmp	r2, r3
10005b48:	dbc0      	blt.n	10005acc <stdio_out_chars_crlf+0x30>
        }
    }
    if (first_of_chunk < len) {
10005b4a:	69fa      	ldr	r2, [r7, #28]
10005b4c:	687b      	ldr	r3, [r7, #4]
10005b4e:	429a      	cmp	r2, r3
10005b50:	da09      	bge.n	10005b66 <stdio_out_chars_crlf+0xca>
        driver->out_chars(&s[first_of_chunk], len - first_of_chunk);
10005b52:	68fb      	ldr	r3, [r7, #12]
10005b54:	681b      	ldr	r3, [r3, #0]
10005b56:	69fa      	ldr	r2, [r7, #28]
10005b58:	68b9      	ldr	r1, [r7, #8]
10005b5a:	1888      	adds	r0, r1, r2
10005b5c:	6879      	ldr	r1, [r7, #4]
10005b5e:	69fa      	ldr	r2, [r7, #28]
10005b60:	1a8a      	subs	r2, r1, r2
10005b62:	4611      	mov	r1, r2
10005b64:	4798      	blx	r3
    }
    if (len > 0) {
10005b66:	687b      	ldr	r3, [r7, #4]
10005b68:	2b00      	cmp	r3, #0
10005b6a:	dd0b      	ble.n	10005b84 <stdio_out_chars_crlf+0xe8>
        driver->last_ended_with_cr = s[len - 1] == '\r';
10005b6c:	687b      	ldr	r3, [r7, #4]
10005b6e:	3b01      	subs	r3, #1
10005b70:	68ba      	ldr	r2, [r7, #8]
10005b72:	4413      	add	r3, r2
10005b74:	781b      	ldrb	r3, [r3, #0]
10005b76:	2b0d      	cmp	r3, #13
10005b78:	bf0c      	ite	eq
10005b7a:	2301      	moveq	r3, #1
10005b7c:	2300      	movne	r3, #0
10005b7e:	b2da      	uxtb	r2, r3
10005b80:	68fb      	ldr	r3, [r7, #12]
10005b82:	751a      	strb	r2, [r3, #20]
    }
#else
    driver->out_chars(s, len);
#endif
}
10005b84:	3720      	adds	r7, #32
10005b86:	46bd      	mov	sp, r7
10005b88:	bd80      	pop	{r7, pc}
10005b8a:	bf00      	nop
10005b8c:	1000ba24 	.word	0x1000ba24

10005b90 <stdio_put_string>:

int stdio_put_string(const char *s, int len, bool newline, bool cr_translation) {
10005b90:	b580      	push	{r7, lr}
10005b92:	b088      	sub	sp, #32
10005b94:	af00      	add	r7, sp, #0
10005b96:	60f8      	str	r0, [r7, #12]
10005b98:	60b9      	str	r1, [r7, #8]
10005b9a:	4611      	mov	r1, r2
10005b9c:	461a      	mov	r2, r3
10005b9e:	460b      	mov	r3, r1
10005ba0:	71fb      	strb	r3, [r7, #7]
10005ba2:	4613      	mov	r3, r2
10005ba4:	71bb      	strb	r3, [r7, #6]
    bool serialized = stdout_serialize_begin();
10005ba6:	f7ff ff4f 	bl	10005a48 <stdout_serialize_begin>
10005baa:	4603      	mov	r3, r0
10005bac:	76fb      	strb	r3, [r7, #27]
    if (!serialized) {
#if PICO_STDIO_IGNORE_NESTED_STDOUT
        return 0;
#endif
    }
    if (len == -1) len = (int)strlen(s);
10005bae:	68bb      	ldr	r3, [r7, #8]
10005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
10005bb4:	d104      	bne.n	10005bc0 <stdio_put_string+0x30>
10005bb6:	68f8      	ldr	r0, [r7, #12]
10005bb8:	f005 fa34 	bl	1000b024 <strlen>
10005bbc:	4603      	mov	r3, r0
10005bbe:	60bb      	str	r3, [r7, #8]
    void (*out_func)(stdio_driver_t *, const char *, int) = cr_translation ? stdio_out_chars_crlf : stdio_out_chars_no_crlf;
10005bc0:	79bb      	ldrb	r3, [r7, #6]
10005bc2:	2b00      	cmp	r3, #0
10005bc4:	d001      	beq.n	10005bca <stdio_put_string+0x3a>
10005bc6:	4b1c      	ldr	r3, [pc, #112]	@ (10005c38 <stdio_put_string+0xa8>)
10005bc8:	e000      	b.n	10005bcc <stdio_put_string+0x3c>
10005bca:	4b1c      	ldr	r3, [pc, #112]	@ (10005c3c <stdio_put_string+0xac>)
10005bcc:	617b      	str	r3, [r7, #20]
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10005bce:	4b1c      	ldr	r3, [pc, #112]	@ (10005c40 <stdio_put_string+0xb0>)
10005bd0:	681b      	ldr	r3, [r3, #0]
10005bd2:	61fb      	str	r3, [r7, #28]
10005bd4:	e023      	b.n	10005c1e <stdio_put_string+0x8e>
        if (!driver->out_chars) continue;
10005bd6:	69fb      	ldr	r3, [r7, #28]
10005bd8:	681b      	ldr	r3, [r3, #0]
10005bda:	2b00      	cmp	r3, #0
10005bdc:	d019      	beq.n	10005c12 <stdio_put_string+0x82>
        if (filter && filter != driver) continue;
10005bde:	4b19      	ldr	r3, [pc, #100]	@ (10005c44 <stdio_put_string+0xb4>)
10005be0:	681b      	ldr	r3, [r3, #0]
10005be2:	2b00      	cmp	r3, #0
10005be4:	d004      	beq.n	10005bf0 <stdio_put_string+0x60>
10005be6:	4b17      	ldr	r3, [pc, #92]	@ (10005c44 <stdio_put_string+0xb4>)
10005be8:	681b      	ldr	r3, [r3, #0]
10005bea:	69fa      	ldr	r2, [r7, #28]
10005bec:	429a      	cmp	r2, r3
10005bee:	d112      	bne.n	10005c16 <stdio_put_string+0x86>
        out_func(driver, s, len);
10005bf0:	697b      	ldr	r3, [r7, #20]
10005bf2:	68ba      	ldr	r2, [r7, #8]
10005bf4:	68f9      	ldr	r1, [r7, #12]
10005bf6:	69f8      	ldr	r0, [r7, #28]
10005bf8:	4798      	blx	r3
        if (newline) {
10005bfa:	79fb      	ldrb	r3, [r7, #7]
10005bfc:	2b00      	cmp	r3, #0
10005bfe:	d00b      	beq.n	10005c18 <stdio_put_string+0x88>
            const char c = '\n';
10005c00:	230a      	movs	r3, #10
10005c02:	74fb      	strb	r3, [r7, #19]
            out_func(driver, &c, 1);
10005c04:	f107 0113 	add.w	r1, r7, #19
10005c08:	697b      	ldr	r3, [r7, #20]
10005c0a:	2201      	movs	r2, #1
10005c0c:	69f8      	ldr	r0, [r7, #28]
10005c0e:	4798      	blx	r3
10005c10:	e002      	b.n	10005c18 <stdio_put_string+0x88>
        if (!driver->out_chars) continue;
10005c12:	bf00      	nop
10005c14:	e000      	b.n	10005c18 <stdio_put_string+0x88>
        if (filter && filter != driver) continue;
10005c16:	bf00      	nop
    for (stdio_driver_t *driver = drivers; driver; driver = driver->next) {
10005c18:	69fb      	ldr	r3, [r7, #28]
10005c1a:	691b      	ldr	r3, [r3, #16]
10005c1c:	61fb      	str	r3, [r7, #28]
10005c1e:	69fb      	ldr	r3, [r7, #28]
10005c20:	2b00      	cmp	r3, #0
10005c22:	d1d8      	bne.n	10005bd6 <stdio_put_string+0x46>
        }
    }
    if (serialized) {
10005c24:	7efb      	ldrb	r3, [r7, #27]
10005c26:	2b00      	cmp	r3, #0
10005c28:	d001      	beq.n	10005c2e <stdio_put_string+0x9e>
        stdout_serialize_end();
10005c2a:	f7ff ff1d 	bl	10005a68 <stdout_serialize_end>
    }
    return len;
10005c2e:	68bb      	ldr	r3, [r7, #8]
}
10005c30:	4618      	mov	r0, r3
10005c32:	3720      	adds	r7, #32
10005c34:	46bd      	mov	sp, r7
10005c36:	bd80      	pop	{r7, pc}
10005c38:	10005a9d 	.word	0x10005a9d
10005c3c:	10005a7d 	.word	0x10005a7d
10005c40:	20002104 	.word	0x20002104
10005c44:	2000210c 	.word	0x2000210c

10005c48 <stdio_set_driver_enabled>:
    stdio_put_string(s, len, true, false);
    stdio_flush();
    return len;
}

void stdio_set_driver_enabled(stdio_driver_t *driver, bool enable) {
10005c48:	b480      	push	{r7}
10005c4a:	b085      	sub	sp, #20
10005c4c:	af00      	add	r7, sp, #0
10005c4e:	6078      	str	r0, [r7, #4]
10005c50:	460b      	mov	r3, r1
10005c52:	70fb      	strb	r3, [r7, #3]
    stdio_driver_t **prev = &drivers;
10005c54:	4b15      	ldr	r3, [pc, #84]	@ (10005cac <stdio_set_driver_enabled+0x64>)
10005c56:	60fb      	str	r3, [r7, #12]
    while (*prev) {
10005c58:	e016      	b.n	10005c88 <stdio_set_driver_enabled+0x40>
        if (*prev == driver) {
10005c5a:	68fb      	ldr	r3, [r7, #12]
10005c5c:	681b      	ldr	r3, [r3, #0]
10005c5e:	687a      	ldr	r2, [r7, #4]
10005c60:	429a      	cmp	r2, r3
10005c62:	d10d      	bne.n	10005c80 <stdio_set_driver_enabled+0x38>
            if (!enable) {
10005c64:	78fb      	ldrb	r3, [r7, #3]
10005c66:	f083 0301 	eor.w	r3, r3, #1
10005c6a:	b2db      	uxtb	r3, r3
10005c6c:	2b00      	cmp	r3, #0
10005c6e:	d016      	beq.n	10005c9e <stdio_set_driver_enabled+0x56>
                *prev = driver->next;
10005c70:	687b      	ldr	r3, [r7, #4]
10005c72:	691a      	ldr	r2, [r3, #16]
10005c74:	68fb      	ldr	r3, [r7, #12]
10005c76:	601a      	str	r2, [r3, #0]
                driver->next = NULL;
10005c78:	687b      	ldr	r3, [r7, #4]
10005c7a:	2200      	movs	r2, #0
10005c7c:	611a      	str	r2, [r3, #16]
            }
            return;
10005c7e:	e00e      	b.n	10005c9e <stdio_set_driver_enabled+0x56>
        }
        prev = &(*prev)->next;
10005c80:	68fb      	ldr	r3, [r7, #12]
10005c82:	681b      	ldr	r3, [r3, #0]
10005c84:	3310      	adds	r3, #16
10005c86:	60fb      	str	r3, [r7, #12]
    while (*prev) {
10005c88:	68fb      	ldr	r3, [r7, #12]
10005c8a:	681b      	ldr	r3, [r3, #0]
10005c8c:	2b00      	cmp	r3, #0
10005c8e:	d1e4      	bne.n	10005c5a <stdio_set_driver_enabled+0x12>
    }
    if (enable) {
10005c90:	78fb      	ldrb	r3, [r7, #3]
10005c92:	2b00      	cmp	r3, #0
10005c94:	d004      	beq.n	10005ca0 <stdio_set_driver_enabled+0x58>
        *prev = driver;
10005c96:	68fb      	ldr	r3, [r7, #12]
10005c98:	687a      	ldr	r2, [r7, #4]
10005c9a:	601a      	str	r2, [r3, #0]
10005c9c:	e000      	b.n	10005ca0 <stdio_set_driver_enabled+0x58>
            return;
10005c9e:	bf00      	nop
    }
}
10005ca0:	3714      	adds	r7, #20
10005ca2:	46bd      	mov	sp, r7
10005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
10005ca8:	4770      	bx	lr
10005caa:	bf00      	nop
10005cac:	20002104 	.word	0x20002104

10005cb0 <stdio_flush>:

void stdio_flush(void) {
10005cb0:	b580      	push	{r7, lr}
10005cb2:	b082      	sub	sp, #8
10005cb4:	af00      	add	r7, sp, #0
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10005cb6:	4b0b      	ldr	r3, [pc, #44]	@ (10005ce4 <stdio_flush+0x34>)
10005cb8:	681b      	ldr	r3, [r3, #0]
10005cba:	607b      	str	r3, [r7, #4]
10005cbc:	e009      	b.n	10005cd2 <stdio_flush+0x22>
        if (d->out_flush) d->out_flush();
10005cbe:	687b      	ldr	r3, [r7, #4]
10005cc0:	685b      	ldr	r3, [r3, #4]
10005cc2:	2b00      	cmp	r3, #0
10005cc4:	d002      	beq.n	10005ccc <stdio_flush+0x1c>
10005cc6:	687b      	ldr	r3, [r7, #4]
10005cc8:	685b      	ldr	r3, [r3, #4]
10005cca:	4798      	blx	r3
    for (stdio_driver_t *d = drivers; d; d = d->next) {
10005ccc:	687b      	ldr	r3, [r7, #4]
10005cce:	691b      	ldr	r3, [r3, #16]
10005cd0:	607b      	str	r3, [r7, #4]
10005cd2:	687b      	ldr	r3, [r7, #4]
10005cd4:	2b00      	cmp	r3, #0
10005cd6:	d1f2      	bne.n	10005cbe <stdio_flush+0xe>
    }
}
10005cd8:	bf00      	nop
10005cda:	bf00      	nop
10005cdc:	3708      	adds	r7, #8
10005cde:	46bd      	mov	sp, r7
10005ce0:	bd80      	pop	{r7, pc}
10005ce2:	bf00      	nop
10005ce4:	20002104 	.word	0x20002104

10005ce8 <stdio_stack_buffer_flush>:
typedef struct stdio_stack_buffer {
    int used;
    char buf[PICO_STDIO_STACK_BUFFER_SIZE];
} stdio_stack_buffer_t;

static void stdio_stack_buffer_flush(stdio_stack_buffer_t *buffer) {
10005ce8:	b580      	push	{r7, lr}
10005cea:	b084      	sub	sp, #16
10005cec:	af00      	add	r7, sp, #0
10005cee:	6078      	str	r0, [r7, #4]
    if (buffer->used) {
10005cf0:	687b      	ldr	r3, [r7, #4]
10005cf2:	681b      	ldr	r3, [r3, #0]
10005cf4:	2b00      	cmp	r3, #0
10005cf6:	d025      	beq.n	10005d44 <stdio_stack_buffer_flush+0x5c>
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10005cf8:	4b14      	ldr	r3, [pc, #80]	@ (10005d4c <stdio_stack_buffer_flush+0x64>)
10005cfa:	681b      	ldr	r3, [r3, #0]
10005cfc:	60fb      	str	r3, [r7, #12]
10005cfe:	e01b      	b.n	10005d38 <stdio_stack_buffer_flush+0x50>
            if (!d->out_chars) continue;
10005d00:	68fb      	ldr	r3, [r7, #12]
10005d02:	681b      	ldr	r3, [r3, #0]
10005d04:	2b00      	cmp	r3, #0
10005d06:	d011      	beq.n	10005d2c <stdio_stack_buffer_flush+0x44>
            if (filter && filter != d) continue;
10005d08:	4b11      	ldr	r3, [pc, #68]	@ (10005d50 <stdio_stack_buffer_flush+0x68>)
10005d0a:	681b      	ldr	r3, [r3, #0]
10005d0c:	2b00      	cmp	r3, #0
10005d0e:	d004      	beq.n	10005d1a <stdio_stack_buffer_flush+0x32>
10005d10:	4b0f      	ldr	r3, [pc, #60]	@ (10005d50 <stdio_stack_buffer_flush+0x68>)
10005d12:	681b      	ldr	r3, [r3, #0]
10005d14:	68fa      	ldr	r2, [r7, #12]
10005d16:	429a      	cmp	r2, r3
10005d18:	d10a      	bne.n	10005d30 <stdio_stack_buffer_flush+0x48>
            stdio_out_chars_crlf(d, buffer->buf, buffer->used);
10005d1a:	687b      	ldr	r3, [r7, #4]
10005d1c:	1d19      	adds	r1, r3, #4
10005d1e:	687b      	ldr	r3, [r7, #4]
10005d20:	681b      	ldr	r3, [r3, #0]
10005d22:	461a      	mov	r2, r3
10005d24:	68f8      	ldr	r0, [r7, #12]
10005d26:	f7ff feb9 	bl	10005a9c <stdio_out_chars_crlf>
10005d2a:	e002      	b.n	10005d32 <stdio_stack_buffer_flush+0x4a>
            if (!d->out_chars) continue;
10005d2c:	bf00      	nop
10005d2e:	e000      	b.n	10005d32 <stdio_stack_buffer_flush+0x4a>
            if (filter && filter != d) continue;
10005d30:	bf00      	nop
        for (stdio_driver_t *d = drivers; d; d = d->next) {
10005d32:	68fb      	ldr	r3, [r7, #12]
10005d34:	691b      	ldr	r3, [r3, #16]
10005d36:	60fb      	str	r3, [r7, #12]
10005d38:	68fb      	ldr	r3, [r7, #12]
10005d3a:	2b00      	cmp	r3, #0
10005d3c:	d1e0      	bne.n	10005d00 <stdio_stack_buffer_flush+0x18>
        }
        buffer->used = 0;
10005d3e:	687b      	ldr	r3, [r7, #4]
10005d40:	2200      	movs	r2, #0
10005d42:	601a      	str	r2, [r3, #0]
    }
}
10005d44:	bf00      	nop
10005d46:	3710      	adds	r7, #16
10005d48:	46bd      	mov	sp, r7
10005d4a:	bd80      	pop	{r7, pc}
10005d4c:	20002104 	.word	0x20002104
10005d50:	2000210c 	.word	0x2000210c

10005d54 <stdio_buffered_printer>:

static void stdio_buffered_printer(char c, void *arg) {
10005d54:	b580      	push	{r7, lr}
10005d56:	b084      	sub	sp, #16
10005d58:	af00      	add	r7, sp, #0
10005d5a:	4603      	mov	r3, r0
10005d5c:	6039      	str	r1, [r7, #0]
10005d5e:	71fb      	strb	r3, [r7, #7]
    stdio_stack_buffer_t *buffer = (stdio_stack_buffer_t *)arg;
10005d60:	683b      	ldr	r3, [r7, #0]
10005d62:	60fb      	str	r3, [r7, #12]
    if (buffer->used == PICO_STDIO_STACK_BUFFER_SIZE) {
10005d64:	68fb      	ldr	r3, [r7, #12]
10005d66:	681b      	ldr	r3, [r3, #0]
10005d68:	2b80      	cmp	r3, #128	@ 0x80
10005d6a:	d102      	bne.n	10005d72 <stdio_buffered_printer+0x1e>
        stdio_stack_buffer_flush(buffer);
10005d6c:	68f8      	ldr	r0, [r7, #12]
10005d6e:	f7ff ffbb 	bl	10005ce8 <stdio_stack_buffer_flush>
    }
    buffer->buf[buffer->used++] = c;
10005d72:	68fb      	ldr	r3, [r7, #12]
10005d74:	681b      	ldr	r3, [r3, #0]
10005d76:	1c59      	adds	r1, r3, #1
10005d78:	68fa      	ldr	r2, [r7, #12]
10005d7a:	6011      	str	r1, [r2, #0]
10005d7c:	68fa      	ldr	r2, [r7, #12]
10005d7e:	4413      	add	r3, r2
10005d80:	79fa      	ldrb	r2, [r7, #7]
10005d82:	711a      	strb	r2, [r3, #4]
}
10005d84:	bf00      	nop
10005d86:	3710      	adds	r7, #16
10005d88:	46bd      	mov	sp, r7
10005d8a:	bd80      	pop	{r7, pc}

10005d8c <stdio_init_all>:
#endif

bool stdio_init_all(void) {
10005d8c:	b580      	push	{r7, lr}
10005d8e:	b082      	sub	sp, #8
10005d90:	af00      	add	r7, sp, #0
    // todo add explicit custom, or registered although you can call stdio_enable_driver explicitly anyway
    // These are well known ones

    bool rc = false;
10005d92:	2300      	movs	r3, #0
10005d94:	71fb      	strb	r3, [r7, #7]
    stdio_rtt_init();
    rc = true;
#endif

#if LIB_PICO_STDIO_USB
    rc |= stdio_usb_init();
10005d96:	f000 fc9b 	bl	100066d0 <stdio_usb_init>
10005d9a:	4603      	mov	r3, r0
10005d9c:	461a      	mov	r2, r3
10005d9e:	79fb      	ldrb	r3, [r7, #7]
10005da0:	4313      	orrs	r3, r2
10005da2:	b2db      	uxtb	r3, r3
10005da4:	2b00      	cmp	r3, #0
10005da6:	bf14      	ite	ne
10005da8:	2301      	movne	r3, #1
10005daa:	2300      	moveq	r3, #0
10005dac:	71fb      	strb	r3, [r7, #7]
#endif
    return rc;
10005dae:	79fb      	ldrb	r3, [r7, #7]
}
10005db0:	4618      	mov	r0, r3
10005db2:	3708      	adds	r7, #8
10005db4:	46bd      	mov	sp, r7
10005db6:	bd80      	pop	{r7, pc}

10005db8 <__wrap_puts>:
    char cc = (char)c;
    stdio_put_string(&cc, 1, false, true);
    return c;
}

int PRIMARY_STDIO_FUNC(puts)(const char *s) {
10005db8:	b580      	push	{r7, lr}
10005dba:	b084      	sub	sp, #16
10005dbc:	af00      	add	r7, sp, #0
10005dbe:	6078      	str	r0, [r7, #4]
    int len = (int)strlen(s);
10005dc0:	6878      	ldr	r0, [r7, #4]
10005dc2:	f005 f92f 	bl	1000b024 <strlen>
10005dc6:	4603      	mov	r3, r0
10005dc8:	60fb      	str	r3, [r7, #12]
    stdio_put_string(s, len, true, true);
10005dca:	2301      	movs	r3, #1
10005dcc:	2201      	movs	r2, #1
10005dce:	68f9      	ldr	r1, [r7, #12]
10005dd0:	6878      	ldr	r0, [r7, #4]
10005dd2:	f7ff fedd 	bl	10005b90 <stdio_put_string>
    stdio_flush();
10005dd6:	f7ff ff6b 	bl	10005cb0 <stdio_flush>
    return len;
10005dda:	68fb      	ldr	r3, [r7, #12]
}
10005ddc:	4618      	mov	r0, r3
10005dde:	3710      	adds	r7, #16
10005de0:	46bd      	mov	sp, r7
10005de2:	bd80      	pop	{r7, pc}

10005de4 <__wrap_vprintf>:

int REAL_FUNC(vprintf)(const char *format, va_list va);

int PRIMARY_STDIO_FUNC(vprintf)(const char *format, va_list va) {
10005de4:	b580      	push	{r7, lr}
10005de6:	b0a6      	sub	sp, #152	@ 0x98
10005de8:	af00      	add	r7, sp, #0
10005dea:	6078      	str	r0, [r7, #4]
10005dec:	6039      	str	r1, [r7, #0]
    bool serialzed = stdout_serialize_begin();
10005dee:	f7ff fe2b 	bl	10005a48 <stdout_serialize_begin>
10005df2:	4603      	mov	r3, r0
10005df4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#endif
    }
    int ret;
#if LIB_PICO_PRINTF_PICO
    struct stdio_stack_buffer buffer;
    buffer.used = 0;
10005df8:	2300      	movs	r3, #0
10005dfa:	60fb      	str	r3, [r7, #12]
    ret = vfctprintf(stdio_buffered_printer, &buffer, format, va);
10005dfc:	f107 010c 	add.w	r1, r7, #12
10005e00:	683b      	ldr	r3, [r7, #0]
10005e02:	687a      	ldr	r2, [r7, #4]
10005e04:	480b      	ldr	r0, [pc, #44]	@ (10005e34 <__wrap_vprintf+0x50>)
10005e06:	f7ff fd0b 	bl	10005820 <vfctprintf>
10005e0a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    stdio_stack_buffer_flush(&buffer);
10005e0e:	f107 030c 	add.w	r3, r7, #12
10005e12:	4618      	mov	r0, r3
10005e14:	f7ff ff68 	bl	10005ce8 <stdio_stack_buffer_flush>
    stdio_flush();
10005e18:	f7ff ff4a 	bl	10005cb0 <stdio_flush>
    printf_none_assert();
    ret = 0;
#else
    ret = REAL_FUNC(vprintf)(format, va);
#endif
    if (serialzed) {
10005e1c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
10005e20:	2b00      	cmp	r3, #0
10005e22:	d001      	beq.n	10005e28 <__wrap_vprintf+0x44>
        stdout_serialize_end();
10005e24:	f7ff fe20 	bl	10005a68 <stdout_serialize_end>
    }
    return ret;
10005e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
10005e2c:	4618      	mov	r0, r3
10005e2e:	3798      	adds	r7, #152	@ 0x98
10005e30:	46bd      	mov	sp, r7
10005e32:	bd80      	pop	{r7, pc}
10005e34:	10005d55 	.word	0x10005d55

10005e38 <__wrap_printf>:

int __printflike(1, 0) PRIMARY_STDIO_FUNC(printf)(const char* format, ...)
{
10005e38:	b40f      	push	{r0, r1, r2, r3}
10005e3a:	b580      	push	{r7, lr}
10005e3c:	b082      	sub	sp, #8
10005e3e:	af00      	add	r7, sp, #0
    va_list va;
    va_start(va, format);
10005e40:	f107 0314 	add.w	r3, r7, #20
10005e44:	603b      	str	r3, [r7, #0]
    int ret = vprintf(format, va);
10005e46:	6839      	ldr	r1, [r7, #0]
10005e48:	6938      	ldr	r0, [r7, #16]
10005e4a:	f7ff ffcb 	bl	10005de4 <__wrap_vprintf>
10005e4e:	6078      	str	r0, [r7, #4]
    va_end(va);
    return ret;
10005e50:	687b      	ldr	r3, [r7, #4]
}
10005e52:	4618      	mov	r0, r3
10005e54:	3708      	adds	r7, #8
10005e56:	46bd      	mov	sp, r7
10005e58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
10005e5c:	b004      	add	sp, #16
10005e5e:	4770      	bx	lr

10005e60 <reset_usb_boot>:
static inline void __attribute__((noreturn)) reset_usb_boot(uint32_t usb_activity_gpio_pin_mask, uint32_t disable_interface_mask) {
10005e60:	b580      	push	{r7, lr}
10005e62:	b082      	sub	sp, #8
10005e64:	af00      	add	r7, sp, #0
10005e66:	6078      	str	r0, [r7, #4]
10005e68:	6039      	str	r1, [r7, #0]
    rom_reset_usb_boot(usb_activity_gpio_pin_mask, disable_interface_mask);
10005e6a:	6839      	ldr	r1, [r7, #0]
10005e6c:	6878      	ldr	r0, [r7, #4]
10005e6e:	f7fd fe97 	bl	10003ba0 <rom_reset_usb_boot>
	...

10005e74 <tud_descriptor_bos_cb>:
};

TU_VERIFY_STATIC(sizeof(desc_bos) == BOS_TOTAL_LEN, "Incorrect size");

uint8_t const * tud_descriptor_bos_cb(void)
{
10005e74:	b480      	push	{r7}
10005e76:	af00      	add	r7, sp, #0
    return desc_bos;
10005e78:	4b02      	ldr	r3, [pc, #8]	@ (10005e84 <tud_descriptor_bos_cb+0x10>)
}
10005e7a:	4618      	mov	r0, r3
10005e7c:	46bd      	mov	sp, r7
10005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
10005e82:	4770      	bx	lr
10005e84:	1000ba28 	.word	0x1000ba28

10005e88 <tud_vendor_control_xfer_cb>:
};

TU_VERIFY_STATIC(sizeof(desc_ms_os_20) == MS_OS_20_DESC_LEN, "Incorrect size");

bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
10005e88:	b580      	push	{r7, lr}
10005e8a:	b082      	sub	sp, #8
10005e8c:	af00      	add	r7, sp, #0
10005e8e:	4603      	mov	r3, r0
10005e90:	603a      	str	r2, [r7, #0]
10005e92:	71fb      	strb	r3, [r7, #7]
10005e94:	460b      	mov	r3, r1
10005e96:	71bb      	strb	r3, [r7, #6]
    // nothing to with DATA & ACK stage
    if (stage != CONTROL_STAGE_SETUP) return true;
10005e98:	79bb      	ldrb	r3, [r7, #6]
10005e9a:	2b01      	cmp	r3, #1
10005e9c:	d001      	beq.n	10005ea2 <tud_vendor_control_xfer_cb+0x1a>
10005e9e:	2301      	movs	r3, #1
10005ea0:	e011      	b.n	10005ec6 <tud_vendor_control_xfer_cb+0x3e>

    if (request->bRequest == 1 && request->wIndex == 7) {
10005ea2:	683b      	ldr	r3, [r7, #0]
10005ea4:	785b      	ldrb	r3, [r3, #1]
10005ea6:	2b01      	cmp	r3, #1
10005ea8:	d10c      	bne.n	10005ec4 <tud_vendor_control_xfer_cb+0x3c>
10005eaa:	683b      	ldr	r3, [r7, #0]
10005eac:	889b      	ldrh	r3, [r3, #4]
10005eae:	b29b      	uxth	r3, r3
10005eb0:	2b07      	cmp	r3, #7
10005eb2:	d107      	bne.n	10005ec4 <tud_vendor_control_xfer_cb+0x3c>
        // Get Microsoft OS 2.0 compatible descriptor
        return tud_control_xfer(rhport, request, (void*)(uintptr_t) desc_ms_os_20, sizeof(desc_ms_os_20));
10005eb4:	79f8      	ldrb	r0, [r7, #7]
10005eb6:	23a6      	movs	r3, #166	@ 0xa6
10005eb8:	4a05      	ldr	r2, [pc, #20]	@ (10005ed0 <tud_vendor_control_xfer_cb+0x48>)
10005eba:	6839      	ldr	r1, [r7, #0]
10005ebc:	f002 fd90 	bl	100089e0 <tud_control_xfer>
10005ec0:	4603      	mov	r3, r0
10005ec2:	e000      	b.n	10005ec6 <tud_vendor_control_xfer_cb+0x3e>
    } else {
        return false;
10005ec4:	2300      	movs	r3, #0
    }

    // stall unknown request
    return false;
}
10005ec6:	4618      	mov	r0, r3
10005ec8:	3708      	adds	r7, #8
10005eca:	46bd      	mov	sp, r7
10005ecc:	bd80      	pop	{r7, pc}
10005ece:	bf00      	nop
10005ed0:	1000ba4c 	.word	0x1000ba4c

10005ed4 <resetd_init>:
#endif

static void resetd_init(void) {
10005ed4:	b480      	push	{r7}
10005ed6:	af00      	add	r7, sp, #0
}
10005ed8:	bf00      	nop
10005eda:	46bd      	mov	sp, r7
10005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
10005ee0:	4770      	bx	lr
	...

10005ee4 <resetd_reset>:

static void resetd_reset(uint8_t __unused rhport) {
10005ee4:	b480      	push	{r7}
10005ee6:	b083      	sub	sp, #12
10005ee8:	af00      	add	r7, sp, #0
10005eea:	4603      	mov	r3, r0
10005eec:	71fb      	strb	r3, [r7, #7]
    itf_num = 0;
10005eee:	4b04      	ldr	r3, [pc, #16]	@ (10005f00 <resetd_reset+0x1c>)
10005ef0:	2200      	movs	r2, #0
10005ef2:	701a      	strb	r2, [r3, #0]
}
10005ef4:	bf00      	nop
10005ef6:	370c      	adds	r7, #12
10005ef8:	46bd      	mov	sp, r7
10005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
10005efe:	4770      	bx	lr
10005f00:	20002586 	.word	0x20002586

10005f04 <resetd_open>:

static uint16_t resetd_open(uint8_t __unused rhport, tusb_desc_interface_t const *itf_desc, uint16_t max_len) {
10005f04:	b480      	push	{r7}
10005f06:	b085      	sub	sp, #20
10005f08:	af00      	add	r7, sp, #0
10005f0a:	4603      	mov	r3, r0
10005f0c:	6039      	str	r1, [r7, #0]
10005f0e:	71fb      	strb	r3, [r7, #7]
10005f10:	4613      	mov	r3, r2
10005f12:	80bb      	strh	r3, [r7, #4]
    TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == itf_desc->bInterfaceClass &&
10005f14:	683b      	ldr	r3, [r7, #0]
10005f16:	795b      	ldrb	r3, [r3, #5]
10005f18:	2bff      	cmp	r3, #255	@ 0xff
10005f1a:	d107      	bne.n	10005f2c <resetd_open+0x28>
10005f1c:	683b      	ldr	r3, [r7, #0]
10005f1e:	799b      	ldrb	r3, [r3, #6]
10005f20:	2b00      	cmp	r3, #0
10005f22:	d103      	bne.n	10005f2c <resetd_open+0x28>
10005f24:	683b      	ldr	r3, [r7, #0]
10005f26:	79db      	ldrb	r3, [r3, #7]
10005f28:	2b01      	cmp	r3, #1
10005f2a:	d001      	beq.n	10005f30 <resetd_open+0x2c>
10005f2c:	2300      	movs	r3, #0
10005f2e:	e00c      	b.n	10005f4a <resetd_open+0x46>
              RESET_INTERFACE_SUBCLASS == itf_desc->bInterfaceSubClass &&
              RESET_INTERFACE_PROTOCOL == itf_desc->bInterfaceProtocol, 0);

    uint16_t const drv_len = sizeof(tusb_desc_interface_t);
10005f30:	2309      	movs	r3, #9
10005f32:	81fb      	strh	r3, [r7, #14]
    TU_VERIFY(max_len >= drv_len, 0);
10005f34:	88ba      	ldrh	r2, [r7, #4]
10005f36:	89fb      	ldrh	r3, [r7, #14]
10005f38:	429a      	cmp	r2, r3
10005f3a:	d201      	bcs.n	10005f40 <resetd_open+0x3c>
10005f3c:	2300      	movs	r3, #0
10005f3e:	e004      	b.n	10005f4a <resetd_open+0x46>

    itf_num = itf_desc->bInterfaceNumber;
10005f40:	683b      	ldr	r3, [r7, #0]
10005f42:	789a      	ldrb	r2, [r3, #2]
10005f44:	4b04      	ldr	r3, [pc, #16]	@ (10005f58 <resetd_open+0x54>)
10005f46:	701a      	strb	r2, [r3, #0]
    return drv_len;
10005f48:	89fb      	ldrh	r3, [r7, #14]
}
10005f4a:	4618      	mov	r0, r3
10005f4c:	3714      	adds	r7, #20
10005f4e:	46bd      	mov	sp, r7
10005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
10005f54:	4770      	bx	lr
10005f56:	bf00      	nop
10005f58:	20002586 	.word	0x20002586

10005f5c <resetd_control_xfer_cb>:

// Support for parameterized reset via vendor interface control request
static bool resetd_control_xfer_cb(uint8_t __unused rhport, uint8_t stage, tusb_control_request_t const * request) {
10005f5c:	b580      	push	{r7, lr}
10005f5e:	b084      	sub	sp, #16
10005f60:	af00      	add	r7, sp, #0
10005f62:	4603      	mov	r3, r0
10005f64:	603a      	str	r2, [r7, #0]
10005f66:	71fb      	strb	r3, [r7, #7]
10005f68:	460b      	mov	r3, r1
10005f6a:	71bb      	strb	r3, [r7, #6]
    // nothing to do with DATA & ACK stage
    if (stage != CONTROL_STAGE_SETUP) return true;
10005f6c:	79bb      	ldrb	r3, [r7, #6]
10005f6e:	2b01      	cmp	r3, #1
10005f70:	d001      	beq.n	10005f76 <resetd_control_xfer_cb+0x1a>
10005f72:	2301      	movs	r3, #1
10005f74:	e031      	b.n	10005fda <resetd_control_xfer_cb+0x7e>

    if (request->wIndex == itf_num) {
10005f76:	683b      	ldr	r3, [r7, #0]
10005f78:	889b      	ldrh	r3, [r3, #4]
10005f7a:	b29b      	uxth	r3, r3
10005f7c:	4a19      	ldr	r2, [pc, #100]	@ (10005fe4 <resetd_control_xfer_cb+0x88>)
10005f7e:	7812      	ldrb	r2, [r2, #0]
10005f80:	4293      	cmp	r3, r2
10005f82:	d129      	bne.n	10005fd8 <resetd_control_xfer_cb+0x7c>

#if PICO_STDIO_USB_RESET_INTERFACE_SUPPORT_RESET_TO_BOOTSEL
        if (request->bRequest == RESET_REQUEST_BOOTSEL) {
10005f84:	683b      	ldr	r3, [r7, #0]
10005f86:	785b      	ldrb	r3, [r3, #1]
10005f88:	2b01      	cmp	r3, #1
10005f8a:	d11a      	bne.n	10005fc2 <resetd_control_xfer_cb+0x66>
#ifdef PICO_STDIO_USB_RESET_BOOTSEL_ACTIVITY_LED
            uint gpio_mask = 1u << PICO_STDIO_USB_RESET_BOOTSEL_ACTIVITY_LED;
#else
            uint gpio_mask = 0u;
10005f8c:	2300      	movs	r3, #0
10005f8e:	60fb      	str	r3, [r7, #12]
#endif
#if !PICO_STDIO_USB_RESET_BOOTSEL_FIXED_ACTIVITY_LED
            if (request->wValue & 0x100) {
10005f90:	683b      	ldr	r3, [r7, #0]
10005f92:	885b      	ldrh	r3, [r3, #2]
10005f94:	b29b      	uxth	r3, r3
10005f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
10005f9a:	2b00      	cmp	r3, #0
10005f9c:	d008      	beq.n	10005fb0 <resetd_control_xfer_cb+0x54>
                gpio_mask = 1u << (request->wValue >> 9u);
10005f9e:	683b      	ldr	r3, [r7, #0]
10005fa0:	885b      	ldrh	r3, [r3, #2]
10005fa2:	b29b      	uxth	r3, r3
10005fa4:	0a5b      	lsrs	r3, r3, #9
10005fa6:	b29b      	uxth	r3, r3
10005fa8:	461a      	mov	r2, r3
10005faa:	2301      	movs	r3, #1
10005fac:	4093      	lsls	r3, r2
10005fae:	60fb      	str	r3, [r7, #12]
            }
#endif
            reset_usb_boot(gpio_mask, (request->wValue & 0x7f) | PICO_STDIO_USB_RESET_BOOTSEL_INTERFACE_DISABLE_MASK);
10005fb0:	683b      	ldr	r3, [r7, #0]
10005fb2:	885b      	ldrh	r3, [r3, #2]
10005fb4:	b29b      	uxth	r3, r3
10005fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10005fba:	4619      	mov	r1, r3
10005fbc:	68f8      	ldr	r0, [r7, #12]
10005fbe:	f7ff ff4f 	bl	10005e60 <reset_usb_boot>
            // does not return, otherwise we'd return true
        }
#endif

#if PICO_STDIO_USB_RESET_INTERFACE_SUPPORT_RESET_TO_FLASH_BOOT
        if (request->bRequest == RESET_REQUEST_FLASH) {
10005fc2:	683b      	ldr	r3, [r7, #0]
10005fc4:	785b      	ldrb	r3, [r3, #1]
10005fc6:	2b02      	cmp	r3, #2
10005fc8:	d106      	bne.n	10005fd8 <resetd_control_xfer_cb+0x7c>
            watchdog_reboot(0, 0, PICO_STDIO_USB_RESET_RESET_TO_FLASH_DELAY_MS);
10005fca:	2264      	movs	r2, #100	@ 0x64
10005fcc:	2100      	movs	r1, #0
10005fce:	2000      	movs	r0, #0
10005fd0:	f7fd fb2a 	bl	10003628 <watchdog_reboot>
            return true;
10005fd4:	2301      	movs	r3, #1
10005fd6:	e000      	b.n	10005fda <resetd_control_xfer_cb+0x7e>
        }
#endif

    }
    return false;
10005fd8:	2300      	movs	r3, #0
}
10005fda:	4618      	mov	r0, r3
10005fdc:	3710      	adds	r7, #16
10005fde:	46bd      	mov	sp, r7
10005fe0:	bd80      	pop	{r7, pc}
10005fe2:	bf00      	nop
10005fe4:	20002586 	.word	0x20002586

10005fe8 <resetd_xfer_cb>:

static bool resetd_xfer_cb(uint8_t __unused rhport, uint8_t __unused ep_addr, xfer_result_t __unused result, uint32_t __unused xferred_bytes) {
10005fe8:	b480      	push	{r7}
10005fea:	b083      	sub	sp, #12
10005fec:	af00      	add	r7, sp, #0
10005fee:	603b      	str	r3, [r7, #0]
10005ff0:	4603      	mov	r3, r0
10005ff2:	71fb      	strb	r3, [r7, #7]
10005ff4:	460b      	mov	r3, r1
10005ff6:	71bb      	strb	r3, [r7, #6]
10005ff8:	4613      	mov	r3, r2
10005ffa:	717b      	strb	r3, [r7, #5]
    return true;
10005ffc:	2301      	movs	r3, #1
}
10005ffe:	4618      	mov	r0, r3
10006000:	370c      	adds	r7, #12
10006002:	46bd      	mov	sp, r7
10006004:	f85d 7b04 	ldr.w	r7, [sp], #4
10006008:	4770      	bx	lr
	...

1000600c <usbd_app_driver_get_cb>:
    .xfer_cb          = resetd_xfer_cb,
    .sof              = NULL
};

// Implement callback to add our custom driver
usbd_class_driver_t const *usbd_app_driver_get_cb(uint8_t *driver_count) {
1000600c:	b480      	push	{r7}
1000600e:	b083      	sub	sp, #12
10006010:	af00      	add	r7, sp, #0
10006012:	6078      	str	r0, [r7, #4]
    *driver_count = 1;
10006014:	687b      	ldr	r3, [r7, #4]
10006016:	2201      	movs	r2, #1
10006018:	701a      	strb	r2, [r3, #0]
    return &_resetd_driver;
1000601a:	4b03      	ldr	r3, [pc, #12]	@ (10006028 <usbd_app_driver_get_cb+0x1c>)
}
1000601c:	4618      	mov	r0, r3
1000601e:	370c      	adds	r7, #12
10006020:	46bd      	mov	sp, r7
10006022:	f85d 7b04 	ldr.w	r7, [sp], #4
10006026:	4770      	bx	lr
10006028:	1000baf4 	.word	0x1000baf4

1000602c <tud_cdc_line_coding_cb>:
#endif

#if PICO_STDIO_USB_ENABLE_RESET_VIA_BAUD_RATE
// Support for default BOOTSEL reset by changing baud rate
void tud_cdc_line_coding_cb(__unused uint8_t itf, cdc_line_coding_t const* p_line_coding) {
1000602c:	b580      	push	{r7, lr}
1000602e:	b084      	sub	sp, #16
10006030:	af00      	add	r7, sp, #0
10006032:	4603      	mov	r3, r0
10006034:	6039      	str	r1, [r7, #0]
10006036:	71fb      	strb	r3, [r7, #7]
    if (p_line_coding->bit_rate == PICO_STDIO_USB_RESET_MAGIC_BAUD_RATE) {
10006038:	683b      	ldr	r3, [r7, #0]
1000603a:	681b      	ldr	r3, [r3, #0]
1000603c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
10006040:	d105      	bne.n	1000604e <tud_cdc_line_coding_cb+0x22>
#ifdef PICO_STDIO_USB_RESET_BOOTSEL_ACTIVITY_LED
        const uint gpio_mask = 1u << PICO_STDIO_USB_RESET_BOOTSEL_ACTIVITY_LED;
#else
        const uint gpio_mask = 0u;
10006042:	2300      	movs	r3, #0
10006044:	60fb      	str	r3, [r7, #12]
#endif
        reset_usb_boot(gpio_mask, PICO_STDIO_USB_RESET_BOOTSEL_INTERFACE_DISABLE_MASK);
10006046:	2100      	movs	r1, #0
10006048:	68f8      	ldr	r0, [r7, #12]
1000604a:	f7ff ff09 	bl	10005e60 <reset_usb_boot>
    }
}
1000604e:	bf00      	nop
10006050:	3710      	adds	r7, #16
10006052:	46bd      	mov	sp, r7
10006054:	bd80      	pop	{r7, pc}

10006056 <to_us_since_boot>:
static inline uint64_t to_us_since_boot(absolute_time_t t) {
10006056:	b480      	push	{r7}
10006058:	b083      	sub	sp, #12
1000605a:	af00      	add	r7, sp, #0
1000605c:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
10006060:	e9d7 2300 	ldrd	r2, r3, [r7]
}
10006064:	4610      	mov	r0, r2
10006066:	4619      	mov	r1, r3
10006068:	370c      	adds	r7, #12
1000606a:	46bd      	mov	sp, r7
1000606c:	f85d 7b04 	ldr.w	r7, [sp], #4
10006070:	4770      	bx	lr

10006072 <update_us_since_boot>:
static inline void update_us_since_boot(absolute_time_t *t, uint64_t us_since_boot) {
10006072:	b480      	push	{r7}
10006074:	b085      	sub	sp, #20
10006076:	af00      	add	r7, sp, #0
10006078:	60f8      	str	r0, [r7, #12]
1000607a:	e9c7 2300 	strd	r2, r3, [r7]
    *t = us_since_boot;
1000607e:	68f9      	ldr	r1, [r7, #12]
10006080:	e9d7 2300 	ldrd	r2, r3, [r7]
10006084:	e9c1 2300 	strd	r2, r3, [r1]
}
10006088:	bf00      	nop
1000608a:	3714      	adds	r7, #20
1000608c:	46bd      	mov	sp, r7
1000608e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006092:	4770      	bx	lr

10006094 <get_absolute_time>:
static inline absolute_time_t get_absolute_time(void) {
10006094:	b580      	push	{r7, lr}
10006096:	b082      	sub	sp, #8
10006098:	af00      	add	r7, sp, #0
    update_us_since_boot(&t, time_us_64());
1000609a:	f7fc fdd7 	bl	10002c4c <time_us_64>
1000609e:	4602      	mov	r2, r0
100060a0:	460b      	mov	r3, r1
100060a2:	4639      	mov	r1, r7
100060a4:	4608      	mov	r0, r1
100060a6:	f7ff ffe4 	bl	10006072 <update_us_since_boot>
    return t;
100060aa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
100060ae:	4610      	mov	r0, r2
100060b0:	4619      	mov	r1, r3
100060b2:	3708      	adds	r7, #8
100060b4:	46bd      	mov	sp, r7
100060b6:	bd80      	pop	{r7, pc}

100060b8 <delayed_by_us>:
static inline absolute_time_t delayed_by_us(const absolute_time_t t, uint64_t us) {
100060b8:	b5b0      	push	{r4, r5, r7, lr}
100060ba:	b08a      	sub	sp, #40	@ 0x28
100060bc:	af00      	add	r7, sp, #0
100060be:	e9c7 0102 	strd	r0, r1, [r7, #8]
100060c2:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t base = to_us_since_boot(t);
100060c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
100060ca:	f7ff ffc4 	bl	10006056 <to_us_since_boot>
100060ce:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t delayed = base + us;
100060d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
100060d6:	e9d7 2300 	ldrd	r2, r3, [r7]
100060da:	1884      	adds	r4, r0, r2
100060dc:	eb41 0503 	adc.w	r5, r1, r3
100060e0:	e9c7 4508 	strd	r4, r5, [r7, #32]
    if ((int64_t)delayed < 0) {
100060e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
100060e8:	2b00      	cmp	r3, #0
100060ea:	da05      	bge.n	100060f8 <delayed_by_us+0x40>
        delayed = INT64_MAX;
100060ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100060f0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
100060f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    update_us_since_boot(&t2, delayed);
100060f8:	f107 0110 	add.w	r1, r7, #16
100060fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10006100:	4608      	mov	r0, r1
10006102:	f7ff ffb6 	bl	10006072 <update_us_since_boot>
    return t2;
10006106:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
1000610a:	4610      	mov	r0, r2
1000610c:	4619      	mov	r1, r3
1000610e:	3728      	adds	r7, #40	@ 0x28
10006110:	46bd      	mov	sp, r7
10006112:	bdb0      	pop	{r4, r5, r7, pc}

10006114 <delayed_by_ms>:
static inline absolute_time_t delayed_by_ms(const absolute_time_t t, uint32_t ms) {
10006114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10006118:	b08c      	sub	sp, #48	@ 0x30
1000611a:	af00      	add	r7, sp, #0
1000611c:	e9c7 0104 	strd	r0, r1, [r7, #16]
10006120:	60fa      	str	r2, [r7, #12]
    uint64_t base = to_us_since_boot(t);
10006122:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
10006126:	f7ff ff96 	bl	10006056 <to_us_since_boot>
1000612a:	e9c7 0108 	strd	r0, r1, [r7, #32]
    uint64_t delayed = base + ms * 1000ull;
1000612e:	68fb      	ldr	r3, [r7, #12]
10006130:	2200      	movs	r2, #0
10006132:	4698      	mov	r8, r3
10006134:	4691      	mov	r9, r2
10006136:	4642      	mov	r2, r8
10006138:	464b      	mov	r3, r9
1000613a:	f04f 0000 	mov.w	r0, #0
1000613e:	f04f 0100 	mov.w	r1, #0
10006142:	0159      	lsls	r1, r3, #5
10006144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
10006148:	0150      	lsls	r0, r2, #5
1000614a:	4602      	mov	r2, r0
1000614c:	460b      	mov	r3, r1
1000614e:	ebb2 0408 	subs.w	r4, r2, r8
10006152:	eb63 0509 	sbc.w	r5, r3, r9
10006156:	f04f 0200 	mov.w	r2, #0
1000615a:	f04f 0300 	mov.w	r3, #0
1000615e:	00ab      	lsls	r3, r5, #2
10006160:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
10006164:	00a2      	lsls	r2, r4, #2
10006166:	4614      	mov	r4, r2
10006168:	461d      	mov	r5, r3
1000616a:	eb14 0a08 	adds.w	sl, r4, r8
1000616e:	eb45 0b09 	adc.w	fp, r5, r9
10006172:	f04f 0200 	mov.w	r2, #0
10006176:	f04f 0300 	mov.w	r3, #0
1000617a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
1000617e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
10006182:	ea4f 02ca 	mov.w	r2, sl, lsl #3
10006186:	4692      	mov	sl, r2
10006188:	469b      	mov	fp, r3
1000618a:	4650      	mov	r0, sl
1000618c:	4659      	mov	r1, fp
1000618e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
10006192:	1814      	adds	r4, r2, r0
10006194:	603c      	str	r4, [r7, #0]
10006196:	414b      	adcs	r3, r1
10006198:	607b      	str	r3, [r7, #4]
1000619a:	e9d7 3400 	ldrd	r3, r4, [r7]
1000619e:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
    if ((int64_t)delayed < 0) {
100061a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
100061a6:	2b00      	cmp	r3, #0
100061a8:	da05      	bge.n	100061b6 <delayed_by_ms+0xa2>
        delayed = INT64_MAX;
100061aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
100061ae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
100061b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    update_us_since_boot(&t2, delayed);
100061b6:	f107 0118 	add.w	r1, r7, #24
100061ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
100061be:	4608      	mov	r0, r1
100061c0:	f7ff ff57 	bl	10006072 <update_us_since_boot>
    return t2;
100061c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
100061c8:	4610      	mov	r0, r2
100061ca:	4619      	mov	r1, r3
100061cc:	3730      	adds	r7, #48	@ 0x30
100061ce:	46bd      	mov	sp, r7
100061d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

100061d4 <make_timeout_time_ms>:
static inline absolute_time_t make_timeout_time_ms(uint32_t ms) {
100061d4:	b580      	push	{r7, lr}
100061d6:	b082      	sub	sp, #8
100061d8:	af00      	add	r7, sp, #0
100061da:	6078      	str	r0, [r7, #4]
    return delayed_by_ms(get_absolute_time(), ms);
100061dc:	f7ff ff5a 	bl	10006094 <get_absolute_time>
100061e0:	687a      	ldr	r2, [r7, #4]
100061e2:	f7ff ff97 	bl	10006114 <delayed_by_ms>
100061e6:	4602      	mov	r2, r0
100061e8:	460b      	mov	r3, r1
}
100061ea:	4610      	mov	r0, r2
100061ec:	4619      	mov	r1, r3
100061ee:	3708      	adds	r7, #8
100061f0:	46bd      	mov	sp, r7
100061f2:	bd80      	pop	{r7, pc}

100061f4 <alarm_pool_add_alarm_in_us>:
static inline alarm_id_t alarm_pool_add_alarm_in_us(alarm_pool_t *pool, uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
100061f4:	b580      	push	{r7, lr}
100061f6:	b088      	sub	sp, #32
100061f8:	af04      	add	r7, sp, #16
100061fa:	60f8      	str	r0, [r7, #12]
100061fc:	e9c7 2300 	strd	r2, r3, [r7]
    return alarm_pool_add_alarm_at(pool, delayed_by_us(get_absolute_time(), us), callback, user_data, fire_if_past);
10006200:	f7ff ff48 	bl	10006094 <get_absolute_time>
10006204:	e9d7 2300 	ldrd	r2, r3, [r7]
10006208:	f7ff ff56 	bl	100060b8 <delayed_by_us>
1000620c:	4602      	mov	r2, r0
1000620e:	460b      	mov	r3, r1
10006210:	f897 1020 	ldrb.w	r1, [r7, #32]
10006214:	9102      	str	r1, [sp, #8]
10006216:	69f9      	ldr	r1, [r7, #28]
10006218:	9101      	str	r1, [sp, #4]
1000621a:	69b9      	ldr	r1, [r7, #24]
1000621c:	9100      	str	r1, [sp, #0]
1000621e:	68f8      	ldr	r0, [r7, #12]
10006220:	f7fc fa06 	bl	10002630 <alarm_pool_add_alarm_at>
10006224:	4603      	mov	r3, r0
}
10006226:	4618      	mov	r0, r3
10006228:	3710      	adds	r7, #16
1000622a:	46bd      	mov	sp, r7
1000622c:	bd80      	pop	{r7, pc}

1000622e <add_alarm_in_us>:
static inline alarm_id_t add_alarm_in_us(uint64_t us, alarm_callback_t callback, void *user_data, bool fire_if_past) {
1000622e:	b580      	push	{r7, lr}
10006230:	b088      	sub	sp, #32
10006232:	af04      	add	r7, sp, #16
10006234:	e9c7 0102 	strd	r0, r1, [r7, #8]
10006238:	607a      	str	r2, [r7, #4]
1000623a:	603b      	str	r3, [r7, #0]
    return alarm_pool_add_alarm_in_us(alarm_pool_get_default(), us, callback, user_data, fire_if_past);
1000623c:	f7fb fea2 	bl	10001f84 <alarm_pool_get_default>
10006240:	4601      	mov	r1, r0
10006242:	7e3b      	ldrb	r3, [r7, #24]
10006244:	9302      	str	r3, [sp, #8]
10006246:	683b      	ldr	r3, [r7, #0]
10006248:	9301      	str	r3, [sp, #4]
1000624a:	687b      	ldr	r3, [r7, #4]
1000624c:	9300      	str	r3, [sp, #0]
1000624e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
10006252:	4608      	mov	r0, r1
10006254:	f7ff ffce 	bl	100061f4 <alarm_pool_add_alarm_in_us>
10006258:	4603      	mov	r3, r0
}
1000625a:	4618      	mov	r0, r3
1000625c:	3710      	adds	r7, #16
1000625e:	46bd      	mov	sp, r7
10006260:	bd80      	pop	{r7, pc}

10006262 <mutex_is_initialized>:
 *  \ingroup mutex
 *
 * \param mtx Pointer to mutex structure
 * \return true if the mutex is initialized, false otherwise
 */
static inline bool mutex_is_initialized(mutex_t *mtx) {
10006262:	b480      	push	{r7}
10006264:	b083      	sub	sp, #12
10006266:	af00      	add	r7, sp, #0
10006268:	6078      	str	r0, [r7, #4]
    return mtx->core.spin_lock != 0;
1000626a:	687b      	ldr	r3, [r7, #4]
1000626c:	681b      	ldr	r3, [r3, #0]
1000626e:	2b00      	cmp	r3, #0
10006270:	bf14      	ite	ne
10006272:	2301      	movne	r3, #1
10006274:	2300      	moveq	r3, #0
10006276:	b2db      	uxtb	r3, r3
}
10006278:	4618      	mov	r0, r3
1000627a:	370c      	adds	r7, #12
1000627c:	46bd      	mov	sp, r7
1000627e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006282:	4770      	bx	lr

10006284 <critical_section_enter_blocking>:
 * If the spin lock associated with this critical section is in use, then this
 * method will block until it is released.
 *
 * \param crit_sec Pointer to critical_section structure
 */
static inline void critical_section_enter_blocking(critical_section_t *crit_sec) {
10006284:	b480      	push	{r7}
10006286:	b089      	sub	sp, #36	@ 0x24
10006288:	af00      	add	r7, sp, #0
1000628a:	6078      	str	r0, [r7, #4]
    crit_sec->save = spin_lock_blocking(crit_sec->spin_lock);
1000628c:	687b      	ldr	r3, [r7, #4]
1000628e:	681b      	ldr	r3, [r3, #0]
10006290:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile (
10006292:	f3ef 8310 	mrs	r3, PRIMASK
10006296:	b672      	cpsid	i
10006298:	61bb      	str	r3, [r7, #24]
    return status;
1000629a:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = save_and_disable_interrupts();
1000629c:	617b      	str	r3, [r7, #20]
1000629e:	69fb      	ldr	r3, [r7, #28]
100062a0:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_LOCK(lock);
100062a2:	6939      	ldr	r1, [r7, #16]
100062a4:	e8d1 3fcf 	ldaexb	r3, [r1]
100062a8:	2201      	movs	r2, #1
100062aa:	2b00      	cmp	r3, #0
100062ac:	d1fa      	bne.n	100062a4 <critical_section_enter_blocking+0x20>
100062ae:	e8c1 2f43 	strexb	r3, r2, [r1]
100062b2:	2b00      	cmp	r3, #0
100062b4:	d1f6      	bne.n	100062a4 <critical_section_enter_blocking+0x20>
100062b6:	60fa      	str	r2, [r7, #12]
100062b8:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("dmb" : : : "memory");
100062ba:	f3bf 8f5f 	dmb	sy
}
100062be:	bf00      	nop
}
100062c0:	bf00      	nop
}
100062c2:	bf00      	nop
    return save;
100062c4:	697a      	ldr	r2, [r7, #20]
100062c6:	687b      	ldr	r3, [r7, #4]
100062c8:	605a      	str	r2, [r3, #4]
}
100062ca:	bf00      	nop
100062cc:	3724      	adds	r7, #36	@ 0x24
100062ce:	46bd      	mov	sp, r7
100062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
100062d4:	4770      	bx	lr

100062d6 <critical_section_exit>:
/*! \brief  Release a critical_section
 *  \ingroup critical_section
 *
 * \param crit_sec Pointer to critical_section structure
 */
static inline void critical_section_exit(critical_section_t *crit_sec) {
100062d6:	b480      	push	{r7}
100062d8:	b089      	sub	sp, #36	@ 0x24
100062da:	af00      	add	r7, sp, #0
100062dc:	6078      	str	r0, [r7, #4]
    spin_unlock(crit_sec->spin_lock, crit_sec->save);
100062de:	687b      	ldr	r3, [r7, #4]
100062e0:	681a      	ldr	r2, [r3, #0]
100062e2:	687b      	ldr	r3, [r7, #4]
100062e4:	685b      	ldr	r3, [r3, #4]
100062e6:	61fa      	str	r2, [r7, #28]
100062e8:	61bb      	str	r3, [r7, #24]
100062ea:	69fb      	ldr	r3, [r7, #28]
100062ec:	617b      	str	r3, [r7, #20]
    SW_SPIN_LOCK_UNLOCK(lock);
100062ee:	2300      	movs	r3, #0
100062f0:	613b      	str	r3, [r7, #16]
100062f2:	693b      	ldr	r3, [r7, #16]
100062f4:	697a      	ldr	r2, [r7, #20]
100062f6:	e8c2 3f8f 	stlb	r3, [r2]
}
100062fa:	bf00      	nop
100062fc:	69bb      	ldr	r3, [r7, #24]
100062fe:	60fb      	str	r3, [r7, #12]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10006300:	68fb      	ldr	r3, [r7, #12]
10006302:	f383 8810 	msr	PRIMASK, r3
}
10006306:	bf00      	nop
}
10006308:	bf00      	nop
}
1000630a:	bf00      	nop
1000630c:	3724      	adds	r7, #36	@ 0x24
1000630e:	46bd      	mov	sp, r7
10006310:	f85d 7b04 	ldr.w	r7, [sp], #4
10006314:	4770      	bx	lr

10006316 <critical_section_is_initialized>:
 *  \ingroup mutex
 *
 * \param crit_sec Pointer to critical_section structure
 * \return true if the critical section is initialized, false otherwise
 */
static inline bool critical_section_is_initialized(critical_section_t *crit_sec) {
10006316:	b480      	push	{r7}
10006318:	b083      	sub	sp, #12
1000631a:	af00      	add	r7, sp, #0
1000631c:	6078      	str	r0, [r7, #4]
    return crit_sec->spin_lock != 0;
1000631e:	687b      	ldr	r3, [r7, #4]
10006320:	681b      	ldr	r3, [r3, #0]
10006322:	2b00      	cmp	r3, #0
10006324:	bf14      	ite	ne
10006326:	2301      	movne	r3, #1
10006328:	2300      	moveq	r3, #0
1000632a:	b2db      	uxtb	r3, r3
}
1000632c:	4618      	mov	r0, r3
1000632e:	370c      	adds	r7, #12
10006330:	46bd      	mov	sp, r7
10006332:	f85d 7b04 	ldr.w	r7, [sp], #4
10006336:	4770      	bx	lr

10006338 <timer_task>:
#define low_priority_irq_num PICO_STDIO_USB_LOW_PRIORITY_IRQ
#else
static uint8_t low_priority_irq_num;
#endif

static int64_t timer_task(__unused alarm_id_t id, __unused void *user_data) {
10006338:	b580      	push	{r7, lr}
1000633a:	b084      	sub	sp, #16
1000633c:	af00      	add	r7, sp, #0
1000633e:	6078      	str	r0, [r7, #4]
10006340:	6039      	str	r1, [r7, #0]
    int64_t repeat_time;
    if (critical_section_is_initialized(&one_shot_timer_crit_sec)) {
10006342:	481a      	ldr	r0, [pc, #104]	@ (100063ac <timer_task+0x74>)
10006344:	f7ff ffe7 	bl	10006316 <critical_section_is_initialized>
10006348:	4603      	mov	r3, r0
1000634a:	2b00      	cmp	r3, #0
1000634c:	d00f      	beq.n	1000636e <timer_task+0x36>
        critical_section_enter_blocking(&one_shot_timer_crit_sec);
1000634e:	4817      	ldr	r0, [pc, #92]	@ (100063ac <timer_task+0x74>)
10006350:	f7ff ff98 	bl	10006284 <critical_section_enter_blocking>
        one_shot_timer_pending = false;
10006354:	4b16      	ldr	r3, [pc, #88]	@ (100063b0 <timer_task+0x78>)
10006356:	2200      	movs	r2, #0
10006358:	701a      	strb	r2, [r3, #0]
        critical_section_exit(&one_shot_timer_crit_sec);
1000635a:	4814      	ldr	r0, [pc, #80]	@ (100063ac <timer_task+0x74>)
1000635c:	f7ff ffbb 	bl	100062d6 <critical_section_exit>
        repeat_time = 0; // don't repeat
10006360:	f04f 0200 	mov.w	r2, #0
10006364:	f04f 0300 	mov.w	r3, #0
10006368:	e9c7 2302 	strd	r2, r3, [r7, #8]
1000636c:	e005      	b.n	1000637a <timer_task+0x42>
    } else {
        repeat_time = PICO_STDIO_USB_TASK_INTERVAL_US;
1000636e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
10006372:	f04f 0300 	mov.w	r3, #0
10006376:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }
    if (irq_is_enabled(low_priority_irq_num)) {
1000637a:	4b0e      	ldr	r3, [pc, #56]	@ (100063b4 <timer_task+0x7c>)
1000637c:	781b      	ldrb	r3, [r3, #0]
1000637e:	4618      	mov	r0, r3
10006380:	f7fa fe70 	bl	10001064 <irq_is_enabled>
10006384:	4603      	mov	r3, r0
10006386:	2b00      	cmp	r3, #0
10006388:	d007      	beq.n	1000639a <timer_task+0x62>
        irq_set_pending(low_priority_irq_num);
1000638a:	4b0a      	ldr	r3, [pc, #40]	@ (100063b4 <timer_task+0x7c>)
1000638c:	781b      	ldrb	r3, [r3, #0]
1000638e:	4618      	mov	r0, r3
10006390:	f7fa febc 	bl	1000110c <irq_set_pending>
        return repeat_time;
10006394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
10006398:	e003      	b.n	100063a2 <timer_task+0x6a>
    } else {
        return 0; // don't repeat
1000639a:	f04f 0200 	mov.w	r2, #0
1000639e:	f04f 0300 	mov.w	r3, #0
    }
}
100063a2:	4610      	mov	r0, r2
100063a4:	4619      	mov	r1, r3
100063a6:	3710      	adds	r7, #16
100063a8:	46bd      	mov	sp, r7
100063aa:	bd80      	pop	{r7, pc}
100063ac:	20002530 	.word	0x20002530
100063b0:	20002588 	.word	0x20002588
100063b4:	20002587 	.word	0x20002587

100063b8 <low_priority_worker_irq>:

static void low_priority_worker_irq(void) {
100063b8:	b580      	push	{r7, lr}
100063ba:	b084      	sub	sp, #16
100063bc:	af02      	add	r7, sp, #8
    if (mutex_try_enter(&stdio_usb_mutex, NULL)) {
100063be:	2100      	movs	r1, #0
100063c0:	4828      	ldr	r0, [pc, #160]	@ (10006464 <low_priority_worker_irq+0xac>)
100063c2:	f004 fed5 	bl	1000b170 <__mutex_try_enter_veneer>
100063c6:	4603      	mov	r3, r0
100063c8:	2b00      	cmp	r3, #0
100063ca:	d01b      	beq.n	10006404 <low_priority_worker_irq+0x4c>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
100063cc:	2100      	movs	r1, #0
100063ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100063d2:	f001 f91b 	bl	1000760c <tud_task_ext>
}
100063d6:	bf00      	nop
TU_ATTR_ALWAYS_INLINE static inline void tud_cdc_set_wanted_char(char wanted) {
  tud_cdc_n_set_wanted_char(0, wanted);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_available(void) {
  return tud_cdc_n_available(0);
100063d8:	2000      	movs	r0, #0
100063da:	f002 fd1f 	bl	10008e1c <tud_cdc_n_available>
100063de:	4603      	mov	r3, r0
        tud_task();
#if PICO_STDIO_USB_SUPPORT_CHARS_AVAILABLE_CALLBACK
        uint32_t chars_avail = tud_cdc_available();
100063e0:	603b      	str	r3, [r7, #0]
#endif
        mutex_exit(&stdio_usb_mutex);
100063e2:	4820      	ldr	r0, [pc, #128]	@ (10006464 <low_priority_worker_irq+0xac>)
100063e4:	f004 feb8 	bl	1000b158 <__mutex_exit_veneer>
#if PICO_STDIO_USB_SUPPORT_CHARS_AVAILABLE_CALLBACK
        if (chars_avail && chars_available_callback) chars_available_callback(chars_available_param);
100063e8:	683b      	ldr	r3, [r7, #0]
100063ea:	2b00      	cmp	r3, #0
100063ec:	d036      	beq.n	1000645c <low_priority_worker_irq+0xa4>
100063ee:	4b1e      	ldr	r3, [pc, #120]	@ (10006468 <low_priority_worker_irq+0xb0>)
100063f0:	681b      	ldr	r3, [r3, #0]
100063f2:	2b00      	cmp	r3, #0
100063f4:	d032      	beq.n	1000645c <low_priority_worker_irq+0xa4>
100063f6:	4b1c      	ldr	r3, [pc, #112]	@ (10006468 <low_priority_worker_irq+0xb0>)
100063f8:	681b      	ldr	r3, [r3, #0]
100063fa:	4a1c      	ldr	r2, [pc, #112]	@ (1000646c <low_priority_worker_irq+0xb4>)
100063fc:	6812      	ldr	r2, [r2, #0]
100063fe:	4610      	mov	r0, r2
10006400:	4798      	blx	r3
            if (need_timer) {
                add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
            }
        }
    }
}
10006402:	e02b      	b.n	1000645c <low_priority_worker_irq+0xa4>
        if (critical_section_is_initialized(&one_shot_timer_crit_sec)) {
10006404:	481a      	ldr	r0, [pc, #104]	@ (10006470 <low_priority_worker_irq+0xb8>)
10006406:	f7ff ff86 	bl	10006316 <critical_section_is_initialized>
1000640a:	4603      	mov	r3, r0
1000640c:	2b00      	cmp	r3, #0
1000640e:	d025      	beq.n	1000645c <low_priority_worker_irq+0xa4>
            critical_section_enter_blocking(&one_shot_timer_crit_sec);
10006410:	4817      	ldr	r0, [pc, #92]	@ (10006470 <low_priority_worker_irq+0xb8>)
10006412:	f7ff ff37 	bl	10006284 <critical_section_enter_blocking>
            need_timer = !one_shot_timer_pending;
10006416:	4b17      	ldr	r3, [pc, #92]	@ (10006474 <low_priority_worker_irq+0xbc>)
10006418:	781b      	ldrb	r3, [r3, #0]
1000641a:	b2db      	uxtb	r3, r3
1000641c:	2b00      	cmp	r3, #0
1000641e:	bf14      	ite	ne
10006420:	2301      	movne	r3, #1
10006422:	2300      	moveq	r3, #0
10006424:	b2db      	uxtb	r3, r3
10006426:	f083 0301 	eor.w	r3, r3, #1
1000642a:	b2db      	uxtb	r3, r3
1000642c:	71fb      	strb	r3, [r7, #7]
1000642e:	79fb      	ldrb	r3, [r7, #7]
10006430:	f003 0301 	and.w	r3, r3, #1
10006434:	71fb      	strb	r3, [r7, #7]
            one_shot_timer_pending = true;
10006436:	4b0f      	ldr	r3, [pc, #60]	@ (10006474 <low_priority_worker_irq+0xbc>)
10006438:	2201      	movs	r2, #1
1000643a:	701a      	strb	r2, [r3, #0]
            critical_section_exit(&one_shot_timer_crit_sec);
1000643c:	480c      	ldr	r0, [pc, #48]	@ (10006470 <low_priority_worker_irq+0xb8>)
1000643e:	f7ff ff4a 	bl	100062d6 <critical_section_exit>
            if (need_timer) {
10006442:	79fb      	ldrb	r3, [r7, #7]
10006444:	2b00      	cmp	r3, #0
10006446:	d009      	beq.n	1000645c <low_priority_worker_irq+0xa4>
                add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true);
10006448:	2301      	movs	r3, #1
1000644a:	9300      	str	r3, [sp, #0]
1000644c:	2300      	movs	r3, #0
1000644e:	4a0a      	ldr	r2, [pc, #40]	@ (10006478 <low_priority_worker_irq+0xc0>)
10006450:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10006454:	f04f 0100 	mov.w	r1, #0
10006458:	f7ff fee9 	bl	1000622e <add_alarm_in_us>
}
1000645c:	bf00      	nop
1000645e:	3708      	adds	r7, #8
10006460:	46bd      	mov	sp, r7
10006462:	bd80      	pop	{r7, pc}
10006464:	20002564 	.word	0x20002564
10006468:	200020a4 	.word	0x200020a4
1000646c:	200020a8 	.word	0x200020a8
10006470:	20002530 	.word	0x20002530
10006474:	20002588 	.word	0x20002588
10006478:	10006339 	.word	0x10006339

1000647c <usb_irq>:

static void usb_irq(void) {
1000647c:	b580      	push	{r7, lr}
1000647e:	af00      	add	r7, sp, #0
    irq_set_pending(low_priority_irq_num);
10006480:	4b03      	ldr	r3, [pc, #12]	@ (10006490 <usb_irq+0x14>)
10006482:	781b      	ldrb	r3, [r3, #0]
10006484:	4618      	mov	r0, r3
10006486:	f7fa fe41 	bl	1000110c <irq_set_pending>
}
1000648a:	bf00      	nop
1000648c:	bd80      	pop	{r7, pc}
1000648e:	bf00      	nop
10006490:	20002587 	.word	0x20002587

10006494 <stdio_usb_out_chars>:

#endif

static void stdio_usb_out_chars(const char *buf, int length) {
10006494:	b5f0      	push	{r4, r5, r6, r7, lr}
10006496:	b089      	sub	sp, #36	@ 0x24
10006498:	af00      	add	r7, sp, #0
1000649a:	6078      	str	r0, [r7, #4]
1000649c:	6039      	str	r1, [r7, #0]
    static uint64_t last_avail_time;
    if (!mutex_try_enter_block_until(&stdio_usb_mutex, make_timeout_time_ms(PICO_STDIO_DEADLOCK_TIMEOUT_MS))) {
1000649e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
100064a2:	f7ff fe97 	bl	100061d4 <make_timeout_time_ms>
100064a6:	4602      	mov	r2, r0
100064a8:	460b      	mov	r3, r1
100064aa:	483e      	ldr	r0, [pc, #248]	@ (100065a4 <stdio_usb_out_chars+0x110>)
100064ac:	f004 fe5c 	bl	1000b168 <__mutex_try_enter_block_until_veneer>
100064b0:	4603      	mov	r3, r0
100064b2:	f083 0301 	eor.w	r3, r3, #1
100064b6:	b2db      	uxtb	r3, r3
100064b8:	2b00      	cmp	r3, #0
100064ba:	d16f      	bne.n	1000659c <stdio_usb_out_chars+0x108>
        return;
    }
    if (stdio_usb_connected()) {
100064bc:	f000 f98c 	bl	100067d8 <stdio_usb_connected>
100064c0:	4603      	mov	r3, r0
100064c2:	2b00      	cmp	r3, #0
100064c4:	d05f      	beq.n	10006586 <stdio_usb_out_chars+0xf2>
        for (int i = 0; i < length;) {
100064c6:	2300      	movs	r3, #0
100064c8:	61fb      	str	r3, [r7, #28]
100064ca:	e057      	b.n	1000657c <stdio_usb_out_chars+0xe8>
            int n = length - i;
100064cc:	683a      	ldr	r2, [r7, #0]
100064ce:	69fb      	ldr	r3, [r7, #28]
100064d0:	1ad3      	subs	r3, r2, r3
100064d2:	61bb      	str	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
100064d4:	2000      	movs	r0, #0
100064d6:	f002 fda1 	bl	1000901c <tud_cdc_n_write_available>
100064da:	4603      	mov	r3, r0
            int avail = (int) tud_cdc_write_available();
100064dc:	617b      	str	r3, [r7, #20]
            if (n > avail) n = avail;
100064de:	69ba      	ldr	r2, [r7, #24]
100064e0:	697b      	ldr	r3, [r7, #20]
100064e2:	429a      	cmp	r2, r3
100064e4:	dd01      	ble.n	100064ea <stdio_usb_out_chars+0x56>
100064e6:	697b      	ldr	r3, [r7, #20]
100064e8:	61bb      	str	r3, [r7, #24]
            if (n) {
100064ea:	69bb      	ldr	r3, [r7, #24]
100064ec:	2b00      	cmp	r3, #0
100064ee:	d021      	beq.n	10006534 <stdio_usb_out_chars+0xa0>
                int n2 = (int) tud_cdc_write(buf + i, (uint32_t)n);
100064f0:	69fb      	ldr	r3, [r7, #28]
100064f2:	687a      	ldr	r2, [r7, #4]
100064f4:	441a      	add	r2, r3
100064f6:	69bb      	ldr	r3, [r7, #24]
100064f8:	60fa      	str	r2, [r7, #12]
100064fa:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
100064fc:	68ba      	ldr	r2, [r7, #8]
100064fe:	68f9      	ldr	r1, [r7, #12]
10006500:	2000      	movs	r0, #0
10006502:	f002 fccf 	bl	10008ea4 <tud_cdc_n_write>
10006506:	4603      	mov	r3, r0
10006508:	613b      	str	r3, [r7, #16]
  tud_task_ext(UINT32_MAX, false);
1000650a:	2100      	movs	r1, #0
1000650c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
10006510:	f001 f87c 	bl	1000760c <tud_task_ext>
}
10006514:	bf00      	nop
  return tud_cdc_n_write_flush(0);
10006516:	2000      	movs	r0, #0
10006518:	f002 fcfa 	bl	10008f10 <tud_cdc_n_write_flush>
                tud_task();
                tud_cdc_write_flush();
                i += n2;
1000651c:	69fa      	ldr	r2, [r7, #28]
1000651e:	693b      	ldr	r3, [r7, #16]
10006520:	4413      	add	r3, r2
10006522:	61fb      	str	r3, [r7, #28]
                last_avail_time = time_us_64();
10006524:	f7fc fb92 	bl	10002c4c <time_us_64>
10006528:	4602      	mov	r2, r0
1000652a:	460b      	mov	r3, r1
1000652c:	491e      	ldr	r1, [pc, #120]	@ (100065a8 <stdio_usb_out_chars+0x114>)
1000652e:	e9c1 2300 	strd	r2, r3, [r1]
10006532:	e023      	b.n	1000657c <stdio_usb_out_chars+0xe8>
  tud_task_ext(UINT32_MAX, false);
10006534:	2100      	movs	r1, #0
10006536:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1000653a:	f001 f867 	bl	1000760c <tud_task_ext>
}
1000653e:	bf00      	nop
10006540:	2000      	movs	r0, #0
10006542:	f002 fce5 	bl	10008f10 <tud_cdc_n_write_flush>
            } else {
                tud_task();
                tud_cdc_write_flush();
                if (!stdio_usb_connected() ||
10006546:	f000 f947 	bl	100067d8 <stdio_usb_connected>
1000654a:	4603      	mov	r3, r0
1000654c:	f083 0301 	eor.w	r3, r3, #1
10006550:	b2db      	uxtb	r3, r3
10006552:	2b00      	cmp	r3, #0
10006554:	d11e      	bne.n	10006594 <stdio_usb_out_chars+0x100>
  return tud_cdc_n_write_available(0);
10006556:	2000      	movs	r0, #0
10006558:	f002 fd60 	bl	1000901c <tud_cdc_n_write_available>
1000655c:	4603      	mov	r3, r0
1000655e:	2b00      	cmp	r3, #0
10006560:	d10c      	bne.n	1000657c <stdio_usb_out_chars+0xe8>
                    (!tud_cdc_write_available() && time_us_64() > last_avail_time + PICO_STDIO_USB_STDOUT_TIMEOUT_US)) {
10006562:	f7fc fb73 	bl	10002c4c <time_us_64>
10006566:	4b10      	ldr	r3, [pc, #64]	@ (100065a8 <stdio_usb_out_chars+0x114>)
10006568:	e9d3 2300 	ldrd	r2, r3, [r3]
1000656c:	4e0f      	ldr	r6, [pc, #60]	@ (100065ac <stdio_usb_out_chars+0x118>)
1000656e:	1994      	adds	r4, r2, r6
10006570:	f143 0500 	adc.w	r5, r3, #0
10006574:	4284      	cmp	r4, r0
10006576:	eb75 0301 	sbcs.w	r3, r5, r1
1000657a:	d30b      	bcc.n	10006594 <stdio_usb_out_chars+0x100>
        for (int i = 0; i < length;) {
1000657c:	69fa      	ldr	r2, [r7, #28]
1000657e:	683b      	ldr	r3, [r7, #0]
10006580:	429a      	cmp	r2, r3
10006582:	dba3      	blt.n	100064cc <stdio_usb_out_chars+0x38>
10006584:	e006      	b.n	10006594 <stdio_usb_out_chars+0x100>
                }
            }
        }
    } else {
        // reset our timeout
        last_avail_time = 0;
10006586:	4908      	ldr	r1, [pc, #32]	@ (100065a8 <stdio_usb_out_chars+0x114>)
10006588:	f04f 0200 	mov.w	r2, #0
1000658c:	f04f 0300 	mov.w	r3, #0
10006590:	e9c1 2300 	strd	r2, r3, [r1]
    }
    mutex_exit(&stdio_usb_mutex);
10006594:	4803      	ldr	r0, [pc, #12]	@ (100065a4 <stdio_usb_out_chars+0x110>)
10006596:	f004 fddf 	bl	1000b158 <__mutex_exit_veneer>
1000659a:	e000      	b.n	1000659e <stdio_usb_out_chars+0x10a>
        return;
1000659c:	bf00      	nop
}
1000659e:	3724      	adds	r7, #36	@ 0x24
100065a0:	46bd      	mov	sp, r7
100065a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100065a4:	20002564 	.word	0x20002564
100065a8:	20001758 	.word	0x20001758
100065ac:	0007a120 	.word	0x0007a120

100065b0 <stdio_usb_out_flush>:

static void stdio_usb_out_flush(void) {
100065b0:	b580      	push	{r7, lr}
100065b2:	af00      	add	r7, sp, #0
    if (!mutex_try_enter_block_until(&stdio_usb_mutex, make_timeout_time_ms(PICO_STDIO_DEADLOCK_TIMEOUT_MS))) {
100065b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
100065b8:	f7ff fe0c 	bl	100061d4 <make_timeout_time_ms>
100065bc:	4602      	mov	r2, r0
100065be:	460b      	mov	r3, r1
100065c0:	480d      	ldr	r0, [pc, #52]	@ (100065f8 <stdio_usb_out_flush+0x48>)
100065c2:	f004 fdd1 	bl	1000b168 <__mutex_try_enter_block_until_veneer>
100065c6:	4603      	mov	r3, r0
100065c8:	f083 0301 	eor.w	r3, r3, #1
100065cc:	b2db      	uxtb	r3, r3
100065ce:	2b00      	cmp	r3, #0
100065d0:	d10f      	bne.n	100065f2 <stdio_usb_out_flush+0x42>
  tud_task_ext(UINT32_MAX, false);
100065d2:	2100      	movs	r1, #0
100065d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
100065d8:	f001 f818 	bl	1000760c <tud_task_ext>
}
100065dc:	bf00      	nop
  return tud_cdc_n_write_flush(0);
100065de:	2000      	movs	r0, #0
100065e0:	f002 fc96 	bl	10008f10 <tud_cdc_n_write_flush>
100065e4:	4603      	mov	r3, r0
        return;
    }
    do {
        tud_task();
    } while (tud_cdc_write_flush());
100065e6:	2b00      	cmp	r3, #0
100065e8:	d1f3      	bne.n	100065d2 <stdio_usb_out_flush+0x22>
    mutex_exit(&stdio_usb_mutex);
100065ea:	4803      	ldr	r0, [pc, #12]	@ (100065f8 <stdio_usb_out_flush+0x48>)
100065ec:	f004 fdb4 	bl	1000b158 <__mutex_exit_veneer>
100065f0:	e000      	b.n	100065f4 <stdio_usb_out_flush+0x44>
        return;
100065f2:	bf00      	nop
}
100065f4:	bd80      	pop	{r7, pc}
100065f6:	bf00      	nop
100065f8:	20002564 	.word	0x20002564

100065fc <stdio_usb_in_chars>:

int stdio_usb_in_chars(char *buf, int length) {
100065fc:	b580      	push	{r7, lr}
100065fe:	b086      	sub	sp, #24
10006600:	af00      	add	r7, sp, #0
10006602:	6078      	str	r0, [r7, #4]
10006604:	6039      	str	r1, [r7, #0]
    // these are just checks of state, so we can call them while not holding the lock.
    // they may be wrong, but only if we are in the middle of a tud_task call, in which case at worst
    // we will mistakenly think we have data available when we do not (we will check again), or
    // tud_task will complete running and we will check the right values the next time.
    //
    int rc = PICO_ERROR_NO_DATA;
10006606:	f06f 0302 	mvn.w	r3, #2
1000660a:	617b      	str	r3, [r7, #20]
    if (stdio_usb_connected() && tud_cdc_available()) {
1000660c:	f000 f8e4 	bl	100067d8 <stdio_usb_connected>
10006610:	4603      	mov	r3, r0
10006612:	2b00      	cmp	r3, #0
10006614:	d03f      	beq.n	10006696 <stdio_usb_in_chars+0x9a>
  return tud_cdc_n_available(0);
10006616:	2000      	movs	r0, #0
10006618:	f002 fc00 	bl	10008e1c <tud_cdc_n_available>
1000661c:	4603      	mov	r3, r0
1000661e:	2b00      	cmp	r3, #0
10006620:	d039      	beq.n	10006696 <stdio_usb_in_chars+0x9a>
        if (!mutex_try_enter_block_until(&stdio_usb_mutex, make_timeout_time_ms(PICO_STDIO_DEADLOCK_TIMEOUT_MS))) {
10006622:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10006626:	f7ff fdd5 	bl	100061d4 <make_timeout_time_ms>
1000662a:	4602      	mov	r2, r0
1000662c:	460b      	mov	r3, r1
1000662e:	481c      	ldr	r0, [pc, #112]	@ (100066a0 <stdio_usb_in_chars+0xa4>)
10006630:	f004 fd9a 	bl	1000b168 <__mutex_try_enter_block_until_veneer>
10006634:	4603      	mov	r3, r0
10006636:	f083 0301 	eor.w	r3, r3, #1
1000663a:	b2db      	uxtb	r3, r3
1000663c:	2b00      	cmp	r3, #0
1000663e:	d002      	beq.n	10006646 <stdio_usb_in_chars+0x4a>
            return PICO_ERROR_NO_DATA; // would deadlock otherwise
10006640:	f06f 0302 	mvn.w	r3, #2
10006644:	e028      	b.n	10006698 <stdio_usb_in_chars+0x9c>
        }
        if (stdio_usb_connected() && tud_cdc_available()) {
10006646:	f000 f8c7 	bl	100067d8 <stdio_usb_connected>
1000664a:	4603      	mov	r3, r0
1000664c:	2b00      	cmp	r3, #0
1000664e:	d019      	beq.n	10006684 <stdio_usb_in_chars+0x88>
10006650:	2000      	movs	r0, #0
10006652:	f002 fbe3 	bl	10008e1c <tud_cdc_n_available>
10006656:	4603      	mov	r3, r0
10006658:	2b00      	cmp	r3, #0
1000665a:	d013      	beq.n	10006684 <stdio_usb_in_chars+0x88>
            int count = (int) tud_cdc_read(buf, (uint32_t) length);
1000665c:	683b      	ldr	r3, [r7, #0]
1000665e:	687a      	ldr	r2, [r7, #4]
10006660:	60fa      	str	r2, [r7, #12]
10006662:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_read(0, buffer, bufsize);
10006664:	68ba      	ldr	r2, [r7, #8]
10006666:	68f9      	ldr	r1, [r7, #12]
10006668:	2000      	movs	r0, #0
1000666a:	f002 fbef 	bl	10008e4c <tud_cdc_n_read>
1000666e:	4603      	mov	r3, r0
10006670:	613b      	str	r3, [r7, #16]
            rc = count ? count : PICO_ERROR_NO_DATA;
10006672:	693b      	ldr	r3, [r7, #16]
10006674:	2b00      	cmp	r3, #0
10006676:	d001      	beq.n	1000667c <stdio_usb_in_chars+0x80>
10006678:	693b      	ldr	r3, [r7, #16]
1000667a:	e001      	b.n	10006680 <stdio_usb_in_chars+0x84>
1000667c:	f06f 0302 	mvn.w	r3, #2
10006680:	617b      	str	r3, [r7, #20]
        if (stdio_usb_connected() && tud_cdc_available()) {
10006682:	e005      	b.n	10006690 <stdio_usb_in_chars+0x94>
  tud_task_ext(UINT32_MAX, false);
10006684:	2100      	movs	r1, #0
10006686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1000668a:	f000 ffbf 	bl	1000760c <tud_task_ext>
}
1000668e:	bf00      	nop
        } else {
            // because our mutex use may starve out the background task, run tud_task here (we own the mutex)
            tud_task();
        }
        mutex_exit(&stdio_usb_mutex);
10006690:	4803      	ldr	r0, [pc, #12]	@ (100066a0 <stdio_usb_in_chars+0xa4>)
10006692:	f004 fd61 	bl	1000b158 <__mutex_exit_veneer>
    }
    return rc;
10006696:	697b      	ldr	r3, [r7, #20]
}
10006698:	4618      	mov	r0, r3
1000669a:	3718      	adds	r7, #24
1000669c:	46bd      	mov	sp, r7
1000669e:	bd80      	pop	{r7, pc}
100066a0:	20002564 	.word	0x20002564

100066a4 <stdio_usb_set_chars_available_callback>:

#if PICO_STDIO_USB_SUPPORT_CHARS_AVAILABLE_CALLBACK
void stdio_usb_set_chars_available_callback(void (*fn)(void*), void *param) {
100066a4:	b480      	push	{r7}
100066a6:	b083      	sub	sp, #12
100066a8:	af00      	add	r7, sp, #0
100066aa:	6078      	str	r0, [r7, #4]
100066ac:	6039      	str	r1, [r7, #0]
    chars_available_callback = fn;
100066ae:	4a06      	ldr	r2, [pc, #24]	@ (100066c8 <stdio_usb_set_chars_available_callback+0x24>)
100066b0:	687b      	ldr	r3, [r7, #4]
100066b2:	6013      	str	r3, [r2, #0]
    chars_available_param = param;
100066b4:	4a05      	ldr	r2, [pc, #20]	@ (100066cc <stdio_usb_set_chars_available_callback+0x28>)
100066b6:	683b      	ldr	r3, [r7, #0]
100066b8:	6013      	str	r3, [r2, #0]
}
100066ba:	bf00      	nop
100066bc:	370c      	adds	r7, #12
100066be:	46bd      	mov	sp, r7
100066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
100066c4:	4770      	bx	lr
100066c6:	bf00      	nop
100066c8:	200020a4 	.word	0x200020a4
100066cc:	200020a8 	.word	0x200020a8

100066d0 <stdio_usb_init>:
    .crlf_enabled = PICO_STDIO_USB_DEFAULT_CRLF
#endif

};

bool stdio_usb_init(void) {
100066d0:	b590      	push	{r4, r7, lr}
100066d2:	b085      	sub	sp, #20
100066d4:	af02      	add	r7, sp, #8
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
100066d6:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
100066da:	681c      	ldr	r4, [r3, #0]
    if (get_core_num() != alarm_pool_core_num(alarm_pool_get_default())) {
100066dc:	f7fb fc52 	bl	10001f84 <alarm_pool_get_default>
100066e0:	4603      	mov	r3, r0
100066e2:	4618      	mov	r0, r3
100066e4:	f7fc f921 	bl	1000292a <alarm_pool_core_num>
100066e8:	4603      	mov	r3, r0
100066ea:	429c      	cmp	r4, r3
100066ec:	d005      	beq.n	100066fa <stdio_usb_init+0x2a>
        // included an assertion here rather than just returning false, as this is likely
        // a coding bug, rather than anything else.
        assert(false);
100066ee:	4b2f      	ldr	r3, [pc, #188]	@ (100067ac <stdio_usb_init+0xdc>)
100066f0:	4a2f      	ldr	r2, [pc, #188]	@ (100067b0 <stdio_usb_init+0xe0>)
100066f2:	21c1      	movs	r1, #193	@ 0xc1
100066f4:	482f      	ldr	r0, [pc, #188]	@ (100067b4 <stdio_usb_init+0xe4>)
100066f6:	f7ff f8bd 	bl	10005874 <__assert_func>
        return false;
    }
#if !PICO_NO_BI_STDIO_USB
    bi_decl_if_func_used(bi_program_feature("USB stdin / stdout"));
100066fa:	4b2f      	ldr	r3, [pc, #188]	@ (100067b8 <stdio_usb_init+0xe8>)
100066fc:	781b      	ldrb	r3, [r3, #0]
#endif

#if !defined(LIB_TINYUSB_DEVICE)
    // initialize TinyUSB, as user hasn't explicitly linked it
    tusb_init();
100066fe:	f003 fba9 	bl	10009e54 <tusb_init>
#else
    assert(tud_inited()); // we expect the caller to have initialized if they are using TinyUSB
#endif

    if (!mutex_is_initialized(&stdio_usb_mutex)) mutex_init(&stdio_usb_mutex);
10006702:	482e      	ldr	r0, [pc, #184]	@ (100067bc <stdio_usb_init+0xec>)
10006704:	f7ff fdad 	bl	10006262 <mutex_is_initialized>
10006708:	4603      	mov	r3, r0
1000670a:	f083 0301 	eor.w	r3, r3, #1
1000670e:	b2db      	uxtb	r3, r3
10006710:	2b00      	cmp	r3, #0
10006712:	d002      	beq.n	1000671a <stdio_usb_init+0x4a>
10006714:	4829      	ldr	r0, [pc, #164]	@ (100067bc <stdio_usb_init+0xec>)
10006716:	f7fb f9a1 	bl	10001a5c <mutex_init>
    bool rc = true;
1000671a:	2301      	movs	r3, #1
1000671c:	71fb      	strb	r3, [r7, #7]
#if !LIB_TINYUSB_DEVICE
#ifdef PICO_STDIO_USB_LOW_PRIORITY_IRQ
    user_irq_claim(PICO_STDIO_USB_LOW_PRIORITY_IRQ);
#else
    low_priority_irq_num = (uint8_t) user_irq_claim_unused(true);
1000671e:	2001      	movs	r0, #1
10006720:	f7fb f88e 	bl	10001840 <user_irq_claim_unused>
10006724:	4603      	mov	r3, r0
10006726:	b2da      	uxtb	r2, r3
10006728:	4b25      	ldr	r3, [pc, #148]	@ (100067c0 <stdio_usb_init+0xf0>)
1000672a:	701a      	strb	r2, [r3, #0]
#endif
    irq_set_exclusive_handler(low_priority_irq_num, low_priority_worker_irq);
1000672c:	4b24      	ldr	r3, [pc, #144]	@ (100067c0 <stdio_usb_init+0xf0>)
1000672e:	781b      	ldrb	r3, [r3, #0]
10006730:	4924      	ldr	r1, [pc, #144]	@ (100067c4 <stdio_usb_init+0xf4>)
10006732:	4618      	mov	r0, r3
10006734:	f7fa fd4a 	bl	100011cc <irq_set_exclusive_handler>
    irq_set_enabled(low_priority_irq_num, true);
10006738:	4b21      	ldr	r3, [pc, #132]	@ (100067c0 <stdio_usb_init+0xf0>)
1000673a:	781b      	ldrb	r3, [r3, #0]
1000673c:	2101      	movs	r1, #1
1000673e:	4618      	mov	r0, r3
10006740:	f7fa fc76 	bl	10001030 <irq_set_enabled>

    if (irq_has_shared_handler(USBCTRL_IRQ)) {
10006744:	200e      	movs	r0, #14
10006746:	f7fa fd0f 	bl	10001168 <irq_has_shared_handler>
1000674a:	4603      	mov	r3, r0
1000674c:	2b00      	cmp	r3, #0
1000674e:	d00d      	beq.n	1000676c <stdio_usb_init+0x9c>
        critical_section_init_with_lock_num(&one_shot_timer_crit_sec, spin_lock_claim_unused(true));
10006750:	2001      	movs	r0, #1
10006752:	f7fa fbb3 	bl	10000ebc <spin_lock_claim_unused>
10006756:	4603      	mov	r3, r0
10006758:	4619      	mov	r1, r3
1000675a:	481b      	ldr	r0, [pc, #108]	@ (100067c8 <stdio_usb_init+0xf8>)
1000675c:	f7fb f9c0 	bl	10001ae0 <critical_section_init_with_lock_num>
        // we can use a shared handler to notice when there may be work to do
        irq_add_shared_handler(USBCTRL_IRQ, usb_irq, PICO_SHARED_IRQ_HANDLER_LOWEST_ORDER_PRIORITY);
10006760:	2200      	movs	r2, #0
10006762:	491a      	ldr	r1, [pc, #104]	@ (100067cc <stdio_usb_init+0xfc>)
10006764:	200e      	movs	r0, #14
10006766:	f7fa fe15 	bl	10001394 <irq_add_shared_handler>
1000676a:	e012      	b.n	10006792 <stdio_usb_init+0xc2>
    } else {
        // we use initialization state of the one_shot_timer_critsec as a flag
        memset(&one_shot_timer_crit_sec, 0, sizeof(one_shot_timer_crit_sec));
1000676c:	2208      	movs	r2, #8
1000676e:	2100      	movs	r1, #0
10006770:	4815      	ldr	r0, [pc, #84]	@ (100067c8 <stdio_usb_init+0xf8>)
10006772:	f004 fc85 	bl	1000b080 <memset>
        rc = add_alarm_in_us(PICO_STDIO_USB_TASK_INTERVAL_US, timer_task, NULL, true) >= 0;
10006776:	2301      	movs	r3, #1
10006778:	9300      	str	r3, [sp, #0]
1000677a:	2300      	movs	r3, #0
1000677c:	4a14      	ldr	r2, [pc, #80]	@ (100067d0 <stdio_usb_init+0x100>)
1000677e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
10006782:	f04f 0100 	mov.w	r1, #0
10006786:	f7ff fd52 	bl	1000622e <add_alarm_in_us>
1000678a:	4603      	mov	r3, r0
1000678c:	43db      	mvns	r3, r3
1000678e:	0fdb      	lsrs	r3, r3, #31
10006790:	71fb      	strb	r3, [r7, #7]
    }
#endif
    if (rc) {
10006792:	79fb      	ldrb	r3, [r7, #7]
10006794:	2b00      	cmp	r3, #0
10006796:	d003      	beq.n	100067a0 <stdio_usb_init+0xd0>
        stdio_set_driver_enabled(&stdio_usb, true);
10006798:	2101      	movs	r1, #1
1000679a:	480e      	ldr	r0, [pc, #56]	@ (100067d4 <stdio_usb_init+0x104>)
1000679c:	f7ff fa54 	bl	10005c48 <stdio_set_driver_enabled>
            }
            sleep_ms(10);
        } while (!time_reached(until));
#endif
    }
    return rc;
100067a0:	79fb      	ldrb	r3, [r7, #7]
}
100067a2:	4618      	mov	r0, r3
100067a4:	370c      	adds	r7, #12
100067a6:	46bd      	mov	sp, r7
100067a8:	bd90      	pop	{r4, r7, pc}
100067aa:	bf00      	nop
100067ac:	1000bb14 	.word	0x1000bb14
100067b0:	1000bb88 	.word	0x1000bb88
100067b4:	1000bb1c 	.word	0x1000bb1c
100067b8:	1000c22c 	.word	0x1000c22c
100067bc:	20002564 	.word	0x20002564
100067c0:	20002587 	.word	0x20002587
100067c4:	100063b9 	.word	0x100063b9
100067c8:	20002530 	.word	0x20002530
100067cc:	1000647d 	.word	0x1000647d
100067d0:	10006339 	.word	0x10006339
100067d4:	2000158c 	.word	0x2000158c

100067d8 <stdio_usb_connected>:
    user_irq_unclaim(low_priority_irq_num);
#endif
    return rc;
}

bool stdio_usb_connected(void) {
100067d8:	b580      	push	{r7, lr}
100067da:	af00      	add	r7, sp, #0
  return tud_cdc_n_connected(0);
100067dc:	2000      	movs	r0, #0
100067de:	f002 fadd 	bl	10008d9c <tud_cdc_n_connected>
100067e2:	4603      	mov	r3, r0
    return tud_ready();
#else
    // this actually checks DTR
    return tud_cdc_connected();
#endif
}
100067e4:	4618      	mov	r0, r3
100067e6:	bd80      	pop	{r7, pc}

100067e8 <tud_descriptor_device_cb>:
#if PICO_STDIO_USB_ENABLE_RESET_VIA_VENDOR_INTERFACE
    [USBD_STR_RPI_RESET] = "Reset",
#endif
};

const uint8_t *tud_descriptor_device_cb(void) {
100067e8:	b480      	push	{r7}
100067ea:	af00      	add	r7, sp, #0
    return (const uint8_t *)&usbd_desc_device;
100067ec:	4b02      	ldr	r3, [pc, #8]	@ (100067f8 <tud_descriptor_device_cb+0x10>)
}
100067ee:	4618      	mov	r0, r3
100067f0:	46bd      	mov	sp, r7
100067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100067f6:	4770      	bx	lr
100067f8:	1000bba4 	.word	0x1000bba4

100067fc <tud_descriptor_configuration_cb>:

const uint8_t *tud_descriptor_configuration_cb(__unused uint8_t index) {
100067fc:	b480      	push	{r7}
100067fe:	b083      	sub	sp, #12
10006800:	af00      	add	r7, sp, #0
10006802:	4603      	mov	r3, r0
10006804:	71fb      	strb	r3, [r7, #7]
    return usbd_desc_cfg;
10006806:	4b03      	ldr	r3, [pc, #12]	@ (10006814 <tud_descriptor_configuration_cb+0x18>)
}
10006808:	4618      	mov	r0, r3
1000680a:	370c      	adds	r7, #12
1000680c:	46bd      	mov	sp, r7
1000680e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006812:	4770      	bx	lr
10006814:	1000bbb8 	.word	0x1000bbb8

10006818 <tud_descriptor_string_cb>:

const uint16_t *tud_descriptor_string_cb(uint8_t index, __unused uint16_t langid) {
10006818:	b580      	push	{r7, lr}
1000681a:	b084      	sub	sp, #16
1000681c:	af00      	add	r7, sp, #0
1000681e:	4603      	mov	r3, r0
10006820:	460a      	mov	r2, r1
10006822:	71fb      	strb	r3, [r7, #7]
10006824:	4613      	mov	r3, r2
10006826:	80bb      	strh	r3, [r7, #4]
#error USBD_DESC_STR_MAX too low (min is 17).
#endif
    static uint16_t desc_str[USBD_DESC_STR_MAX];

    // Assign the SN using the unique flash id
    if (!usbd_serial_str[0]) {
10006828:	4b23      	ldr	r3, [pc, #140]	@ (100068b8 <tud_descriptor_string_cb+0xa0>)
1000682a:	781b      	ldrb	r3, [r3, #0]
1000682c:	2b00      	cmp	r3, #0
1000682e:	d103      	bne.n	10006838 <tud_descriptor_string_cb+0x20>
        pico_get_unique_board_id_string(usbd_serial_str, sizeof(usbd_serial_str));
10006830:	2111      	movs	r1, #17
10006832:	4821      	ldr	r0, [pc, #132]	@ (100068b8 <tud_descriptor_string_cb+0xa0>)
10006834:	f000 f880 	bl	10006938 <pico_get_unique_board_id_string>
    }

    uint8_t len;
    if (index == 0) {
10006838:	79fb      	ldrb	r3, [r7, #7]
1000683a:	2b00      	cmp	r3, #0
1000683c:	d106      	bne.n	1000684c <tud_descriptor_string_cb+0x34>
        desc_str[1] = 0x0409; // supported language is English
1000683e:	4b1f      	ldr	r3, [pc, #124]	@ (100068bc <tud_descriptor_string_cb+0xa4>)
10006840:	f240 4209 	movw	r2, #1033	@ 0x409
10006844:	805a      	strh	r2, [r3, #2]
        len = 1;
10006846:	2301      	movs	r3, #1
10006848:	73fb      	strb	r3, [r7, #15]
1000684a:	e022      	b.n	10006892 <tud_descriptor_string_cb+0x7a>
    } else {
        if (index >= sizeof(usbd_desc_str) / sizeof(usbd_desc_str[0])) {
1000684c:	79fb      	ldrb	r3, [r7, #7]
1000684e:	2b05      	cmp	r3, #5
10006850:	d901      	bls.n	10006856 <tud_descriptor_string_cb+0x3e>
            return NULL;
10006852:	2300      	movs	r3, #0
10006854:	e02b      	b.n	100068ae <tud_descriptor_string_cb+0x96>
        }
        const char *str = usbd_desc_str[index];
10006856:	79fb      	ldrb	r3, [r7, #7]
10006858:	4a19      	ldr	r2, [pc, #100]	@ (100068c0 <tud_descriptor_string_cb+0xa8>)
1000685a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000685e:	60bb      	str	r3, [r7, #8]
        for (len = 0; len < USBD_DESC_STR_MAX - 1 && str[len]; ++len) {
10006860:	2300      	movs	r3, #0
10006862:	73fb      	strb	r3, [r7, #15]
10006864:	e00c      	b.n	10006880 <tud_descriptor_string_cb+0x68>
            desc_str[1 + len] = str[len];
10006866:	7bfb      	ldrb	r3, [r7, #15]
10006868:	68ba      	ldr	r2, [r7, #8]
1000686a:	4413      	add	r3, r2
1000686c:	781a      	ldrb	r2, [r3, #0]
1000686e:	7bfb      	ldrb	r3, [r7, #15]
10006870:	3301      	adds	r3, #1
10006872:	4611      	mov	r1, r2
10006874:	4a11      	ldr	r2, [pc, #68]	@ (100068bc <tud_descriptor_string_cb+0xa4>)
10006876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (len = 0; len < USBD_DESC_STR_MAX - 1 && str[len]; ++len) {
1000687a:	7bfb      	ldrb	r3, [r7, #15]
1000687c:	3301      	adds	r3, #1
1000687e:	73fb      	strb	r3, [r7, #15]
10006880:	7bfb      	ldrb	r3, [r7, #15]
10006882:	2b12      	cmp	r3, #18
10006884:	d805      	bhi.n	10006892 <tud_descriptor_string_cb+0x7a>
10006886:	7bfb      	ldrb	r3, [r7, #15]
10006888:	68ba      	ldr	r2, [r7, #8]
1000688a:	4413      	add	r3, r2
1000688c:	781b      	ldrb	r3, [r3, #0]
1000688e:	2b00      	cmp	r3, #0
10006890:	d1e9      	bne.n	10006866 <tud_descriptor_string_cb+0x4e>
        }
    }

    // first byte is length (including header), second byte is string type
    desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * len + 2));
10006892:	7bfb      	ldrb	r3, [r7, #15]
10006894:	b29b      	uxth	r3, r3
10006896:	3301      	adds	r3, #1
10006898:	b29b      	uxth	r3, r3
1000689a:	005b      	lsls	r3, r3, #1
1000689c:	b29b      	uxth	r3, r3
1000689e:	b21b      	sxth	r3, r3
100068a0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
100068a4:	b21b      	sxth	r3, r3
100068a6:	b29a      	uxth	r2, r3
100068a8:	4b04      	ldr	r3, [pc, #16]	@ (100068bc <tud_descriptor_string_cb+0xa4>)
100068aa:	801a      	strh	r2, [r3, #0]

    return desc_str;
100068ac:	4b03      	ldr	r3, [pc, #12]	@ (100068bc <tud_descriptor_string_cb+0xa4>)
}
100068ae:	4618      	mov	r0, r3
100068b0:	3710      	adds	r7, #16
100068b2:	46bd      	mov	sp, r7
100068b4:	bd80      	pop	{r7, pc}
100068b6:	bf00      	nop
100068b8:	20002570 	.word	0x20002570
100068bc:	200020dc 	.word	0x200020dc
100068c0:	1000bc38 	.word	0x1000bc38

100068c4 <_retrieve_unique_id_on_boot>:

static_assert(PICO_UNIQUE_BOARD_ID_SIZE_BYTES == FLASH_UNIQUE_ID_SIZE_BYTES, "Board ID size must match flash ID size");

static pico_unique_board_id_t retrieved_id;

static void __attribute__((constructor)) _retrieve_unique_id_on_boot(void) {
100068c4:	b580      	push	{r7, lr}
100068c6:	b08c      	sub	sp, #48	@ 0x30
100068c8:	af00      	add	r7, sp, #0
            retrieved_id.id[i] = 0xee;
    #else
        flash_get_unique_id(retrieved_id.id);
    #endif
#else
    rom_get_sys_info_fn func = (rom_get_sys_info_fn) rom_func_lookup(ROM_FUNC_GET_SYS_INFO);
100068ca:	f245 3047 	movw	r0, #21319	@ 0x5347
100068ce:	f7fd f93a 	bl	10003b46 <rom_func_lookup>
100068d2:	4603      	mov	r3, r0
100068d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    union {
        uint32_t words[9];
        uint8_t bytes[9 * 4];
    } out;
    __unused int rc = func(out.words, 9, SYS_INFO_CHIP_INFO);
100068d6:	4638      	mov	r0, r7
100068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100068da:	2201      	movs	r2, #1
100068dc:	2109      	movs	r1, #9
100068de:	4798      	blx	r3
100068e0:	6278      	str	r0, [r7, #36]	@ 0x24
    assert(rc == 4);
100068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100068e4:	2b04      	cmp	r3, #4
100068e6:	d005      	beq.n	100068f4 <_retrieve_unique_id_on_boot+0x30>
100068e8:	4b0f      	ldr	r3, [pc, #60]	@ (10006928 <_retrieve_unique_id_on_boot+0x64>)
100068ea:	4a10      	ldr	r2, [pc, #64]	@ (1000692c <_retrieve_unique_id_on_boot+0x68>)
100068ec:	2121      	movs	r1, #33	@ 0x21
100068ee:	4810      	ldr	r0, [pc, #64]	@ (10006930 <_retrieve_unique_id_on_boot+0x6c>)
100068f0:	f7fe ffc0 	bl	10005874 <__assert_func>
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++) {
100068f4:	2300      	movs	r3, #0
100068f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
100068f8:	e00e      	b.n	10006918 <_retrieve_unique_id_on_boot+0x54>
        retrieved_id.id[i] = out.bytes[PICO_UNIQUE_BOARD_ID_SIZE_BYTES - 1 + 2 * 4 - i];
100068fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100068fc:	f1c3 030f 	rsb	r3, r3, #15
10006900:	3330      	adds	r3, #48	@ 0x30
10006902:	443b      	add	r3, r7
10006904:	f813 1c30 	ldrb.w	r1, [r3, #-48]
10006908:	4a0a      	ldr	r2, [pc, #40]	@ (10006934 <_retrieve_unique_id_on_boot+0x70>)
1000690a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000690c:	4413      	add	r3, r2
1000690e:	460a      	mov	r2, r1
10006910:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES; i++) {
10006912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10006914:	3301      	adds	r3, #1
10006916:	62fb      	str	r3, [r7, #44]	@ 0x2c
10006918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000691a:	2b07      	cmp	r3, #7
1000691c:	dded      	ble.n	100068fa <_retrieve_unique_id_on_boot+0x36>
    }
#endif
}
1000691e:	bf00      	nop
10006920:	bf00      	nop
10006922:	3730      	adds	r7, #48	@ 0x30
10006924:	46bd      	mov	sp, r7
10006926:	bd80      	pop	{r7, pc}
10006928:	1000bc50 	.word	0x1000bc50
1000692c:	1000bca8 	.word	0x1000bca8
10006930:	1000bc58 	.word	0x1000bc58
10006934:	20002558 	.word	0x20002558

10006938 <pico_get_unique_board_id_string>:

void pico_get_unique_board_id(pico_unique_board_id_t *id_out) {
    *id_out = retrieved_id;
}

void pico_get_unique_board_id_string(char *id_out, uint len) {
10006938:	b580      	push	{r7, lr}
1000693a:	b084      	sub	sp, #16
1000693c:	af00      	add	r7, sp, #0
1000693e:	6078      	str	r0, [r7, #4]
10006940:	6039      	str	r1, [r7, #0]
    assert(len > 0);
10006942:	683b      	ldr	r3, [r7, #0]
10006944:	2b00      	cmp	r3, #0
10006946:	d105      	bne.n	10006954 <pico_get_unique_board_id_string+0x1c>
10006948:	4b1f      	ldr	r3, [pc, #124]	@ (100069c8 <pico_get_unique_board_id_string+0x90>)
1000694a:	4a20      	ldr	r2, [pc, #128]	@ (100069cc <pico_get_unique_board_id_string+0x94>)
1000694c:	212d      	movs	r1, #45	@ 0x2d
1000694e:	4820      	ldr	r0, [pc, #128]	@ (100069d0 <pico_get_unique_board_id_string+0x98>)
10006950:	f7fe ff90 	bl	10005874 <__assert_func>
    size_t i;
    // Generate hex one nibble at a time
    for (i = 0; (i < len - 1) && (i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES * 2); i++) {
10006954:	2300      	movs	r3, #0
10006956:	60fb      	str	r3, [r7, #12]
10006958:	e024      	b.n	100069a4 <pico_get_unique_board_id_string+0x6c>
        int nibble = (retrieved_id.id[i/2] >> (4 - 4 * (i&1))) & 0xf;
1000695a:	68fb      	ldr	r3, [r7, #12]
1000695c:	085b      	lsrs	r3, r3, #1
1000695e:	4a1d      	ldr	r2, [pc, #116]	@ (100069d4 <pico_get_unique_board_id_string+0x9c>)
10006960:	5cd3      	ldrb	r3, [r2, r3]
10006962:	461a      	mov	r2, r3
10006964:	68fb      	ldr	r3, [r7, #12]
10006966:	f003 0301 	and.w	r3, r3, #1
1000696a:	2b00      	cmp	r3, #0
1000696c:	d101      	bne.n	10006972 <pico_get_unique_board_id_string+0x3a>
1000696e:	2304      	movs	r3, #4
10006970:	e000      	b.n	10006974 <pico_get_unique_board_id_string+0x3c>
10006972:	2300      	movs	r3, #0
10006974:	fa42 f303 	asr.w	r3, r2, r3
10006978:	f003 030f 	and.w	r3, r3, #15
1000697c:	60bb      	str	r3, [r7, #8]
        id_out[i] = (char)(nibble < 10 ? nibble + '0' : nibble + 'A' - 10);
1000697e:	68bb      	ldr	r3, [r7, #8]
10006980:	2b09      	cmp	r3, #9
10006982:	dc04      	bgt.n	1000698e <pico_get_unique_board_id_string+0x56>
10006984:	68bb      	ldr	r3, [r7, #8]
10006986:	b2db      	uxtb	r3, r3
10006988:	3330      	adds	r3, #48	@ 0x30
1000698a:	b2db      	uxtb	r3, r3
1000698c:	e003      	b.n	10006996 <pico_get_unique_board_id_string+0x5e>
1000698e:	68bb      	ldr	r3, [r7, #8]
10006990:	b2db      	uxtb	r3, r3
10006992:	3337      	adds	r3, #55	@ 0x37
10006994:	b2db      	uxtb	r3, r3
10006996:	6879      	ldr	r1, [r7, #4]
10006998:	68fa      	ldr	r2, [r7, #12]
1000699a:	440a      	add	r2, r1
1000699c:	7013      	strb	r3, [r2, #0]
    for (i = 0; (i < len - 1) && (i < PICO_UNIQUE_BOARD_ID_SIZE_BYTES * 2); i++) {
1000699e:	68fb      	ldr	r3, [r7, #12]
100069a0:	3301      	adds	r3, #1
100069a2:	60fb      	str	r3, [r7, #12]
100069a4:	683b      	ldr	r3, [r7, #0]
100069a6:	3b01      	subs	r3, #1
100069a8:	68fa      	ldr	r2, [r7, #12]
100069aa:	429a      	cmp	r2, r3
100069ac:	d202      	bcs.n	100069b4 <pico_get_unique_board_id_string+0x7c>
100069ae:	68fb      	ldr	r3, [r7, #12]
100069b0:	2b0f      	cmp	r3, #15
100069b2:	d9d2      	bls.n	1000695a <pico_get_unique_board_id_string+0x22>
    }
    id_out[i] = 0;
100069b4:	687a      	ldr	r2, [r7, #4]
100069b6:	68fb      	ldr	r3, [r7, #12]
100069b8:	4413      	add	r3, r2
100069ba:	2200      	movs	r2, #0
100069bc:	701a      	strb	r2, [r3, #0]
}
100069be:	bf00      	nop
100069c0:	3710      	adds	r7, #16
100069c2:	46bd      	mov	sp, r7
100069c4:	bd80      	pop	{r7, pc}
100069c6:	bf00      	nop
100069c8:	1000bca0 	.word	0x1000bca0
100069cc:	1000bcc4 	.word	0x1000bcc4
100069d0:	1000bc58 	.word	0x1000bc58
100069d4:	20002558 	.word	0x20002558

100069d8 <rp2040_chip_version>:

/*! \brief Returns the RP2040 chip revision number for compatibility
 *  \ingroup pico_platform
 * @return 2 RP2040 errata fixed in B2 are fixed in RP2350
 */
static inline uint8_t rp2040_chip_version(void) {
100069d8:	b480      	push	{r7}
100069da:	af00      	add	r7, sp, #0
    return 2;
100069dc:	2302      	movs	r3, #2
}
100069de:	4618      	mov	r0, r3
100069e0:	46bd      	mov	sp, r7
100069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
100069e6:	4770      	bx	lr

100069e8 <timer_time_us_32>:
static inline uint32_t timer_time_us_32(timer_hw_t *timer) {
100069e8:	b480      	push	{r7}
100069ea:	b083      	sub	sp, #12
100069ec:	af00      	add	r7, sp, #0
100069ee:	6078      	str	r0, [r7, #4]
    return timer->timerawl;
100069f0:	687b      	ldr	r3, [r7, #4]
100069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
100069f4:	4618      	mov	r0, r3
100069f6:	370c      	adds	r7, #12
100069f8:	46bd      	mov	sp, r7
100069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100069fe:	4770      	bx	lr

10006a00 <time_us_32>:
static inline uint32_t time_us_32(void) {
10006a00:	b580      	push	{r7, lr}
10006a02:	af00      	add	r7, sp, #0
    return timer_time_us_32(PICO_DEFAULT_TIMER_INSTANCE());
10006a04:	4802      	ldr	r0, [pc, #8]	@ (10006a10 <time_us_32+0x10>)
10006a06:	f7ff ffef 	bl	100069e8 <timer_time_us_32>
10006a0a:	4603      	mov	r3, r0
}
10006a0c:	4618      	mov	r0, r3
10006a0e:	bd80      	pop	{r7, pc}
10006a10:	400b0000 	.word	0x400b0000

10006a14 <hw_data_offset>:
{
  _hw_endpoint_buffer_control_update32(ep, ~value, 0);
}

static inline uintptr_t hw_data_offset (uint8_t *buf)
{
10006a14:	b480      	push	{r7}
10006a16:	b083      	sub	sp, #12
10006a18:	af00      	add	r7, sp, #0
10006a1a:	6078      	str	r0, [r7, #4]
  // Remove usb base from buffer pointer
  return (uintptr_t) buf ^ (uintptr_t) usb_dpram;
10006a1c:	687b      	ldr	r3, [r7, #4]
10006a1e:	f083 43a0 	eor.w	r3, r3, #1342177280	@ 0x50000000
10006a22:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
}
10006a26:	4618      	mov	r0, r3
10006a28:	370c      	adds	r7, #12
10006a2a:	46bd      	mov	sp, r7
10006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
10006a30:	4770      	bx	lr
	...

10006a34 <_hw_endpoint_alloc>:
  uint8_t num = tu_edpt_number(ep_addr);
  tusb_dir_t dir = tu_edpt_dir(ep_addr);
  return hw_endpoint_get_by_num(num, dir);
}

static void _hw_endpoint_alloc(struct hw_endpoint* ep, uint8_t transfer_type) {
10006a34:	b580      	push	{r7, lr}
10006a36:	b088      	sub	sp, #32
10006a38:	af00      	add	r7, sp, #0
10006a3a:	6078      	str	r0, [r7, #4]
10006a3c:	460b      	mov	r3, r1
10006a3e:	70fb      	strb	r3, [r7, #3]
  // size must be multiple of 64
  uint size = tu_div_ceil(ep->wMaxPacketSize, 64) * 64u;
10006a40:	687b      	ldr	r3, [r7, #4]
10006a42:	8b1b      	ldrh	r3, [r3, #24]
10006a44:	613b      	str	r3, [r7, #16]
10006a46:	2340      	movs	r3, #64	@ 0x40
10006a48:	60fb      	str	r3, [r7, #12]

TU_ATTR_ALWAYS_INLINE static inline bool tu_is_aligned32(uint32_t value) { return (value & 0x1FUL) == 0; }
TU_ATTR_ALWAYS_INLINE static inline bool tu_is_aligned64(uint64_t value) { return (value & 0x3FUL) == 0; }

//------------- Mathematics -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
10006a4a:	693a      	ldr	r2, [r7, #16]
10006a4c:	68fb      	ldr	r3, [r7, #12]
10006a4e:	4413      	add	r3, r2
10006a50:	1e5a      	subs	r2, r3, #1
10006a52:	68fb      	ldr	r3, [r7, #12]
10006a54:	fbb2 f3f3 	udiv	r3, r2, r3
10006a58:	019b      	lsls	r3, r3, #6
10006a5a:	61fb      	str	r3, [r7, #28]

  // double buffered Bulk endpoint
  if (transfer_type == TUSB_XFER_BULK) {
10006a5c:	78fb      	ldrb	r3, [r7, #3]
10006a5e:	2b02      	cmp	r3, #2
10006a60:	d102      	bne.n	10006a68 <_hw_endpoint_alloc+0x34>
    size *= 2u;
10006a62:	69fb      	ldr	r3, [r7, #28]
10006a64:	005b      	lsls	r3, r3, #1
10006a66:	61fb      	str	r3, [r7, #28]
  }

  ep->hw_data_buf = next_buffer_ptr;
10006a68:	4b1c      	ldr	r3, [pc, #112]	@ (10006adc <_hw_endpoint_alloc+0xa8>)
10006a6a:	681a      	ldr	r2, [r3, #0]
10006a6c:	687b      	ldr	r3, [r7, #4]
10006a6e:	60da      	str	r2, [r3, #12]
  next_buffer_ptr += size;
10006a70:	4b1a      	ldr	r3, [pc, #104]	@ (10006adc <_hw_endpoint_alloc+0xa8>)
10006a72:	681a      	ldr	r2, [r3, #0]
10006a74:	69fb      	ldr	r3, [r7, #28]
10006a76:	4413      	add	r3, r2
10006a78:	4a18      	ldr	r2, [pc, #96]	@ (10006adc <_hw_endpoint_alloc+0xa8>)
10006a7a:	6013      	str	r3, [r2, #0]

  assert(((uintptr_t) next_buffer_ptr & 0b111111u) == 0);
10006a7c:	4b17      	ldr	r3, [pc, #92]	@ (10006adc <_hw_endpoint_alloc+0xa8>)
10006a7e:	681b      	ldr	r3, [r3, #0]
10006a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10006a84:	2b00      	cmp	r3, #0
10006a86:	d005      	beq.n	10006a94 <_hw_endpoint_alloc+0x60>
10006a88:	4b15      	ldr	r3, [pc, #84]	@ (10006ae0 <_hw_endpoint_alloc+0xac>)
10006a8a:	4a16      	ldr	r2, [pc, #88]	@ (10006ae4 <_hw_endpoint_alloc+0xb0>)
10006a8c:	2151      	movs	r1, #81	@ 0x51
10006a8e:	4816      	ldr	r0, [pc, #88]	@ (10006ae8 <_hw_endpoint_alloc+0xb4>)
10006a90:	f7fe fef0 	bl	10005874 <__assert_func>
  uint dpram_offset = hw_data_offset(ep->hw_data_buf);
10006a94:	687b      	ldr	r3, [r7, #4]
10006a96:	68db      	ldr	r3, [r3, #12]
10006a98:	4618      	mov	r0, r3
10006a9a:	f7ff ffbb 	bl	10006a14 <hw_data_offset>
10006a9e:	61b8      	str	r0, [r7, #24]
  hard_assert(hw_data_offset(next_buffer_ptr) <= USB_DPRAM_MAX);
10006aa0:	4b0e      	ldr	r3, [pc, #56]	@ (10006adc <_hw_endpoint_alloc+0xa8>)
10006aa2:	681b      	ldr	r3, [r3, #0]
10006aa4:	4618      	mov	r0, r3
10006aa6:	f7ff ffb5 	bl	10006a14 <hw_data_offset>
10006aaa:	4603      	mov	r3, r0
10006aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
10006ab0:	d905      	bls.n	10006abe <_hw_endpoint_alloc+0x8a>
10006ab2:	4b0e      	ldr	r3, [pc, #56]	@ (10006aec <_hw_endpoint_alloc+0xb8>)
10006ab4:	4a0b      	ldr	r2, [pc, #44]	@ (10006ae4 <_hw_endpoint_alloc+0xb0>)
10006ab6:	2153      	movs	r1, #83	@ 0x53
10006ab8:	480b      	ldr	r0, [pc, #44]	@ (10006ae8 <_hw_endpoint_alloc+0xb4>)
10006aba:	f7fe fedb 	bl	10005874 <__assert_func>

  pico_info("  Allocated %d bytes at offset 0x%x (0x%p)\r\n", size, dpram_offset, ep->hw_data_buf);

  // Fill in endpoint control register with buffer offset
  uint32_t const reg = EP_CTRL_ENABLE_BITS | ((uint) transfer_type << EP_CTRL_BUFFER_TYPE_LSB) | dpram_offset;
10006abe:	78fb      	ldrb	r3, [r7, #3]
10006ac0:	069a      	lsls	r2, r3, #26
10006ac2:	69bb      	ldr	r3, [r7, #24]
10006ac4:	4313      	orrs	r3, r2
10006ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
10006aca:	617b      	str	r3, [r7, #20]

  *ep->endpoint_control = reg;
10006acc:	687b      	ldr	r3, [r7, #4]
10006ace:	685b      	ldr	r3, [r3, #4]
10006ad0:	697a      	ldr	r2, [r7, #20]
10006ad2:	601a      	str	r2, [r3, #0]
}
10006ad4:	bf00      	nop
10006ad6:	3720      	adds	r7, #32
10006ad8:	46bd      	mov	sp, r7
10006ada:	bd80      	pop	{r7, pc}
10006adc:	20002514 	.word	0x20002514
10006ae0:	1000bce4 	.word	0x1000bce4
10006ae4:	1000bdc0 	.word	0x1000bdc0
10006ae8:	1000bd14 	.word	0x1000bd14
10006aec:	1000bd6c 	.word	0x1000bd6c

10006af0 <hw_endpoint_init>:
static void hw_endpoint_close(uint8_t ep_addr) {
  struct hw_endpoint* ep = hw_endpoint_get_by_addr(ep_addr);
  _hw_endpoint_close(ep);
}

static void hw_endpoint_init(uint8_t ep_addr, uint16_t wMaxPacketSize, uint8_t transfer_type) {
10006af0:	b580      	push	{r7, lr}
10006af2:	b086      	sub	sp, #24
10006af4:	af00      	add	r7, sp, #0
10006af6:	4603      	mov	r3, r0
10006af8:	71fb      	strb	r3, [r7, #7]
10006afa:	460b      	mov	r3, r1
10006afc:	80bb      	strh	r3, [r7, #4]
10006afe:	4613      	mov	r3, r2
10006b00:	71bb      	strb	r3, [r7, #6]
10006b02:	79fb      	ldrb	r3, [r7, #7]
10006b04:	73fb      	strb	r3, [r7, #15]
10006b06:	7bfb      	ldrb	r3, [r7, #15]
10006b08:	73bb      	strb	r3, [r7, #14]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
}

// Get Endpoint number from address
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_number(uint8_t addr) {
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10006b0a:	7bbb      	ldrb	r3, [r7, #14]
10006b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10006b10:	b2db      	uxtb	r3, r3
  uint8_t num = tu_edpt_number(ep_addr);
10006b12:	737b      	strb	r3, [r7, #13]
10006b14:	7bfb      	ldrb	r3, [r7, #15]
10006b16:	733b      	strb	r3, [r7, #12]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10006b18:	7b3b      	ldrb	r3, [r7, #12]
10006b1a:	09db      	lsrs	r3, r3, #7
10006b1c:	b2db      	uxtb	r3, r3
  tusb_dir_t dir = tu_edpt_dir(ep_addr);
10006b1e:	72fb      	strb	r3, [r7, #11]
10006b20:	7b7b      	ldrb	r3, [r7, #13]
10006b22:	72bb      	strb	r3, [r7, #10]
10006b24:	7afb      	ldrb	r3, [r7, #11]
10006b26:	727b      	strb	r3, [r7, #9]
  return &hw_endpoints[num][dir];
10006b28:	7aba      	ldrb	r2, [r7, #10]
10006b2a:	7a7b      	ldrb	r3, [r7, #9]
10006b2c:	0052      	lsls	r2, r2, #1
10006b2e:	4413      	add	r3, r2
10006b30:	015b      	lsls	r3, r3, #5
10006b32:	4a30      	ldr	r2, [pc, #192]	@ (10006bf4 <hw_endpoint_init+0x104>)
10006b34:	4413      	add	r3, r2
  return hw_endpoint_get_by_num(num, dir);
10006b36:	bf00      	nop
  struct hw_endpoint* ep = hw_endpoint_get_by_addr(ep_addr);
10006b38:	617b      	str	r3, [r7, #20]
10006b3a:	79fb      	ldrb	r3, [r7, #7]
10006b3c:	743b      	strb	r3, [r7, #16]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10006b3e:	7c3b      	ldrb	r3, [r7, #16]
10006b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10006b44:	b2db      	uxtb	r3, r3

  const uint8_t num = tu_edpt_number(ep_addr);
10006b46:	74fb      	strb	r3, [r7, #19]
10006b48:	79fb      	ldrb	r3, [r7, #7]
10006b4a:	747b      	strb	r3, [r7, #17]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10006b4c:	7c7b      	ldrb	r3, [r7, #17]
10006b4e:	09db      	lsrs	r3, r3, #7
10006b50:	b2db      	uxtb	r3, r3
  const tusb_dir_t dir = tu_edpt_dir(ep_addr);
10006b52:	74bb      	strb	r3, [r7, #18]

  ep->ep_addr = ep_addr;
10006b54:	697b      	ldr	r3, [r7, #20]
10006b56:	79fa      	ldrb	r2, [r7, #7]
10006b58:	709a      	strb	r2, [r3, #2]

  // For device, IN is a tx transfer and OUT is an rx transfer
  ep->rx = (dir == TUSB_DIR_OUT);
10006b5a:	7cbb      	ldrb	r3, [r7, #18]
10006b5c:	2b00      	cmp	r3, #0
10006b5e:	bf0c      	ite	eq
10006b60:	2301      	moveq	r3, #1
10006b62:	2300      	movne	r3, #0
10006b64:	b2da      	uxtb	r2, r3
10006b66:	697b      	ldr	r3, [r7, #20]
10006b68:	705a      	strb	r2, [r3, #1]

  ep->next_pid = 0u;
10006b6a:	697b      	ldr	r3, [r7, #20]
10006b6c:	2200      	movs	r2, #0
10006b6e:	70da      	strb	r2, [r3, #3]
  ep->wMaxPacketSize = wMaxPacketSize;
10006b70:	697b      	ldr	r3, [r7, #20]
10006b72:	88ba      	ldrh	r2, [r7, #4]
10006b74:	831a      	strh	r2, [r3, #24]
  ep->transfer_type = transfer_type;
10006b76:	697b      	ldr	r3, [r7, #20]
10006b78:	79ba      	ldrb	r2, [r7, #6]
10006b7a:	76da      	strb	r2, [r3, #27]

  // Every endpoint has a buffer control register in dpram
  if (dir == TUSB_DIR_IN) {
10006b7c:	7cbb      	ldrb	r3, [r7, #18]
10006b7e:	2b01      	cmp	r3, #1
10006b80:	d106      	bne.n	10006b90 <hw_endpoint_init+0xa0>
    ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].in;
10006b82:	7cfb      	ldrb	r3, [r7, #19]
10006b84:	00da      	lsls	r2, r3, #3
10006b86:	4b1c      	ldr	r3, [pc, #112]	@ (10006bf8 <hw_endpoint_init+0x108>)
10006b88:	4413      	add	r3, r2
10006b8a:	697a      	ldr	r2, [r7, #20]
10006b8c:	6093      	str	r3, [r2, #8]
10006b8e:	e006      	b.n	10006b9e <hw_endpoint_init+0xae>
  } else {
    ep->buffer_control = &usb_dpram->ep_buf_ctrl[num].out;
10006b90:	7cfb      	ldrb	r3, [r7, #19]
10006b92:	00db      	lsls	r3, r3, #3
10006b94:	1d1a      	adds	r2, r3, #4
10006b96:	4b18      	ldr	r3, [pc, #96]	@ (10006bf8 <hw_endpoint_init+0x108>)
10006b98:	4413      	add	r3, r2
10006b9a:	697a      	ldr	r2, [r7, #20]
10006b9c:	6093      	str	r3, [r2, #8]
  }

  // Clear existing buffer control state
  *ep->buffer_control = 0;
10006b9e:	697b      	ldr	r3, [r7, #20]
10006ba0:	689b      	ldr	r3, [r3, #8]
10006ba2:	2200      	movs	r2, #0
10006ba4:	601a      	str	r2, [r3, #0]

  if (num == 0) {
10006ba6:	7cfb      	ldrb	r3, [r7, #19]
10006ba8:	2b00      	cmp	r3, #0
10006baa:	d106      	bne.n	10006bba <hw_endpoint_init+0xca>
    // EP0 has no endpoint control register because the buffer offsets are fixed
    ep->endpoint_control = NULL;
10006bac:	697b      	ldr	r3, [r7, #20]
10006bae:	2200      	movs	r2, #0
10006bb0:	605a      	str	r2, [r3, #4]

    // Buffer offset is fixed (also double buffered)
    ep->hw_data_buf = (uint8_t*) &usb_dpram->ep0_buf_a[0];
10006bb2:	697b      	ldr	r3, [r7, #20]
10006bb4:	4a11      	ldr	r2, [pc, #68]	@ (10006bfc <hw_endpoint_init+0x10c>)
10006bb6:	60da      	str	r2, [r3, #12]
    }

    // alloc a buffer and fill in endpoint control register
    _hw_endpoint_alloc(ep, transfer_type);
  }
}
10006bb8:	e017      	b.n	10006bea <hw_endpoint_init+0xfa>
    if (dir == TUSB_DIR_IN) {
10006bba:	7cbb      	ldrb	r3, [r7, #18]
10006bbc:	2b01      	cmp	r3, #1
10006bbe:	d107      	bne.n	10006bd0 <hw_endpoint_init+0xe0>
      ep->endpoint_control = &usb_dpram->ep_ctrl[num - 1].in;
10006bc0:	7cfb      	ldrb	r3, [r7, #19]
10006bc2:	3b01      	subs	r3, #1
10006bc4:	00da      	lsls	r2, r3, #3
10006bc6:	4b0e      	ldr	r3, [pc, #56]	@ (10006c00 <hw_endpoint_init+0x110>)
10006bc8:	4413      	add	r3, r2
10006bca:	697a      	ldr	r2, [r7, #20]
10006bcc:	6053      	str	r3, [r2, #4]
10006bce:	e007      	b.n	10006be0 <hw_endpoint_init+0xf0>
      ep->endpoint_control = &usb_dpram->ep_ctrl[num - 1].out;
10006bd0:	7cfb      	ldrb	r3, [r7, #19]
10006bd2:	3b01      	subs	r3, #1
10006bd4:	00db      	lsls	r3, r3, #3
10006bd6:	1d1a      	adds	r2, r3, #4
10006bd8:	4b09      	ldr	r3, [pc, #36]	@ (10006c00 <hw_endpoint_init+0x110>)
10006bda:	4413      	add	r3, r2
10006bdc:	697a      	ldr	r2, [r7, #20]
10006bde:	6053      	str	r3, [r2, #4]
    _hw_endpoint_alloc(ep, transfer_type);
10006be0:	79bb      	ldrb	r3, [r7, #6]
10006be2:	4619      	mov	r1, r3
10006be4:	6978      	ldr	r0, [r7, #20]
10006be6:	f7ff ff25 	bl	10006a34 <_hw_endpoint_alloc>
}
10006bea:	bf00      	nop
10006bec:	3718      	adds	r7, #24
10006bee:	46bd      	mov	sp, r7
10006bf0:	bd80      	pop	{r7, pc}
10006bf2:	bf00      	nop
10006bf4:	20002110 	.word	0x20002110
10006bf8:	50100080 	.word	0x50100080
10006bfc:	50100100 	.word	0x50100100
10006c00:	50100008 	.word	0x50100008

10006c04 <hw_endpoint_xfer>:

static void hw_endpoint_xfer(uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
10006c04:	b580      	push	{r7, lr}
10006c06:	b086      	sub	sp, #24
10006c08:	af00      	add	r7, sp, #0
10006c0a:	4603      	mov	r3, r0
10006c0c:	6039      	str	r1, [r7, #0]
10006c0e:	71fb      	strb	r3, [r7, #7]
10006c10:	4613      	mov	r3, r2
10006c12:	80bb      	strh	r3, [r7, #4]
10006c14:	79fb      	ldrb	r3, [r7, #7]
10006c16:	74fb      	strb	r3, [r7, #19]
10006c18:	7cfb      	ldrb	r3, [r7, #19]
10006c1a:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10006c1c:	7cbb      	ldrb	r3, [r7, #18]
10006c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10006c22:	b2db      	uxtb	r3, r3
  uint8_t num = tu_edpt_number(ep_addr);
10006c24:	747b      	strb	r3, [r7, #17]
10006c26:	7cfb      	ldrb	r3, [r7, #19]
10006c28:	743b      	strb	r3, [r7, #16]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10006c2a:	7c3b      	ldrb	r3, [r7, #16]
10006c2c:	09db      	lsrs	r3, r3, #7
10006c2e:	b2db      	uxtb	r3, r3
  tusb_dir_t dir = tu_edpt_dir(ep_addr);
10006c30:	73fb      	strb	r3, [r7, #15]
10006c32:	7c7b      	ldrb	r3, [r7, #17]
10006c34:	73bb      	strb	r3, [r7, #14]
10006c36:	7bfb      	ldrb	r3, [r7, #15]
10006c38:	737b      	strb	r3, [r7, #13]
  return &hw_endpoints[num][dir];
10006c3a:	7bba      	ldrb	r2, [r7, #14]
10006c3c:	7b7b      	ldrb	r3, [r7, #13]
10006c3e:	0052      	lsls	r2, r2, #1
10006c40:	4413      	add	r3, r2
10006c42:	015b      	lsls	r3, r3, #5
10006c44:	4a06      	ldr	r2, [pc, #24]	@ (10006c60 <hw_endpoint_xfer+0x5c>)
10006c46:	4413      	add	r3, r2
  return hw_endpoint_get_by_num(num, dir);
10006c48:	bf00      	nop
  struct hw_endpoint* ep = hw_endpoint_get_by_addr(ep_addr);
10006c4a:	617b      	str	r3, [r7, #20]
  hw_endpoint_xfer_start(ep, buffer, total_bytes);
10006c4c:	88bb      	ldrh	r3, [r7, #4]
10006c4e:	461a      	mov	r2, r3
10006c50:	6839      	ldr	r1, [r7, #0]
10006c52:	6978      	ldr	r0, [r7, #20]
10006c54:	f000 fa6c 	bl	10007130 <hw_endpoint_xfer_start>
}
10006c58:	bf00      	nop
10006c5a:	3718      	adds	r7, #24
10006c5c:	46bd      	mov	sp, r7
10006c5e:	bd80      	pop	{r7, pc}
10006c60:	20002110 	.word	0x20002110

10006c64 <dcd_init>:
// older SDK
#ifndef PICO_SHARED_IRQ_HANDLER_HIGHEST_ORDER_PRIORITY
#define PICO_SHARED_IRQ_HANDLER_HIGHEST_ORDER_PRIORITY 0xff
#endif

void dcd_init(uint8_t rhport) {
10006c64:	b580      	push	{r7, lr}
10006c66:	b082      	sub	sp, #8
10006c68:	af00      	add	r7, sp, #0
10006c6a:	4603      	mov	r3, r0
10006c6c:	71fb      	strb	r3, [r7, #7]
  assert(rhport == 0);
10006c6e:	79fb      	ldrb	r3, [r7, #7]
10006c70:	2b00      	cmp	r3, #0
10006c72:	d006      	beq.n	10006c82 <dcd_init+0x1e>
10006c74:	4b1a      	ldr	r3, [pc, #104]	@ (10006ce0 <dcd_init+0x7c>)
10006c76:	4a1b      	ldr	r2, [pc, #108]	@ (10006ce4 <dcd_init+0x80>)
10006c78:	f240 1175 	movw	r1, #373	@ 0x175
10006c7c:	481a      	ldr	r0, [pc, #104]	@ (10006ce8 <dcd_init+0x84>)
10006c7e:	f7fe fdf9 	bl	10005874 <__assert_func>

  TU_LOG(2, "Chip Version B%u\r\n", rp2040_chip_version());

  // Reset hardware to default state
  rp2040_usb_init();
10006c82:	f000 fa03 	bl	1000708c <rp2040_usb_init>

#if FORCE_VBUS_DETECT
  // Force VBUS detect so the device thinks it is plugged into a host
  usb_hw->pwr = USB_USB_PWR_VBUS_DETECT_BITS | USB_USB_PWR_VBUS_DETECT_OVERRIDE_EN_BITS;
10006c86:	4b19      	ldr	r3, [pc, #100]	@ (10006cec <dcd_init+0x88>)
10006c88:	220c      	movs	r2, #12
10006c8a:	679a      	str	r2, [r3, #120]	@ 0x78
#endif

  irq_add_shared_handler(USBCTRL_IRQ, dcd_rp2040_irq, PICO_SHARED_IRQ_HANDLER_HIGHEST_ORDER_PRIORITY);
10006c8c:	22ff      	movs	r2, #255	@ 0xff
10006c8e:	4918      	ldr	r1, [pc, #96]	@ (10006cf0 <dcd_init+0x8c>)
10006c90:	200e      	movs	r0, #14
10006c92:	f7fa fb7f 	bl	10001394 <irq_add_shared_handler>

  // Init control endpoints
  tu_memclr(hw_endpoints[0], 2 * sizeof(hw_endpoint_t));
10006c96:	2240      	movs	r2, #64	@ 0x40
10006c98:	2100      	movs	r1, #0
10006c9a:	4816      	ldr	r0, [pc, #88]	@ (10006cf4 <dcd_init+0x90>)
10006c9c:	f004 f9f0 	bl	1000b080 <memset>
  hw_endpoint_init(0x0, 64, TUSB_XFER_CONTROL);
10006ca0:	2200      	movs	r2, #0
10006ca2:	2140      	movs	r1, #64	@ 0x40
10006ca4:	2000      	movs	r0, #0
10006ca6:	f7ff ff23 	bl	10006af0 <hw_endpoint_init>
  hw_endpoint_init(0x80, 64, TUSB_XFER_CONTROL);
10006caa:	2200      	movs	r2, #0
10006cac:	2140      	movs	r1, #64	@ 0x40
10006cae:	2080      	movs	r0, #128	@ 0x80
10006cb0:	f7ff ff1e 	bl	10006af0 <hw_endpoint_init>

  // Init non-control endpoints
  reset_non_control_endpoints();
10006cb4:	f004 fa3c 	bl	1000b130 <__reset_non_control_endpoints_veneer>

  // Initializes the USB peripheral for device mode and enables it.
  // Don't need to enable the pull up here. Force VBUS
  usb_hw->main_ctrl = USB_MAIN_CTRL_CONTROLLER_EN_BITS;
10006cb8:	4b0c      	ldr	r3, [pc, #48]	@ (10006cec <dcd_init+0x88>)
10006cba:	2201      	movs	r2, #1
10006cbc:	641a      	str	r2, [r3, #64]	@ 0x40

  // Enable individual controller IRQS here. Processor interrupt enable will be used
  // for the global interrupt enable...
  // Note: Force VBUS detect cause disconnection not detectable
  usb_hw->sie_ctrl = USB_SIE_CTRL_EP0_INT_1BUF_BITS;
10006cbe:	4b0b      	ldr	r3, [pc, #44]	@ (10006cec <dcd_init+0x88>)
10006cc0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
10006cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  usb_hw->inte = USB_INTS_BUFF_STATUS_BITS | USB_INTS_BUS_RESET_BITS | USB_INTS_SETUP_REQ_BITS |
10006cc6:	4b09      	ldr	r3, [pc, #36]	@ (10006cec <dcd_init+0x88>)
10006cc8:	4a0b      	ldr	r2, [pc, #44]	@ (10006cf8 <dcd_init+0x94>)
10006cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
                 USB_INTS_DEV_SUSPEND_BITS | USB_INTS_DEV_RESUME_FROM_HOST_BITS |
                 (FORCE_VBUS_DETECT ? 0 : USB_INTS_DEV_CONN_DIS_BITS);

  dcd_connect(rhport);
10006cce:	79fb      	ldrb	r3, [r7, #7]
10006cd0:	4618      	mov	r0, r3
10006cd2:	f000 f853 	bl	10006d7c <dcd_connect>
}
10006cd6:	bf00      	nop
10006cd8:	3708      	adds	r7, #8
10006cda:	46bd      	mov	sp, r7
10006cdc:	bd80      	pop	{r7, pc}
10006cde:	bf00      	nop
10006ce0:	1000bdb4 	.word	0x1000bdb4
10006ce4:	1000bdd4 	.word	0x1000bdd4
10006ce8:	1000bd14 	.word	0x1000bd14
10006cec:	50110000 	.word	0x50110000
10006cf0:	20000525 	.word	0x20000525
10006cf4:	20002110 	.word	0x20002110
10006cf8:	0001d010 	.word	0x0001d010

10006cfc <dcd_int_enable>:
  unreset_block_wait(RESETS_RESET_USBCTRL_BITS);

  return true;
}

void dcd_int_enable(__unused uint8_t rhport) {
10006cfc:	b580      	push	{r7, lr}
10006cfe:	b082      	sub	sp, #8
10006d00:	af00      	add	r7, sp, #0
10006d02:	4603      	mov	r3, r0
10006d04:	71fb      	strb	r3, [r7, #7]
  assert(rhport == 0);
10006d06:	79fb      	ldrb	r3, [r7, #7]
10006d08:	2b00      	cmp	r3, #0
10006d0a:	d006      	beq.n	10006d1a <dcd_int_enable+0x1e>
10006d0c:	4b07      	ldr	r3, [pc, #28]	@ (10006d2c <dcd_int_enable+0x30>)
10006d0e:	4a08      	ldr	r2, [pc, #32]	@ (10006d30 <dcd_int_enable+0x34>)
10006d10:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
10006d14:	4807      	ldr	r0, [pc, #28]	@ (10006d34 <dcd_int_enable+0x38>)
10006d16:	f7fe fdad 	bl	10005874 <__assert_func>
  irq_set_enabled(USBCTRL_IRQ, true);
10006d1a:	2101      	movs	r1, #1
10006d1c:	200e      	movs	r0, #14
10006d1e:	f7fa f987 	bl	10001030 <irq_set_enabled>
}
10006d22:	bf00      	nop
10006d24:	3708      	adds	r7, #8
10006d26:	46bd      	mov	sp, r7
10006d28:	bd80      	pop	{r7, pc}
10006d2a:	bf00      	nop
10006d2c:	1000bdb4 	.word	0x1000bdb4
10006d30:	1000bde0 	.word	0x1000bde0
10006d34:	1000bd14 	.word	0x1000bd14

10006d38 <dcd_set_address>:
void dcd_int_disable(__unused uint8_t rhport) {
  assert(rhport == 0);
  irq_set_enabled(USBCTRL_IRQ, false);
}

void dcd_set_address(__unused uint8_t rhport, __unused uint8_t dev_addr) {
10006d38:	b580      	push	{r7, lr}
10006d3a:	b082      	sub	sp, #8
10006d3c:	af00      	add	r7, sp, #0
10006d3e:	4603      	mov	r3, r0
10006d40:	460a      	mov	r2, r1
10006d42:	71fb      	strb	r3, [r7, #7]
10006d44:	4613      	mov	r3, r2
10006d46:	71bb      	strb	r3, [r7, #6]
  assert(rhport == 0);
10006d48:	79fb      	ldrb	r3, [r7, #7]
10006d4a:	2b00      	cmp	r3, #0
10006d4c:	d006      	beq.n	10006d5c <dcd_set_address+0x24>
10006d4e:	4b08      	ldr	r3, [pc, #32]	@ (10006d70 <dcd_set_address+0x38>)
10006d50:	4a08      	ldr	r2, [pc, #32]	@ (10006d74 <dcd_set_address+0x3c>)
10006d52:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
10006d56:	4808      	ldr	r0, [pc, #32]	@ (10006d78 <dcd_set_address+0x40>)
10006d58:	f7fe fd8c 	bl	10005874 <__assert_func>

  // Can't set device address in hardware until status xfer has complete
  // Send 0len complete response on EP0 IN
  hw_endpoint_xfer(0x80, NULL, 0);
10006d5c:	2200      	movs	r2, #0
10006d5e:	2100      	movs	r1, #0
10006d60:	2080      	movs	r0, #128	@ 0x80
10006d62:	f7ff ff4f 	bl	10006c04 <hw_endpoint_xfer>
}
10006d66:	bf00      	nop
10006d68:	3708      	adds	r7, #8
10006d6a:	46bd      	mov	sp, r7
10006d6c:	bd80      	pop	{r7, pc}
10006d6e:	bf00      	nop
10006d70:	1000bdb4 	.word	0x1000bdb4
10006d74:	1000bdf0 	.word	0x1000bdf0
10006d78:	1000bd14 	.word	0x1000bd14

10006d7c <dcd_connect>:
  (void) rhport;
  usb_hw_clear->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
}

// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(__unused uint8_t rhport) {
10006d7c:	b480      	push	{r7}
10006d7e:	b083      	sub	sp, #12
10006d80:	af00      	add	r7, sp, #0
10006d82:	4603      	mov	r3, r0
10006d84:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  usb_hw_set->sie_ctrl = USB_SIE_CTRL_PULLUP_EN_BITS;
10006d86:	4b05      	ldr	r3, [pc, #20]	@ (10006d9c <dcd_connect+0x20>)
10006d88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
10006d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
10006d8e:	bf00      	nop
10006d90:	370c      	adds	r7, #12
10006d92:	46bd      	mov	sp, r7
10006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
10006d98:	4770      	bx	lr
10006d9a:	bf00      	nop
10006d9c:	50112000 	.word	0x50112000

10006da0 <dcd_sof_enable>:

void dcd_sof_enable(uint8_t rhport, bool en) {
10006da0:	b480      	push	{r7}
10006da2:	b083      	sub	sp, #12
10006da4:	af00      	add	r7, sp, #0
10006da6:	4603      	mov	r3, r0
10006da8:	460a      	mov	r2, r1
10006daa:	71fb      	strb	r3, [r7, #7]
10006dac:	4613      	mov	r3, r2
10006dae:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  _sof_enable = en;
10006db0:	4a08      	ldr	r2, [pc, #32]	@ (10006dd4 <dcd_sof_enable+0x34>)
10006db2:	79bb      	ldrb	r3, [r7, #6]
10006db4:	7013      	strb	r3, [r2, #0]

  if (en) {
10006db6:	79bb      	ldrb	r3, [r7, #6]
10006db8:	2b00      	cmp	r3, #0
10006dba:	d004      	beq.n	10006dc6 <dcd_sof_enable+0x26>
    usb_hw_set->inte = USB_INTS_DEV_SOF_BITS;
10006dbc:	4b06      	ldr	r3, [pc, #24]	@ (10006dd8 <dcd_sof_enable+0x38>)
10006dbe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
10006dc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    // Don't clear immediately if the SOF workaround is in use.
    // The SOF handler will conditionally disable the interrupt.
    usb_hw_clear->inte = USB_INTS_DEV_SOF_BITS;
  }
#endif
}
10006dc6:	bf00      	nop
10006dc8:	370c      	adds	r7, #12
10006dca:	46bd      	mov	sp, r7
10006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
10006dd0:	4770      	bx	lr
10006dd2:	bf00      	nop
10006dd4:	20002582 	.word	0x20002582
10006dd8:	50112000 	.word	0x50112000

10006ddc <dcd_edpt0_status_complete>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const* request) {
10006ddc:	b480      	push	{r7}
10006dde:	b083      	sub	sp, #12
10006de0:	af00      	add	r7, sp, #0
10006de2:	4603      	mov	r3, r0
10006de4:	6039      	str	r1, [r7, #0]
10006de6:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
10006de8:	683b      	ldr	r3, [r7, #0]
10006dea:	781b      	ldrb	r3, [r3, #0]
10006dec:	f003 031f 	and.w	r3, r3, #31
10006df0:	b2db      	uxtb	r3, r3
10006df2:	2b00      	cmp	r3, #0
10006df4:	d110      	bne.n	10006e18 <dcd_edpt0_status_complete+0x3c>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
10006df6:	683b      	ldr	r3, [r7, #0]
10006df8:	781b      	ldrb	r3, [r3, #0]
10006dfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
10006dfe:	b2db      	uxtb	r3, r3
  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
10006e00:	2b00      	cmp	r3, #0
10006e02:	d109      	bne.n	10006e18 <dcd_edpt0_status_complete+0x3c>
      request->bRequest == TUSB_REQ_SET_ADDRESS) {
10006e04:	683b      	ldr	r3, [r7, #0]
10006e06:	785b      	ldrb	r3, [r3, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
10006e08:	2b05      	cmp	r3, #5
10006e0a:	d105      	bne.n	10006e18 <dcd_edpt0_status_complete+0x3c>
    usb_hw->dev_addr_ctrl = (uint8_t) request->wValue;
10006e0c:	683b      	ldr	r3, [r7, #0]
10006e0e:	885b      	ldrh	r3, [r3, #2]
10006e10:	b29b      	uxth	r3, r3
10006e12:	b2da      	uxtb	r2, r3
10006e14:	4b03      	ldr	r3, [pc, #12]	@ (10006e24 <dcd_edpt0_status_complete+0x48>)
10006e16:	601a      	str	r2, [r3, #0]
  }
}
10006e18:	bf00      	nop
10006e1a:	370c      	adds	r7, #12
10006e1c:	46bd      	mov	sp, r7
10006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006e22:	4770      	bx	lr
10006e24:	50110000 	.word	0x50110000

10006e28 <dcd_edpt_open>:

bool dcd_edpt_open(__unused uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
10006e28:	b580      	push	{r7, lr}
10006e2a:	b084      	sub	sp, #16
10006e2c:	af00      	add	r7, sp, #0
10006e2e:	4603      	mov	r3, r0
10006e30:	6039      	str	r1, [r7, #0]
10006e32:	71fb      	strb	r3, [r7, #7]
  assert(rhport == 0);
10006e34:	79fb      	ldrb	r3, [r7, #7]
10006e36:	2b00      	cmp	r3, #0
10006e38:	d006      	beq.n	10006e48 <dcd_edpt_open+0x20>
10006e3a:	4b0f      	ldr	r3, [pc, #60]	@ (10006e78 <dcd_edpt_open+0x50>)
10006e3c:	4a0f      	ldr	r2, [pc, #60]	@ (10006e7c <dcd_edpt_open+0x54>)
10006e3e:	f240 11ef 	movw	r1, #495	@ 0x1ef
10006e42:	480f      	ldr	r0, [pc, #60]	@ (10006e80 <dcd_edpt_open+0x58>)
10006e44:	f7fe fd16 	bl	10005874 <__assert_func>
  hw_endpoint_init(desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt), desc_edpt->bmAttributes.xfer);
10006e48:	683b      	ldr	r3, [r7, #0]
10006e4a:	7898      	ldrb	r0, [r3, #2]
10006e4c:	683b      	ldr	r3, [r7, #0]
10006e4e:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
10006e50:	68fb      	ldr	r3, [r7, #12]
10006e52:	889b      	ldrh	r3, [r3, #4]
10006e54:	b29b      	uxth	r3, r3
10006e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
10006e5a:	b299      	uxth	r1, r3
10006e5c:	683b      	ldr	r3, [r7, #0]
10006e5e:	78db      	ldrb	r3, [r3, #3]
10006e60:	f3c3 0301 	ubfx	r3, r3, #0, #2
10006e64:	b2db      	uxtb	r3, r3
10006e66:	461a      	mov	r2, r3
10006e68:	f7ff fe42 	bl	10006af0 <hw_endpoint_init>
  return true;
10006e6c:	2301      	movs	r3, #1
}
10006e6e:	4618      	mov	r0, r3
10006e70:	3710      	adds	r7, #16
10006e72:	46bd      	mov	sp, r7
10006e74:	bd80      	pop	{r7, pc}
10006e76:	bf00      	nop
10006e78:	1000bdb4 	.word	0x1000bdb4
10006e7c:	1000be00 	.word	0x1000be00
10006e80:	1000bd14 	.word	0x1000bd14

10006e84 <dcd_edpt_close_all>:

void dcd_edpt_close_all(uint8_t rhport) {
10006e84:	b580      	push	{r7, lr}
10006e86:	b082      	sub	sp, #8
10006e88:	af00      	add	r7, sp, #0
10006e8a:	4603      	mov	r3, r0
10006e8c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  // may need to use EP Abort
  reset_non_control_endpoints();
10006e8e:	f004 f94f 	bl	1000b130 <__reset_non_control_endpoints_veneer>
}
10006e92:	bf00      	nop
10006e94:	3708      	adds	r7, #8
10006e96:	46bd      	mov	sp, r7
10006e98:	bd80      	pop	{r7, pc}
	...

10006e9c <dcd_edpt_xfer>:

bool dcd_edpt_xfer(__unused uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
10006e9c:	b580      	push	{r7, lr}
10006e9e:	b082      	sub	sp, #8
10006ea0:	af00      	add	r7, sp, #0
10006ea2:	603a      	str	r2, [r7, #0]
10006ea4:	461a      	mov	r2, r3
10006ea6:	4603      	mov	r3, r0
10006ea8:	71fb      	strb	r3, [r7, #7]
10006eaa:	460b      	mov	r3, r1
10006eac:	71bb      	strb	r3, [r7, #6]
10006eae:	4613      	mov	r3, r2
10006eb0:	80bb      	strh	r3, [r7, #4]
  assert(rhport == 0);
10006eb2:	79fb      	ldrb	r3, [r7, #7]
10006eb4:	2b00      	cmp	r3, #0
10006eb6:	d006      	beq.n	10006ec6 <dcd_edpt_xfer+0x2a>
10006eb8:	4b08      	ldr	r3, [pc, #32]	@ (10006edc <dcd_edpt_xfer+0x40>)
10006eba:	4a09      	ldr	r2, [pc, #36]	@ (10006ee0 <dcd_edpt_xfer+0x44>)
10006ebc:	f44f 71fe 	mov.w	r1, #508	@ 0x1fc
10006ec0:	4808      	ldr	r0, [pc, #32]	@ (10006ee4 <dcd_edpt_xfer+0x48>)
10006ec2:	f7fe fcd7 	bl	10005874 <__assert_func>
  hw_endpoint_xfer(ep_addr, buffer, total_bytes);
10006ec6:	88ba      	ldrh	r2, [r7, #4]
10006ec8:	79bb      	ldrb	r3, [r7, #6]
10006eca:	6839      	ldr	r1, [r7, #0]
10006ecc:	4618      	mov	r0, r3
10006ece:	f7ff fe99 	bl	10006c04 <hw_endpoint_xfer>
  return true;
10006ed2:	2301      	movs	r3, #1
}
10006ed4:	4618      	mov	r0, r3
10006ed6:	3708      	adds	r7, #8
10006ed8:	46bd      	mov	sp, r7
10006eda:	bd80      	pop	{r7, pc}
10006edc:	1000bdb4 	.word	0x1000bdb4
10006ee0:	1000be10 	.word	0x1000be10
10006ee4:	1000bd14 	.word	0x1000bd14

10006ee8 <dcd_edpt_stall>:

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
10006ee8:	b580      	push	{r7, lr}
10006eea:	b088      	sub	sp, #32
10006eec:	af00      	add	r7, sp, #0
10006eee:	4603      	mov	r3, r0
10006ef0:	460a      	mov	r2, r1
10006ef2:	71fb      	strb	r3, [r7, #7]
10006ef4:	4613      	mov	r3, r2
10006ef6:	71bb      	strb	r3, [r7, #6]
10006ef8:	79bb      	ldrb	r3, [r7, #6]
10006efa:	76fb      	strb	r3, [r7, #27]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10006efc:	7efb      	ldrb	r3, [r7, #27]
10006efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10006f02:	b2db      	uxtb	r3, r3
  (void) rhport;

  if (tu_edpt_number(ep_addr) == 0) {
10006f04:	2b00      	cmp	r3, #0
10006f06:	d10b      	bne.n	10006f20 <dcd_edpt_stall+0x38>
10006f08:	79bb      	ldrb	r3, [r7, #6]
10006f0a:	76bb      	strb	r3, [r7, #26]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10006f0c:	7ebb      	ldrb	r3, [r7, #26]
10006f0e:	09db      	lsrs	r3, r3, #7
10006f10:	b2db      	uxtb	r3, r3
    // A stall on EP0 has to be armed so it can be cleared on the next setup packet
    usb_hw_set->ep_stall_arm = (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) ? USB_EP_STALL_ARM_EP0_IN_BITS
                                                                     : USB_EP_STALL_ARM_EP0_OUT_BITS;
10006f12:	2b01      	cmp	r3, #1
10006f14:	d101      	bne.n	10006f1a <dcd_edpt_stall+0x32>
10006f16:	2301      	movs	r3, #1
10006f18:	e000      	b.n	10006f1c <dcd_edpt_stall+0x34>
10006f1a:	2302      	movs	r3, #2
    usb_hw_set->ep_stall_arm = (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) ? USB_EP_STALL_ARM_EP0_IN_BITS
10006f1c:	4a16      	ldr	r2, [pc, #88]	@ (10006f78 <dcd_edpt_stall+0x90>)
10006f1e:	6693      	str	r3, [r2, #104]	@ 0x68
10006f20:	79bb      	ldrb	r3, [r7, #6]
10006f22:	73fb      	strb	r3, [r7, #15]
10006f24:	7bfb      	ldrb	r3, [r7, #15]
10006f26:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10006f28:	7bbb      	ldrb	r3, [r7, #14]
10006f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10006f2e:	b2db      	uxtb	r3, r3
  uint8_t num = tu_edpt_number(ep_addr);
10006f30:	737b      	strb	r3, [r7, #13]
10006f32:	7bfb      	ldrb	r3, [r7, #15]
10006f34:	733b      	strb	r3, [r7, #12]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10006f36:	7b3b      	ldrb	r3, [r7, #12]
10006f38:	09db      	lsrs	r3, r3, #7
10006f3a:	b2db      	uxtb	r3, r3
  tusb_dir_t dir = tu_edpt_dir(ep_addr);
10006f3c:	72fb      	strb	r3, [r7, #11]
10006f3e:	7b7b      	ldrb	r3, [r7, #13]
10006f40:	72bb      	strb	r3, [r7, #10]
10006f42:	7afb      	ldrb	r3, [r7, #11]
10006f44:	727b      	strb	r3, [r7, #9]
  return &hw_endpoints[num][dir];
10006f46:	7aba      	ldrb	r2, [r7, #10]
10006f48:	7a7b      	ldrb	r3, [r7, #9]
10006f4a:	0052      	lsls	r2, r2, #1
10006f4c:	4413      	add	r3, r2
10006f4e:	015b      	lsls	r3, r3, #5
10006f50:	4a0a      	ldr	r2, [pc, #40]	@ (10006f7c <dcd_edpt_stall+0x94>)
10006f52:	4413      	add	r3, r2
  return hw_endpoint_get_by_num(num, dir);
10006f54:	bf00      	nop
  }

  struct hw_endpoint* ep = hw_endpoint_get_by_addr(ep_addr);
10006f56:	61fb      	str	r3, [r7, #28]
10006f58:	69fb      	ldr	r3, [r7, #28]
10006f5a:	617b      	str	r3, [r7, #20]
10006f5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
10006f60:	613b      	str	r3, [r7, #16]
  _hw_endpoint_buffer_control_update32(ep, 0, value);
10006f62:	693a      	ldr	r2, [r7, #16]
10006f64:	2100      	movs	r1, #0
10006f66:	6978      	ldr	r0, [r7, #20]
10006f68:	f004 f8fa 	bl	1000b160 <___hw_endpoint_buffer_control_update32_veneer>
}
10006f6c:	bf00      	nop

  // stall and clear current pending buffer
  // may need to use EP_ABORT
  _hw_endpoint_buffer_control_set_value32(ep, USB_BUF_CTRL_STALL);
}
10006f6e:	bf00      	nop
10006f70:	3720      	adds	r7, #32
10006f72:	46bd      	mov	sp, r7
10006f74:	bd80      	pop	{r7, pc}
10006f76:	bf00      	nop
10006f78:	50112000 	.word	0x50112000
10006f7c:	20002110 	.word	0x20002110

10006f80 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
10006f80:	b580      	push	{r7, lr}
10006f82:	b088      	sub	sp, #32
10006f84:	af00      	add	r7, sp, #0
10006f86:	4603      	mov	r3, r0
10006f88:	460a      	mov	r2, r1
10006f8a:	71fb      	strb	r3, [r7, #7]
10006f8c:	4613      	mov	r3, r2
10006f8e:	71bb      	strb	r3, [r7, #6]
10006f90:	79bb      	ldrb	r3, [r7, #6]
10006f92:	76fb      	strb	r3, [r7, #27]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10006f94:	7efb      	ldrb	r3, [r7, #27]
10006f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10006f9a:	b2db      	uxtb	r3, r3
  (void) rhport;

  if (tu_edpt_number(ep_addr)) {
10006f9c:	2b00      	cmp	r3, #0
10006f9e:	d02b      	beq.n	10006ff8 <dcd_edpt_clear_stall+0x78>
10006fa0:	79bb      	ldrb	r3, [r7, #6]
10006fa2:	73fb      	strb	r3, [r7, #15]
10006fa4:	7bfb      	ldrb	r3, [r7, #15]
10006fa6:	73bb      	strb	r3, [r7, #14]
10006fa8:	7bbb      	ldrb	r3, [r7, #14]
10006faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10006fae:	b2db      	uxtb	r3, r3
  uint8_t num = tu_edpt_number(ep_addr);
10006fb0:	737b      	strb	r3, [r7, #13]
10006fb2:	7bfb      	ldrb	r3, [r7, #15]
10006fb4:	733b      	strb	r3, [r7, #12]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10006fb6:	7b3b      	ldrb	r3, [r7, #12]
10006fb8:	09db      	lsrs	r3, r3, #7
10006fba:	b2db      	uxtb	r3, r3
  tusb_dir_t dir = tu_edpt_dir(ep_addr);
10006fbc:	72fb      	strb	r3, [r7, #11]
10006fbe:	7b7b      	ldrb	r3, [r7, #13]
10006fc0:	72bb      	strb	r3, [r7, #10]
10006fc2:	7afb      	ldrb	r3, [r7, #11]
10006fc4:	727b      	strb	r3, [r7, #9]
  return &hw_endpoints[num][dir];
10006fc6:	7aba      	ldrb	r2, [r7, #10]
10006fc8:	7a7b      	ldrb	r3, [r7, #9]
10006fca:	0052      	lsls	r2, r2, #1
10006fcc:	4413      	add	r3, r2
10006fce:	015b      	lsls	r3, r3, #5
10006fd0:	4a0b      	ldr	r2, [pc, #44]	@ (10007000 <dcd_edpt_clear_stall+0x80>)
10006fd2:	4413      	add	r3, r2
  return hw_endpoint_get_by_num(num, dir);
10006fd4:	bf00      	nop
    struct hw_endpoint* ep = hw_endpoint_get_by_addr(ep_addr);
10006fd6:	61fb      	str	r3, [r7, #28]

    // clear stall also reset toggle to DATA0, ready for next transfer
    ep->next_pid = 0;
10006fd8:	69fb      	ldr	r3, [r7, #28]
10006fda:	2200      	movs	r2, #0
10006fdc:	70da      	strb	r2, [r3, #3]
10006fde:	69fb      	ldr	r3, [r7, #28]
10006fe0:	617b      	str	r3, [r7, #20]
10006fe2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
10006fe6:	613b      	str	r3, [r7, #16]
  _hw_endpoint_buffer_control_update32(ep, ~value, 0);
10006fe8:	693b      	ldr	r3, [r7, #16]
10006fea:	43db      	mvns	r3, r3
10006fec:	2200      	movs	r2, #0
10006fee:	4619      	mov	r1, r3
10006ff0:	6978      	ldr	r0, [r7, #20]
10006ff2:	f004 f8b5 	bl	1000b160 <___hw_endpoint_buffer_control_update32_veneer>
}
10006ff6:	bf00      	nop
    _hw_endpoint_buffer_control_clear_mask32(ep, USB_BUF_CTRL_STALL);
  }
}
10006ff8:	bf00      	nop
10006ffa:	3720      	adds	r7, #32
10006ffc:	46bd      	mov	sp, r7
10006ffe:	bd80      	pop	{r7, pc}
10007000:	20002110 	.word	0x20002110

10007004 <busy_wait_at_least_cycles>:
static inline void busy_wait_at_least_cycles(uint32_t minimum_cycles) {
10007004:	b480      	push	{r7}
10007006:	b083      	sub	sp, #12
10007008:	af00      	add	r7, sp, #0
1000700a:	6078      	str	r0, [r7, #4]
    pico_default_asm_volatile (
1000700c:	687b      	ldr	r3, [r7, #4]
1000700e:	3b03      	subs	r3, #3
10007010:	d2fd      	bcs.n	1000700e <busy_wait_at_least_cycles+0xa>
10007012:	607b      	str	r3, [r7, #4]
}
10007014:	bf00      	nop
10007016:	370c      	adds	r7, #12
10007018:	46bd      	mov	sp, r7
1000701a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000701e:	4770      	bx	lr

10007020 <timer_time_us_32>:
static inline uint32_t timer_time_us_32(timer_hw_t *timer) {
10007020:	b480      	push	{r7}
10007022:	b083      	sub	sp, #12
10007024:	af00      	add	r7, sp, #0
10007026:	6078      	str	r0, [r7, #4]
    return timer->timerawl;
10007028:	687b      	ldr	r3, [r7, #4]
1000702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
1000702c:	4618      	mov	r0, r3
1000702e:	370c      	adds	r7, #12
10007030:	46bd      	mov	sp, r7
10007032:	f85d 7b04 	ldr.w	r7, [sp], #4
10007036:	4770      	bx	lr

10007038 <time_us_32>:
static inline uint32_t time_us_32(void) {
10007038:	b580      	push	{r7, lr}
1000703a:	af00      	add	r7, sp, #0
    return timer_time_us_32(PICO_DEFAULT_TIMER_INSTANCE());
1000703c:	4802      	ldr	r0, [pc, #8]	@ (10007048 <time_us_32+0x10>)
1000703e:	f7ff ffef 	bl	10007020 <timer_time_us_32>
10007042:	4603      	mov	r3, r0
}
10007044:	4618      	mov	r0, r3
10007046:	bd80      	pop	{r7, pc}
10007048:	400b0000 	.word	0x400b0000

1000704c <unaligned_memcpy>:

//--------------------------------------------------------------------+
// Implementation
//--------------------------------------------------------------------+
// Provide own byte by byte memcpy as not all copies are aligned
static void unaligned_memcpy(void *dst, const void *src, size_t n) {
1000704c:	b480      	push	{r7}
1000704e:	b087      	sub	sp, #28
10007050:	af00      	add	r7, sp, #0
10007052:	60f8      	str	r0, [r7, #12]
10007054:	60b9      	str	r1, [r7, #8]
10007056:	607a      	str	r2, [r7, #4]
  uint8_t *dst_byte = (uint8_t*)dst;
10007058:	68fb      	ldr	r3, [r7, #12]
1000705a:	617b      	str	r3, [r7, #20]
  const uint8_t *src_byte = (const uint8_t*)src;
1000705c:	68bb      	ldr	r3, [r7, #8]
1000705e:	613b      	str	r3, [r7, #16]
  while (n--) {
10007060:	e007      	b.n	10007072 <unaligned_memcpy+0x26>
    *dst_byte++ = *src_byte++;
10007062:	693a      	ldr	r2, [r7, #16]
10007064:	1c53      	adds	r3, r2, #1
10007066:	613b      	str	r3, [r7, #16]
10007068:	697b      	ldr	r3, [r7, #20]
1000706a:	1c59      	adds	r1, r3, #1
1000706c:	6179      	str	r1, [r7, #20]
1000706e:	7812      	ldrb	r2, [r2, #0]
10007070:	701a      	strb	r2, [r3, #0]
  while (n--) {
10007072:	687b      	ldr	r3, [r7, #4]
10007074:	1e5a      	subs	r2, r3, #1
10007076:	607a      	str	r2, [r7, #4]
10007078:	2b00      	cmp	r3, #0
1000707a:	d1f2      	bne.n	10007062 <unaligned_memcpy+0x16>
  }
}
1000707c:	bf00      	nop
1000707e:	bf00      	nop
10007080:	371c      	adds	r7, #28
10007082:	46bd      	mov	sp, r7
10007084:	f85d 7b04 	ldr.w	r7, [sp], #4
10007088:	4770      	bx	lr
	...

1000708c <rp2040_usb_init>:

void rp2040_usb_init(void) {
1000708c:	b580      	push	{r7, lr}
1000708e:	b08e      	sub	sp, #56	@ 0x38
10007090:	af00      	add	r7, sp, #0
10007092:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
10007096:	61bb      	str	r3, [r7, #24]
10007098:	69bb      	ldr	r3, [r7, #24]
1000709a:	617b      	str	r3, [r7, #20]
1000709c:	4b20      	ldr	r3, [pc, #128]	@ (10007120 <rp2040_usb_init+0x94>)
1000709e:	613b      	str	r3, [r7, #16]
100070a0:	697b      	ldr	r3, [r7, #20]
100070a2:	60fb      	str	r3, [r7, #12]
100070a4:	693b      	ldr	r3, [r7, #16]
100070a6:	60bb      	str	r3, [r7, #8]
100070a8:	68fb      	ldr	r3, [r7, #12]
100070aa:	607b      	str	r3, [r7, #4]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
100070ac:	68bb      	ldr	r3, [r7, #8]
100070ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
100070b2:	461a      	mov	r2, r3
100070b4:	687b      	ldr	r3, [r7, #4]
100070b6:	6013      	str	r3, [r2, #0]
}
100070b8:	bf00      	nop
}
100070ba:	bf00      	nop
}
100070bc:	bf00      	nop
}
100070be:	bf00      	nop
100070c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
100070c4:	637b      	str	r3, [r7, #52]	@ 0x34
100070c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100070c8:	633b      	str	r3, [r7, #48]	@ 0x30
100070ca:	4b15      	ldr	r3, [pc, #84]	@ (10007120 <rp2040_usb_init+0x94>)
100070cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
100070ce:	4b15      	ldr	r3, [pc, #84]	@ (10007124 <rp2040_usb_init+0x98>)
100070d0:	62bb      	str	r3, [r7, #40]	@ 0x28
100070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100070d4:	627b      	str	r3, [r7, #36]	@ 0x24
100070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100070d8:	623b      	str	r3, [r7, #32]
100070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100070dc:	61fb      	str	r3, [r7, #28]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
100070de:	6a3b      	ldr	r3, [r7, #32]
100070e0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
100070e4:	461a      	mov	r2, r3
100070e6:	69fb      	ldr	r3, [r7, #28]
100070e8:	6013      	str	r3, [r2, #0]
}
100070ea:	bf00      	nop
    while (~*reset_done & mask)
100070ec:	e000      	b.n	100070f0 <rp2040_usb_init+0x64>
static __force_inline void tight_loop_contents(void) {}
100070ee:	bf00      	nop
100070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100070f2:	681b      	ldr	r3, [r3, #0]
100070f4:	43da      	mvns	r2, r3
100070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100070f8:	4013      	ands	r3, r2
100070fa:	2b00      	cmp	r3, #0
100070fc:	d1f7      	bne.n	100070ee <rp2040_usb_init+0x62>
}
100070fe:	bf00      	nop
}
10007100:	bf00      	nop
    return unreset_block_mask_wait_blocking(bits);
10007102:	bf00      	nop
#pragma GCC diagnostic ignored "-Warray-bounds"
#if __GNUC__ > 6
#pragma GCC diagnostic ignored "-Wstringop-overflow"
#endif
#endif
  memset(usb_dpram, 0, sizeof(*usb_dpram));
10007104:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
10007108:	2100      	movs	r1, #0
1000710a:	4807      	ldr	r0, [pc, #28]	@ (10007128 <rp2040_usb_init+0x9c>)
1000710c:	f003 ffb8 	bl	1000b080 <memset>
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  // Mux the controller to the onboard usb phy
  usb_hw->muxing = USB_USB_MUXING_TO_PHY_BITS | USB_USB_MUXING_SOFTCON_BITS;
10007110:	4b06      	ldr	r3, [pc, #24]	@ (1000712c <rp2040_usb_init+0xa0>)
10007112:	2209      	movs	r2, #9
10007114:	675a      	str	r2, [r3, #116]	@ 0x74

  TU_LOG2_INT(sizeof(hw_endpoint_t));
}
10007116:	bf00      	nop
10007118:	3738      	adds	r7, #56	@ 0x38
1000711a:	46bd      	mov	sp, r7
1000711c:	bd80      	pop	{r7, pc}
1000711e:	bf00      	nop
10007120:	40020000 	.word	0x40020000
10007124:	40020008 	.word	0x40020008
10007128:	50100000 	.word	0x50100000
1000712c:	50110000 	.word	0x50110000

10007130 <hw_endpoint_xfer_start>:
  // Finally, write to buffer_control which will trigger the transfer
  // the next time the controller polls this dpram address
  _hw_endpoint_buffer_control_set_value32(ep, buf_ctrl);
}

void hw_endpoint_xfer_start(struct hw_endpoint* ep, uint8_t* buffer, uint16_t total_len) {
10007130:	b580      	push	{r7, lr}
10007132:	b088      	sub	sp, #32
10007134:	af00      	add	r7, sp, #0
10007136:	60f8      	str	r0, [r7, #12]
10007138:	60b9      	str	r1, [r7, #8]
1000713a:	4613      	mov	r3, r2
1000713c:	80fb      	strh	r3, [r7, #6]
1000713e:	68fb      	ldr	r3, [r7, #12]
10007140:	61fb      	str	r3, [r7, #28]
10007142:	2301      	movs	r3, #1
10007144:	61bb      	str	r3, [r7, #24]
}
10007146:	bf00      	nop
  hw_endpoint_lock_update(ep, 1);

  if (ep->active) {
10007148:	68fb      	ldr	r3, [r7, #12]
1000714a:	7e9b      	ldrb	r3, [r3, #26]
1000714c:	2b00      	cmp	r3, #0
1000714e:	d008      	beq.n	10007162 <hw_endpoint_xfer_start+0x32>
    // TODO: Is this acceptable for interrupt packets?
    TU_LOG(1, "WARN: starting new transfer on already active ep %02X\r\n", ep->ep_addr);
10007150:	68fb      	ldr	r3, [r7, #12]
10007152:	789b      	ldrb	r3, [r3, #2]
10007154:	4619      	mov	r1, r3
10007156:	481a      	ldr	r0, [pc, #104]	@ (100071c0 <hw_endpoint_xfer_start+0x90>)
10007158:	f7fe fe6e 	bl	10005e38 <__wrap_printf>
    hw_endpoint_reset_transfer(ep);
1000715c:	68f8      	ldr	r0, [r7, #12]
1000715e:	f003 ffe3 	bl	1000b128 <__hw_endpoint_reset_transfer_veneer>
  }

  // Fill in info now that we're kicking off the hw
  ep->remaining_len = total_len;
10007162:	68fb      	ldr	r3, [r7, #12]
10007164:	88fa      	ldrh	r2, [r7, #6]
10007166:	829a      	strh	r2, [r3, #20]
  ep->xferred_len = 0;
10007168:	68fb      	ldr	r3, [r7, #12]
1000716a:	2200      	movs	r2, #0
1000716c:	82da      	strh	r2, [r3, #22]
  ep->active = true;
1000716e:	68fb      	ldr	r3, [r7, #12]
10007170:	2201      	movs	r2, #1
10007172:	769a      	strb	r2, [r3, #26]
  ep->user_buf = buffer;
10007174:	68fb      	ldr	r3, [r7, #12]
10007176:	68ba      	ldr	r2, [r7, #8]
10007178:	611a      	str	r2, [r3, #16]

  if (e15_is_bulkin_ep(ep)) {
1000717a:	68f8      	ldr	r0, [r7, #12]
1000717c:	f003 ffe4 	bl	1000b148 <__e15_is_bulkin_ep_veneer>
10007180:	4603      	mov	r3, r0
10007182:	2b00      	cmp	r3, #0
10007184:	d004      	beq.n	10007190 <hw_endpoint_xfer_start+0x60>
    usb_hw_set->inte = USB_INTS_DEV_SOF_BITS;
10007186:	4b0f      	ldr	r3, [pc, #60]	@ (100071c4 <hw_endpoint_xfer_start+0x94>)
10007188:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
1000718c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  if (e15_is_critical_frame_period(ep)) {
10007190:	68f8      	ldr	r0, [r7, #12]
10007192:	f003 fff1 	bl	1000b178 <__e15_is_critical_frame_period_veneer>
10007196:	4603      	mov	r3, r0
10007198:	2b00      	cmp	r3, #0
1000719a:	d003      	beq.n	100071a4 <hw_endpoint_xfer_start+0x74>
    ep->pending = 1;
1000719c:	68fb      	ldr	r3, [r7, #12]
1000719e:	2201      	movs	r2, #1
100071a0:	771a      	strb	r2, [r3, #28]
100071a2:	e002      	b.n	100071aa <hw_endpoint_xfer_start+0x7a>
  } else {
    hw_endpoint_start_next_buffer(ep);
100071a4:	68f8      	ldr	r0, [r7, #12]
100071a6:	f003 ffcb 	bl	1000b140 <__hw_endpoint_start_next_buffer_veneer>
100071aa:	68fb      	ldr	r3, [r7, #12]
100071ac:	617b      	str	r3, [r7, #20]
100071ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100071b2:	613b      	str	r3, [r7, #16]
100071b4:	bf00      	nop
  }

  hw_endpoint_lock_update(ep, -1);
}
100071b6:	bf00      	nop
100071b8:	3720      	adds	r7, #32
100071ba:	46bd      	mov	sp, r7
100071bc:	bd80      	pop	{r7, pc}
100071be:	bf00      	nop
100071c0:	1000be40 	.word	0x1000be40
100071c4:	50112000 	.word	0x50112000

100071c8 <critical_section_enter_blocking>:
static inline void critical_section_enter_blocking(critical_section_t *crit_sec) {
100071c8:	b480      	push	{r7}
100071ca:	b089      	sub	sp, #36	@ 0x24
100071cc:	af00      	add	r7, sp, #0
100071ce:	6078      	str	r0, [r7, #4]
    crit_sec->save = spin_lock_blocking(crit_sec->spin_lock);
100071d0:	687b      	ldr	r3, [r7, #4]
100071d2:	681b      	ldr	r3, [r3, #0]
100071d4:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile (
100071d6:	f3ef 8310 	mrs	r3, PRIMASK
100071da:	b672      	cpsid	i
100071dc:	61bb      	str	r3, [r7, #24]
    return status;
100071de:	69bb      	ldr	r3, [r7, #24]
    uint32_t save = save_and_disable_interrupts();
100071e0:	617b      	str	r3, [r7, #20]
100071e2:	69fb      	ldr	r3, [r7, #28]
100071e4:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_LOCK(lock);
100071e6:	6939      	ldr	r1, [r7, #16]
100071e8:	e8d1 3fcf 	ldaexb	r3, [r1]
100071ec:	2201      	movs	r2, #1
100071ee:	2b00      	cmp	r3, #0
100071f0:	d1fa      	bne.n	100071e8 <critical_section_enter_blocking+0x20>
100071f2:	e8c1 2f43 	strexb	r3, r2, [r1]
100071f6:	2b00      	cmp	r3, #0
100071f8:	d1f6      	bne.n	100071e8 <critical_section_enter_blocking+0x20>
100071fa:	60fa      	str	r2, [r7, #12]
100071fc:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("dmb" : : : "memory");
100071fe:	f3bf 8f5f 	dmb	sy
}
10007202:	bf00      	nop
}
10007204:	bf00      	nop
}
10007206:	bf00      	nop
    return save;
10007208:	697a      	ldr	r2, [r7, #20]
1000720a:	687b      	ldr	r3, [r7, #4]
1000720c:	605a      	str	r2, [r3, #4]
}
1000720e:	bf00      	nop
10007210:	3724      	adds	r7, #36	@ 0x24
10007212:	46bd      	mov	sp, r7
10007214:	f85d 7b04 	ldr.w	r7, [sp], #4
10007218:	4770      	bx	lr

1000721a <critical_section_exit>:
static inline void critical_section_exit(critical_section_t *crit_sec) {
1000721a:	b480      	push	{r7}
1000721c:	b089      	sub	sp, #36	@ 0x24
1000721e:	af00      	add	r7, sp, #0
10007220:	6078      	str	r0, [r7, #4]
    spin_unlock(crit_sec->spin_lock, crit_sec->save);
10007222:	687b      	ldr	r3, [r7, #4]
10007224:	681a      	ldr	r2, [r3, #0]
10007226:	687b      	ldr	r3, [r7, #4]
10007228:	685b      	ldr	r3, [r3, #4]
1000722a:	61fa      	str	r2, [r7, #28]
1000722c:	61bb      	str	r3, [r7, #24]
1000722e:	69fb      	ldr	r3, [r7, #28]
10007230:	617b      	str	r3, [r7, #20]
    SW_SPIN_LOCK_UNLOCK(lock);
10007232:	2300      	movs	r3, #0
10007234:	613b      	str	r3, [r7, #16]
10007236:	693b      	ldr	r3, [r7, #16]
10007238:	697a      	ldr	r2, [r7, #20]
1000723a:	e8c2 3f8f 	stlb	r3, [r2]
}
1000723e:	bf00      	nop
10007240:	69bb      	ldr	r3, [r7, #24]
10007242:	60fb      	str	r3, [r7, #12]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
10007244:	68fb      	ldr	r3, [r7, #12]
10007246:	f383 8810 	msr	PRIMASK, r3
}
1000724a:	bf00      	nop
}
1000724c:	bf00      	nop
}
1000724e:	bf00      	nop
10007250:	3724      	adds	r7, #36	@ 0x24
10007252:	46bd      	mov	sp, r7
10007254:	f85d 7b04 	ldr.w	r7, [sp], #4
10007258:	4770      	bx	lr

1000725a <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
1000725a:	b480      	push	{r7}
1000725c:	b083      	sub	sp, #12
1000725e:	af00      	add	r7, sp, #0
10007260:	4603      	mov	r3, r0
10007262:	6039      	str	r1, [r7, #0]
10007264:	71fb      	strb	r3, [r7, #7]
10007266:	4613      	mov	r3, r2
10007268:	71bb      	strb	r3, [r7, #6]
  (void) rhport;
  (void) eventid;
  (void) in_isr;
}
1000726a:	bf00      	nop
1000726c:	370c      	adds	r7, #12
1000726e:	46bd      	mov	sp, r7
10007270:	f85d 7b04 	ldr.w	r7, [sp], #4
10007274:	4770      	bx	lr

10007276 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
10007276:	b480      	push	{r7}
10007278:	b083      	sub	sp, #12
1000727a:	af00      	add	r7, sp, #0
1000727c:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
1000727e:	bf00      	nop
10007280:	370c      	adds	r7, #12
10007282:	46bd      	mov	sp, r7
10007284:	f85d 7b04 	ldr.w	r7, [sp], #4
10007288:	4770      	bx	lr

1000728a <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
  return NULL;
}

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
1000728a:	b480      	push	{r7}
1000728c:	af00      	add	r7, sp, #0
  return NULL;
1000728e:	2300      	movs	r3, #0
}
10007290:	4618      	mov	r0, r3
10007292:	46bd      	mov	sp, r7
10007294:	f85d 7b04 	ldr.w	r7, [sp], #4
10007298:	4770      	bx	lr

1000729a <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
1000729a:	b480      	push	{r7}
1000729c:	b083      	sub	sp, #12
1000729e:	af00      	add	r7, sp, #0
100072a0:	4603      	mov	r3, r0
100072a2:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
100072a4:	2300      	movs	r3, #0
}
100072a6:	4618      	mov	r0, r3
100072a8:	370c      	adds	r7, #12
100072aa:	46bd      	mov	sp, r7
100072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100072b0:	4770      	bx	lr

100072b2 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
100072b2:	b480      	push	{r7}
100072b4:	af00      	add	r7, sp, #0
}
100072b6:	bf00      	nop
100072b8:	46bd      	mov	sp, r7
100072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100072be:	4770      	bx	lr

100072c0 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
100072c0:	b480      	push	{r7}
100072c2:	af00      	add	r7, sp, #0
}
100072c4:	bf00      	nop
100072c6:	46bd      	mov	sp, r7
100072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
100072cc:	4770      	bx	lr

100072ce <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
100072ce:	b480      	push	{r7}
100072d0:	b083      	sub	sp, #12
100072d2:	af00      	add	r7, sp, #0
100072d4:	4603      	mov	r3, r0
100072d6:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
100072d8:	bf00      	nop
100072da:	370c      	adds	r7, #12
100072dc:	46bd      	mov	sp, r7
100072de:	f85d 7b04 	ldr.w	r7, [sp], #4
100072e2:	4770      	bx	lr

100072e4 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
100072e4:	b480      	push	{r7}
100072e6:	af00      	add	r7, sp, #0
}
100072e8:	bf00      	nop
100072ea:	46bd      	mov	sp, r7
100072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
100072f0:	4770      	bx	lr
	...

100072f4 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
100072f4:	b480      	push	{r7}
100072f6:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
100072f8:	4b06      	ldr	r3, [pc, #24]	@ (10007314 <tud_mounted+0x20>)
100072fa:	785b      	ldrb	r3, [r3, #1]
100072fc:	b2db      	uxtb	r3, r3
100072fe:	2b00      	cmp	r3, #0
10007300:	bf14      	ite	ne
10007302:	2301      	movne	r3, #1
10007304:	2300      	moveq	r3, #0
10007306:	b2db      	uxtb	r3, r3
}
10007308:	4618      	mov	r0, r3
1000730a:	46bd      	mov	sp, r7
1000730c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007310:	4770      	bx	lr
10007312:	bf00      	nop
10007314:	20001aac 	.word	0x20001aac

10007318 <tud_suspended>:

bool tud_suspended(void) {
10007318:	b480      	push	{r7}
1000731a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
1000731c:	4b07      	ldr	r3, [pc, #28]	@ (1000733c <tud_suspended+0x24>)
1000731e:	781b      	ldrb	r3, [r3, #0]
10007320:	f3c3 0380 	ubfx	r3, r3, #2, #1
10007324:	b2db      	uxtb	r3, r3
10007326:	2b00      	cmp	r3, #0
10007328:	bf14      	ite	ne
1000732a:	2301      	movne	r3, #1
1000732c:	2300      	moveq	r3, #0
1000732e:	b2db      	uxtb	r3, r3
}
10007330:	4618      	mov	r0, r3
10007332:	46bd      	mov	sp, r7
10007334:	f85d 7b04 	ldr.w	r7, [sp], #4
10007338:	4770      	bx	lr
1000733a:	bf00      	nop
1000733c:	20001aac 	.word	0x20001aac

10007340 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
10007340:	b480      	push	{r7}
10007342:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
10007344:	4b05      	ldr	r3, [pc, #20]	@ (1000735c <tud_inited+0x1c>)
10007346:	781b      	ldrb	r3, [r3, #0]
10007348:	2bff      	cmp	r3, #255	@ 0xff
1000734a:	bf14      	ite	ne
1000734c:	2301      	movne	r3, #1
1000734e:	2300      	moveq	r3, #0
10007350:	b2db      	uxtb	r3, r3
}
10007352:	4618      	mov	r0, r3
10007354:	46bd      	mov	sp, r7
10007356:	f85d 7b04 	ldr.w	r7, [sp], #4
1000735a:	4770      	bx	lr
1000735c:	200015a4 	.word	0x200015a4

10007360 <tud_init>:

bool tud_init(uint8_t rhport) {
10007360:	b580      	push	{r7, lr}
10007362:	b08c      	sub	sp, #48	@ 0x30
10007364:	af00      	add	r7, sp, #0
10007366:	4603      	mov	r3, r0
10007368:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if (tud_inited()) return true;
1000736a:	f7ff ffe9 	bl	10007340 <tud_inited>
1000736e:	4603      	mov	r3, r0
10007370:	2b00      	cmp	r3, #0
10007372:	d001      	beq.n	10007378 <tud_init+0x18>
10007374:	2301      	movs	r3, #1
10007376:	e0a8      	b.n	100074ca <tud_init+0x16a>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
10007378:	2254      	movs	r2, #84	@ 0x54
1000737a:	2100      	movs	r1, #0
1000737c:	4855      	ldr	r0, [pc, #340]	@ (100074d4 <tud_init+0x174>)
1000737e:	f003 fe7f 	bl	1000b080 <memset>
  _usbd_queued_setup = 0;
10007382:	4b55      	ldr	r3, [pc, #340]	@ (100074d8 <tud_init+0x178>)
10007384:	2200      	movs	r2, #0
10007386:	701a      	strb	r2, [r3, #0]
10007388:	4b54      	ldr	r3, [pc, #336]	@ (100074dc <tud_init+0x17c>)
1000738a:	61bb      	str	r3, [r7, #24]
// Within tinyusb, mutex is never used in ISR context
//--------------------------------------------------------------------+
typedef struct mutex osal_mutex_def_t, * osal_mutex_t;

TU_ATTR_ALWAYS_INLINE static inline osal_mutex_t osal_mutex_create(osal_mutex_def_t* mdef) {
  mutex_init(mdef);
1000738c:	69b8      	ldr	r0, [r7, #24]
1000738e:	f7fa fb65 	bl	10001a5c <mutex_init>
  return mdef;
10007392:	69bb      	ldr	r3, [r7, #24]

#if OSAL_MUTEX_REQUIRED
  // Init device mutex
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
10007394:	4a52      	ldr	r2, [pc, #328]	@ (100074e0 <tud_init+0x180>)
10007396:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_mutex);
10007398:	4b51      	ldr	r3, [pc, #324]	@ (100074e0 <tud_init+0x180>)
1000739a:	681b      	ldr	r3, [r3, #0]
1000739c:	2b00      	cmp	r3, #0
1000739e:	d110      	bne.n	100073c2 <tud_init+0x62>
100073a0:	f240 12d3 	movw	r2, #467	@ 0x1d3
100073a4:	494f      	ldr	r1, [pc, #316]	@ (100074e4 <tud_init+0x184>)
100073a6:	4850      	ldr	r0, [pc, #320]	@ (100074e8 <tud_init+0x188>)
100073a8:	f7fe fd46 	bl	10005e38 <__wrap_printf>
100073ac:	4b4f      	ldr	r3, [pc, #316]	@ (100074ec <tud_init+0x18c>)
100073ae:	61fb      	str	r3, [r7, #28]
100073b0:	69fb      	ldr	r3, [r7, #28]
100073b2:	681b      	ldr	r3, [r3, #0]
100073b4:	f003 0301 	and.w	r3, r3, #1
100073b8:	2b00      	cmp	r3, #0
100073ba:	d000      	beq.n	100073be <tud_init+0x5e>
100073bc:	be00      	bkpt	0x0000
100073be:	2300      	movs	r3, #0
100073c0:	e083      	b.n	100074ca <tud_init+0x16a>
100073c2:	4b4b      	ldr	r3, [pc, #300]	@ (100074f0 <tud_init+0x190>)
100073c4:	617b      	str	r3, [r7, #20]
  osal_queue_def_t _name = {                              \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  critical_section_init(&qdef->critsec);
100073c6:	697b      	ldr	r3, [r7, #20]
100073c8:	3314      	adds	r3, #20
100073ca:	4618      	mov	r0, r3
100073cc:	f7fa fb77 	bl	10001abe <critical_section_init>
  tu_fifo_clear(&qdef->ff);
100073d0:	697b      	ldr	r3, [r7, #20]
100073d2:	4618      	mov	r0, r3
100073d4:	f003 fbd8 	bl	1000ab88 <tu_fifo_clear>
  return (osal_queue_t) qdef;
100073d8:	697b      	ldr	r3, [r7, #20]
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
100073da:	4a46      	ldr	r2, [pc, #280]	@ (100074f4 <tud_init+0x194>)
100073dc:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
100073de:	4b45      	ldr	r3, [pc, #276]	@ (100074f4 <tud_init+0x194>)
100073e0:	681b      	ldr	r3, [r3, #0]
100073e2:	2b00      	cmp	r3, #0
100073e4:	d110      	bne.n	10007408 <tud_init+0xa8>
100073e6:	f44f 72ec 	mov.w	r2, #472	@ 0x1d8
100073ea:	493e      	ldr	r1, [pc, #248]	@ (100074e4 <tud_init+0x184>)
100073ec:	483e      	ldr	r0, [pc, #248]	@ (100074e8 <tud_init+0x188>)
100073ee:	f7fe fd23 	bl	10005e38 <__wrap_printf>
100073f2:	4b3e      	ldr	r3, [pc, #248]	@ (100074ec <tud_init+0x18c>)
100073f4:	623b      	str	r3, [r7, #32]
100073f6:	6a3b      	ldr	r3, [r7, #32]
100073f8:	681b      	ldr	r3, [r3, #0]
100073fa:	f003 0301 	and.w	r3, r3, #1
100073fe:	2b00      	cmp	r3, #0
10007400:	d000      	beq.n	10007404 <tud_init+0xa4>
10007402:	be00      	bkpt	0x0000
10007404:	2300      	movs	r3, #0
10007406:	e060      	b.n	100074ca <tud_init+0x16a>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
10007408:	4b3b      	ldr	r3, [pc, #236]	@ (100074f8 <tud_init+0x198>)
1000740a:	2b00      	cmp	r3, #0
1000740c:	d005      	beq.n	1000741a <tud_init+0xba>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
1000740e:	483b      	ldr	r0, [pc, #236]	@ (100074fc <tud_init+0x19c>)
10007410:	f7fe fdfc 	bl	1000600c <usbd_app_driver_get_cb>
10007414:	4603      	mov	r3, r0
10007416:	4a3a      	ldr	r2, [pc, #232]	@ (10007500 <tud_init+0x1a0>)
10007418:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
1000741a:	2300      	movs	r3, #0
1000741c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
10007420:	e040      	b.n	100074a4 <tud_init+0x144>
10007422:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
10007426:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
10007428:	2300      	movs	r3, #0
1000742a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
1000742c:	4b33      	ldr	r3, [pc, #204]	@ (100074fc <tud_init+0x19c>)
1000742e:	781b      	ldrb	r3, [r3, #0]
10007430:	7cfa      	ldrb	r2, [r7, #19]
10007432:	429a      	cmp	r2, r3
10007434:	d206      	bcs.n	10007444 <tud_init+0xe4>
    driver = &_app_driver[drvid];
10007436:	4b32      	ldr	r3, [pc, #200]	@ (10007500 <tud_init+0x1a0>)
10007438:	681a      	ldr	r2, [r3, #0]
1000743a:	7cfb      	ldrb	r3, [r7, #19]
1000743c:	015b      	lsls	r3, r3, #5
1000743e:	4413      	add	r3, r2
10007440:	60fb      	str	r3, [r7, #12]
10007442:	e00d      	b.n	10007460 <tud_init+0x100>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
10007444:	4b2d      	ldr	r3, [pc, #180]	@ (100074fc <tud_init+0x19c>)
10007446:	781b      	ldrb	r3, [r3, #0]
10007448:	1c5a      	adds	r2, r3, #1
1000744a:	7cfb      	ldrb	r3, [r7, #19]
1000744c:	429a      	cmp	r2, r3
1000744e:	db07      	blt.n	10007460 <tud_init+0x100>
    driver = &_usbd_driver[drvid - _app_driver_count];
10007450:	7cfb      	ldrb	r3, [r7, #19]
10007452:	4a2a      	ldr	r2, [pc, #168]	@ (100074fc <tud_init+0x19c>)
10007454:	7812      	ldrb	r2, [r2, #0]
10007456:	1a9b      	subs	r3, r3, r2
10007458:	015b      	lsls	r3, r3, #5
1000745a:	4a2a      	ldr	r2, [pc, #168]	@ (10007504 <tud_init+0x1a4>)
1000745c:	4413      	add	r3, r2
1000745e:	60fb      	str	r3, [r7, #12]
  return driver;
10007460:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
10007462:	62bb      	str	r3, [r7, #40]	@ 0x28
    TU_ASSERT(driver && driver->init);
10007464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007466:	2b00      	cmp	r3, #0
10007468:	d003      	beq.n	10007472 <tud_init+0x112>
1000746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000746c:	685b      	ldr	r3, [r3, #4]
1000746e:	2b00      	cmp	r3, #0
10007470:	d110      	bne.n	10007494 <tud_init+0x134>
10007472:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
10007476:	491b      	ldr	r1, [pc, #108]	@ (100074e4 <tud_init+0x184>)
10007478:	481b      	ldr	r0, [pc, #108]	@ (100074e8 <tud_init+0x188>)
1000747a:	f7fe fcdd 	bl	10005e38 <__wrap_printf>
1000747e:	4b1b      	ldr	r3, [pc, #108]	@ (100074ec <tud_init+0x18c>)
10007480:	627b      	str	r3, [r7, #36]	@ 0x24
10007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10007484:	681b      	ldr	r3, [r3, #0]
10007486:	f003 0301 	and.w	r3, r3, #1
1000748a:	2b00      	cmp	r3, #0
1000748c:	d000      	beq.n	10007490 <tud_init+0x130>
1000748e:	be00      	bkpt	0x0000
10007490:	2300      	movs	r3, #0
10007492:	e01a      	b.n	100074ca <tud_init+0x16a>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
10007494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10007496:	685b      	ldr	r3, [r3, #4]
10007498:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
1000749a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
1000749e:	3301      	adds	r3, #1
100074a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
100074a4:	4b15      	ldr	r3, [pc, #84]	@ (100074fc <tud_init+0x19c>)
100074a6:	781b      	ldrb	r3, [r3, #0]
100074a8:	1c5a      	adds	r2, r3, #1
100074aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
100074ae:	429a      	cmp	r2, r3
100074b0:	dab7      	bge.n	10007422 <tud_init+0xc2>
  }

  _usbd_rhport = rhport;
100074b2:	4a15      	ldr	r2, [pc, #84]	@ (10007508 <tud_init+0x1a8>)
100074b4:	79fb      	ldrb	r3, [r7, #7]
100074b6:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
100074b8:	79fb      	ldrb	r3, [r7, #7]
100074ba:	4618      	mov	r0, r3
100074bc:	f7ff fbd2 	bl	10006c64 <dcd_init>
  dcd_int_enable(rhport);
100074c0:	79fb      	ldrb	r3, [r7, #7]
100074c2:	4618      	mov	r0, r3
100074c4:	f7ff fc1a 	bl	10006cfc <dcd_int_enable>

  return true;
100074c8:	2301      	movs	r3, #1
}
100074ca:	4618      	mov	r0, r3
100074cc:	3730      	adds	r7, #48	@ 0x30
100074ce:	46bd      	mov	sp, r7
100074d0:	bd80      	pop	{r7, pc}
100074d2:	bf00      	nop
100074d4:	20001aac 	.word	0x20001aac
100074d8:	20002583 	.word	0x20002583
100074dc:	20001a64 	.word	0x20001a64
100074e0:	20001b00 	.word	0x20001b00
100074e4:	1000bfa0 	.word	0x1000bfa0
100074e8:	1000bf88 	.word	0x1000bf88
100074ec:	e000edf0 	.word	0xe000edf0
100074f0:	200015a8 	.word	0x200015a8
100074f4:	20001b04 	.word	0x20001b04
100074f8:	1000600d 	.word	0x1000600d
100074fc:	20002581 	.word	0x20002581
10007500:	20001760 	.word	0x20001760
10007504:	1000bf48 	.word	0x1000bf48
10007508:	200015a4 	.word	0x200015a4

1000750c <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
1000750c:	b580      	push	{r7, lr}
1000750e:	b088      	sub	sp, #32
10007510:	af00      	add	r7, sp, #0
10007512:	4603      	mov	r3, r0
10007514:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
10007516:	2300      	movs	r3, #0
10007518:	77fb      	strb	r3, [r7, #31]
1000751a:	e03a      	b.n	10007592 <configuration_reset+0x86>
1000751c:	7ffb      	ldrb	r3, [r7, #31]
1000751e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
10007520:	2300      	movs	r3, #0
10007522:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
10007524:	4b28      	ldr	r3, [pc, #160]	@ (100075c8 <configuration_reset+0xbc>)
10007526:	781b      	ldrb	r3, [r3, #0]
10007528:	7cfa      	ldrb	r2, [r7, #19]
1000752a:	429a      	cmp	r2, r3
1000752c:	d206      	bcs.n	1000753c <configuration_reset+0x30>
    driver = &_app_driver[drvid];
1000752e:	4b27      	ldr	r3, [pc, #156]	@ (100075cc <configuration_reset+0xc0>)
10007530:	681a      	ldr	r2, [r3, #0]
10007532:	7cfb      	ldrb	r3, [r7, #19]
10007534:	015b      	lsls	r3, r3, #5
10007536:	4413      	add	r3, r2
10007538:	60fb      	str	r3, [r7, #12]
1000753a:	e00d      	b.n	10007558 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
1000753c:	4b22      	ldr	r3, [pc, #136]	@ (100075c8 <configuration_reset+0xbc>)
1000753e:	781b      	ldrb	r3, [r3, #0]
10007540:	1c5a      	adds	r2, r3, #1
10007542:	7cfb      	ldrb	r3, [r7, #19]
10007544:	429a      	cmp	r2, r3
10007546:	db07      	blt.n	10007558 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
10007548:	7cfb      	ldrb	r3, [r7, #19]
1000754a:	4a1f      	ldr	r2, [pc, #124]	@ (100075c8 <configuration_reset+0xbc>)
1000754c:	7812      	ldrb	r2, [r2, #0]
1000754e:	1a9b      	subs	r3, r3, r2
10007550:	015b      	lsls	r3, r3, #5
10007552:	4a1f      	ldr	r2, [pc, #124]	@ (100075d0 <configuration_reset+0xc4>)
10007554:	4413      	add	r3, r2
10007556:	60fb      	str	r3, [r7, #12]
  return driver;
10007558:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
1000755a:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
1000755c:	69bb      	ldr	r3, [r7, #24]
1000755e:	2b00      	cmp	r3, #0
10007560:	d10f      	bne.n	10007582 <configuration_reset+0x76>
10007562:	f240 2216 	movw	r2, #534	@ 0x216
10007566:	491b      	ldr	r1, [pc, #108]	@ (100075d4 <configuration_reset+0xc8>)
10007568:	481b      	ldr	r0, [pc, #108]	@ (100075d8 <configuration_reset+0xcc>)
1000756a:	f7fe fc65 	bl	10005e38 <__wrap_printf>
1000756e:	4b1b      	ldr	r3, [pc, #108]	@ (100075dc <configuration_reset+0xd0>)
10007570:	617b      	str	r3, [r7, #20]
10007572:	697b      	ldr	r3, [r7, #20]
10007574:	681b      	ldr	r3, [r3, #0]
10007576:	f003 0301 	and.w	r3, r3, #1
1000757a:	2b00      	cmp	r3, #0
1000757c:	d01f      	beq.n	100075be <configuration_reset+0xb2>
1000757e:	be00      	bkpt	0x0000
10007580:	e01d      	b.n	100075be <configuration_reset+0xb2>
    driver->reset(rhport);
10007582:	69bb      	ldr	r3, [r7, #24]
10007584:	68db      	ldr	r3, [r3, #12]
10007586:	79fa      	ldrb	r2, [r7, #7]
10007588:	4610      	mov	r0, r2
1000758a:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
1000758c:	7ffb      	ldrb	r3, [r7, #31]
1000758e:	3301      	adds	r3, #1
10007590:	77fb      	strb	r3, [r7, #31]
10007592:	4b0d      	ldr	r3, [pc, #52]	@ (100075c8 <configuration_reset+0xbc>)
10007594:	781b      	ldrb	r3, [r3, #0]
10007596:	1c5a      	adds	r2, r3, #1
10007598:	7ffb      	ldrb	r3, [r7, #31]
1000759a:	429a      	cmp	r2, r3
1000759c:	dabe      	bge.n	1000751c <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
1000759e:	2254      	movs	r2, #84	@ 0x54
100075a0:	2100      	movs	r1, #0
100075a2:	480f      	ldr	r0, [pc, #60]	@ (100075e0 <configuration_reset+0xd4>)
100075a4:	f003 fd6c 	bl	1000b080 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
100075a8:	2210      	movs	r2, #16
100075aa:	21ff      	movs	r1, #255	@ 0xff
100075ac:	480d      	ldr	r0, [pc, #52]	@ (100075e4 <configuration_reset+0xd8>)
100075ae:	f003 fd67 	bl	1000b080 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
100075b2:	2220      	movs	r2, #32
100075b4:	21ff      	movs	r1, #255	@ 0xff
100075b6:	480c      	ldr	r0, [pc, #48]	@ (100075e8 <configuration_reset+0xdc>)
100075b8:	f003 fd62 	bl	1000b080 <memset>
100075bc:	e000      	b.n	100075c0 <configuration_reset+0xb4>
    TU_ASSERT(driver,);
100075be:	bf00      	nop
}
100075c0:	3720      	adds	r7, #32
100075c2:	46bd      	mov	sp, r7
100075c4:	bd80      	pop	{r7, pc}
100075c6:	bf00      	nop
100075c8:	20002581 	.word	0x20002581
100075cc:	20001760 	.word	0x20001760
100075d0:	1000bf48 	.word	0x1000bf48
100075d4:	1000bfac 	.word	0x1000bfac
100075d8:	1000bf88 	.word	0x1000bf88
100075dc:	e000edf0 	.word	0xe000edf0
100075e0:	20001aac 	.word	0x20001aac
100075e4:	20001ab0 	.word	0x20001ab0
100075e8:	20001ac0 	.word	0x20001ac0

100075ec <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
100075ec:	b580      	push	{r7, lr}
100075ee:	b082      	sub	sp, #8
100075f0:	af00      	add	r7, sp, #0
100075f2:	4603      	mov	r3, r0
100075f4:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
100075f6:	79fb      	ldrb	r3, [r7, #7]
100075f8:	4618      	mov	r0, r3
100075fa:	f7ff ff87 	bl	1000750c <configuration_reset>
  usbd_control_reset();
100075fe:	f001 fa71 	bl	10008ae4 <usbd_control_reset>
}
10007602:	bf00      	nop
10007604:	3708      	adds	r7, #8
10007606:	46bd      	mov	sp, r7
10007608:	bd80      	pop	{r7, pc}
	...

1000760c <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
1000760c:	b590      	push	{r4, r7, lr}
1000760e:	b093      	sub	sp, #76	@ 0x4c
10007610:	af00      	add	r7, sp, #0
10007612:	6078      	str	r0, [r7, #4]
10007614:	460b      	mov	r3, r1
10007616:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
10007618:	f7ff fe92 	bl	10007340 <tud_inited>
1000761c:	4603      	mov	r3, r0
1000761e:	f083 0301 	eor.w	r3, r3, #1
10007622:	b2db      	uxtb	r3, r3
10007624:	2b00      	cmp	r3, #0
10007626:	f040 819b 	bne.w	10007960 <tud_task_ext+0x354>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
1000762a:	4bac      	ldr	r3, [pc, #688]	@ (100078dc <tud_task_ext+0x2d0>)
1000762c:	681b      	ldr	r3, [r3, #0]
1000762e:	633b      	str	r3, [r7, #48]	@ 0x30
10007630:	f107 030c 	add.w	r3, r7, #12
10007634:	62fb      	str	r3, [r7, #44]	@ 0x2c
10007636:	687b      	ldr	r3, [r7, #4]
10007638:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  critical_section_enter_blocking(&qhdl->critsec);
1000763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000763c:	3314      	adds	r3, #20
1000763e:	4618      	mov	r0, r3
10007640:	f7ff fdc2 	bl	100071c8 <critical_section_enter_blocking>
  bool success = tu_fifo_read(&qhdl->ff, data);
10007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10007646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
10007648:	4618      	mov	r0, r3
1000764a:	f003 f9d7 	bl	1000a9fc <tu_fifo_read>
1000764e:	4603      	mov	r3, r0
10007650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  critical_section_exit(&qhdl->critsec);
10007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10007656:	3314      	adds	r3, #20
10007658:	4618      	mov	r0, r3
1000765a:	f7ff fdde 	bl	1000721a <critical_section_exit>

  return success;
1000765e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10007662:	f083 0301 	eor.w	r3, r3, #1
10007666:	b2db      	uxtb	r3, r3
10007668:	2b00      	cmp	r3, #0
1000766a:	f040 817b 	bne.w	10007964 <tud_task_ext+0x358>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
1000766e:	7b7b      	ldrb	r3, [r7, #13]
10007670:	3b01      	subs	r3, #1
10007672:	2b07      	cmp	r3, #7
10007674:	f200 815c 	bhi.w	10007930 <tud_task_ext+0x324>
10007678:	a201      	add	r2, pc, #4	@ (adr r2, 10007680 <tud_task_ext+0x74>)
1000767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000767e:	bf00      	nop
10007680:	100076a1 	.word	0x100076a1
10007684:	100076b1 	.word	0x100076b1
10007688:	10007901 	.word	0x10007901
1000768c:	1000788f 	.word	0x1000788f
10007690:	100078b9 	.word	0x100078b9
10007694:	100076bf 	.word	0x100076bf
10007698:	1000777b 	.word	0x1000777b
1000769c:	100078cd 	.word	0x100078cd
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
100076a0:	7b3b      	ldrb	r3, [r7, #12]
100076a2:	4618      	mov	r0, r3
100076a4:	f7ff ffa2 	bl	100075ec <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
100076a8:	7c3a      	ldrb	r2, [r7, #16]
100076aa:	4b8d      	ldr	r3, [pc, #564]	@ (100078e0 <tud_task_ext+0x2d4>)
100076ac:	709a      	strb	r2, [r3, #2]
        break;
100076ae:	e156      	b.n	1000795e <tud_task_ext+0x352>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
100076b0:	7b3b      	ldrb	r3, [r7, #12]
100076b2:	4618      	mov	r0, r3
100076b4:	f7ff ff9a 	bl	100075ec <usbd_reset>
        tud_umount_cb();
100076b8:	f7ff fe02 	bl	100072c0 <tud_umount_cb>
        break;
100076bc:	e14f      	b.n	1000795e <tud_task_ext+0x352>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
100076be:	4b89      	ldr	r3, [pc, #548]	@ (100078e4 <tud_task_ext+0x2d8>)
100076c0:	781b      	ldrb	r3, [r3, #0]
100076c2:	b2db      	uxtb	r3, r3
100076c4:	2b00      	cmp	r3, #0
100076c6:	d110      	bne.n	100076ea <tud_task_ext+0xde>
100076c8:	f240 2256 	movw	r2, #598	@ 0x256
100076cc:	4986      	ldr	r1, [pc, #536]	@ (100078e8 <tud_task_ext+0x2dc>)
100076ce:	4887      	ldr	r0, [pc, #540]	@ (100078ec <tud_task_ext+0x2e0>)
100076d0:	f7fe fbb2 	bl	10005e38 <__wrap_printf>
100076d4:	4b86      	ldr	r3, [pc, #536]	@ (100078f0 <tud_task_ext+0x2e4>)
100076d6:	63bb      	str	r3, [r7, #56]	@ 0x38
100076d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100076da:	681b      	ldr	r3, [r3, #0]
100076dc:	f003 0301 	and.w	r3, r3, #1
100076e0:	2b00      	cmp	r3, #0
100076e2:	f000 8141 	beq.w	10007968 <tud_task_ext+0x35c>
100076e6:	be00      	bkpt	0x0000
100076e8:	e13e      	b.n	10007968 <tud_task_ext+0x35c>
        _usbd_queued_setup--;
100076ea:	4b7e      	ldr	r3, [pc, #504]	@ (100078e4 <tud_task_ext+0x2d8>)
100076ec:	781b      	ldrb	r3, [r3, #0]
100076ee:	b2db      	uxtb	r3, r3
100076f0:	3b01      	subs	r3, #1
100076f2:	b2da      	uxtb	r2, r3
100076f4:	4b7b      	ldr	r3, [pc, #492]	@ (100078e4 <tud_task_ext+0x2d8>)
100076f6:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
100076f8:	4b7a      	ldr	r3, [pc, #488]	@ (100078e4 <tud_task_ext+0x2d8>)
100076fa:	781b      	ldrb	r3, [r3, #0]
100076fc:	b2db      	uxtb	r3, r3
100076fe:	2b00      	cmp	r3, #0
10007700:	f040 8120 	bne.w	10007944 <tud_task_ext+0x338>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
10007704:	4a76      	ldr	r2, [pc, #472]	@ (100078e0 <tud_task_ext+0x2d4>)
10007706:	7813      	ldrb	r3, [r2, #0]
10007708:	f043 0301 	orr.w	r3, r3, #1
1000770c:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
1000770e:	4a74      	ldr	r2, [pc, #464]	@ (100078e0 <tud_task_ext+0x2d4>)
10007710:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
10007714:	f023 0301 	bic.w	r3, r3, #1
10007718:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
1000771c:	4a70      	ldr	r2, [pc, #448]	@ (100078e0 <tud_task_ext+0x2d4>)
1000771e:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
10007722:	f023 0304 	bic.w	r3, r3, #4
10007726:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
1000772a:	4a6d      	ldr	r2, [pc, #436]	@ (100078e0 <tud_task_ext+0x2d4>)
1000772c:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
10007730:	f023 0301 	bic.w	r3, r3, #1
10007734:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
10007738:	4a69      	ldr	r2, [pc, #420]	@ (100078e0 <tud_task_ext+0x2d4>)
1000773a:	f892 3035 	ldrb.w	r3, [r2, #53]	@ 0x35
1000773e:	f023 0304 	bic.w	r3, r3, #4
10007742:	f882 3035 	strb.w	r3, [r2, #53]	@ 0x35

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
10007746:	7b3a      	ldrb	r2, [r7, #12]
10007748:	f107 030c 	add.w	r3, r7, #12
1000774c:	3304      	adds	r3, #4
1000774e:	4619      	mov	r1, r3
10007750:	4610      	mov	r0, r2
10007752:	f000 f92b 	bl	100079ac <process_control_request>
10007756:	4603      	mov	r3, r0
10007758:	f083 0301 	eor.w	r3, r3, #1
1000775c:	b2db      	uxtb	r3, r3
1000775e:	2b00      	cmp	r3, #0
10007760:	f000 80f2 	beq.w	10007948 <tud_task_ext+0x33c>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
10007764:	7b3b      	ldrb	r3, [r7, #12]
10007766:	2100      	movs	r1, #0
10007768:	4618      	mov	r0, r3
1000776a:	f7ff fbbd 	bl	10006ee8 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
1000776e:	7b3b      	ldrb	r3, [r7, #12]
10007770:	2180      	movs	r1, #128	@ 0x80
10007772:	4618      	mov	r0, r3
10007774:	f7ff fbb8 	bl	10006ee8 <dcd_edpt_stall>
        }
        break;
10007778:	e0e6      	b.n	10007948 <tud_task_ext+0x33c>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
1000777a:	7c3b      	ldrb	r3, [r7, #16]
1000777c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
10007780:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
10007784:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10007788:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
1000778c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10007790:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
10007792:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
10007796:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
1000779a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
1000779e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
100077a2:	09db      	lsrs	r3, r3, #7
100077a4:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
100077a6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
100077aa:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
100077ae:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
100077b2:	494b      	ldr	r1, [pc, #300]	@ (100078e0 <tud_task_ext+0x2d4>)
100077b4:	0052      	lsls	r2, r2, #1
100077b6:	440a      	add	r2, r1
100077b8:	4413      	add	r3, r2
100077ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
100077be:	7913      	ldrb	r3, [r2, #4]
100077c0:	f023 0301 	bic.w	r3, r3, #1
100077c4:	7113      	strb	r3, [r2, #4]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
100077c6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
100077ca:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
100077ce:	4944      	ldr	r1, [pc, #272]	@ (100078e0 <tud_task_ext+0x2d4>)
100077d0:	0052      	lsls	r2, r2, #1
100077d2:	440a      	add	r2, r1
100077d4:	4413      	add	r3, r2
100077d6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
100077da:	7913      	ldrb	r3, [r2, #4]
100077dc:	f023 0304 	bic.w	r3, r3, #4
100077e0:	7113      	strb	r3, [r2, #4]

        if (0 == epnum) {
100077e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
100077e6:	2b00      	cmp	r3, #0
100077e8:	d107      	bne.n	100077fa <tud_task_ext+0x1ee>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
100077ea:	7b38      	ldrb	r0, [r7, #12]
100077ec:	7c7a      	ldrb	r2, [r7, #17]
100077ee:	697b      	ldr	r3, [r7, #20]
100077f0:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
100077f4:	f001 f9ac 	bl	10008b50 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
100077f8:	e0b1      	b.n	1000795e <tud_task_ext+0x352>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
100077fa:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
100077fe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
10007802:	4937      	ldr	r1, [pc, #220]	@ (100078e0 <tud_task_ext+0x2d4>)
10007804:	0052      	lsls	r2, r2, #1
10007806:	440a      	add	r2, r1
10007808:	4413      	add	r3, r2
1000780a:	3314      	adds	r3, #20
1000780c:	781b      	ldrb	r3, [r3, #0]
1000780e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
10007812:	2300      	movs	r3, #0
10007814:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
10007816:	4b37      	ldr	r3, [pc, #220]	@ (100078f4 <tud_task_ext+0x2e8>)
10007818:	781b      	ldrb	r3, [r3, #0]
1000781a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
1000781e:	429a      	cmp	r2, r3
10007820:	d207      	bcs.n	10007832 <tud_task_ext+0x226>
    driver = &_app_driver[drvid];
10007822:	4b35      	ldr	r3, [pc, #212]	@ (100078f8 <tud_task_ext+0x2ec>)
10007824:	681a      	ldr	r2, [r3, #0]
10007826:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
1000782a:	015b      	lsls	r3, r3, #5
1000782c:	4413      	add	r3, r2
1000782e:	623b      	str	r3, [r7, #32]
10007830:	e00f      	b.n	10007852 <tud_task_ext+0x246>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
10007832:	4b30      	ldr	r3, [pc, #192]	@ (100078f4 <tud_task_ext+0x2e8>)
10007834:	781b      	ldrb	r3, [r3, #0]
10007836:	1c5a      	adds	r2, r3, #1
10007838:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
1000783c:	429a      	cmp	r2, r3
1000783e:	db08      	blt.n	10007852 <tud_task_ext+0x246>
    driver = &_usbd_driver[drvid - _app_driver_count];
10007840:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
10007844:	4a2b      	ldr	r2, [pc, #172]	@ (100078f4 <tud_task_ext+0x2e8>)
10007846:	7812      	ldrb	r2, [r2, #0]
10007848:	1a9b      	subs	r3, r3, r2
1000784a:	015b      	lsls	r3, r3, #5
1000784c:	4a2b      	ldr	r2, [pc, #172]	@ (100078fc <tud_task_ext+0x2f0>)
1000784e:	4413      	add	r3, r2
10007850:	623b      	str	r3, [r7, #32]
  return driver;
10007852:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
10007854:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
10007856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10007858:	2b00      	cmp	r3, #0
1000785a:	d10f      	bne.n	1000787c <tud_task_ext+0x270>
1000785c:	f240 2281 	movw	r2, #641	@ 0x281
10007860:	4921      	ldr	r1, [pc, #132]	@ (100078e8 <tud_task_ext+0x2dc>)
10007862:	4822      	ldr	r0, [pc, #136]	@ (100078ec <tud_task_ext+0x2e0>)
10007864:	f7fe fae8 	bl	10005e38 <__wrap_printf>
10007868:	4b21      	ldr	r3, [pc, #132]	@ (100078f0 <tud_task_ext+0x2e4>)
1000786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
1000786c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1000786e:	681b      	ldr	r3, [r3, #0]
10007870:	f003 0301 	and.w	r3, r3, #1
10007874:	2b00      	cmp	r3, #0
10007876:	d079      	beq.n	1000796c <tud_task_ext+0x360>
10007878:	be00      	bkpt	0x0000
1000787a:	e077      	b.n	1000796c <tud_task_ext+0x360>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
1000787c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000787e:	699c      	ldr	r4, [r3, #24]
10007880:	7b38      	ldrb	r0, [r7, #12]
10007882:	7c7a      	ldrb	r2, [r7, #17]
10007884:	697b      	ldr	r3, [r7, #20]
10007886:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
1000788a:	47a0      	blx	r4
        break;
1000788c:	e067      	b.n	1000795e <tud_task_ext+0x352>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
1000788e:	4b14      	ldr	r3, [pc, #80]	@ (100078e0 <tud_task_ext+0x2d4>)
10007890:	781b      	ldrb	r3, [r3, #0]
10007892:	f3c3 0300 	ubfx	r3, r3, #0, #1
10007896:	b2db      	uxtb	r3, r3
10007898:	2b00      	cmp	r3, #0
1000789a:	d057      	beq.n	1000794c <tud_task_ext+0x340>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
1000789c:	4b10      	ldr	r3, [pc, #64]	@ (100078e0 <tud_task_ext+0x2d4>)
1000789e:	781b      	ldrb	r3, [r3, #0]
100078a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
100078a4:	b2db      	uxtb	r3, r3
100078a6:	2b00      	cmp	r3, #0
100078a8:	bf14      	ite	ne
100078aa:	2301      	movne	r3, #1
100078ac:	2300      	moveq	r3, #0
100078ae:	b2db      	uxtb	r3, r3
100078b0:	4618      	mov	r0, r3
100078b2:	f7ff fd0c 	bl	100072ce <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
100078b6:	e049      	b.n	1000794c <tud_task_ext+0x340>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
100078b8:	4b09      	ldr	r3, [pc, #36]	@ (100078e0 <tud_task_ext+0x2d4>)
100078ba:	781b      	ldrb	r3, [r3, #0]
100078bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
100078c0:	b2db      	uxtb	r3, r3
100078c2:	2b00      	cmp	r3, #0
100078c4:	d044      	beq.n	10007950 <tud_task_ext+0x344>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
100078c6:	f7ff fd0d 	bl	100072e4 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
100078ca:	e041      	b.n	10007950 <tud_task_ext+0x344>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) event.func_call.func(event.func_call.param);
100078cc:	693b      	ldr	r3, [r7, #16]
100078ce:	2b00      	cmp	r3, #0
100078d0:	d040      	beq.n	10007954 <tud_task_ext+0x348>
100078d2:	693b      	ldr	r3, [r7, #16]
100078d4:	697a      	ldr	r2, [r7, #20]
100078d6:	4610      	mov	r0, r2
100078d8:	4798      	blx	r3
        break;
100078da:	e03b      	b.n	10007954 <tud_task_ext+0x348>
100078dc:	20001b04 	.word	0x20001b04
100078e0:	20001aac 	.word	0x20001aac
100078e4:	20002583 	.word	0x20002583
100078e8:	1000bfc0 	.word	0x1000bfc0
100078ec:	1000bf88 	.word	0x1000bf88
100078f0:	e000edf0 	.word	0xe000edf0
100078f4:	20002581 	.word	0x20002581
100078f8:	20001760 	.word	0x20001760
100078fc:	1000bf48 	.word	0x1000bf48

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
10007900:	4b1c      	ldr	r3, [pc, #112]	@ (10007974 <tud_task_ext+0x368>)
10007902:	78db      	ldrb	r3, [r3, #3]
10007904:	b2db      	uxtb	r3, r3
10007906:	61fb      	str	r3, [r7, #28]
10007908:	2300      	movs	r3, #0
1000790a:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
1000790c:	7efb      	ldrb	r3, [r7, #27]
1000790e:	69fa      	ldr	r2, [r7, #28]
10007910:	fa22 f303 	lsr.w	r3, r2, r3
10007914:	f003 0301 	and.w	r3, r3, #1
10007918:	2b00      	cmp	r3, #0
1000791a:	bf14      	ite	ne
1000791c:	2301      	movne	r3, #1
1000791e:	2300      	moveq	r3, #0
10007920:	b2db      	uxtb	r3, r3
10007922:	2b00      	cmp	r3, #0
10007924:	d018      	beq.n	10007958 <tud_task_ext+0x34c>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
10007926:	693b      	ldr	r3, [r7, #16]
10007928:	4618      	mov	r0, r3
1000792a:	f7ff fca4 	bl	10007276 <tud_sof_cb>
        }
      break;
1000792e:	e013      	b.n	10007958 <tud_task_ext+0x34c>

      default:
        TU_BREAKPOINT();
10007930:	4b11      	ldr	r3, [pc, #68]	@ (10007978 <tud_task_ext+0x36c>)
10007932:	637b      	str	r3, [r7, #52]	@ 0x34
10007934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007936:	681b      	ldr	r3, [r3, #0]
10007938:	f003 0301 	and.w	r3, r3, #1
1000793c:	2b00      	cmp	r3, #0
1000793e:	d00d      	beq.n	1000795c <tud_task_ext+0x350>
10007940:	be00      	bkpt	0x0000
        break;
10007942:	e00b      	b.n	1000795c <tud_task_ext+0x350>
          break;
10007944:	bf00      	nop
10007946:	e670      	b.n	1000762a <tud_task_ext+0x1e>
        break;
10007948:	bf00      	nop
1000794a:	e66e      	b.n	1000762a <tud_task_ext+0x1e>
        break;
1000794c:	bf00      	nop
1000794e:	e66c      	b.n	1000762a <tud_task_ext+0x1e>
        break;
10007950:	bf00      	nop
10007952:	e66a      	b.n	1000762a <tud_task_ext+0x1e>
        break;
10007954:	bf00      	nop
10007956:	e668      	b.n	1000762a <tud_task_ext+0x1e>
      break;
10007958:	bf00      	nop
1000795a:	e666      	b.n	1000762a <tud_task_ext+0x1e>
        break;
1000795c:	bf00      	nop
  while (1) {
1000795e:	e664      	b.n	1000762a <tud_task_ext+0x1e>
  if (!tud_inited()) return;
10007960:	bf00      	nop
10007962:	e004      	b.n	1000796e <tud_task_ext+0x362>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
10007964:	bf00      	nop
10007966:	e002      	b.n	1000796e <tud_task_ext+0x362>
        TU_ASSERT(_usbd_queued_setup > 0,);
10007968:	bf00      	nop
1000796a:	e000      	b.n	1000796e <tud_task_ext+0x362>
          TU_ASSERT(driver,);
1000796c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
1000796e:	374c      	adds	r7, #76	@ 0x4c
10007970:	46bd      	mov	sp, r7
10007972:	bd90      	pop	{r4, r7, pc}
10007974:	20001aac 	.word	0x20001aac
10007978:	e000edf0 	.word	0xe000edf0

1000797c <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
1000797c:	b580      	push	{r7, lr}
1000797e:	b084      	sub	sp, #16
10007980:	af00      	add	r7, sp, #0
10007982:	4603      	mov	r3, r0
10007984:	60b9      	str	r1, [r7, #8]
10007986:	607a      	str	r2, [r7, #4]
10007988:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
1000798a:	68bb      	ldr	r3, [r7, #8]
1000798c:	695b      	ldr	r3, [r3, #20]
1000798e:	4618      	mov	r0, r3
10007990:	f001 f8b4 	bl	10008afc <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
10007994:	68bb      	ldr	r3, [r7, #8]
10007996:	695b      	ldr	r3, [r3, #20]
10007998:	7bf8      	ldrb	r0, [r7, #15]
1000799a:	687a      	ldr	r2, [r7, #4]
1000799c:	2101      	movs	r1, #1
1000799e:	4798      	blx	r3
100079a0:	4603      	mov	r3, r0
}
100079a2:	4618      	mov	r0, r3
100079a4:	3710      	adds	r7, #16
100079a6:	46bd      	mov	sp, r7
100079a8:	bd80      	pop	{r7, pc}
	...

100079ac <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
100079ac:	b580      	push	{r7, lr}
100079ae:	b09a      	sub	sp, #104	@ 0x68
100079b0:	af00      	add	r7, sp, #0
100079b2:	4603      	mov	r3, r0
100079b4:	6039      	str	r1, [r7, #0]
100079b6:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
100079b8:	2000      	movs	r0, #0
100079ba:	f001 f89f 	bl	10008afc <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
100079be:	683b      	ldr	r3, [r7, #0]
100079c0:	781b      	ldrb	r3, [r3, #0]
100079c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
100079c6:	b2db      	uxtb	r3, r3
100079c8:	2b60      	cmp	r3, #96	@ 0x60
100079ca:	d110      	bne.n	100079ee <process_control_request+0x42>
100079cc:	f240 22c5 	movw	r2, #709	@ 0x2c5
100079d0:	49aa      	ldr	r1, [pc, #680]	@ (10007c7c <process_control_request+0x2d0>)
100079d2:	48ab      	ldr	r0, [pc, #684]	@ (10007c80 <process_control_request+0x2d4>)
100079d4:	f7fe fa30 	bl	10005e38 <__wrap_printf>
100079d8:	4baa      	ldr	r3, [pc, #680]	@ (10007c84 <process_control_request+0x2d8>)
100079da:	633b      	str	r3, [r7, #48]	@ 0x30
100079dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100079de:	681b      	ldr	r3, [r3, #0]
100079e0:	f003 0301 	and.w	r3, r3, #1
100079e4:	2b00      	cmp	r3, #0
100079e6:	d000      	beq.n	100079ea <process_control_request+0x3e>
100079e8:	be00      	bkpt	0x0000
100079ea:	2300      	movs	r3, #0
100079ec:	e2cf      	b.n	10007f8e <process_control_request+0x5e2>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
100079ee:	683b      	ldr	r3, [r7, #0]
100079f0:	781b      	ldrb	r3, [r3, #0]
100079f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
100079f6:	b2db      	uxtb	r3, r3
100079f8:	2b40      	cmp	r3, #64	@ 0x40
100079fa:	d10a      	bne.n	10007a12 <process_control_request+0x66>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
100079fc:	48a2      	ldr	r0, [pc, #648]	@ (10007c88 <process_control_request+0x2dc>)
100079fe:	f001 f87d 	bl	10008afc <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
10007a02:	79fb      	ldrb	r3, [r7, #7]
10007a04:	683a      	ldr	r2, [r7, #0]
10007a06:	2101      	movs	r1, #1
10007a08:	4618      	mov	r0, r3
10007a0a:	f7fe fa3d 	bl	10005e88 <tud_vendor_control_xfer_cb>
10007a0e:	4603      	mov	r3, r0
10007a10:	e2bd      	b.n	10007f8e <process_control_request+0x5e2>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
10007a12:	683b      	ldr	r3, [r7, #0]
10007a14:	781b      	ldrb	r3, [r3, #0]
10007a16:	f3c3 0304 	ubfx	r3, r3, #0, #5
10007a1a:	b2db      	uxtb	r3, r3
10007a1c:	2b02      	cmp	r3, #2
10007a1e:	f000 81d4 	beq.w	10007dca <process_control_request+0x41e>
10007a22:	2b02      	cmp	r3, #2
10007a24:	f300 82a6 	bgt.w	10007f74 <process_control_request+0x5c8>
10007a28:	2b00      	cmp	r3, #0
10007a2a:	d003      	beq.n	10007a34 <process_control_request+0x88>
10007a2c:	2b01      	cmp	r3, #1
10007a2e:	f000 815b 	beq.w	10007ce8 <process_control_request+0x33c>
10007a32:	e29f      	b.n	10007f74 <process_control_request+0x5c8>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
10007a34:	683b      	ldr	r3, [r7, #0]
10007a36:	781b      	ldrb	r3, [r3, #0]
10007a38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
10007a3c:	b2db      	uxtb	r3, r3
10007a3e:	2b20      	cmp	r3, #32
10007a40:	d143      	bne.n	10007aca <process_control_request+0x11e>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
10007a42:	683b      	ldr	r3, [r7, #0]
10007a44:	889b      	ldrh	r3, [r3, #4]
10007a46:	b29b      	uxth	r3, r3
10007a48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
10007a4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
10007a4c:	b2db      	uxtb	r3, r3
10007a4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10007a52:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
10007a56:	2b0f      	cmp	r3, #15
10007a58:	d901      	bls.n	10007a5e <process_control_request+0xb2>
10007a5a:	2300      	movs	r3, #0
10007a5c:	e297      	b.n	10007f8e <process_control_request+0x5e2>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10007a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
10007a62:	4a8a      	ldr	r2, [pc, #552]	@ (10007c8c <process_control_request+0x2e0>)
10007a64:	4413      	add	r3, r2
10007a66:	791b      	ldrb	r3, [r3, #4]
10007a68:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
10007a6c:	2300      	movs	r3, #0
10007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
10007a70:	4b87      	ldr	r3, [pc, #540]	@ (10007c90 <process_control_request+0x2e4>)
10007a72:	781b      	ldrb	r3, [r3, #0]
10007a74:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
10007a78:	429a      	cmp	r2, r3
10007a7a:	d207      	bcs.n	10007a8c <process_control_request+0xe0>
    driver = &_app_driver[drvid];
10007a7c:	4b85      	ldr	r3, [pc, #532]	@ (10007c94 <process_control_request+0x2e8>)
10007a7e:	681a      	ldr	r2, [r3, #0]
10007a80:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
10007a84:	015b      	lsls	r3, r3, #5
10007a86:	4413      	add	r3, r2
10007a88:	62bb      	str	r3, [r7, #40]	@ 0x28
10007a8a:	e00f      	b.n	10007aac <process_control_request+0x100>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
10007a8c:	4b80      	ldr	r3, [pc, #512]	@ (10007c90 <process_control_request+0x2e4>)
10007a8e:	781b      	ldrb	r3, [r3, #0]
10007a90:	1c5a      	adds	r2, r3, #1
10007a92:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
10007a96:	429a      	cmp	r2, r3
10007a98:	db08      	blt.n	10007aac <process_control_request+0x100>
    driver = &_usbd_driver[drvid - _app_driver_count];
10007a9a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
10007a9e:	4a7c      	ldr	r2, [pc, #496]	@ (10007c90 <process_control_request+0x2e4>)
10007aa0:	7812      	ldrb	r2, [r2, #0]
10007aa2:	1a9b      	subs	r3, r3, r2
10007aa4:	015b      	lsls	r3, r3, #5
10007aa6:	4a7c      	ldr	r2, [pc, #496]	@ (10007c98 <process_control_request+0x2ec>)
10007aa8:	4413      	add	r3, r2
10007aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
10007aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10007aae:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
10007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10007ab2:	2b00      	cmp	r3, #0
10007ab4:	d101      	bne.n	10007aba <process_control_request+0x10e>
10007ab6:	2300      	movs	r3, #0
10007ab8:	e269      	b.n	10007f8e <process_control_request+0x5e2>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
10007aba:	79fb      	ldrb	r3, [r7, #7]
10007abc:	683a      	ldr	r2, [r7, #0]
10007abe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
10007ac0:	4618      	mov	r0, r3
10007ac2:	f7ff ff5b 	bl	1000797c <invoke_class_control>
10007ac6:	4603      	mov	r3, r0
10007ac8:	e261      	b.n	10007f8e <process_control_request+0x5e2>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
10007aca:	683b      	ldr	r3, [r7, #0]
10007acc:	781b      	ldrb	r3, [r3, #0]
10007ace:	f003 0360 	and.w	r3, r3, #96	@ 0x60
10007ad2:	b2db      	uxtb	r3, r3
10007ad4:	2b00      	cmp	r3, #0
10007ad6:	d00a      	beq.n	10007aee <process_control_request+0x142>
        // Non-standard request is not supported
        TU_BREAKPOINT();
10007ad8:	4b6a      	ldr	r3, [pc, #424]	@ (10007c84 <process_control_request+0x2d8>)
10007ada:	643b      	str	r3, [r7, #64]	@ 0x40
10007adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10007ade:	681b      	ldr	r3, [r3, #0]
10007ae0:	f003 0301 	and.w	r3, r3, #1
10007ae4:	2b00      	cmp	r3, #0
10007ae6:	d000      	beq.n	10007aea <process_control_request+0x13e>
10007ae8:	be00      	bkpt	0x0000
        return false;
10007aea:	2300      	movs	r3, #0
10007aec:	e24f      	b.n	10007f8e <process_control_request+0x5e2>
      }

      switch ( p_request->bRequest ) {
10007aee:	683b      	ldr	r3, [r7, #0]
10007af0:	785b      	ldrb	r3, [r3, #1]
10007af2:	2b09      	cmp	r3, #9
10007af4:	f200 80eb 	bhi.w	10007cce <process_control_request+0x322>
10007af8:	a201      	add	r2, pc, #4	@ (adr r2, 10007b00 <process_control_request+0x154>)
10007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10007afe:	bf00      	nop
10007b00:	10007c9d 	.word	0x10007c9d
10007b04:	10007c59 	.word	0x10007c59
10007b08:	10007ccf 	.word	0x10007ccf
10007b0c:	10007c33 	.word	0x10007c33
10007b10:	10007ccf 	.word	0x10007ccf
10007b14:	10007b29 	.word	0x10007b29
10007b18:	10007c19 	.word	0x10007c19
10007b1c:	10007ccf 	.word	0x10007ccf
10007b20:	10007b4d 	.word	0x10007b4d
10007b24:	10007b65 	.word	0x10007b65
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
10007b28:	6838      	ldr	r0, [r7, #0]
10007b2a:	f000 fff7 	bl	10008b1c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
10007b2e:	683b      	ldr	r3, [r7, #0]
10007b30:	885b      	ldrh	r3, [r3, #2]
10007b32:	b29b      	uxth	r3, r3
10007b34:	b2da      	uxtb	r2, r3
10007b36:	79fb      	ldrb	r3, [r7, #7]
10007b38:	4611      	mov	r1, r2
10007b3a:	4618      	mov	r0, r3
10007b3c:	f7ff f8fc 	bl	10006d38 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
10007b40:	4a52      	ldr	r2, [pc, #328]	@ (10007c8c <process_control_request+0x2e0>)
10007b42:	7813      	ldrb	r3, [r2, #0]
10007b44:	f043 0302 	orr.w	r3, r3, #2
10007b48:	7013      	strb	r3, [r2, #0]
        break;
10007b4a:	e0cc      	b.n	10007ce6 <process_control_request+0x33a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
10007b4c:	4b4f      	ldr	r3, [pc, #316]	@ (10007c8c <process_control_request+0x2e0>)
10007b4e:	785b      	ldrb	r3, [r3, #1]
10007b50:	b2db      	uxtb	r3, r3
10007b52:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
10007b54:	f107 0213 	add.w	r2, r7, #19
10007b58:	79f8      	ldrb	r0, [r7, #7]
10007b5a:	2301      	movs	r3, #1
10007b5c:	6839      	ldr	r1, [r7, #0]
10007b5e:	f000 ff3f 	bl	100089e0 <tud_control_xfer>
        }
        break;
10007b62:	e0c0      	b.n	10007ce6 <process_control_request+0x33a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
10007b64:	683b      	ldr	r3, [r7, #0]
10007b66:	885b      	ldrh	r3, [r3, #2]
10007b68:	b29b      	uxth	r3, r3
10007b6a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
10007b6e:	4b47      	ldr	r3, [pc, #284]	@ (10007c8c <process_control_request+0x2e0>)
10007b70:	785b      	ldrb	r3, [r3, #1]
10007b72:	b2db      	uxtb	r3, r3
10007b74:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
10007b78:	429a      	cmp	r2, r3
10007b7a:	d047      	beq.n	10007c0c <process_control_request+0x260>
            if ( _usbd_dev.cfg_num ) {
10007b7c:	4b43      	ldr	r3, [pc, #268]	@ (10007c8c <process_control_request+0x2e0>)
10007b7e:	785b      	ldrb	r3, [r3, #1]
10007b80:	b2db      	uxtb	r3, r3
10007b82:	2b00      	cmp	r3, #0
10007b84:	d014      	beq.n	10007bb0 <process_control_request+0x204>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
10007b86:	79fb      	ldrb	r3, [r7, #7]
10007b88:	2100      	movs	r1, #0
10007b8a:	4618      	mov	r0, r3
10007b8c:	f7ff f908 	bl	10006da0 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
10007b90:	79fb      	ldrb	r3, [r7, #7]
10007b92:	4618      	mov	r0, r3
10007b94:	f7ff f976 	bl	10006e84 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
10007b98:	4b3c      	ldr	r3, [pc, #240]	@ (10007c8c <process_control_request+0x2e0>)
10007b9a:	789b      	ldrb	r3, [r3, #2]
10007b9c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
10007ba0:	79fb      	ldrb	r3, [r7, #7]
10007ba2:	4618      	mov	r0, r3
10007ba4:	f7ff fcb2 	bl	1000750c <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
10007ba8:	4a38      	ldr	r2, [pc, #224]	@ (10007c8c <process_control_request+0x2e0>)
10007baa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
10007bae:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
10007bb0:	4a36      	ldr	r2, [pc, #216]	@ (10007c8c <process_control_request+0x2e0>)
10007bb2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
10007bb6:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
10007bb8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
10007bbc:	2b00      	cmp	r3, #0
10007bbe:	d023      	beq.n	10007c08 <process_control_request+0x25c>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
10007bc0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
10007bc4:	79fb      	ldrb	r3, [r7, #7]
10007bc6:	4611      	mov	r1, r2
10007bc8:	4618      	mov	r0, r3
10007bca:	f000 f9e9 	bl	10007fa0 <process_set_config>
10007bce:	4603      	mov	r3, r0
10007bd0:	f083 0301 	eor.w	r3, r3, #1
10007bd4:	b2db      	uxtb	r3, r3
10007bd6:	2b00      	cmp	r3, #0
10007bd8:	d013      	beq.n	10007c02 <process_control_request+0x256>
                TU_MESS_FAILED();
10007bda:	f240 3215 	movw	r2, #789	@ 0x315
10007bde:	4927      	ldr	r1, [pc, #156]	@ (10007c7c <process_control_request+0x2d0>)
10007be0:	4827      	ldr	r0, [pc, #156]	@ (10007c80 <process_control_request+0x2d4>)
10007be2:	f7fe f929 	bl	10005e38 <__wrap_printf>
                TU_BREAKPOINT();
10007be6:	4b27      	ldr	r3, [pc, #156]	@ (10007c84 <process_control_request+0x2d8>)
10007be8:	64bb      	str	r3, [r7, #72]	@ 0x48
10007bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10007bec:	681b      	ldr	r3, [r3, #0]
10007bee:	f003 0301 	and.w	r3, r3, #1
10007bf2:	2b00      	cmp	r3, #0
10007bf4:	d000      	beq.n	10007bf8 <process_control_request+0x24c>
10007bf6:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
10007bf8:	4b24      	ldr	r3, [pc, #144]	@ (10007c8c <process_control_request+0x2e0>)
10007bfa:	2200      	movs	r2, #0
10007bfc:	705a      	strb	r2, [r3, #1]
                return false;
10007bfe:	2300      	movs	r3, #0
10007c00:	e1c5      	b.n	10007f8e <process_control_request+0x5e2>
              }
              tud_mount_cb();
10007c02:	f7ff fb56 	bl	100072b2 <tud_mount_cb>
10007c06:	e001      	b.n	10007c0c <process_control_request+0x260>
            } else {
              tud_umount_cb();
10007c08:	f7ff fb5a 	bl	100072c0 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
10007c0c:	79fb      	ldrb	r3, [r7, #7]
10007c0e:	6839      	ldr	r1, [r7, #0]
10007c10:	4618      	mov	r0, r3
10007c12:	f000 fe73 	bl	100088fc <tud_control_status>
        }
        break;
10007c16:	e066      	b.n	10007ce6 <process_control_request+0x33a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
10007c18:	79fb      	ldrb	r3, [r7, #7]
10007c1a:	6839      	ldr	r1, [r7, #0]
10007c1c:	4618      	mov	r0, r3
10007c1e:	f000 fb15 	bl	1000824c <process_get_descriptor>
10007c22:	4603      	mov	r3, r0
10007c24:	f083 0301 	eor.w	r3, r3, #1
10007c28:	b2db      	uxtb	r3, r3
10007c2a:	2b00      	cmp	r3, #0
10007c2c:	d05a      	beq.n	10007ce4 <process_control_request+0x338>
10007c2e:	2300      	movs	r3, #0
10007c30:	e1ad      	b.n	10007f8e <process_control_request+0x5e2>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
10007c32:	683b      	ldr	r3, [r7, #0]
10007c34:	885b      	ldrh	r3, [r3, #2]
10007c36:	b29b      	uxth	r3, r3
10007c38:	2b01      	cmp	r3, #1
10007c3a:	d10b      	bne.n	10007c54 <process_control_request+0x2a8>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
10007c3c:	4a13      	ldr	r2, [pc, #76]	@ (10007c8c <process_control_request+0x2e0>)
10007c3e:	7813      	ldrb	r3, [r2, #0]
10007c40:	f043 0308 	orr.w	r3, r3, #8
10007c44:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
10007c46:	79fb      	ldrb	r3, [r7, #7]
10007c48:	6839      	ldr	r1, [r7, #0]
10007c4a:	4618      	mov	r0, r3
10007c4c:	f000 fe56 	bl	100088fc <tud_control_status>
            break;
10007c50:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
10007c52:	e048      	b.n	10007ce6 <process_control_request+0x33a>
            default: return false;
10007c54:	2300      	movs	r3, #0
10007c56:	e19a      	b.n	10007f8e <process_control_request+0x5e2>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
10007c58:	683b      	ldr	r3, [r7, #0]
10007c5a:	885b      	ldrh	r3, [r3, #2]
10007c5c:	b29b      	uxth	r3, r3
10007c5e:	2b01      	cmp	r3, #1
10007c60:	d001      	beq.n	10007c66 <process_control_request+0x2ba>
10007c62:	2300      	movs	r3, #0
10007c64:	e193      	b.n	10007f8e <process_control_request+0x5e2>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
10007c66:	4a09      	ldr	r2, [pc, #36]	@ (10007c8c <process_control_request+0x2e0>)
10007c68:	7813      	ldrb	r3, [r2, #0]
10007c6a:	f023 0308 	bic.w	r3, r3, #8
10007c6e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
10007c70:	79fb      	ldrb	r3, [r7, #7]
10007c72:	6839      	ldr	r1, [r7, #0]
10007c74:	4618      	mov	r0, r3
10007c76:	f000 fe41 	bl	100088fc <tud_control_status>
        break;
10007c7a:	e034      	b.n	10007ce6 <process_control_request+0x33a>
10007c7c:	1000bfd0 	.word	0x1000bfd0
10007c80:	1000bf88 	.word	0x1000bf88
10007c84:	e000edf0 	.word	0xe000edf0
10007c88:	10005e89 	.word	0x10005e89
10007c8c:	20001aac 	.word	0x20001aac
10007c90:	20002581 	.word	0x20002581
10007c94:	20001760 	.word	0x20001760
10007c98:	1000bf48 	.word	0x1000bf48

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
10007c9c:	4b97      	ldr	r3, [pc, #604]	@ (10007efc <process_control_request+0x550>)
10007c9e:	781b      	ldrb	r3, [r3, #0]
10007ca0:	095b      	lsrs	r3, r3, #5
10007ca2:	b2db      	uxtb	r3, r3
10007ca4:	f003 0301 	and.w	r3, r3, #1
10007ca8:	b29a      	uxth	r2, r3
10007caa:	4b94      	ldr	r3, [pc, #592]	@ (10007efc <process_control_request+0x550>)
10007cac:	781b      	ldrb	r3, [r3, #0]
10007cae:	089b      	lsrs	r3, r3, #2
10007cb0:	b2db      	uxtb	r3, r3
10007cb2:	f003 0302 	and.w	r3, r3, #2
10007cb6:	b29b      	uxth	r3, r3
10007cb8:	4313      	orrs	r3, r2
10007cba:	b29b      	uxth	r3, r3
10007cbc:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
10007cbe:	f107 0210 	add.w	r2, r7, #16
10007cc2:	79f8      	ldrb	r0, [r7, #7]
10007cc4:	2302      	movs	r3, #2
10007cc6:	6839      	ldr	r1, [r7, #0]
10007cc8:	f000 fe8a 	bl	100089e0 <tud_control_xfer>
          break;
10007ccc:	e00b      	b.n	10007ce6 <process_control_request+0x33a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
10007cce:	4b8c      	ldr	r3, [pc, #560]	@ (10007f00 <process_control_request+0x554>)
10007cd0:	647b      	str	r3, [r7, #68]	@ 0x44
10007cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10007cd4:	681b      	ldr	r3, [r3, #0]
10007cd6:	f003 0301 	and.w	r3, r3, #1
10007cda:	2b00      	cmp	r3, #0
10007cdc:	d000      	beq.n	10007ce0 <process_control_request+0x334>
10007cde:	be00      	bkpt	0x0000
10007ce0:	2300      	movs	r3, #0
10007ce2:	e154      	b.n	10007f8e <process_control_request+0x5e2>
        break;
10007ce4:	bf00      	nop
      }
    break;
10007ce6:	e151      	b.n	10007f8c <process_control_request+0x5e0>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
10007ce8:	683b      	ldr	r3, [r7, #0]
10007cea:	889b      	ldrh	r3, [r3, #4]
10007cec:	b29b      	uxth	r3, r3
10007cee:	84fb      	strh	r3, [r7, #38]	@ 0x26
10007cf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
10007cf2:	b2db      	uxtb	r3, r3
10007cf4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
10007cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
10007cfc:	2b0f      	cmp	r3, #15
10007cfe:	d901      	bls.n	10007d04 <process_control_request+0x358>
10007d00:	2300      	movs	r3, #0
10007d02:	e144      	b.n	10007f8e <process_control_request+0x5e2>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10007d04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
10007d08:	4a7c      	ldr	r2, [pc, #496]	@ (10007efc <process_control_request+0x550>)
10007d0a:	4413      	add	r3, r2
10007d0c:	791b      	ldrb	r3, [r3, #4]
10007d0e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
10007d12:	2300      	movs	r3, #0
10007d14:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
10007d16:	4b7b      	ldr	r3, [pc, #492]	@ (10007f04 <process_control_request+0x558>)
10007d18:	781b      	ldrb	r3, [r3, #0]
10007d1a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
10007d1e:	429a      	cmp	r2, r3
10007d20:	d207      	bcs.n	10007d32 <process_control_request+0x386>
    driver = &_app_driver[drvid];
10007d22:	4b79      	ldr	r3, [pc, #484]	@ (10007f08 <process_control_request+0x55c>)
10007d24:	681a      	ldr	r2, [r3, #0]
10007d26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
10007d2a:	015b      	lsls	r3, r3, #5
10007d2c:	4413      	add	r3, r2
10007d2e:	623b      	str	r3, [r7, #32]
10007d30:	e00f      	b.n	10007d52 <process_control_request+0x3a6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
10007d32:	4b74      	ldr	r3, [pc, #464]	@ (10007f04 <process_control_request+0x558>)
10007d34:	781b      	ldrb	r3, [r3, #0]
10007d36:	1c5a      	adds	r2, r3, #1
10007d38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
10007d3c:	429a      	cmp	r2, r3
10007d3e:	db08      	blt.n	10007d52 <process_control_request+0x3a6>
    driver = &_usbd_driver[drvid - _app_driver_count];
10007d40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
10007d44:	4a6f      	ldr	r2, [pc, #444]	@ (10007f04 <process_control_request+0x558>)
10007d46:	7812      	ldrb	r2, [r2, #0]
10007d48:	1a9b      	subs	r3, r3, r2
10007d4a:	015b      	lsls	r3, r3, #5
10007d4c:	4a6f      	ldr	r2, [pc, #444]	@ (10007f0c <process_control_request+0x560>)
10007d4e:	4413      	add	r3, r2
10007d50:	623b      	str	r3, [r7, #32]
  return driver;
10007d52:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
10007d54:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
10007d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
10007d58:	2b00      	cmp	r3, #0
10007d5a:	d101      	bne.n	10007d60 <process_control_request+0x3b4>
10007d5c:	2300      	movs	r3, #0
10007d5e:	e116      	b.n	10007f8e <process_control_request+0x5e2>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
10007d60:	79fb      	ldrb	r3, [r7, #7]
10007d62:	683a      	ldr	r2, [r7, #0]
10007d64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
10007d66:	4618      	mov	r0, r3
10007d68:	f7ff fe08 	bl	1000797c <invoke_class_control>
10007d6c:	4603      	mov	r3, r0
10007d6e:	f083 0301 	eor.w	r3, r3, #1
10007d72:	b2db      	uxtb	r3, r3
10007d74:	2b00      	cmp	r3, #0
10007d76:	f000 8108 	beq.w	10007f8a <process_control_request+0x5de>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
10007d7a:	683b      	ldr	r3, [r7, #0]
10007d7c:	781b      	ldrb	r3, [r3, #0]
10007d7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
10007d82:	b2db      	uxtb	r3, r3
10007d84:	2b00      	cmp	r3, #0
10007d86:	d001      	beq.n	10007d8c <process_control_request+0x3e0>
10007d88:	2300      	movs	r3, #0
10007d8a:	e100      	b.n	10007f8e <process_control_request+0x5e2>

        switch(p_request->bRequest) {
10007d8c:	683b      	ldr	r3, [r7, #0]
10007d8e:	785b      	ldrb	r3, [r3, #1]
10007d90:	3b0a      	subs	r3, #10
10007d92:	2b01      	cmp	r3, #1
10007d94:	d816      	bhi.n	10007dc4 <process_control_request+0x418>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
10007d96:	2000      	movs	r0, #0
10007d98:	f000 feb0 	bl	10008afc <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
10007d9c:	683b      	ldr	r3, [r7, #0]
10007d9e:	785b      	ldrb	r3, [r3, #1]
10007da0:	2b0a      	cmp	r3, #10
10007da2:	d109      	bne.n	10007db8 <process_control_request+0x40c>
              uint8_t alternate = 0;
10007da4:	2300      	movs	r3, #0
10007da6:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
10007da8:	f107 020f 	add.w	r2, r7, #15
10007dac:	79f8      	ldrb	r0, [r7, #7]
10007dae:	2301      	movs	r3, #1
10007db0:	6839      	ldr	r1, [r7, #0]
10007db2:	f000 fe15 	bl	100089e0 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
10007db6:	e007      	b.n	10007dc8 <process_control_request+0x41c>
              tud_control_status(rhport, p_request);
10007db8:	79fb      	ldrb	r3, [r7, #7]
10007dba:	6839      	ldr	r1, [r7, #0]
10007dbc:	4618      	mov	r0, r3
10007dbe:	f000 fd9d 	bl	100088fc <tud_control_status>
          break;
10007dc2:	e001      	b.n	10007dc8 <process_control_request+0x41c>

          default: return false;
10007dc4:	2300      	movs	r3, #0
10007dc6:	e0e2      	b.n	10007f8e <process_control_request+0x5e2>
        }
      }
      break;
10007dc8:	e0df      	b.n	10007f8a <process_control_request+0x5de>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
10007dca:	683b      	ldr	r3, [r7, #0]
10007dcc:	889b      	ldrh	r3, [r3, #4]
10007dce:	b29b      	uxth	r3, r3
10007dd0:	83bb      	strh	r3, [r7, #28]
10007dd2:	8bbb      	ldrh	r3, [r7, #28]
10007dd4:	b2db      	uxtb	r3, r3
10007dd6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
10007dda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
10007dde:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10007de0:	7fbb      	ldrb	r3, [r7, #30]
10007de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10007de6:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
10007de8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
10007dec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
10007df0:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10007df2:	7ffb      	ldrb	r3, [r7, #31]
10007df4:	09db      	lsrs	r3, r3, #7
10007df6:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
10007df8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
10007dfc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
10007e00:	2b0f      	cmp	r3, #15
10007e02:	d910      	bls.n	10007e26 <process_control_request+0x47a>
10007e04:	f240 3286 	movw	r2, #902	@ 0x386
10007e08:	4941      	ldr	r1, [pc, #260]	@ (10007f10 <process_control_request+0x564>)
10007e0a:	4842      	ldr	r0, [pc, #264]	@ (10007f14 <process_control_request+0x568>)
10007e0c:	f7fe f814 	bl	10005e38 <__wrap_printf>
10007e10:	4b3b      	ldr	r3, [pc, #236]	@ (10007f00 <process_control_request+0x554>)
10007e12:	65bb      	str	r3, [r7, #88]	@ 0x58
10007e14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
10007e16:	681b      	ldr	r3, [r3, #0]
10007e18:	f003 0301 	and.w	r3, r3, #1
10007e1c:	2b00      	cmp	r3, #0
10007e1e:	d000      	beq.n	10007e22 <process_control_request+0x476>
10007e20:	be00      	bkpt	0x0000
10007e22:	2300      	movs	r3, #0
10007e24:	e0b3      	b.n	10007f8e <process_control_request+0x5e2>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10007e26:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
10007e2a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
10007e2e:	4933      	ldr	r1, [pc, #204]	@ (10007efc <process_control_request+0x550>)
10007e30:	0052      	lsls	r2, r2, #1
10007e32:	440a      	add	r2, r1
10007e34:	4413      	add	r3, r2
10007e36:	3314      	adds	r3, #20
10007e38:	781b      	ldrb	r3, [r3, #0]
10007e3a:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
10007e3c:	2300      	movs	r3, #0
10007e3e:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
10007e40:	4b30      	ldr	r3, [pc, #192]	@ (10007f04 <process_control_request+0x558>)
10007e42:	781b      	ldrb	r3, [r3, #0]
10007e44:	7efa      	ldrb	r2, [r7, #27]
10007e46:	429a      	cmp	r2, r3
10007e48:	d206      	bcs.n	10007e58 <process_control_request+0x4ac>
    driver = &_app_driver[drvid];
10007e4a:	4b2f      	ldr	r3, [pc, #188]	@ (10007f08 <process_control_request+0x55c>)
10007e4c:	681a      	ldr	r2, [r3, #0]
10007e4e:	7efb      	ldrb	r3, [r7, #27]
10007e50:	015b      	lsls	r3, r3, #5
10007e52:	4413      	add	r3, r2
10007e54:	617b      	str	r3, [r7, #20]
10007e56:	e00d      	b.n	10007e74 <process_control_request+0x4c8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
10007e58:	4b2a      	ldr	r3, [pc, #168]	@ (10007f04 <process_control_request+0x558>)
10007e5a:	781b      	ldrb	r3, [r3, #0]
10007e5c:	1c5a      	adds	r2, r3, #1
10007e5e:	7efb      	ldrb	r3, [r7, #27]
10007e60:	429a      	cmp	r2, r3
10007e62:	db07      	blt.n	10007e74 <process_control_request+0x4c8>
    driver = &_usbd_driver[drvid - _app_driver_count];
10007e64:	7efb      	ldrb	r3, [r7, #27]
10007e66:	4a27      	ldr	r2, [pc, #156]	@ (10007f04 <process_control_request+0x558>)
10007e68:	7812      	ldrb	r2, [r2, #0]
10007e6a:	1a9b      	subs	r3, r3, r2
10007e6c:	015b      	lsls	r3, r3, #5
10007e6e:	4a27      	ldr	r2, [pc, #156]	@ (10007f0c <process_control_request+0x560>)
10007e70:	4413      	add	r3, r2
10007e72:	617b      	str	r3, [r7, #20]
  return driver;
10007e74:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
10007e76:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
10007e78:	683b      	ldr	r3, [r7, #0]
10007e7a:	781b      	ldrb	r3, [r3, #0]
10007e7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
10007e80:	b2db      	uxtb	r3, r3
10007e82:	2b00      	cmp	r3, #0
10007e84:	d00c      	beq.n	10007ea0 <process_control_request+0x4f4>
        // Forward class request to its driver
        TU_VERIFY(driver);
10007e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10007e88:	2b00      	cmp	r3, #0
10007e8a:	d101      	bne.n	10007e90 <process_control_request+0x4e4>
10007e8c:	2300      	movs	r3, #0
10007e8e:	e07e      	b.n	10007f8e <process_control_request+0x5e2>
        return invoke_class_control(rhport, driver, p_request);
10007e90:	79fb      	ldrb	r3, [r7, #7]
10007e92:	683a      	ldr	r2, [r7, #0]
10007e94:	6e39      	ldr	r1, [r7, #96]	@ 0x60
10007e96:	4618      	mov	r0, r3
10007e98:	f7ff fd70 	bl	1000797c <invoke_class_control>
10007e9c:	4603      	mov	r3, r0
10007e9e:	e076      	b.n	10007f8e <process_control_request+0x5e2>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
10007ea0:	683b      	ldr	r3, [r7, #0]
10007ea2:	785b      	ldrb	r3, [r3, #1]
10007ea4:	2b03      	cmp	r3, #3
10007ea6:	d017      	beq.n	10007ed8 <process_control_request+0x52c>
10007ea8:	2b03      	cmp	r3, #3
10007eaa:	dc56      	bgt.n	10007f5a <process_control_request+0x5ae>
10007eac:	2b00      	cmp	r3, #0
10007eae:	d002      	beq.n	10007eb6 <process_control_request+0x50a>
10007eb0:	2b01      	cmp	r3, #1
10007eb2:	d011      	beq.n	10007ed8 <process_control_request+0x52c>
10007eb4:	e051      	b.n	10007f5a <process_control_request+0x5ae>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
10007eb6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
10007eba:	79fb      	ldrb	r3, [r7, #7]
10007ebc:	4611      	mov	r1, r2
10007ebe:	4618      	mov	r0, r3
10007ec0:	f000 fcd2 	bl	10008868 <usbd_edpt_stalled>
10007ec4:	4603      	mov	r3, r0
10007ec6:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
10007ec8:	f107 020c 	add.w	r2, r7, #12
10007ecc:	79f8      	ldrb	r0, [r7, #7]
10007ece:	2302      	movs	r3, #2
10007ed0:	6839      	ldr	r1, [r7, #0]
10007ed2:	f000 fd85 	bl	100089e0 <tud_control_xfer>
          }
          break;
10007ed6:	e04c      	b.n	10007f72 <process_control_request+0x5c6>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
10007ed8:	683b      	ldr	r3, [r7, #0]
10007eda:	885b      	ldrh	r3, [r3, #2]
10007edc:	b29b      	uxth	r3, r3
10007ede:	2b00      	cmp	r3, #0
10007ee0:	d121      	bne.n	10007f26 <process_control_request+0x57a>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
10007ee2:	683b      	ldr	r3, [r7, #0]
10007ee4:	785b      	ldrb	r3, [r3, #1]
10007ee6:	2b01      	cmp	r3, #1
10007ee8:	d116      	bne.n	10007f18 <process_control_request+0x56c>
                usbd_edpt_clear_stall(rhport, ep_addr);
10007eea:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
10007eee:	79fb      	ldrb	r3, [r7, #7]
10007ef0:	4611      	mov	r1, r2
10007ef2:	4618      	mov	r0, r3
10007ef4:	f000 fc7a 	bl	100087ec <usbd_edpt_clear_stall>
10007ef8:	e015      	b.n	10007f26 <process_control_request+0x57a>
10007efa:	bf00      	nop
10007efc:	20001aac 	.word	0x20001aac
10007f00:	e000edf0 	.word	0xe000edf0
10007f04:	20002581 	.word	0x20002581
10007f08:	20001760 	.word	0x20001760
10007f0c:	1000bf48 	.word	0x1000bf48
10007f10:	1000bfd0 	.word	0x1000bfd0
10007f14:	1000bf88 	.word	0x1000bf88
              }else {
                usbd_edpt_stall(rhport, ep_addr);
10007f18:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
10007f1c:	79fb      	ldrb	r3, [r7, #7]
10007f1e:	4611      	mov	r1, r2
10007f20:	4618      	mov	r0, r3
10007f22:	f000 fc25 	bl	10008770 <usbd_edpt_stall>
              }
            }

            if (driver) {
10007f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
10007f28:	2b00      	cmp	r3, #0
10007f2a:	d021      	beq.n	10007f70 <process_control_request+0x5c4>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
10007f2c:	79fb      	ldrb	r3, [r7, #7]
10007f2e:	683a      	ldr	r2, [r7, #0]
10007f30:	6e39      	ldr	r1, [r7, #96]	@ 0x60
10007f32:	4618      	mov	r0, r3
10007f34:	f7ff fd22 	bl	1000797c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
10007f38:	2000      	movs	r0, #0
10007f3a:	f000 fddf 	bl	10008afc <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
10007f3e:	4b16      	ldr	r3, [pc, #88]	@ (10007f98 <process_control_request+0x5ec>)
10007f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
10007f44:	f3c3 0300 	ubfx	r3, r3, #0, #1
10007f48:	b2db      	uxtb	r3, r3
10007f4a:	2b00      	cmp	r3, #0
10007f4c:	d110      	bne.n	10007f70 <process_control_request+0x5c4>
10007f4e:	79fb      	ldrb	r3, [r7, #7]
10007f50:	6839      	ldr	r1, [r7, #0]
10007f52:	4618      	mov	r0, r3
10007f54:	f000 fcd2 	bl	100088fc <tud_control_status>
            }
          }
          break;
10007f58:	e00a      	b.n	10007f70 <process_control_request+0x5c4>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
10007f5a:	4b10      	ldr	r3, [pc, #64]	@ (10007f9c <process_control_request+0x5f0>)
10007f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
10007f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10007f60:	681b      	ldr	r3, [r3, #0]
10007f62:	f003 0301 	and.w	r3, r3, #1
10007f66:	2b00      	cmp	r3, #0
10007f68:	d000      	beq.n	10007f6c <process_control_request+0x5c0>
10007f6a:	be00      	bkpt	0x0000
            return false;
10007f6c:	2300      	movs	r3, #0
10007f6e:	e00e      	b.n	10007f8e <process_control_request+0x5e2>
          break;
10007f70:	bf00      	nop
        }
      }
    }
    break;
10007f72:	e00b      	b.n	10007f8c <process_control_request+0x5e0>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
10007f74:	4b09      	ldr	r3, [pc, #36]	@ (10007f9c <process_control_request+0x5f0>)
10007f76:	637b      	str	r3, [r7, #52]	@ 0x34
10007f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10007f7a:	681b      	ldr	r3, [r3, #0]
10007f7c:	f003 0301 	and.w	r3, r3, #1
10007f80:	2b00      	cmp	r3, #0
10007f82:	d000      	beq.n	10007f86 <process_control_request+0x5da>
10007f84:	be00      	bkpt	0x0000
      return false;
10007f86:	2300      	movs	r3, #0
10007f88:	e001      	b.n	10007f8e <process_control_request+0x5e2>
      break;
10007f8a:	bf00      	nop
  }

  return true;
10007f8c:	2301      	movs	r3, #1
}
10007f8e:	4618      	mov	r0, r3
10007f90:	3768      	adds	r7, #104	@ 0x68
10007f92:	46bd      	mov	sp, r7
10007f94:	bd80      	pop	{r7, pc}
10007f96:	bf00      	nop
10007f98:	20001aac 	.word	0x20001aac
10007f9c:	e000edf0 	.word	0xe000edf0

10007fa0 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
10007fa0:	b580      	push	{r7, lr}
10007fa2:	b096      	sub	sp, #88	@ 0x58
10007fa4:	af00      	add	r7, sp, #0
10007fa6:	4603      	mov	r3, r0
10007fa8:	460a      	mov	r2, r1
10007faa:	71fb      	strb	r3, [r7, #7]
10007fac:	4613      	mov	r3, r2
10007fae:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
10007fb0:	79bb      	ldrb	r3, [r7, #6]
10007fb2:	3b01      	subs	r3, #1
10007fb4:	b2db      	uxtb	r3, r3
10007fb6:	4618      	mov	r0, r3
10007fb8:	f7fe fc20 	bl	100067fc <tud_descriptor_configuration_cb>
10007fbc:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
10007fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10007fc0:	2b00      	cmp	r3, #0
10007fc2:	d003      	beq.n	10007fcc <process_set_config+0x2c>
10007fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10007fc6:	785b      	ldrb	r3, [r3, #1]
10007fc8:	2b02      	cmp	r3, #2
10007fca:	d010      	beq.n	10007fee <process_set_config+0x4e>
10007fcc:	f240 32c7 	movw	r2, #967	@ 0x3c7
10007fd0:	4995      	ldr	r1, [pc, #596]	@ (10008228 <process_set_config+0x288>)
10007fd2:	4896      	ldr	r0, [pc, #600]	@ (1000822c <process_set_config+0x28c>)
10007fd4:	f7fd ff30 	bl	10005e38 <__wrap_printf>
10007fd8:	4b95      	ldr	r3, [pc, #596]	@ (10008230 <process_set_config+0x290>)
10007fda:	623b      	str	r3, [r7, #32]
10007fdc:	6a3b      	ldr	r3, [r7, #32]
10007fde:	681b      	ldr	r3, [r3, #0]
10007fe0:	f003 0301 	and.w	r3, r3, #1
10007fe4:	2b00      	cmp	r3, #0
10007fe6:	d000      	beq.n	10007fea <process_set_config+0x4a>
10007fe8:	be00      	bkpt	0x0000
10007fea:	2300      	movs	r3, #0
10007fec:	e118      	b.n	10008220 <process_set_config+0x280>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
10007fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10007ff0:	79db      	ldrb	r3, [r3, #7]
10007ff2:	115b      	asrs	r3, r3, #5
10007ff4:	f003 0301 	and.w	r3, r3, #1
10007ff8:	b2d9      	uxtb	r1, r3
10007ffa:	4a8e      	ldr	r2, [pc, #568]	@ (10008234 <process_set_config+0x294>)
10007ffc:	7813      	ldrb	r3, [r2, #0]
10007ffe:	f361 1304 	bfi	r3, r1, #4, #1
10008002:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
10008004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10008006:	79db      	ldrb	r3, [r3, #7]
10008008:	119b      	asrs	r3, r3, #6
1000800a:	f003 0301 	and.w	r3, r3, #1
1000800e:	b2d9      	uxtb	r1, r3
10008010:	4a88      	ldr	r2, [pc, #544]	@ (10008234 <process_set_config+0x294>)
10008012:	7813      	ldrb	r3, [r2, #0]
10008014:	f361 1345 	bfi	r3, r1, #5, #1
10008018:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
1000801a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1000801c:	3309      	adds	r3, #9
1000801e:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
10008020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10008022:	885b      	ldrh	r3, [r3, #2]
10008024:	b29b      	uxth	r3, r3
10008026:	461a      	mov	r2, r3
10008028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1000802a:	4413      	add	r3, r2
1000802c:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
1000802e:	e0f1      	b.n	10008214 <process_set_config+0x274>
  {
    uint8_t assoc_itf_count = 1;
10008030:	2301      	movs	r3, #1
10008032:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
10008036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10008038:	61fb      	str	r3, [r7, #28]
  return desc8 + desc8[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
1000803a:	69fb      	ldr	r3, [r7, #28]
1000803c:	3301      	adds	r3, #1
1000803e:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
10008040:	2b0b      	cmp	r3, #11
10008042:	d10f      	bne.n	10008064 <process_set_config+0xc4>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
10008044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10008046:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
10008048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000804a:	78db      	ldrb	r3, [r3, #3]
1000804c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
10008050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10008052:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
10008054:	69bb      	ldr	r3, [r7, #24]
10008056:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
10008058:	697b      	ldr	r3, [r7, #20]
1000805a:	781b      	ldrb	r3, [r3, #0]
1000805c:	461a      	mov	r2, r3
1000805e:	697b      	ldr	r3, [r7, #20]
10008060:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
10008062:	657b      	str	r3, [r7, #84]	@ 0x54
10008064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10008066:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10008068:	693b      	ldr	r3, [r7, #16]
1000806a:	3301      	adds	r3, #1
1000806c:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
1000806e:	2b04      	cmp	r3, #4
10008070:	d010      	beq.n	10008094 <process_set_config+0xf4>
10008072:	f240 32e2 	movw	r2, #994	@ 0x3e2
10008076:	496c      	ldr	r1, [pc, #432]	@ (10008228 <process_set_config+0x288>)
10008078:	486c      	ldr	r0, [pc, #432]	@ (1000822c <process_set_config+0x28c>)
1000807a:	f7fd fedd 	bl	10005e38 <__wrap_printf>
1000807e:	4b6c      	ldr	r3, [pc, #432]	@ (10008230 <process_set_config+0x290>)
10008080:	627b      	str	r3, [r7, #36]	@ 0x24
10008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10008084:	681b      	ldr	r3, [r3, #0]
10008086:	f003 0301 	and.w	r3, r3, #1
1000808a:	2b00      	cmp	r3, #0
1000808c:	d000      	beq.n	10008090 <process_set_config+0xf0>
1000808e:	be00      	bkpt	0x0000
10008090:	2300      	movs	r3, #0
10008092:	e0c5      	b.n	10008220 <process_set_config+0x280>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
10008094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10008096:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
10008098:	6cba      	ldr	r2, [r7, #72]	@ 0x48
1000809a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000809c:	1ad3      	subs	r3, r2, r3
1000809e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
100080a0:	2300      	movs	r3, #0
100080a2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
100080a6:	e095      	b.n	100081d4 <process_set_config+0x234>
100080a8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
100080ac:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
100080ae:	2300      	movs	r3, #0
100080b0:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
100080b2:	4b61      	ldr	r3, [pc, #388]	@ (10008238 <process_set_config+0x298>)
100080b4:	781b      	ldrb	r3, [r3, #0]
100080b6:	7bfa      	ldrb	r2, [r7, #15]
100080b8:	429a      	cmp	r2, r3
100080ba:	d206      	bcs.n	100080ca <process_set_config+0x12a>
    driver = &_app_driver[drvid];
100080bc:	4b5f      	ldr	r3, [pc, #380]	@ (1000823c <process_set_config+0x29c>)
100080be:	681a      	ldr	r2, [r3, #0]
100080c0:	7bfb      	ldrb	r3, [r7, #15]
100080c2:	015b      	lsls	r3, r3, #5
100080c4:	4413      	add	r3, r2
100080c6:	60bb      	str	r3, [r7, #8]
100080c8:	e00d      	b.n	100080e6 <process_set_config+0x146>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
100080ca:	4b5b      	ldr	r3, [pc, #364]	@ (10008238 <process_set_config+0x298>)
100080cc:	781b      	ldrb	r3, [r3, #0]
100080ce:	1c5a      	adds	r2, r3, #1
100080d0:	7bfb      	ldrb	r3, [r7, #15]
100080d2:	429a      	cmp	r2, r3
100080d4:	db07      	blt.n	100080e6 <process_set_config+0x146>
    driver = &_usbd_driver[drvid - _app_driver_count];
100080d6:	7bfb      	ldrb	r3, [r7, #15]
100080d8:	4a57      	ldr	r2, [pc, #348]	@ (10008238 <process_set_config+0x298>)
100080da:	7812      	ldrb	r2, [r2, #0]
100080dc:	1a9b      	subs	r3, r3, r2
100080de:	015b      	lsls	r3, r3, #5
100080e0:	4a57      	ldr	r2, [pc, #348]	@ (10008240 <process_set_config+0x2a0>)
100080e2:	4413      	add	r3, r2
100080e4:	60bb      	str	r3, [r7, #8]
  return driver;
100080e6:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
100080e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
100080ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100080ec:	2b00      	cmp	r3, #0
100080ee:	d110      	bne.n	10008112 <process_set_config+0x172>
100080f0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
100080f4:	494c      	ldr	r1, [pc, #304]	@ (10008228 <process_set_config+0x288>)
100080f6:	484d      	ldr	r0, [pc, #308]	@ (1000822c <process_set_config+0x28c>)
100080f8:	f7fd fe9e 	bl	10005e38 <__wrap_printf>
100080fc:	4b4c      	ldr	r3, [pc, #304]	@ (10008230 <process_set_config+0x290>)
100080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
10008100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10008102:	681b      	ldr	r3, [r3, #0]
10008104:	f003 0301 	and.w	r3, r3, #1
10008108:	2b00      	cmp	r3, #0
1000810a:	d000      	beq.n	1000810e <process_set_config+0x16e>
1000810c:	be00      	bkpt	0x0000
1000810e:	2300      	movs	r3, #0
10008110:	e086      	b.n	10008220 <process_set_config+0x280>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
10008112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10008114:	691b      	ldr	r3, [r3, #16]
10008116:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
10008118:	79f8      	ldrb	r0, [r7, #7]
1000811a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1000811c:	4798      	blx	r3
1000811e:	4603      	mov	r3, r0
10008120:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
10008122:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
10008124:	2b08      	cmp	r3, #8
10008126:	d950      	bls.n	100081ca <process_set_config+0x22a>
10008128:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
1000812a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
1000812c:	429a      	cmp	r2, r3
1000812e:	d84c      	bhi.n	100081ca <process_set_config+0x22a>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
10008130:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
10008134:	2b01      	cmp	r3, #1
10008136:	d107      	bne.n	10008148 <process_set_config+0x1a8>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
10008138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000813a:	691b      	ldr	r3, [r3, #16]
1000813c:	4a41      	ldr	r2, [pc, #260]	@ (10008244 <process_set_config+0x2a4>)
1000813e:	4293      	cmp	r3, r2
10008140:	d102      	bne.n	10008148 <process_set_config+0x1a8>
10008142:	2302      	movs	r3, #2
10008144:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
10008148:	2300      	movs	r3, #0
1000814a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
1000814e:	e02a      	b.n	100081a6 <process_set_config+0x206>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
10008150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10008152:	789a      	ldrb	r2, [r3, #2]
10008154:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
10008158:	4413      	add	r3, r2
1000815a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
1000815e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
10008162:	4a34      	ldr	r2, [pc, #208]	@ (10008234 <process_set_config+0x294>)
10008164:	4413      	add	r3, r2
10008166:	791b      	ldrb	r3, [r3, #4]
10008168:	2bff      	cmp	r3, #255	@ 0xff
1000816a:	d010      	beq.n	1000818e <process_set_config+0x1ee>
1000816c:	f240 420a 	movw	r2, #1034	@ 0x40a
10008170:	492d      	ldr	r1, [pc, #180]	@ (10008228 <process_set_config+0x288>)
10008172:	482e      	ldr	r0, [pc, #184]	@ (1000822c <process_set_config+0x28c>)
10008174:	f7fd fe60 	bl	10005e38 <__wrap_printf>
10008178:	4b2d      	ldr	r3, [pc, #180]	@ (10008230 <process_set_config+0x290>)
1000817a:	633b      	str	r3, [r7, #48]	@ 0x30
1000817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000817e:	681b      	ldr	r3, [r3, #0]
10008180:	f003 0301 	and.w	r3, r3, #1
10008184:	2b00      	cmp	r3, #0
10008186:	d000      	beq.n	1000818a <process_set_config+0x1ea>
10008188:	be00      	bkpt	0x0000
1000818a:	2300      	movs	r3, #0
1000818c:	e048      	b.n	10008220 <process_set_config+0x280>
          _usbd_dev.itf2drv[itf_num] = drv_id;
1000818e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
10008192:	4a28      	ldr	r2, [pc, #160]	@ (10008234 <process_set_config+0x294>)
10008194:	4413      	add	r3, r2
10008196:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
1000819a:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
1000819c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
100081a0:	3301      	adds	r3, #1
100081a2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
100081a6:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
100081aa:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
100081ae:	429a      	cmp	r2, r3
100081b0:	d3ce      	bcc.n	10008150 <process_set_config+0x1b0>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
100081b2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
100081b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
100081b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
100081ba:	4823      	ldr	r0, [pc, #140]	@ (10008248 <process_set_config+0x2a8>)
100081bc:	f001 ff80 	bl	1000a0c0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
100081c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
100081c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
100081c4:	4413      	add	r3, r2
100081c6:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
100081c8:	e00c      	b.n	100081e4 <process_set_config+0x244>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
100081ca:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
100081ce:	3301      	adds	r3, #1
100081d0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
100081d4:	4b18      	ldr	r3, [pc, #96]	@ (10008238 <process_set_config+0x298>)
100081d6:	781b      	ldrb	r3, [r3, #0]
100081d8:	1c5a      	adds	r2, r3, #1
100081da:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
100081de:	429a      	cmp	r2, r3
100081e0:	f6bf af62 	bge.w	100080a8 <process_set_config+0x108>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
100081e4:	4b14      	ldr	r3, [pc, #80]	@ (10008238 <process_set_config+0x298>)
100081e6:	781b      	ldrb	r3, [r3, #0]
100081e8:	1c5a      	adds	r2, r3, #1
100081ea:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
100081ee:	429a      	cmp	r2, r3
100081f0:	da10      	bge.n	10008214 <process_set_config+0x274>
100081f2:	f240 4219 	movw	r2, #1049	@ 0x419
100081f6:	490c      	ldr	r1, [pc, #48]	@ (10008228 <process_set_config+0x288>)
100081f8:	480c      	ldr	r0, [pc, #48]	@ (1000822c <process_set_config+0x28c>)
100081fa:	f7fd fe1d 	bl	10005e38 <__wrap_printf>
100081fe:	4b0c      	ldr	r3, [pc, #48]	@ (10008230 <process_set_config+0x290>)
10008200:	62bb      	str	r3, [r7, #40]	@ 0x28
10008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10008204:	681b      	ldr	r3, [r3, #0]
10008206:	f003 0301 	and.w	r3, r3, #1
1000820a:	2b00      	cmp	r3, #0
1000820c:	d000      	beq.n	10008210 <process_set_config+0x270>
1000820e:	be00      	bkpt	0x0000
10008210:	2300      	movs	r3, #0
10008212:	e005      	b.n	10008220 <process_set_config+0x280>
  while( p_desc < desc_end )
10008214:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
10008216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10008218:	429a      	cmp	r2, r3
1000821a:	f4ff af09 	bcc.w	10008030 <process_set_config+0x90>
  }

  return true;
1000821e:	2301      	movs	r3, #1
}
10008220:	4618      	mov	r0, r3
10008222:	3758      	adds	r7, #88	@ 0x58
10008224:	46bd      	mov	sp, r7
10008226:	bd80      	pop	{r7, pc}
10008228:	1000bfe8 	.word	0x1000bfe8
1000822c:	1000bf88 	.word	0x1000bf88
10008230:	e000edf0 	.word	0xe000edf0
10008234:	20001aac 	.word	0x20001aac
10008238:	20002581 	.word	0x20002581
1000823c:	20001760 	.word	0x20001760
10008240:	1000bf48 	.word	0x1000bf48
10008244:	100092ad 	.word	0x100092ad
10008248:	20001ac0 	.word	0x20001ac0

1000824c <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
1000824c:	b580      	push	{r7, lr}
1000824e:	b094      	sub	sp, #80	@ 0x50
10008250:	af00      	add	r7, sp, #0
10008252:	4603      	mov	r3, r0
10008254:	6039      	str	r1, [r7, #0]
10008256:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
10008258:	683b      	ldr	r3, [r7, #0]
1000825a:	885b      	ldrh	r3, [r3, #2]
1000825c:	b29b      	uxth	r3, r3
1000825e:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
10008260:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
10008262:	0a1b      	lsrs	r3, r3, #8
10008264:	b29b      	uxth	r3, r3
10008266:	b2db      	uxtb	r3, r3
10008268:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
1000826c:	683b      	ldr	r3, [r7, #0]
1000826e:	885b      	ldrh	r3, [r3, #2]
10008270:	b29b      	uxth	r3, r3
10008272:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
10008274:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
10008276:	b2db      	uxtb	r3, r3
10008278:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
1000827c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
10008280:	3b01      	subs	r3, #1
10008282:	2b0e      	cmp	r3, #14
10008284:	f200 80c0 	bhi.w	10008408 <process_get_descriptor+0x1bc>
10008288:	a201      	add	r2, pc, #4	@ (adr r2, 10008290 <process_get_descriptor+0x44>)
1000828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000828e:	bf00      	nop
10008290:	100082cd 	.word	0x100082cd
10008294:	1000833d 	.word	0x1000833d
10008298:	100083af 	.word	0x100083af
1000829c:	10008409 	.word	0x10008409
100082a0:	10008409 	.word	0x10008409
100082a4:	100083e3 	.word	0x100083e3
100082a8:	1000833d 	.word	0x1000833d
100082ac:	10008409 	.word	0x10008409
100082b0:	10008409 	.word	0x10008409
100082b4:	10008409 	.word	0x10008409
100082b8:	10008409 	.word	0x10008409
100082bc:	10008409 	.word	0x10008409
100082c0:	10008409 	.word	0x10008409
100082c4:	10008409 	.word	0x10008409
100082c8:	1000830b 	.word	0x1000830b
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
100082cc:	f7fe fa8c 	bl	100067e8 <tud_descriptor_device_cb>
100082d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
100082d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100082d4:	2b00      	cmp	r3, #0
100082d6:	d110      	bne.n	100082fa <process_get_descriptor+0xae>
100082d8:	f240 422b 	movw	r2, #1067	@ 0x42b
100082dc:	494d      	ldr	r1, [pc, #308]	@ (10008414 <process_get_descriptor+0x1c8>)
100082de:	484e      	ldr	r0, [pc, #312]	@ (10008418 <process_get_descriptor+0x1cc>)
100082e0:	f7fd fdaa 	bl	10005e38 <__wrap_printf>
100082e4:	4b4d      	ldr	r3, [pc, #308]	@ (1000841c <process_get_descriptor+0x1d0>)
100082e6:	62bb      	str	r3, [r7, #40]	@ 0x28
100082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100082ea:	681b      	ldr	r3, [r3, #0]
100082ec:	f003 0301 	and.w	r3, r3, #1
100082f0:	2b00      	cmp	r3, #0
100082f2:	d000      	beq.n	100082f6 <process_get_descriptor+0xaa>
100082f4:	be00      	bkpt	0x0000
100082f6:	2300      	movs	r3, #0
100082f8:	e087      	b.n	1000840a <process_get_descriptor+0x1be>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
100082fa:	79f8      	ldrb	r0, [r7, #7]
100082fc:	2312      	movs	r3, #18
100082fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10008300:	6839      	ldr	r1, [r7, #0]
10008302:	f000 fb6d 	bl	100089e0 <tud_control_xfer>
10008306:	4603      	mov	r3, r0
10008308:	e07f      	b.n	1000840a <process_get_descriptor+0x1be>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
1000830a:	f7fd fdb3 	bl	10005e74 <tud_descriptor_bos_cb>
1000830e:	4603      	mov	r3, r0
10008310:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
10008312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10008314:	2b00      	cmp	r3, #0
10008316:	d101      	bne.n	1000831c <process_get_descriptor+0xd0>
10008318:	2300      	movs	r3, #0
1000831a:	e076      	b.n	1000840a <process_get_descriptor+0x1be>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
1000831c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000831e:	3302      	adds	r3, #2
10008320:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
10008322:	6a3b      	ldr	r3, [r7, #32]
10008324:	881b      	ldrh	r3, [r3, #0]
10008326:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
1000832a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1000832c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
10008330:	79f8      	ldrb	r0, [r7, #7]
10008332:	6839      	ldr	r1, [r7, #0]
10008334:	f000 fb54 	bl	100089e0 <tud_control_xfer>
10008338:	4603      	mov	r3, r0
1000833a:	e066      	b.n	1000840a <process_get_descriptor+0x1be>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
1000833c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
10008340:	2b02      	cmp	r3, #2
10008342:	d11a      	bne.n	1000837a <process_get_descriptor+0x12e>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
10008344:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
10008348:	4618      	mov	r0, r3
1000834a:	f7fe fa57 	bl	100067fc <tud_descriptor_configuration_cb>
1000834e:	4603      	mov	r3, r0
10008350:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
10008352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10008354:	2b00      	cmp	r3, #0
10008356:	d11c      	bne.n	10008392 <process_get_descriptor+0x146>
10008358:	f240 4252 	movw	r2, #1106	@ 0x452
1000835c:	492d      	ldr	r1, [pc, #180]	@ (10008414 <process_get_descriptor+0x1c8>)
1000835e:	482e      	ldr	r0, [pc, #184]	@ (10008418 <process_get_descriptor+0x1cc>)
10008360:	f7fd fd6a 	bl	10005e38 <__wrap_printf>
10008364:	4b2d      	ldr	r3, [pc, #180]	@ (1000841c <process_get_descriptor+0x1d0>)
10008366:	637b      	str	r3, [r7, #52]	@ 0x34
10008368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000836a:	681b      	ldr	r3, [r3, #0]
1000836c:	f003 0301 	and.w	r3, r3, #1
10008370:	2b00      	cmp	r3, #0
10008372:	d000      	beq.n	10008376 <process_get_descriptor+0x12a>
10008374:	be00      	bkpt	0x0000
10008376:	2300      	movs	r3, #0
10008378:	e047      	b.n	1000840a <process_get_descriptor+0x1be>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
1000837a:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
1000837e:	4618      	mov	r0, r3
10008380:	f7fe ff8b 	bl	1000729a <tud_descriptor_other_speed_configuration_cb>
10008384:	4603      	mov	r3, r0
10008386:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
10008388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1000838a:	2b00      	cmp	r3, #0
1000838c:	d101      	bne.n	10008392 <process_get_descriptor+0x146>
1000838e:	2300      	movs	r3, #0
10008390:	e03b      	b.n	1000840a <process_get_descriptor+0x1be>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
10008392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10008394:	3302      	adds	r3, #2
10008396:	61fb      	str	r3, [r7, #28]
10008398:	69fb      	ldr	r3, [r7, #28]
1000839a:	881b      	ldrh	r3, [r3, #0]
1000839c:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
1000839e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
100083a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
100083a2:	79f8      	ldrb	r0, [r7, #7]
100083a4:	6839      	ldr	r1, [r7, #0]
100083a6:	f000 fb1b 	bl	100089e0 <tud_control_xfer>
100083aa:	4603      	mov	r3, r0
100083ac:	e02d      	b.n	1000840a <process_get_descriptor+0x1be>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
100083ae:	683b      	ldr	r3, [r7, #0]
100083b0:	889b      	ldrh	r3, [r3, #4]
100083b2:	b29a      	uxth	r2, r3
100083b4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
100083b8:	4611      	mov	r1, r2
100083ba:	4618      	mov	r0, r3
100083bc:	f7fe fa2c 	bl	10006818 <tud_descriptor_string_cb>
100083c0:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
100083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100083c4:	2b00      	cmp	r3, #0
100083c6:	d101      	bne.n	100083cc <process_get_descriptor+0x180>
100083c8:	2300      	movs	r3, #0
100083ca:	e01e      	b.n	1000840a <process_get_descriptor+0x1be>
100083cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100083ce:	61bb      	str	r3, [r7, #24]
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
100083d0:	69bb      	ldr	r3, [r7, #24]
100083d2:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
100083d4:	79f8      	ldrb	r0, [r7, #7]
100083d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
100083d8:	6839      	ldr	r1, [r7, #0]
100083da:	f000 fb01 	bl	100089e0 <tud_control_xfer>
100083de:	4603      	mov	r3, r0
100083e0:	e013      	b.n	1000840a <process_get_descriptor+0x1be>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
100083e2:	f7fe ff52 	bl	1000728a <tud_descriptor_device_qualifier_cb>
100083e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
100083e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100083ea:	2b00      	cmp	r3, #0
100083ec:	d101      	bne.n	100083f2 <process_get_descriptor+0x1a6>
100083ee:	2300      	movs	r3, #0
100083f0:	e00b      	b.n	1000840a <process_get_descriptor+0x1be>
100083f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100083f4:	617b      	str	r3, [r7, #20]
100083f6:	697b      	ldr	r3, [r7, #20]
100083f8:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
100083fa:	79f8      	ldrb	r0, [r7, #7]
100083fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100083fe:	6839      	ldr	r1, [r7, #0]
10008400:	f000 faee 	bl	100089e0 <tud_control_xfer>
10008404:	4603      	mov	r3, r0
10008406:	e000      	b.n	1000840a <process_get_descriptor+0x1be>
    }
    // break; // unreachable

    default: return false;
10008408:	2300      	movs	r3, #0
  }
}
1000840a:	4618      	mov	r0, r3
1000840c:	3750      	adds	r7, #80	@ 0x50
1000840e:	46bd      	mov	sp, r7
10008410:	bd80      	pop	{r7, pc}
10008412:	bf00      	nop
10008414:	1000bffc 	.word	0x1000bffc
10008418:	1000bf88 	.word	0x1000bf88
1000841c:	e000edf0 	.word	0xe000edf0

10008420 <usbd_open_edpt_pair>:
  }
}

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
10008420:	b580      	push	{r7, lr}
10008422:	b08a      	sub	sp, #40	@ 0x28
10008424:	af00      	add	r7, sp, #0
10008426:	6039      	str	r1, [r7, #0]
10008428:	4611      	mov	r1, r2
1000842a:	461a      	mov	r2, r3
1000842c:	4603      	mov	r3, r0
1000842e:	71fb      	strb	r3, [r7, #7]
10008430:	460b      	mov	r3, r1
10008432:	71bb      	strb	r3, [r7, #6]
10008434:	4613      	mov	r3, r2
10008436:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
10008438:	2300      	movs	r3, #0
1000843a:	627b      	str	r3, [r7, #36]	@ 0x24
1000843c:	e059      	b.n	100084f2 <usbd_open_edpt_pair+0xd2>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
1000843e:	683b      	ldr	r3, [r7, #0]
10008440:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
10008442:	6a3b      	ldr	r3, [r7, #32]
10008444:	785b      	ldrb	r3, [r3, #1]
10008446:	2b05      	cmp	r3, #5
10008448:	d108      	bne.n	1000845c <usbd_open_edpt_pair+0x3c>
1000844a:	6a3b      	ldr	r3, [r7, #32]
1000844c:	78db      	ldrb	r3, [r3, #3]
1000844e:	f3c3 0301 	ubfx	r3, r3, #0, #2
10008452:	b2db      	uxtb	r3, r3
10008454:	461a      	mov	r2, r3
10008456:	797b      	ldrb	r3, [r7, #5]
10008458:	4293      	cmp	r3, r2
1000845a:	d010      	beq.n	1000847e <usbd_open_edpt_pair+0x5e>
1000845c:	f240 42d9 	movw	r2, #1241	@ 0x4d9
10008460:	4928      	ldr	r1, [pc, #160]	@ (10008504 <usbd_open_edpt_pair+0xe4>)
10008462:	4829      	ldr	r0, [pc, #164]	@ (10008508 <usbd_open_edpt_pair+0xe8>)
10008464:	f7fd fce8 	bl	10005e38 <__wrap_printf>
10008468:	4b28      	ldr	r3, [pc, #160]	@ (1000850c <usbd_open_edpt_pair+0xec>)
1000846a:	61bb      	str	r3, [r7, #24]
1000846c:	69bb      	ldr	r3, [r7, #24]
1000846e:	681b      	ldr	r3, [r3, #0]
10008470:	f003 0301 	and.w	r3, r3, #1
10008474:	2b00      	cmp	r3, #0
10008476:	d000      	beq.n	1000847a <usbd_open_edpt_pair+0x5a>
10008478:	be00      	bkpt	0x0000
1000847a:	2300      	movs	r3, #0
1000847c:	e03e      	b.n	100084fc <usbd_open_edpt_pair+0xdc>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
1000847e:	79fb      	ldrb	r3, [r7, #7]
10008480:	6a39      	ldr	r1, [r7, #32]
10008482:	4618      	mov	r0, r3
10008484:	f000 f844 	bl	10008510 <usbd_edpt_open>
10008488:	4603      	mov	r3, r0
1000848a:	f083 0301 	eor.w	r3, r3, #1
1000848e:	b2db      	uxtb	r3, r3
10008490:	2b00      	cmp	r3, #0
10008492:	d010      	beq.n	100084b6 <usbd_open_edpt_pair+0x96>
10008494:	f240 42da 	movw	r2, #1242	@ 0x4da
10008498:	491a      	ldr	r1, [pc, #104]	@ (10008504 <usbd_open_edpt_pair+0xe4>)
1000849a:	481b      	ldr	r0, [pc, #108]	@ (10008508 <usbd_open_edpt_pair+0xe8>)
1000849c:	f7fd fccc 	bl	10005e38 <__wrap_printf>
100084a0:	4b1a      	ldr	r3, [pc, #104]	@ (1000850c <usbd_open_edpt_pair+0xec>)
100084a2:	61fb      	str	r3, [r7, #28]
100084a4:	69fb      	ldr	r3, [r7, #28]
100084a6:	681b      	ldr	r3, [r3, #0]
100084a8:	f003 0301 	and.w	r3, r3, #1
100084ac:	2b00      	cmp	r3, #0
100084ae:	d000      	beq.n	100084b2 <usbd_open_edpt_pair+0x92>
100084b0:	be00      	bkpt	0x0000
100084b2:	2300      	movs	r3, #0
100084b4:	e022      	b.n	100084fc <usbd_open_edpt_pair+0xdc>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
100084b6:	6a3b      	ldr	r3, [r7, #32]
100084b8:	789b      	ldrb	r3, [r3, #2]
100084ba:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
100084bc:	7dfb      	ldrb	r3, [r7, #23]
100084be:	09db      	lsrs	r3, r3, #7
100084c0:	b2db      	uxtb	r3, r3
100084c2:	2b01      	cmp	r3, #1
100084c4:	d104      	bne.n	100084d0 <usbd_open_edpt_pair+0xb0>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
100084c6:	6a3b      	ldr	r3, [r7, #32]
100084c8:	789a      	ldrb	r2, [r3, #2]
100084ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100084cc:	701a      	strb	r2, [r3, #0]
100084ce:	e003      	b.n	100084d8 <usbd_open_edpt_pair+0xb8>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
100084d0:	6a3b      	ldr	r3, [r7, #32]
100084d2:	789a      	ldrb	r2, [r3, #2]
100084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100084d6:	701a      	strb	r2, [r3, #0]
100084d8:	683b      	ldr	r3, [r7, #0]
100084da:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
100084dc:	693b      	ldr	r3, [r7, #16]
100084de:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
100084e0:	68fb      	ldr	r3, [r7, #12]
100084e2:	781b      	ldrb	r3, [r3, #0]
100084e4:	461a      	mov	r2, r3
100084e6:	68fb      	ldr	r3, [r7, #12]
100084e8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
100084ea:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
100084ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100084ee:	3301      	adds	r3, #1
100084f0:	627b      	str	r3, [r7, #36]	@ 0x24
100084f2:	79bb      	ldrb	r3, [r7, #6]
100084f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100084f6:	429a      	cmp	r2, r3
100084f8:	dba1      	blt.n	1000843e <usbd_open_edpt_pair+0x1e>
  }

  return true;
100084fa:	2301      	movs	r3, #1
}
100084fc:	4618      	mov	r0, r3
100084fe:	3728      	adds	r7, #40	@ 0x28
10008500:	46bd      	mov	sp, r7
10008502:	bd80      	pop	{r7, pc}
10008504:	1000c020 	.word	0x1000c020
10008508:	1000bf88 	.word	0x1000bf88
1000850c:	e000edf0 	.word	0xe000edf0

10008510 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
10008510:	b580      	push	{r7, lr}
10008512:	b086      	sub	sp, #24
10008514:	af00      	add	r7, sp, #0
10008516:	4603      	mov	r3, r0
10008518:	6039      	str	r1, [r7, #0]
1000851a:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
1000851c:	4b21      	ldr	r3, [pc, #132]	@ (100085a4 <usbd_edpt_open+0x94>)
1000851e:	781b      	ldrb	r3, [r3, #0]
10008520:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
10008522:	683b      	ldr	r3, [r7, #0]
10008524:	789b      	ldrb	r3, [r3, #2]
10008526:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10008528:	7bfb      	ldrb	r3, [r7, #15]
1000852a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000852e:	b2db      	uxtb	r3, r3
10008530:	2b0f      	cmp	r3, #15
10008532:	d910      	bls.n	10008556 <usbd_edpt_open+0x46>
10008534:	f240 42fd 	movw	r2, #1277	@ 0x4fd
10008538:	491b      	ldr	r1, [pc, #108]	@ (100085a8 <usbd_edpt_open+0x98>)
1000853a:	481c      	ldr	r0, [pc, #112]	@ (100085ac <usbd_edpt_open+0x9c>)
1000853c:	f7fd fc7c 	bl	10005e38 <__wrap_printf>
10008540:	4b1b      	ldr	r3, [pc, #108]	@ (100085b0 <usbd_edpt_open+0xa0>)
10008542:	613b      	str	r3, [r7, #16]
10008544:	693b      	ldr	r3, [r7, #16]
10008546:	681b      	ldr	r3, [r3, #0]
10008548:	f003 0301 	and.w	r3, r3, #1
1000854c:	2b00      	cmp	r3, #0
1000854e:	d000      	beq.n	10008552 <usbd_edpt_open+0x42>
10008550:	be00      	bkpt	0x0000
10008552:	2300      	movs	r3, #0
10008554:	e022      	b.n	1000859c <usbd_edpt_open+0x8c>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
10008556:	4b17      	ldr	r3, [pc, #92]	@ (100085b4 <usbd_edpt_open+0xa4>)
10008558:	789b      	ldrb	r3, [r3, #2]
1000855a:	4619      	mov	r1, r3
1000855c:	6838      	ldr	r0, [r7, #0]
1000855e:	f001 fd1d 	bl	10009f9c <tu_edpt_validate>
10008562:	4603      	mov	r3, r0
10008564:	f083 0301 	eor.w	r3, r3, #1
10008568:	b2db      	uxtb	r3, r3
1000856a:	2b00      	cmp	r3, #0
1000856c:	d010      	beq.n	10008590 <usbd_edpt_open+0x80>
1000856e:	f240 42fe 	movw	r2, #1278	@ 0x4fe
10008572:	490d      	ldr	r1, [pc, #52]	@ (100085a8 <usbd_edpt_open+0x98>)
10008574:	480d      	ldr	r0, [pc, #52]	@ (100085ac <usbd_edpt_open+0x9c>)
10008576:	f7fd fc5f 	bl	10005e38 <__wrap_printf>
1000857a:	4b0d      	ldr	r3, [pc, #52]	@ (100085b0 <usbd_edpt_open+0xa0>)
1000857c:	617b      	str	r3, [r7, #20]
1000857e:	697b      	ldr	r3, [r7, #20]
10008580:	681b      	ldr	r3, [r3, #0]
10008582:	f003 0301 	and.w	r3, r3, #1
10008586:	2b00      	cmp	r3, #0
10008588:	d000      	beq.n	1000858c <usbd_edpt_open+0x7c>
1000858a:	be00      	bkpt	0x0000
1000858c:	2300      	movs	r3, #0
1000858e:	e005      	b.n	1000859c <usbd_edpt_open+0x8c>

  return dcd_edpt_open(rhport, desc_ep);
10008590:	79fb      	ldrb	r3, [r7, #7]
10008592:	6839      	ldr	r1, [r7, #0]
10008594:	4618      	mov	r0, r3
10008596:	f7fe fc47 	bl	10006e28 <dcd_edpt_open>
1000859a:	4603      	mov	r3, r0
}
1000859c:	4618      	mov	r0, r3
1000859e:	3718      	adds	r7, #24
100085a0:	46bd      	mov	sp, r7
100085a2:	bd80      	pop	{r7, pc}
100085a4:	200015a4 	.word	0x200015a4
100085a8:	1000c034 	.word	0x1000c034
100085ac:	1000bf88 	.word	0x1000bf88
100085b0:	e000edf0 	.word	0xe000edf0
100085b4:	20001aac 	.word	0x20001aac

100085b8 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
100085b8:	b580      	push	{r7, lr}
100085ba:	b086      	sub	sp, #24
100085bc:	af00      	add	r7, sp, #0
100085be:	4603      	mov	r3, r0
100085c0:	460a      	mov	r2, r1
100085c2:	71fb      	strb	r3, [r7, #7]
100085c4:	4613      	mov	r3, r2
100085c6:	71bb      	strb	r3, [r7, #6]
100085c8:	79bb      	ldrb	r3, [r7, #6]
100085ca:	73bb      	strb	r3, [r7, #14]
100085cc:	7bbb      	ldrb	r3, [r7, #14]
100085ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
100085d2:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
100085d4:	75fb      	strb	r3, [r7, #23]
100085d6:	79bb      	ldrb	r3, [r7, #6]
100085d8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
100085da:	7bfb      	ldrb	r3, [r7, #15]
100085dc:	09db      	lsrs	r3, r3, #7
100085de:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
100085e0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
100085e2:	7dfa      	ldrb	r2, [r7, #23]
100085e4:	7dbb      	ldrb	r3, [r7, #22]
100085e6:	0052      	lsls	r2, r2, #1
100085e8:	4413      	add	r3, r2
100085ea:	3330      	adds	r3, #48	@ 0x30
100085ec:	4a07      	ldr	r2, [pc, #28]	@ (1000860c <usbd_edpt_claim+0x54>)
100085ee:	4413      	add	r3, r2
100085f0:	3304      	adds	r3, #4
100085f2:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
100085f4:	4b06      	ldr	r3, [pc, #24]	@ (10008610 <usbd_edpt_claim+0x58>)
100085f6:	681b      	ldr	r3, [r3, #0]
100085f8:	4619      	mov	r1, r3
100085fa:	6938      	ldr	r0, [r7, #16]
100085fc:	f001 fc52 	bl	10009ea4 <tu_edpt_claim>
10008600:	4603      	mov	r3, r0
}
10008602:	4618      	mov	r0, r3
10008604:	3718      	adds	r7, #24
10008606:	46bd      	mov	sp, r7
10008608:	bd80      	pop	{r7, pc}
1000860a:	bf00      	nop
1000860c:	20001aac 	.word	0x20001aac
10008610:	20001b00 	.word	0x20001b00

10008614 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
10008614:	b580      	push	{r7, lr}
10008616:	b086      	sub	sp, #24
10008618:	af00      	add	r7, sp, #0
1000861a:	4603      	mov	r3, r0
1000861c:	460a      	mov	r2, r1
1000861e:	71fb      	strb	r3, [r7, #7]
10008620:	4613      	mov	r3, r2
10008622:	71bb      	strb	r3, [r7, #6]
10008624:	79bb      	ldrb	r3, [r7, #6]
10008626:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10008628:	7bbb      	ldrb	r3, [r7, #14]
1000862a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000862e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
10008630:	75fb      	strb	r3, [r7, #23]
10008632:	79bb      	ldrb	r3, [r7, #6]
10008634:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10008636:	7bfb      	ldrb	r3, [r7, #15]
10008638:	09db      	lsrs	r3, r3, #7
1000863a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
1000863c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
1000863e:	7dfa      	ldrb	r2, [r7, #23]
10008640:	7dbb      	ldrb	r3, [r7, #22]
10008642:	0052      	lsls	r2, r2, #1
10008644:	4413      	add	r3, r2
10008646:	3330      	adds	r3, #48	@ 0x30
10008648:	4a07      	ldr	r2, [pc, #28]	@ (10008668 <usbd_edpt_release+0x54>)
1000864a:	4413      	add	r3, r2
1000864c:	3304      	adds	r3, #4
1000864e:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
10008650:	4b06      	ldr	r3, [pc, #24]	@ (1000866c <usbd_edpt_release+0x58>)
10008652:	681b      	ldr	r3, [r3, #0]
10008654:	4619      	mov	r1, r3
10008656:	6938      	ldr	r0, [r7, #16]
10008658:	f001 fc6a 	bl	10009f30 <tu_edpt_release>
1000865c:	4603      	mov	r3, r0
}
1000865e:	4618      	mov	r0, r3
10008660:	3718      	adds	r7, #24
10008662:	46bd      	mov	sp, r7
10008664:	bd80      	pop	{r7, pc}
10008666:	bf00      	nop
10008668:	20001aac 	.word	0x20001aac
1000866c:	20001b00 	.word	0x20001b00

10008670 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
10008670:	b580      	push	{r7, lr}
10008672:	b086      	sub	sp, #24
10008674:	af00      	add	r7, sp, #0
10008676:	603a      	str	r2, [r7, #0]
10008678:	461a      	mov	r2, r3
1000867a:	4603      	mov	r3, r0
1000867c:	71fb      	strb	r3, [r7, #7]
1000867e:	460b      	mov	r3, r1
10008680:	71bb      	strb	r3, [r7, #6]
10008682:	4613      	mov	r3, r2
10008684:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
10008686:	4b35      	ldr	r3, [pc, #212]	@ (1000875c <usbd_edpt_xfer+0xec>)
10008688:	781b      	ldrb	r3, [r3, #0]
1000868a:	71fb      	strb	r3, [r7, #7]
1000868c:	79bb      	ldrb	r3, [r7, #6]
1000868e:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10008690:	7abb      	ldrb	r3, [r7, #10]
10008692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10008696:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
10008698:	75fb      	strb	r3, [r7, #23]
1000869a:	79bb      	ldrb	r3, [r7, #6]
1000869c:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
1000869e:	7afb      	ldrb	r3, [r7, #11]
100086a0:	09db      	lsrs	r3, r3, #7
100086a2:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
100086a4:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
100086a6:	7dfa      	ldrb	r2, [r7, #23]
100086a8:	7dbb      	ldrb	r3, [r7, #22]
100086aa:	492d      	ldr	r1, [pc, #180]	@ (10008760 <usbd_edpt_xfer+0xf0>)
100086ac:	0052      	lsls	r2, r2, #1
100086ae:	440a      	add	r2, r1
100086b0:	4413      	add	r3, r2
100086b2:	3330      	adds	r3, #48	@ 0x30
100086b4:	791b      	ldrb	r3, [r3, #4]
100086b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
100086ba:	b2db      	uxtb	r3, r3
100086bc:	2b00      	cmp	r3, #0
100086be:	d010      	beq.n	100086e2 <usbd_edpt_xfer+0x72>
100086c0:	f240 522b 	movw	r2, #1323	@ 0x52b
100086c4:	4927      	ldr	r1, [pc, #156]	@ (10008764 <usbd_edpt_xfer+0xf4>)
100086c6:	4828      	ldr	r0, [pc, #160]	@ (10008768 <usbd_edpt_xfer+0xf8>)
100086c8:	f7fd fbb6 	bl	10005e38 <__wrap_printf>
100086cc:	4b27      	ldr	r3, [pc, #156]	@ (1000876c <usbd_edpt_xfer+0xfc>)
100086ce:	60fb      	str	r3, [r7, #12]
100086d0:	68fb      	ldr	r3, [r7, #12]
100086d2:	681b      	ldr	r3, [r3, #0]
100086d4:	f003 0301 	and.w	r3, r3, #1
100086d8:	2b00      	cmp	r3, #0
100086da:	d000      	beq.n	100086de <usbd_edpt_xfer+0x6e>
100086dc:	be00      	bkpt	0x0000
100086de:	2300      	movs	r3, #0
100086e0:	e038      	b.n	10008754 <usbd_edpt_xfer+0xe4>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
100086e2:	7dfa      	ldrb	r2, [r7, #23]
100086e4:	7dbb      	ldrb	r3, [r7, #22]
100086e6:	491e      	ldr	r1, [pc, #120]	@ (10008760 <usbd_edpt_xfer+0xf0>)
100086e8:	0052      	lsls	r2, r2, #1
100086ea:	440a      	add	r2, r1
100086ec:	4413      	add	r3, r2
100086ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
100086f2:	7913      	ldrb	r3, [r2, #4]
100086f4:	f043 0301 	orr.w	r3, r3, #1
100086f8:	7113      	strb	r3, [r2, #4]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
100086fa:	88bb      	ldrh	r3, [r7, #4]
100086fc:	79b9      	ldrb	r1, [r7, #6]
100086fe:	79f8      	ldrb	r0, [r7, #7]
10008700:	683a      	ldr	r2, [r7, #0]
10008702:	f7fe fbcb 	bl	10006e9c <dcd_edpt_xfer>
10008706:	4603      	mov	r3, r0
10008708:	2b00      	cmp	r3, #0
1000870a:	d001      	beq.n	10008710 <usbd_edpt_xfer+0xa0>
    return true;
1000870c:	2301      	movs	r3, #1
1000870e:	e021      	b.n	10008754 <usbd_edpt_xfer+0xe4>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
10008710:	7dfa      	ldrb	r2, [r7, #23]
10008712:	7dbb      	ldrb	r3, [r7, #22]
10008714:	4912      	ldr	r1, [pc, #72]	@ (10008760 <usbd_edpt_xfer+0xf0>)
10008716:	0052      	lsls	r2, r2, #1
10008718:	440a      	add	r2, r1
1000871a:	4413      	add	r3, r2
1000871c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
10008720:	7913      	ldrb	r3, [r2, #4]
10008722:	f023 0301 	bic.w	r3, r3, #1
10008726:	7113      	strb	r3, [r2, #4]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
10008728:	7dfa      	ldrb	r2, [r7, #23]
1000872a:	7dbb      	ldrb	r3, [r7, #22]
1000872c:	490c      	ldr	r1, [pc, #48]	@ (10008760 <usbd_edpt_xfer+0xf0>)
1000872e:	0052      	lsls	r2, r2, #1
10008730:	440a      	add	r2, r1
10008732:	4413      	add	r3, r2
10008734:	f103 0230 	add.w	r2, r3, #48	@ 0x30
10008738:	7913      	ldrb	r3, [r2, #4]
1000873a:	f023 0304 	bic.w	r3, r3, #4
1000873e:	7113      	strb	r3, [r2, #4]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
10008740:	4b0a      	ldr	r3, [pc, #40]	@ (1000876c <usbd_edpt_xfer+0xfc>)
10008742:	613b      	str	r3, [r7, #16]
10008744:	693b      	ldr	r3, [r7, #16]
10008746:	681b      	ldr	r3, [r3, #0]
10008748:	f003 0301 	and.w	r3, r3, #1
1000874c:	2b00      	cmp	r3, #0
1000874e:	d000      	beq.n	10008752 <usbd_edpt_xfer+0xe2>
10008750:	be00      	bkpt	0x0000
    return false;
10008752:	2300      	movs	r3, #0
  }
}
10008754:	4618      	mov	r0, r3
10008756:	3718      	adds	r7, #24
10008758:	46bd      	mov	sp, r7
1000875a:	bd80      	pop	{r7, pc}
1000875c:	200015a4 	.word	0x200015a4
10008760:	20001aac 	.word	0x20001aac
10008764:	1000c044 	.word	0x1000c044
10008768:	1000bf88 	.word	0x1000bf88
1000876c:	e000edf0 	.word	0xe000edf0

10008770 <usbd_edpt_stall>:
  uint8_t const dir = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
10008770:	b580      	push	{r7, lr}
10008772:	b084      	sub	sp, #16
10008774:	af00      	add	r7, sp, #0
10008776:	4603      	mov	r3, r0
10008778:	460a      	mov	r2, r1
1000877a:	71fb      	strb	r3, [r7, #7]
1000877c:	4613      	mov	r3, r2
1000877e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
10008780:	4b18      	ldr	r3, [pc, #96]	@ (100087e4 <usbd_edpt_stall+0x74>)
10008782:	781b      	ldrb	r3, [r3, #0]
10008784:	71fb      	strb	r3, [r7, #7]
10008786:	79bb      	ldrb	r3, [r7, #6]
10008788:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
1000878a:	7b3b      	ldrb	r3, [r7, #12]
1000878c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10008790:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
10008792:	73fb      	strb	r3, [r7, #15]
10008794:	79bb      	ldrb	r3, [r7, #6]
10008796:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10008798:	7b7b      	ldrb	r3, [r7, #13]
1000879a:	09db      	lsrs	r3, r3, #7
1000879c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
1000879e:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
100087a0:	79ba      	ldrb	r2, [r7, #6]
100087a2:	79fb      	ldrb	r3, [r7, #7]
100087a4:	4611      	mov	r1, r2
100087a6:	4618      	mov	r0, r3
100087a8:	f7fe fb9e 	bl	10006ee8 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
100087ac:	7bfa      	ldrb	r2, [r7, #15]
100087ae:	7bbb      	ldrb	r3, [r7, #14]
100087b0:	490d      	ldr	r1, [pc, #52]	@ (100087e8 <usbd_edpt_stall+0x78>)
100087b2:	0052      	lsls	r2, r2, #1
100087b4:	440a      	add	r2, r1
100087b6:	4413      	add	r3, r2
100087b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
100087bc:	7913      	ldrb	r3, [r2, #4]
100087be:	f043 0302 	orr.w	r3, r3, #2
100087c2:	7113      	strb	r3, [r2, #4]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
100087c4:	7bfa      	ldrb	r2, [r7, #15]
100087c6:	7bbb      	ldrb	r3, [r7, #14]
100087c8:	4907      	ldr	r1, [pc, #28]	@ (100087e8 <usbd_edpt_stall+0x78>)
100087ca:	0052      	lsls	r2, r2, #1
100087cc:	440a      	add	r2, r1
100087ce:	4413      	add	r3, r2
100087d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
100087d4:	7913      	ldrb	r3, [r2, #4]
100087d6:	f043 0301 	orr.w	r3, r3, #1
100087da:	7113      	strb	r3, [r2, #4]
}
100087dc:	bf00      	nop
100087de:	3710      	adds	r7, #16
100087e0:	46bd      	mov	sp, r7
100087e2:	bd80      	pop	{r7, pc}
100087e4:	200015a4 	.word	0x200015a4
100087e8:	20001aac 	.word	0x20001aac

100087ec <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
100087ec:	b580      	push	{r7, lr}
100087ee:	b084      	sub	sp, #16
100087f0:	af00      	add	r7, sp, #0
100087f2:	4603      	mov	r3, r0
100087f4:	460a      	mov	r2, r1
100087f6:	71fb      	strb	r3, [r7, #7]
100087f8:	4613      	mov	r3, r2
100087fa:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
100087fc:	4b18      	ldr	r3, [pc, #96]	@ (10008860 <usbd_edpt_clear_stall+0x74>)
100087fe:	781b      	ldrb	r3, [r3, #0]
10008800:	71fb      	strb	r3, [r7, #7]
10008802:	79bb      	ldrb	r3, [r7, #6]
10008804:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
10008806:	7b3b      	ldrb	r3, [r7, #12]
10008808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000880c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
1000880e:	73fb      	strb	r3, [r7, #15]
10008810:	79bb      	ldrb	r3, [r7, #6]
10008812:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
10008814:	7b7b      	ldrb	r3, [r7, #13]
10008816:	09db      	lsrs	r3, r3, #7
10008818:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
1000881a:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
1000881c:	79ba      	ldrb	r2, [r7, #6]
1000881e:	79fb      	ldrb	r3, [r7, #7]
10008820:	4611      	mov	r1, r2
10008822:	4618      	mov	r0, r3
10008824:	f7fe fbac 	bl	10006f80 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
10008828:	7bfa      	ldrb	r2, [r7, #15]
1000882a:	7bbb      	ldrb	r3, [r7, #14]
1000882c:	490d      	ldr	r1, [pc, #52]	@ (10008864 <usbd_edpt_clear_stall+0x78>)
1000882e:	0052      	lsls	r2, r2, #1
10008830:	440a      	add	r2, r1
10008832:	4413      	add	r3, r2
10008834:	f103 0230 	add.w	r2, r3, #48	@ 0x30
10008838:	7913      	ldrb	r3, [r2, #4]
1000883a:	f023 0302 	bic.w	r3, r3, #2
1000883e:	7113      	strb	r3, [r2, #4]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
10008840:	7bfa      	ldrb	r2, [r7, #15]
10008842:	7bbb      	ldrb	r3, [r7, #14]
10008844:	4907      	ldr	r1, [pc, #28]	@ (10008864 <usbd_edpt_clear_stall+0x78>)
10008846:	0052      	lsls	r2, r2, #1
10008848:	440a      	add	r2, r1
1000884a:	4413      	add	r3, r2
1000884c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
10008850:	7913      	ldrb	r3, [r2, #4]
10008852:	f023 0301 	bic.w	r3, r3, #1
10008856:	7113      	strb	r3, [r2, #4]
}
10008858:	bf00      	nop
1000885a:	3710      	adds	r7, #16
1000885c:	46bd      	mov	sp, r7
1000885e:	bd80      	pop	{r7, pc}
10008860:	200015a4 	.word	0x200015a4
10008864:	20001aac 	.word	0x20001aac

10008868 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
10008868:	b480      	push	{r7}
1000886a:	b085      	sub	sp, #20
1000886c:	af00      	add	r7, sp, #0
1000886e:	4603      	mov	r3, r0
10008870:	460a      	mov	r2, r1
10008872:	71fb      	strb	r3, [r7, #7]
10008874:	4613      	mov	r3, r2
10008876:	71bb      	strb	r3, [r7, #6]
10008878:	79bb      	ldrb	r3, [r7, #6]
1000887a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
1000887c:	7b3b      	ldrb	r3, [r7, #12]
1000887e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
10008882:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
10008884:	73fb      	strb	r3, [r7, #15]
10008886:	79bb      	ldrb	r3, [r7, #6]
10008888:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
1000888a:	7b7b      	ldrb	r3, [r7, #13]
1000888c:	09db      	lsrs	r3, r3, #7
1000888e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
10008890:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
10008892:	7bfa      	ldrb	r2, [r7, #15]
10008894:	7bbb      	ldrb	r3, [r7, #14]
10008896:	490a      	ldr	r1, [pc, #40]	@ (100088c0 <usbd_edpt_stalled+0x58>)
10008898:	0052      	lsls	r2, r2, #1
1000889a:	440a      	add	r2, r1
1000889c:	4413      	add	r3, r2
1000889e:	3330      	adds	r3, #48	@ 0x30
100088a0:	791b      	ldrb	r3, [r3, #4]
100088a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
100088a6:	b2db      	uxtb	r3, r3
100088a8:	2b00      	cmp	r3, #0
100088aa:	bf14      	ite	ne
100088ac:	2301      	movne	r3, #1
100088ae:	2300      	moveq	r3, #0
100088b0:	b2db      	uxtb	r3, r3
}
100088b2:	4618      	mov	r0, r3
100088b4:	3714      	adds	r7, #20
100088b6:	46bd      	mov	sp, r7
100088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
100088bc:	4770      	bx	lr
100088be:	bf00      	nop
100088c0:	20001aac 	.word	0x20001aac

100088c4 <_status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const* request) {
100088c4:	b580      	push	{r7, lr}
100088c6:	b084      	sub	sp, #16
100088c8:	af00      	add	r7, sp, #0
100088ca:	4603      	mov	r3, r0
100088cc:	6039      	str	r1, [r7, #0]
100088ce:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
100088d0:	683b      	ldr	r3, [r7, #0]
100088d2:	781b      	ldrb	r3, [r3, #0]
100088d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
100088d8:	b2db      	uxtb	r3, r3
100088da:	2b00      	cmp	r3, #0
100088dc:	d001      	beq.n	100088e2 <_status_stage_xact+0x1e>
100088de:	2300      	movs	r3, #0
100088e0:	e000      	b.n	100088e4 <_status_stage_xact+0x20>
100088e2:	2380      	movs	r3, #128	@ 0x80
100088e4:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
100088e6:	7bf9      	ldrb	r1, [r7, #15]
100088e8:	79f8      	ldrb	r0, [r7, #7]
100088ea:	2300      	movs	r3, #0
100088ec:	2200      	movs	r2, #0
100088ee:	f7ff febf 	bl	10008670 <usbd_edpt_xfer>
100088f2:	4603      	mov	r3, r0
}
100088f4:	4618      	mov	r0, r3
100088f6:	3710      	adds	r7, #16
100088f8:	46bd      	mov	sp, r7
100088fa:	bd80      	pop	{r7, pc}

100088fc <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const* request) {
100088fc:	b580      	push	{r7, lr}
100088fe:	b082      	sub	sp, #8
10008900:	af00      	add	r7, sp, #0
10008902:	4603      	mov	r3, r0
10008904:	6039      	str	r1, [r7, #0]
10008906:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
10008908:	4b0b      	ldr	r3, [pc, #44]	@ (10008938 <tud_control_status+0x3c>)
1000890a:	683a      	ldr	r2, [r7, #0]
1000890c:	6810      	ldr	r0, [r2, #0]
1000890e:	6851      	ldr	r1, [r2, #4]
10008910:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
10008912:	4b09      	ldr	r3, [pc, #36]	@ (10008938 <tud_control_status+0x3c>)
10008914:	2200      	movs	r2, #0
10008916:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
10008918:	4b07      	ldr	r3, [pc, #28]	@ (10008938 <tud_control_status+0x3c>)
1000891a:	2200      	movs	r2, #0
1000891c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
1000891e:	4b06      	ldr	r3, [pc, #24]	@ (10008938 <tud_control_status+0x3c>)
10008920:	2200      	movs	r2, #0
10008922:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
10008924:	79fb      	ldrb	r3, [r7, #7]
10008926:	6839      	ldr	r1, [r7, #0]
10008928:	4618      	mov	r0, r3
1000892a:	f7ff ffcb 	bl	100088c4 <_status_stage_xact>
1000892e:	4603      	mov	r3, r0
}
10008930:	4618      	mov	r0, r3
10008932:	3708      	adds	r7, #8
10008934:	46bd      	mov	sp, r7
10008936:	bd80      	pop	{r7, pc}
10008938:	20001a30 	.word	0x20001a30

1000893c <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport) {
1000893c:	b580      	push	{r7, lr}
1000893e:	b088      	sub	sp, #32
10008940:	af00      	add	r7, sp, #0
10008942:	4603      	mov	r3, r0
10008944:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred,
10008946:	4b24      	ldr	r3, [pc, #144]	@ (100089d8 <_data_stage_xact+0x9c>)
10008948:	899a      	ldrh	r2, [r3, #12]
1000894a:	4b23      	ldr	r3, [pc, #140]	@ (100089d8 <_data_stage_xact+0x9c>)
1000894c:	89db      	ldrh	r3, [r3, #14]
1000894e:	1ad3      	subs	r3, r2, r3
10008950:	b29b      	uxth	r3, r3
10008952:	837b      	strh	r3, [r7, #26]
10008954:	2340      	movs	r3, #64	@ 0x40
10008956:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10008958:	8b7a      	ldrh	r2, [r7, #26]
1000895a:	8b3b      	ldrh	r3, [r7, #24]
1000895c:	4293      	cmp	r3, r2
1000895e:	bf28      	it	cs
10008960:	4613      	movcs	r3, r2
10008962:	b29b      	uxth	r3, r3
10008964:	83bb      	strh	r3, [r7, #28]
                                     CFG_TUD_ENDPOINT0_SIZE);

  uint8_t ep_addr = EDPT_CTRL_OUT;
10008966:	2300      	movs	r3, #0
10008968:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
1000896a:	4b1b      	ldr	r3, [pc, #108]	@ (100089d8 <_data_stage_xact+0x9c>)
1000896c:	781b      	ldrb	r3, [r3, #0]
1000896e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
10008972:	b2db      	uxtb	r3, r3
10008974:	2b00      	cmp	r3, #0
10008976:	d01e      	beq.n	100089b6 <_data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
10008978:	2380      	movs	r3, #128	@ 0x80
1000897a:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
1000897c:	8bbb      	ldrh	r3, [r7, #28]
1000897e:	2b00      	cmp	r3, #0
10008980:	d019      	beq.n	100089b6 <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
10008982:	4b15      	ldr	r3, [pc, #84]	@ (100089d8 <_data_stage_xact+0x9c>)
10008984:	689a      	ldr	r2, [r3, #8]
10008986:	8bbb      	ldrh	r3, [r7, #28]
10008988:	4914      	ldr	r1, [pc, #80]	@ (100089dc <_data_stage_xact+0xa0>)
1000898a:	6179      	str	r1, [r7, #20]
1000898c:	2140      	movs	r1, #64	@ 0x40
1000898e:	6139      	str	r1, [r7, #16]
10008990:	60fa      	str	r2, [r7, #12]
10008992:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
10008994:	693a      	ldr	r2, [r7, #16]
10008996:	68bb      	ldr	r3, [r7, #8]
10008998:	429a      	cmp	r2, r3
1000899a:	d202      	bcs.n	100089a2 <_data_stage_xact+0x66>
    return -1;
1000899c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
100089a0:	e005      	b.n	100089ae <_data_stage_xact+0x72>
  memcpy(dest, src, count);
100089a2:	68ba      	ldr	r2, [r7, #8]
100089a4:	68f9      	ldr	r1, [r7, #12]
100089a6:	6978      	ldr	r0, [r7, #20]
100089a8:	f002 fac6 	bl	1000af38 <memcpy>
  return 0;
100089ac:	2300      	movs	r3, #0
100089ae:	2b00      	cmp	r3, #0
100089b0:	d001      	beq.n	100089b6 <_data_stage_xact+0x7a>
100089b2:	2300      	movs	r3, #0
100089b4:	e00b      	b.n	100089ce <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
100089b6:	8bbb      	ldrh	r3, [r7, #28]
100089b8:	2b00      	cmp	r3, #0
100089ba:	d001      	beq.n	100089c0 <_data_stage_xact+0x84>
100089bc:	4a07      	ldr	r2, [pc, #28]	@ (100089dc <_data_stage_xact+0xa0>)
100089be:	e000      	b.n	100089c2 <_data_stage_xact+0x86>
100089c0:	2200      	movs	r2, #0
100089c2:	8bbb      	ldrh	r3, [r7, #28]
100089c4:	7ff9      	ldrb	r1, [r7, #31]
100089c6:	79f8      	ldrb	r0, [r7, #7]
100089c8:	f7ff fe52 	bl	10008670 <usbd_edpt_xfer>
100089cc:	4603      	mov	r3, r0
}
100089ce:	4618      	mov	r0, r3
100089d0:	3720      	adds	r7, #32
100089d2:	46bd      	mov	sp, r7
100089d4:	bd80      	pop	{r7, pc}
100089d6:	bf00      	nop
100089d8:	20001a30 	.word	0x20001a30
100089dc:	20001a6c 	.word	0x20001a6c

100089e0 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const* request, void* buffer, uint16_t len) {
100089e0:	b580      	push	{r7, lr}
100089e2:	b088      	sub	sp, #32
100089e4:	af00      	add	r7, sp, #0
100089e6:	60b9      	str	r1, [r7, #8]
100089e8:	607a      	str	r2, [r7, #4]
100089ea:	461a      	mov	r2, r3
100089ec:	4603      	mov	r3, r0
100089ee:	73fb      	strb	r3, [r7, #15]
100089f0:	4613      	mov	r3, r2
100089f2:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
100089f4:	4b37      	ldr	r3, [pc, #220]	@ (10008ad4 <tud_control_xfer+0xf4>)
100089f6:	68ba      	ldr	r2, [r7, #8]
100089f8:	6810      	ldr	r0, [r2, #0]
100089fa:	6851      	ldr	r1, [r2, #4]
100089fc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
100089fe:	4a35      	ldr	r2, [pc, #212]	@ (10008ad4 <tud_control_xfer+0xf4>)
10008a00:	687b      	ldr	r3, [r7, #4]
10008a02:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
10008a04:	4b33      	ldr	r3, [pc, #204]	@ (10008ad4 <tud_control_xfer+0xf4>)
10008a06:	2200      	movs	r2, #0
10008a08:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
10008a0a:	68bb      	ldr	r3, [r7, #8]
10008a0c:	88db      	ldrh	r3, [r3, #6]
10008a0e:	b29a      	uxth	r2, r3
10008a10:	89bb      	ldrh	r3, [r7, #12]
10008a12:	827b      	strh	r3, [r7, #18]
10008a14:	4613      	mov	r3, r2
10008a16:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
10008a18:	8a7a      	ldrh	r2, [r7, #18]
10008a1a:	8a3b      	ldrh	r3, [r7, #16]
10008a1c:	4293      	cmp	r3, r2
10008a1e:	bf28      	it	cs
10008a20:	4613      	movcs	r3, r2
10008a22:	b29a      	uxth	r2, r3
10008a24:	4b2b      	ldr	r3, [pc, #172]	@ (10008ad4 <tud_control_xfer+0xf4>)
10008a26:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
10008a28:	68bb      	ldr	r3, [r7, #8]
10008a2a:	88db      	ldrh	r3, [r3, #6]
10008a2c:	b29b      	uxth	r3, r3
10008a2e:	2b00      	cmp	r3, #0
10008a30:	d030      	beq.n	10008a94 <tud_control_xfer+0xb4>
    if (_ctrl_xfer.data_len > 0U) {
10008a32:	4b28      	ldr	r3, [pc, #160]	@ (10008ad4 <tud_control_xfer+0xf4>)
10008a34:	899b      	ldrh	r3, [r3, #12]
10008a36:	2b00      	cmp	r3, #0
10008a38:	d012      	beq.n	10008a60 <tud_control_xfer+0x80>
      TU_ASSERT(buffer);
10008a3a:	687b      	ldr	r3, [r7, #4]
10008a3c:	2b00      	cmp	r3, #0
10008a3e:	d10f      	bne.n	10008a60 <tud_control_xfer+0x80>
10008a40:	2277      	movs	r2, #119	@ 0x77
10008a42:	4925      	ldr	r1, [pc, #148]	@ (10008ad8 <tud_control_xfer+0xf8>)
10008a44:	4825      	ldr	r0, [pc, #148]	@ (10008adc <tud_control_xfer+0xfc>)
10008a46:	f7fd f9f7 	bl	10005e38 <__wrap_printf>
10008a4a:	4b25      	ldr	r3, [pc, #148]	@ (10008ae0 <tud_control_xfer+0x100>)
10008a4c:	61bb      	str	r3, [r7, #24]
10008a4e:	69bb      	ldr	r3, [r7, #24]
10008a50:	681b      	ldr	r3, [r3, #0]
10008a52:	f003 0301 	and.w	r3, r3, #1
10008a56:	2b00      	cmp	r3, #0
10008a58:	d000      	beq.n	10008a5c <tud_control_xfer+0x7c>
10008a5a:	be00      	bkpt	0x0000
10008a5c:	2300      	movs	r3, #0
10008a5e:	e035      	b.n	10008acc <tud_control_xfer+0xec>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT(_data_stage_xact(rhport));
10008a60:	7bfb      	ldrb	r3, [r7, #15]
10008a62:	4618      	mov	r0, r3
10008a64:	f7ff ff6a 	bl	1000893c <_data_stage_xact>
10008a68:	4603      	mov	r3, r0
10008a6a:	f083 0301 	eor.w	r3, r3, #1
10008a6e:	b2db      	uxtb	r3, r3
10008a70:	2b00      	cmp	r3, #0
10008a72:	d02a      	beq.n	10008aca <tud_control_xfer+0xea>
10008a74:	227d      	movs	r2, #125	@ 0x7d
10008a76:	4918      	ldr	r1, [pc, #96]	@ (10008ad8 <tud_control_xfer+0xf8>)
10008a78:	4818      	ldr	r0, [pc, #96]	@ (10008adc <tud_control_xfer+0xfc>)
10008a7a:	f7fd f9dd 	bl	10005e38 <__wrap_printf>
10008a7e:	4b18      	ldr	r3, [pc, #96]	@ (10008ae0 <tud_control_xfer+0x100>)
10008a80:	617b      	str	r3, [r7, #20]
10008a82:	697b      	ldr	r3, [r7, #20]
10008a84:	681b      	ldr	r3, [r3, #0]
10008a86:	f003 0301 	and.w	r3, r3, #1
10008a8a:	2b00      	cmp	r3, #0
10008a8c:	d000      	beq.n	10008a90 <tud_control_xfer+0xb0>
10008a8e:	be00      	bkpt	0x0000
10008a90:	2300      	movs	r3, #0
10008a92:	e01b      	b.n	10008acc <tud_control_xfer+0xec>
  } else {
    // Status stage
    TU_ASSERT(_status_stage_xact(rhport, request));
10008a94:	7bfb      	ldrb	r3, [r7, #15]
10008a96:	68b9      	ldr	r1, [r7, #8]
10008a98:	4618      	mov	r0, r3
10008a9a:	f7ff ff13 	bl	100088c4 <_status_stage_xact>
10008a9e:	4603      	mov	r3, r0
10008aa0:	f083 0301 	eor.w	r3, r3, #1
10008aa4:	b2db      	uxtb	r3, r3
10008aa6:	2b00      	cmp	r3, #0
10008aa8:	d00f      	beq.n	10008aca <tud_control_xfer+0xea>
10008aaa:	2280      	movs	r2, #128	@ 0x80
10008aac:	490a      	ldr	r1, [pc, #40]	@ (10008ad8 <tud_control_xfer+0xf8>)
10008aae:	480b      	ldr	r0, [pc, #44]	@ (10008adc <tud_control_xfer+0xfc>)
10008ab0:	f7fd f9c2 	bl	10005e38 <__wrap_printf>
10008ab4:	4b0a      	ldr	r3, [pc, #40]	@ (10008ae0 <tud_control_xfer+0x100>)
10008ab6:	61fb      	str	r3, [r7, #28]
10008ab8:	69fb      	ldr	r3, [r7, #28]
10008aba:	681b      	ldr	r3, [r3, #0]
10008abc:	f003 0301 	and.w	r3, r3, #1
10008ac0:	2b00      	cmp	r3, #0
10008ac2:	d000      	beq.n	10008ac6 <tud_control_xfer+0xe6>
10008ac4:	be00      	bkpt	0x0000
10008ac6:	2300      	movs	r3, #0
10008ac8:	e000      	b.n	10008acc <tud_control_xfer+0xec>
  }

  return true;
10008aca:	2301      	movs	r3, #1
}
10008acc:	4618      	mov	r0, r3
10008ace:	3720      	adds	r7, #32
10008ad0:	46bd      	mov	sp, r7
10008ad2:	bd80      	pop	{r7, pc}
10008ad4:	20001a30 	.word	0x20001a30
10008ad8:	1000c06c 	.word	0x1000c06c
10008adc:	1000c054 	.word	0x1000c054
10008ae0:	e000edf0 	.word	0xe000edf0

10008ae4 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(tusb_control_request_t const* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void) {
10008ae4:	b580      	push	{r7, lr}
10008ae6:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
10008ae8:	2214      	movs	r2, #20
10008aea:	2100      	movs	r1, #0
10008aec:	4802      	ldr	r0, [pc, #8]	@ (10008af8 <usbd_control_reset+0x14>)
10008aee:	f002 fac7 	bl	1000b080 <memset>
}
10008af2:	bf00      	nop
10008af4:	bd80      	pop	{r7, pc}
10008af6:	bf00      	nop
10008af8:	20001a30 	.word	0x20001a30

10008afc <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
10008afc:	b480      	push	{r7}
10008afe:	b083      	sub	sp, #12
10008b00:	af00      	add	r7, sp, #0
10008b02:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
10008b04:	4a04      	ldr	r2, [pc, #16]	@ (10008b18 <usbd_control_set_complete_callback+0x1c>)
10008b06:	687b      	ldr	r3, [r7, #4]
10008b08:	6113      	str	r3, [r2, #16]
}
10008b0a:	bf00      	nop
10008b0c:	370c      	adds	r7, #12
10008b0e:	46bd      	mov	sp, r7
10008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b14:	4770      	bx	lr
10008b16:	bf00      	nop
10008b18:	20001a30 	.word	0x20001a30

10008b1c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const* request) {
10008b1c:	b480      	push	{r7}
10008b1e:	b083      	sub	sp, #12
10008b20:	af00      	add	r7, sp, #0
10008b22:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
10008b24:	4b09      	ldr	r3, [pc, #36]	@ (10008b4c <usbd_control_set_request+0x30>)
10008b26:	687a      	ldr	r2, [r7, #4]
10008b28:	6810      	ldr	r0, [r2, #0]
10008b2a:	6851      	ldr	r1, [r2, #4]
10008b2c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
10008b2e:	4b07      	ldr	r3, [pc, #28]	@ (10008b4c <usbd_control_set_request+0x30>)
10008b30:	2200      	movs	r2, #0
10008b32:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
10008b34:	4b05      	ldr	r3, [pc, #20]	@ (10008b4c <usbd_control_set_request+0x30>)
10008b36:	2200      	movs	r2, #0
10008b38:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
10008b3a:	4b04      	ldr	r3, [pc, #16]	@ (10008b4c <usbd_control_set_request+0x30>)
10008b3c:	2200      	movs	r2, #0
10008b3e:	819a      	strh	r2, [r3, #12]
}
10008b40:	bf00      	nop
10008b42:	370c      	adds	r7, #12
10008b44:	46bd      	mov	sp, r7
10008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
10008b4a:	4770      	bx	lr
10008b4c:	20001a30 	.word	0x20001a30

10008b50 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
10008b50:	b580      	push	{r7, lr}
10008b52:	b088      	sub	sp, #32
10008b54:	af00      	add	r7, sp, #0
10008b56:	603b      	str	r3, [r7, #0]
10008b58:	4603      	mov	r3, r0
10008b5a:	71fb      	strb	r3, [r7, #7]
10008b5c:	460b      	mov	r3, r1
10008b5e:	71bb      	strb	r3, [r7, #6]
10008b60:	4613      	mov	r3, r2
10008b62:	717b      	strb	r3, [r7, #5]
10008b64:	79bb      	ldrb	r3, [r7, #6]
10008b66:	73fb      	strb	r3, [r7, #15]
10008b68:	7bfb      	ldrb	r3, [r7, #15]
10008b6a:	09db      	lsrs	r3, r3, #7
10008b6c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
10008b6e:	4a56      	ldr	r2, [pc, #344]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008b70:	7812      	ldrb	r2, [r2, #0]
10008b72:	f3c2 12c0 	ubfx	r2, r2, #7, #1
10008b76:	b2d2      	uxtb	r2, r2
10008b78:	4293      	cmp	r3, r2
10008b7a:	d023      	beq.n	10008bc4 <usbd_control_xfer_cb+0x74>
    TU_ASSERT(0 == xferred_bytes);
10008b7c:	683b      	ldr	r3, [r7, #0]
10008b7e:	2b00      	cmp	r3, #0
10008b80:	d00f      	beq.n	10008ba2 <usbd_control_xfer_cb+0x52>
10008b82:	22a7      	movs	r2, #167	@ 0xa7
10008b84:	4951      	ldr	r1, [pc, #324]	@ (10008ccc <usbd_control_xfer_cb+0x17c>)
10008b86:	4852      	ldr	r0, [pc, #328]	@ (10008cd0 <usbd_control_xfer_cb+0x180>)
10008b88:	f7fd f956 	bl	10005e38 <__wrap_printf>
10008b8c:	4b51      	ldr	r3, [pc, #324]	@ (10008cd4 <usbd_control_xfer_cb+0x184>)
10008b8e:	613b      	str	r3, [r7, #16]
10008b90:	693b      	ldr	r3, [r7, #16]
10008b92:	681b      	ldr	r3, [r3, #0]
10008b94:	f003 0301 	and.w	r3, r3, #1
10008b98:	2b00      	cmp	r3, #0
10008b9a:	d000      	beq.n	10008b9e <usbd_control_xfer_cb+0x4e>
10008b9c:	be00      	bkpt	0x0000
10008b9e:	2300      	movs	r3, #0
10008ba0:	e08e      	b.n	10008cc0 <usbd_control_xfer_cb+0x170>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
10008ba2:	79fb      	ldrb	r3, [r7, #7]
10008ba4:	4948      	ldr	r1, [pc, #288]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008ba6:	4618      	mov	r0, r3
10008ba8:	f7fe f918 	bl	10006ddc <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
10008bac:	4b46      	ldr	r3, [pc, #280]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008bae:	691b      	ldr	r3, [r3, #16]
10008bb0:	2b00      	cmp	r3, #0
10008bb2:	d005      	beq.n	10008bc0 <usbd_control_xfer_cb+0x70>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
10008bb4:	4b44      	ldr	r3, [pc, #272]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008bb6:	691b      	ldr	r3, [r3, #16]
10008bb8:	79f8      	ldrb	r0, [r7, #7]
10008bba:	4a43      	ldr	r2, [pc, #268]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008bbc:	2103      	movs	r1, #3
10008bbe:	4798      	blx	r3
    }

    return true;
10008bc0:	2301      	movs	r3, #1
10008bc2:	e07d      	b.n	10008cc0 <usbd_control_xfer_cb+0x170>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
10008bc4:	4b40      	ldr	r3, [pc, #256]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008bc6:	781b      	ldrb	r3, [r3, #0]
10008bc8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
10008bcc:	b2db      	uxtb	r3, r3
10008bce:	2b00      	cmp	r3, #0
10008bd0:	d10c      	bne.n	10008bec <usbd_control_xfer_cb+0x9c>
    TU_VERIFY(_ctrl_xfer.buffer);
10008bd2:	4b3d      	ldr	r3, [pc, #244]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008bd4:	689b      	ldr	r3, [r3, #8]
10008bd6:	2b00      	cmp	r3, #0
10008bd8:	d101      	bne.n	10008bde <usbd_control_xfer_cb+0x8e>
10008bda:	2300      	movs	r3, #0
10008bdc:	e070      	b.n	10008cc0 <usbd_control_xfer_cb+0x170>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
10008bde:	4b3a      	ldr	r3, [pc, #232]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008be0:	689b      	ldr	r3, [r3, #8]
10008be2:	683a      	ldr	r2, [r7, #0]
10008be4:	493c      	ldr	r1, [pc, #240]	@ (10008cd8 <usbd_control_xfer_cb+0x188>)
10008be6:	4618      	mov	r0, r3
10008be8:	f002 f9a6 	bl	1000af38 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
10008bec:	4b36      	ldr	r3, [pc, #216]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008bee:	89da      	ldrh	r2, [r3, #14]
10008bf0:	683b      	ldr	r3, [r7, #0]
10008bf2:	b29b      	uxth	r3, r3
10008bf4:	4413      	add	r3, r2
10008bf6:	b29a      	uxth	r2, r3
10008bf8:	4b33      	ldr	r3, [pc, #204]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008bfa:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
10008bfc:	4b32      	ldr	r3, [pc, #200]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008bfe:	689a      	ldr	r2, [r3, #8]
10008c00:	683b      	ldr	r3, [r7, #0]
10008c02:	4413      	add	r3, r2
10008c04:	4a30      	ldr	r2, [pc, #192]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008c06:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
10008c08:	4b2f      	ldr	r3, [pc, #188]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008c0a:	88da      	ldrh	r2, [r3, #6]
10008c0c:	4b2e      	ldr	r3, [pc, #184]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008c0e:	89db      	ldrh	r3, [r3, #14]
10008c10:	429a      	cmp	r2, r3
10008c12:	d002      	beq.n	10008c1a <usbd_control_xfer_cb+0xca>
10008c14:	683b      	ldr	r3, [r7, #0]
10008c16:	2b3f      	cmp	r3, #63	@ 0x3f
10008c18:	d836      	bhi.n	10008c88 <usbd_control_xfer_cb+0x138>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
10008c1a:	2301      	movs	r3, #1
10008c1c:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
10008c1e:	4b2a      	ldr	r3, [pc, #168]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008c20:	691b      	ldr	r3, [r3, #16]
10008c22:	2b00      	cmp	r3, #0
10008c24:	d007      	beq.n	10008c36 <usbd_control_xfer_cb+0xe6>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
10008c26:	4b28      	ldr	r3, [pc, #160]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008c28:	691b      	ldr	r3, [r3, #16]
10008c2a:	79f8      	ldrb	r0, [r7, #7]
10008c2c:	4a26      	ldr	r2, [pc, #152]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008c2e:	2102      	movs	r1, #2
10008c30:	4798      	blx	r3
10008c32:	4603      	mov	r3, r0
10008c34:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
10008c36:	7ffb      	ldrb	r3, [r7, #31]
10008c38:	2b00      	cmp	r3, #0
10008c3a:	d01a      	beq.n	10008c72 <usbd_control_xfer_cb+0x122>
      // Send status
      TU_ASSERT(_status_stage_xact(rhport, &_ctrl_xfer.request));
10008c3c:	79fb      	ldrb	r3, [r7, #7]
10008c3e:	4922      	ldr	r1, [pc, #136]	@ (10008cc8 <usbd_control_xfer_cb+0x178>)
10008c40:	4618      	mov	r0, r3
10008c42:	f7ff fe3f 	bl	100088c4 <_status_stage_xact>
10008c46:	4603      	mov	r3, r0
10008c48:	f083 0301 	eor.w	r3, r3, #1
10008c4c:	b2db      	uxtb	r3, r3
10008c4e:	2b00      	cmp	r3, #0
10008c50:	d034      	beq.n	10008cbc <usbd_control_xfer_cb+0x16c>
10008c52:	22d0      	movs	r2, #208	@ 0xd0
10008c54:	491d      	ldr	r1, [pc, #116]	@ (10008ccc <usbd_control_xfer_cb+0x17c>)
10008c56:	481e      	ldr	r0, [pc, #120]	@ (10008cd0 <usbd_control_xfer_cb+0x180>)
10008c58:	f7fd f8ee 	bl	10005e38 <__wrap_printf>
10008c5c:	4b1d      	ldr	r3, [pc, #116]	@ (10008cd4 <usbd_control_xfer_cb+0x184>)
10008c5e:	617b      	str	r3, [r7, #20]
10008c60:	697b      	ldr	r3, [r7, #20]
10008c62:	681b      	ldr	r3, [r3, #0]
10008c64:	f003 0301 	and.w	r3, r3, #1
10008c68:	2b00      	cmp	r3, #0
10008c6a:	d000      	beq.n	10008c6e <usbd_control_xfer_cb+0x11e>
10008c6c:	be00      	bkpt	0x0000
10008c6e:	2300      	movs	r3, #0
10008c70:	e026      	b.n	10008cc0 <usbd_control_xfer_cb+0x170>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
10008c72:	79fb      	ldrb	r3, [r7, #7]
10008c74:	2100      	movs	r1, #0
10008c76:	4618      	mov	r0, r3
10008c78:	f7fe f936 	bl	10006ee8 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
10008c7c:	79fb      	ldrb	r3, [r7, #7]
10008c7e:	2180      	movs	r1, #128	@ 0x80
10008c80:	4618      	mov	r0, r3
10008c82:	f7fe f931 	bl	10006ee8 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
10008c86:	e019      	b.n	10008cbc <usbd_control_xfer_cb+0x16c>
    }
  } else {
    // More data to transfer
    TU_ASSERT(_data_stage_xact(rhport));
10008c88:	79fb      	ldrb	r3, [r7, #7]
10008c8a:	4618      	mov	r0, r3
10008c8c:	f7ff fe56 	bl	1000893c <_data_stage_xact>
10008c90:	4603      	mov	r3, r0
10008c92:	f083 0301 	eor.w	r3, r3, #1
10008c96:	b2db      	uxtb	r3, r3
10008c98:	2b00      	cmp	r3, #0
10008c9a:	d010      	beq.n	10008cbe <usbd_control_xfer_cb+0x16e>
10008c9c:	22d8      	movs	r2, #216	@ 0xd8
10008c9e:	490b      	ldr	r1, [pc, #44]	@ (10008ccc <usbd_control_xfer_cb+0x17c>)
10008ca0:	480b      	ldr	r0, [pc, #44]	@ (10008cd0 <usbd_control_xfer_cb+0x180>)
10008ca2:	f7fd f8c9 	bl	10005e38 <__wrap_printf>
10008ca6:	4b0b      	ldr	r3, [pc, #44]	@ (10008cd4 <usbd_control_xfer_cb+0x184>)
10008ca8:	61bb      	str	r3, [r7, #24]
10008caa:	69bb      	ldr	r3, [r7, #24]
10008cac:	681b      	ldr	r3, [r3, #0]
10008cae:	f003 0301 	and.w	r3, r3, #1
10008cb2:	2b00      	cmp	r3, #0
10008cb4:	d000      	beq.n	10008cb8 <usbd_control_xfer_cb+0x168>
10008cb6:	be00      	bkpt	0x0000
10008cb8:	2300      	movs	r3, #0
10008cba:	e001      	b.n	10008cc0 <usbd_control_xfer_cb+0x170>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
10008cbc:	bf00      	nop
  }

  return true;
10008cbe:	2301      	movs	r3, #1
}
10008cc0:	4618      	mov	r0, r3
10008cc2:	3720      	adds	r7, #32
10008cc4:	46bd      	mov	sp, r7
10008cc6:	bd80      	pop	{r7, pc}
10008cc8:	20001a30 	.word	0x20001a30
10008ccc:	1000c080 	.word	0x1000c080
10008cd0:	1000c054 	.word	0x1000c054
10008cd4:	e000edf0 	.word	0xe000edf0
10008cd8:	20001a6c 	.word	0x20001a6c

10008cdc <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUD_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
static tud_cdc_configure_fifo_t _cdcd_fifo_cfg;

static bool _prep_out_transaction (cdcd_interface_t* p_cdc) {
10008cdc:	b580      	push	{r7, lr}
10008cde:	b084      	sub	sp, #16
10008ce0:	af00      	add	r7, sp, #0
10008ce2:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
10008ce4:	2300      	movs	r3, #0
10008ce6:	73fb      	strb	r3, [r7, #15]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
10008ce8:	f7fe fb04 	bl	100072f4 <tud_mounted>
10008cec:	4603      	mov	r3, r0
10008cee:	2b00      	cmp	r3, #0
10008cf0:	d009      	beq.n	10008d06 <_prep_out_transaction+0x2a>
10008cf2:	f7fe fb11 	bl	10007318 <tud_suspended>
10008cf6:	4603      	mov	r3, r0
10008cf8:	f083 0301 	eor.w	r3, r3, #1
10008cfc:	b2db      	uxtb	r3, r3
10008cfe:	2b00      	cmp	r3, #0
10008d00:	d001      	beq.n	10008d06 <_prep_out_transaction+0x2a>
10008d02:	2301      	movs	r3, #1
10008d04:	e000      	b.n	10008d08 <_prep_out_transaction+0x2c>
10008d06:	2300      	movs	r3, #0
10008d08:	f003 0301 	and.w	r3, r3, #1
10008d0c:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
10008d0e:	f083 0301 	eor.w	r3, r3, #1
10008d12:	b2db      	uxtb	r3, r3
10008d14:	2b00      	cmp	r3, #0
10008d16:	d103      	bne.n	10008d20 <_prep_out_transaction+0x44>
10008d18:	687b      	ldr	r3, [r7, #4]
10008d1a:	78db      	ldrb	r3, [r3, #3]
10008d1c:	2b00      	cmp	r3, #0
10008d1e:	d101      	bne.n	10008d24 <_prep_out_transaction+0x48>
10008d20:	2300      	movs	r3, #0
10008d22:	e037      	b.n	10008d94 <_prep_out_transaction+0xb8>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
10008d24:	687b      	ldr	r3, [r7, #4]
10008d26:	3310      	adds	r3, #16
10008d28:	4618      	mov	r0, r3
10008d2a:	f001 fe2f 	bl	1000a98c <tu_fifo_remaining>
10008d2e:	4603      	mov	r3, r0
10008d30:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
10008d32:	89bb      	ldrh	r3, [r7, #12]
10008d34:	2b3f      	cmp	r3, #63	@ 0x3f
10008d36:	d801      	bhi.n	10008d3c <_prep_out_transaction+0x60>
10008d38:	2300      	movs	r3, #0
10008d3a:	e02b      	b.n	10008d94 <_prep_out_transaction+0xb8>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
10008d3c:	687b      	ldr	r3, [r7, #4]
10008d3e:	78da      	ldrb	r2, [r3, #3]
10008d40:	7bfb      	ldrb	r3, [r7, #15]
10008d42:	4611      	mov	r1, r2
10008d44:	4618      	mov	r0, r3
10008d46:	f7ff fc37 	bl	100085b8 <usbd_edpt_claim>
10008d4a:	4603      	mov	r3, r0
10008d4c:	f083 0301 	eor.w	r3, r3, #1
10008d50:	b2db      	uxtb	r3, r3
10008d52:	2b00      	cmp	r3, #0
10008d54:	d001      	beq.n	10008d5a <_prep_out_transaction+0x7e>
10008d56:	2300      	movs	r3, #0
10008d58:	e01c      	b.n	10008d94 <_prep_out_transaction+0xb8>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
10008d5a:	687b      	ldr	r3, [r7, #4]
10008d5c:	3310      	adds	r3, #16
10008d5e:	4618      	mov	r0, r3
10008d60:	f001 fe14 	bl	1000a98c <tu_fifo_remaining>
10008d64:	4603      	mov	r3, r0
10008d66:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) ) {
10008d68:	89bb      	ldrh	r3, [r7, #12]
10008d6a:	2b3f      	cmp	r3, #63	@ 0x3f
10008d6c:	d90a      	bls.n	10008d84 <_prep_out_transaction+0xa8>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
10008d6e:	687b      	ldr	r3, [r7, #4]
10008d70:	78d9      	ldrb	r1, [r3, #3]
10008d72:	687b      	ldr	r3, [r7, #4]
10008d74:	f503 7212 	add.w	r2, r3, #584	@ 0x248
10008d78:	7bf8      	ldrb	r0, [r7, #15]
10008d7a:	2340      	movs	r3, #64	@ 0x40
10008d7c:	f7ff fc78 	bl	10008670 <usbd_edpt_xfer>
10008d80:	4603      	mov	r3, r0
10008d82:	e007      	b.n	10008d94 <_prep_out_transaction+0xb8>
  }else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
10008d84:	687b      	ldr	r3, [r7, #4]
10008d86:	78da      	ldrb	r2, [r3, #3]
10008d88:	7bfb      	ldrb	r3, [r7, #15]
10008d8a:	4611      	mov	r1, r2
10008d8c:	4618      	mov	r0, r3
10008d8e:	f7ff fc41 	bl	10008614 <usbd_edpt_release>
    return false;
10008d92:	2300      	movs	r3, #0
  }
}
10008d94:	4618      	mov	r0, r3
10008d96:	3710      	adds	r7, #16
10008d98:	46bd      	mov	sp, r7
10008d9a:	bd80      	pop	{r7, pc}

10008d9c <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
10008d9c:	b580      	push	{r7, lr}
10008d9e:	b084      	sub	sp, #16
10008da0:	af00      	add	r7, sp, #0
10008da2:	4603      	mov	r3, r0
10008da4:	71fb      	strb	r3, [r7, #7]
10008da6:	f7fe faa5 	bl	100072f4 <tud_mounted>
10008daa:	4603      	mov	r3, r0
10008dac:	2b00      	cmp	r3, #0
10008dae:	d009      	beq.n	10008dc4 <tud_cdc_n_connected+0x28>
10008db0:	f7fe fab2 	bl	10007318 <tud_suspended>
10008db4:	4603      	mov	r3, r0
10008db6:	f083 0301 	eor.w	r3, r3, #1
10008dba:	b2db      	uxtb	r3, r3
10008dbc:	2b00      	cmp	r3, #0
10008dbe:	d001      	beq.n	10008dc4 <tud_cdc_n_connected+0x28>
10008dc0:	2301      	movs	r3, #1
10008dc2:	e000      	b.n	10008dc6 <tud_cdc_n_connected+0x2a>
10008dc4:	2300      	movs	r3, #0
10008dc6:	f003 0301 	and.w	r3, r3, #1
10008dca:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
10008dcc:	2b00      	cmp	r3, #0
10008dce:	d01a      	beq.n	10008e06 <tud_cdc_n_connected+0x6a>
10008dd0:	79fb      	ldrb	r3, [r7, #7]
10008dd2:	4a11      	ldr	r2, [pc, #68]	@ (10008e18 <tud_cdc_n_connected+0x7c>)
10008dd4:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
10008dd8:	fb01 f303 	mul.w	r3, r1, r3
10008ddc:	4413      	add	r3, r2
10008dde:	3304      	adds	r3, #4
10008de0:	781b      	ldrb	r3, [r3, #0]
10008de2:	60fb      	str	r3, [r7, #12]
10008de4:	2300      	movs	r3, #0
10008de6:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
10008de8:	7afb      	ldrb	r3, [r7, #11]
10008dea:	68fa      	ldr	r2, [r7, #12]
10008dec:	fa22 f303 	lsr.w	r3, r2, r3
10008df0:	f003 0301 	and.w	r3, r3, #1
10008df4:	2b00      	cmp	r3, #0
10008df6:	bf14      	ite	ne
10008df8:	2301      	movne	r3, #1
10008dfa:	2300      	moveq	r3, #0
10008dfc:	b2db      	uxtb	r3, r3
10008dfe:	2b00      	cmp	r3, #0
10008e00:	d001      	beq.n	10008e06 <tud_cdc_n_connected+0x6a>
10008e02:	2301      	movs	r3, #1
10008e04:	e000      	b.n	10008e08 <tud_cdc_n_connected+0x6c>
10008e06:	2300      	movs	r3, #0
10008e08:	f003 0301 	and.w	r3, r3, #1
10008e0c:	b2db      	uxtb	r3, r3
}
10008e0e:	4618      	mov	r0, r3
10008e10:	3710      	adds	r7, #16
10008e12:	46bd      	mov	sp, r7
10008e14:	bd80      	pop	{r7, pc}
10008e16:	bf00      	nop
10008e18:	20001768 	.word	0x20001768

10008e1c <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
10008e1c:	b580      	push	{r7, lr}
10008e1e:	b082      	sub	sp, #8
10008e20:	af00      	add	r7, sp, #0
10008e22:	4603      	mov	r3, r0
10008e24:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
10008e26:	79fb      	ldrb	r3, [r7, #7]
10008e28:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
10008e2c:	fb02 f303 	mul.w	r3, r2, r3
10008e30:	3310      	adds	r3, #16
10008e32:	4a05      	ldr	r2, [pc, #20]	@ (10008e48 <tud_cdc_n_available+0x2c>)
10008e34:	4413      	add	r3, r2
10008e36:	4618      	mov	r0, r3
10008e38:	f001 fd33 	bl	1000a8a2 <tu_fifo_count>
10008e3c:	4603      	mov	r3, r0
}
10008e3e:	4618      	mov	r0, r3
10008e40:	3708      	adds	r7, #8
10008e42:	46bd      	mov	sp, r7
10008e44:	bd80      	pop	{r7, pc}
10008e46:	bf00      	nop
10008e48:	20001768 	.word	0x20001768

10008e4c <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
10008e4c:	b580      	push	{r7, lr}
10008e4e:	b086      	sub	sp, #24
10008e50:	af00      	add	r7, sp, #0
10008e52:	4603      	mov	r3, r0
10008e54:	60b9      	str	r1, [r7, #8]
10008e56:	607a      	str	r2, [r7, #4]
10008e58:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
10008e5a:	7bfb      	ldrb	r3, [r7, #15]
10008e5c:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
10008e60:	fb02 f303 	mul.w	r3, r2, r3
10008e64:	4a0e      	ldr	r2, [pc, #56]	@ (10008ea0 <tud_cdc_n_read+0x54>)
10008e66:	4413      	add	r3, r2
10008e68:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
10008e6a:	697b      	ldr	r3, [r7, #20]
10008e6c:	f103 0010 	add.w	r0, r3, #16
10008e70:	687b      	ldr	r3, [r7, #4]
10008e72:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
10008e76:	4293      	cmp	r3, r2
10008e78:	d802      	bhi.n	10008e80 <tud_cdc_n_read+0x34>
10008e7a:	687b      	ldr	r3, [r7, #4]
10008e7c:	b29b      	uxth	r3, r3
10008e7e:	e001      	b.n	10008e84 <tud_cdc_n_read+0x38>
10008e80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10008e84:	461a      	mov	r2, r3
10008e86:	68b9      	ldr	r1, [r7, #8]
10008e88:	f001 fdf8 	bl	1000aa7c <tu_fifo_read_n>
10008e8c:	4603      	mov	r3, r0
10008e8e:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
10008e90:	6978      	ldr	r0, [r7, #20]
10008e92:	f7ff ff23 	bl	10008cdc <_prep_out_transaction>
  return num_read;
10008e96:	693b      	ldr	r3, [r7, #16]
}
10008e98:	4618      	mov	r0, r3
10008e9a:	3718      	adds	r7, #24
10008e9c:	46bd      	mov	sp, r7
10008e9e:	bd80      	pop	{r7, pc}
10008ea0:	20001768 	.word	0x20001768

10008ea4 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize) {
10008ea4:	b580      	push	{r7, lr}
10008ea6:	b086      	sub	sp, #24
10008ea8:	af00      	add	r7, sp, #0
10008eaa:	4603      	mov	r3, r0
10008eac:	60b9      	str	r1, [r7, #8]
10008eae:	607a      	str	r2, [r7, #4]
10008eb0:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
10008eb2:	7bfb      	ldrb	r3, [r7, #15]
10008eb4:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
10008eb8:	fb02 f303 	mul.w	r3, r2, r3
10008ebc:	4a13      	ldr	r2, [pc, #76]	@ (10008f0c <tud_cdc_n_write+0x68>)
10008ebe:	4413      	add	r3, r2
10008ec0:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
10008ec2:	697b      	ldr	r3, [r7, #20]
10008ec4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
10008ec8:	687b      	ldr	r3, [r7, #4]
10008eca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
10008ece:	4293      	cmp	r3, r2
10008ed0:	d802      	bhi.n	10008ed8 <tud_cdc_n_write+0x34>
10008ed2:	687b      	ldr	r3, [r7, #4]
10008ed4:	b29b      	uxth	r3, r3
10008ed6:	e001      	b.n	10008edc <tud_cdc_n_write+0x38>
10008ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
10008edc:	461a      	mov	r2, r3
10008ede:	68b9      	ldr	r1, [r7, #8]
10008ee0:	f001 fe40 	bl	1000ab64 <tu_fifo_write_n>
10008ee4:	4603      	mov	r3, r0
10008ee6:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
10008ee8:	697b      	ldr	r3, [r7, #20]
10008eea:	3324      	adds	r3, #36	@ 0x24
10008eec:	4618      	mov	r0, r3
10008eee:	f001 fcd8 	bl	1000a8a2 <tu_fifo_count>
10008ef2:	4603      	mov	r3, r0
10008ef4:	2b3f      	cmp	r3, #63	@ 0x3f
10008ef6:	d903      	bls.n	10008f00 <tud_cdc_n_write+0x5c>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
10008ef8:	7bfb      	ldrb	r3, [r7, #15]
10008efa:	4618      	mov	r0, r3
10008efc:	f000 f808 	bl	10008f10 <tud_cdc_n_write_flush>
  }

  return ret;
10008f00:	8a7b      	ldrh	r3, [r7, #18]
}
10008f02:	4618      	mov	r0, r3
10008f04:	3718      	adds	r7, #24
10008f06:	46bd      	mov	sp, r7
10008f08:	bd80      	pop	{r7, pc}
10008f0a:	bf00      	nop
10008f0c:	20001768 	.word	0x20001768

10008f10 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
10008f10:	b580      	push	{r7, lr}
10008f12:	b086      	sub	sp, #24
10008f14:	af00      	add	r7, sp, #0
10008f16:	4603      	mov	r3, r0
10008f18:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
10008f1a:	79fb      	ldrb	r3, [r7, #7]
10008f1c:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
10008f20:	fb02 f303 	mul.w	r3, r2, r3
10008f24:	4a39      	ldr	r2, [pc, #228]	@ (1000900c <tud_cdc_n_write_flush+0xfc>)
10008f26:	4413      	add	r3, r2
10008f28:	617b      	str	r3, [r7, #20]
10008f2a:	f7fe f9e3 	bl	100072f4 <tud_mounted>
10008f2e:	4603      	mov	r3, r0
10008f30:	2b00      	cmp	r3, #0
10008f32:	d009      	beq.n	10008f48 <tud_cdc_n_write_flush+0x38>
10008f34:	f7fe f9f0 	bl	10007318 <tud_suspended>
10008f38:	4603      	mov	r3, r0
10008f3a:	f083 0301 	eor.w	r3, r3, #1
10008f3e:	b2db      	uxtb	r3, r3
10008f40:	2b00      	cmp	r3, #0
10008f42:	d001      	beq.n	10008f48 <tud_cdc_n_write_flush+0x38>
10008f44:	2301      	movs	r3, #1
10008f46:	e000      	b.n	10008f4a <tud_cdc_n_write_flush+0x3a>
10008f48:	2300      	movs	r3, #0
10008f4a:	f003 0301 	and.w	r3, r3, #1
10008f4e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
10008f50:	f083 0301 	eor.w	r3, r3, #1
10008f54:	b2db      	uxtb	r3, r3
10008f56:	2b00      	cmp	r3, #0
10008f58:	d001      	beq.n	10008f5e <tud_cdc_n_write_flush+0x4e>
10008f5a:	2300      	movs	r3, #0
10008f5c:	e052      	b.n	10009004 <tud_cdc_n_write_flush+0xf4>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) return 0;
10008f5e:	697b      	ldr	r3, [r7, #20]
10008f60:	3324      	adds	r3, #36	@ 0x24
10008f62:	4618      	mov	r0, r3
10008f64:	f001 fc9d 	bl	1000a8a2 <tu_fifo_count>
10008f68:	4603      	mov	r3, r0
10008f6a:	2b00      	cmp	r3, #0
10008f6c:	d101      	bne.n	10008f72 <tud_cdc_n_write_flush+0x62>
10008f6e:	2300      	movs	r3, #0
10008f70:	e048      	b.n	10009004 <tud_cdc_n_write_flush+0xf4>

  uint8_t const rhport = 0;
10008f72:	2300      	movs	r3, #0
10008f74:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
10008f76:	697b      	ldr	r3, [r7, #20]
10008f78:	789a      	ldrb	r2, [r3, #2]
10008f7a:	7cfb      	ldrb	r3, [r7, #19]
10008f7c:	4611      	mov	r1, r2
10008f7e:	4618      	mov	r0, r3
10008f80:	f7ff fb1a 	bl	100085b8 <usbd_edpt_claim>
10008f84:	4603      	mov	r3, r0
10008f86:	f083 0301 	eor.w	r3, r3, #1
10008f8a:	b2db      	uxtb	r3, r3
10008f8c:	2b00      	cmp	r3, #0
10008f8e:	d001      	beq.n	10008f94 <tud_cdc_n_write_flush+0x84>
10008f90:	2300      	movs	r3, #0
10008f92:	e037      	b.n	10009004 <tud_cdc_n_write_flush+0xf4>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
10008f94:	697b      	ldr	r3, [r7, #20]
10008f96:	f103 0024 	add.w	r0, r3, #36	@ 0x24
10008f9a:	697b      	ldr	r3, [r7, #20]
10008f9c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
10008fa0:	2240      	movs	r2, #64	@ 0x40
10008fa2:	4619      	mov	r1, r3
10008fa4:	f001 fd6a 	bl	1000aa7c <tu_fifo_read_n>
10008fa8:	4603      	mov	r3, r0
10008faa:	823b      	strh	r3, [r7, #16]

  if (count) {
10008fac:	8a3b      	ldrh	r3, [r7, #16]
10008fae:	2b00      	cmp	r3, #0
10008fb0:	d020      	beq.n	10008ff4 <tud_cdc_n_write_flush+0xe4>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0);
10008fb2:	697b      	ldr	r3, [r7, #20]
10008fb4:	7899      	ldrb	r1, [r3, #2]
10008fb6:	697b      	ldr	r3, [r7, #20]
10008fb8:	f503 7222 	add.w	r2, r3, #648	@ 0x288
10008fbc:	8a3b      	ldrh	r3, [r7, #16]
10008fbe:	7cf8      	ldrb	r0, [r7, #19]
10008fc0:	f7ff fb56 	bl	10008670 <usbd_edpt_xfer>
10008fc4:	4603      	mov	r3, r0
10008fc6:	f083 0301 	eor.w	r3, r3, #1
10008fca:	b2db      	uxtb	r3, r3
10008fcc:	2b00      	cmp	r3, #0
10008fce:	d00f      	beq.n	10008ff0 <tud_cdc_n_write_flush+0xe0>
10008fd0:	22cd      	movs	r2, #205	@ 0xcd
10008fd2:	490f      	ldr	r1, [pc, #60]	@ (10009010 <tud_cdc_n_write_flush+0x100>)
10008fd4:	480f      	ldr	r0, [pc, #60]	@ (10009014 <tud_cdc_n_write_flush+0x104>)
10008fd6:	f7fc ff2f 	bl	10005e38 <__wrap_printf>
10008fda:	4b0f      	ldr	r3, [pc, #60]	@ (10009018 <tud_cdc_n_write_flush+0x108>)
10008fdc:	60fb      	str	r3, [r7, #12]
10008fde:	68fb      	ldr	r3, [r7, #12]
10008fe0:	681b      	ldr	r3, [r3, #0]
10008fe2:	f003 0301 	and.w	r3, r3, #1
10008fe6:	2b00      	cmp	r3, #0
10008fe8:	d000      	beq.n	10008fec <tud_cdc_n_write_flush+0xdc>
10008fea:	be00      	bkpt	0x0000
10008fec:	2300      	movs	r3, #0
10008fee:	e009      	b.n	10009004 <tud_cdc_n_write_flush+0xf4>
    return count;
10008ff0:	8a3b      	ldrh	r3, [r7, #16]
10008ff2:	e007      	b.n	10009004 <tud_cdc_n_write_flush+0xf4>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
10008ff4:	697b      	ldr	r3, [r7, #20]
10008ff6:	789a      	ldrb	r2, [r3, #2]
10008ff8:	7cfb      	ldrb	r3, [r7, #19]
10008ffa:	4611      	mov	r1, r2
10008ffc:	4618      	mov	r0, r3
10008ffe:	f7ff fb09 	bl	10008614 <usbd_edpt_release>
    return 0;
10009002:	2300      	movs	r3, #0
  }
}
10009004:	4618      	mov	r0, r3
10009006:	3718      	adds	r7, #24
10009008:	46bd      	mov	sp, r7
1000900a:	bd80      	pop	{r7, pc}
1000900c:	20001768 	.word	0x20001768
10009010:	1000c0b0 	.word	0x1000c0b0
10009014:	1000c098 	.word	0x1000c098
10009018:	e000edf0 	.word	0xe000edf0

1000901c <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
1000901c:	b580      	push	{r7, lr}
1000901e:	b082      	sub	sp, #8
10009020:	af00      	add	r7, sp, #0
10009022:	4603      	mov	r3, r0
10009024:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
10009026:	79fb      	ldrb	r3, [r7, #7]
10009028:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
1000902c:	fb02 f303 	mul.w	r3, r2, r3
10009030:	3320      	adds	r3, #32
10009032:	4a05      	ldr	r2, [pc, #20]	@ (10009048 <tud_cdc_n_write_available+0x2c>)
10009034:	4413      	add	r3, r2
10009036:	3304      	adds	r3, #4
10009038:	4618      	mov	r0, r3
1000903a:	f001 fca7 	bl	1000a98c <tu_fifo_remaining>
1000903e:	4603      	mov	r3, r0
}
10009040:	4618      	mov	r0, r3
10009042:	3708      	adds	r7, #8
10009044:	46bd      	mov	sp, r7
10009046:	bd80      	pop	{r7, pc}
10009048:	20001768 	.word	0x20001768

1000904c <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
1000904c:	b580      	push	{r7, lr}
1000904e:	b090      	sub	sp, #64	@ 0x40
10009050:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
10009052:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
10009056:	2100      	movs	r1, #0
10009058:	4847      	ldr	r0, [pc, #284]	@ (10009178 <cdcd_init+0x12c>)
1000905a:	f002 f811 	bl	1000b080 <memset>
  tu_memclr(&_cdcd_fifo_cfg, sizeof(_cdcd_fifo_cfg));
1000905e:	2201      	movs	r2, #1
10009060:	2100      	movs	r1, #0
10009062:	4846      	ldr	r0, [pc, #280]	@ (1000917c <cdcd_init+0x130>)
10009064:	f002 f80c 	bl	1000b080 <memset>

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
10009068:	2300      	movs	r3, #0
1000906a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
1000906e:	e07a      	b.n	10009166 <cdcd_init+0x11a>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
10009070:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
10009074:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
10009078:	fb02 f303 	mul.w	r3, r2, r3
1000907c:	4a3e      	ldr	r2, [pc, #248]	@ (10009178 <cdcd_init+0x12c>)
1000907e:	4413      	add	r3, r2
10009080:	633b      	str	r3, [r7, #48]	@ 0x30

    p_cdc->wanted_char = (char) -1;
10009082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009084:	22ff      	movs	r2, #255	@ 0xff
10009086:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
10009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000908a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
1000908e:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
10009090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009092:	2200      	movs	r2, #0
10009094:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
10009096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009098:	2200      	movs	r2, #0
1000909a:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
1000909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000909e:	2208      	movs	r2, #8
100090a0:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
100090a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100090a4:	f103 0010 	add.w	r0, r3, #16
100090a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100090aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
100090ae:	2300      	movs	r3, #0
100090b0:	9300      	str	r3, [sp, #0]
100090b2:	2301      	movs	r3, #1
100090b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
100090b8:	f001 f847 	bl	1000a14a <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
100090bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100090be:	f103 0024 	add.w	r0, r3, #36	@ 0x24
100090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100090c4:	f503 719c 	add.w	r1, r3, #312	@ 0x138
100090c8:	2301      	movs	r3, #1
100090ca:	9300      	str	r3, [sp, #0]
100090cc:	2301      	movs	r3, #1
100090ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
100090d2:	f001 f83a 	bl	1000a14a <tu_fifo_config>

    #if OSAL_MUTEX_REQUIRED
    osal_mutex_t mutex_rd = osal_mutex_create(&p_cdc->rx_ff_mutex);
100090d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100090d8:	f503 730e 	add.w	r3, r3, #568	@ 0x238
100090dc:	61fb      	str	r3, [r7, #28]
  mutex_init(mdef);
100090de:	69f8      	ldr	r0, [r7, #28]
100090e0:	f7f8 fcbc 	bl	10001a5c <mutex_init>
  return mdef;
100090e4:	69fb      	ldr	r3, [r7, #28]
100090e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    osal_mutex_t mutex_wr = osal_mutex_create(&p_cdc->tx_ff_mutex);
100090e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100090ea:	f503 7310 	add.w	r3, r3, #576	@ 0x240
100090ee:	623b      	str	r3, [r7, #32]
  mutex_init(mdef);
100090f0:	6a38      	ldr	r0, [r7, #32]
100090f2:	f7f8 fcb3 	bl	10001a5c <mutex_init>
  return mdef;
100090f6:	6a3b      	ldr	r3, [r7, #32]
100090f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    TU_ASSERT(mutex_rd != NULL && mutex_wr != NULL, );
100090fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100090fc:	2b00      	cmp	r3, #0
100090fe:	d002      	beq.n	10009106 <cdcd_init+0xba>
10009100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009102:	2b00      	cmp	r3, #0
10009104:	d10e      	bne.n	10009124 <cdcd_init+0xd8>
10009106:	22fc      	movs	r2, #252	@ 0xfc
10009108:	491d      	ldr	r1, [pc, #116]	@ (10009180 <cdcd_init+0x134>)
1000910a:	481e      	ldr	r0, [pc, #120]	@ (10009184 <cdcd_init+0x138>)
1000910c:	f7fc fe94 	bl	10005e38 <__wrap_printf>
10009110:	4b1d      	ldr	r3, [pc, #116]	@ (10009188 <cdcd_init+0x13c>)
10009112:	627b      	str	r3, [r7, #36]	@ 0x24
10009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009116:	681b      	ldr	r3, [r3, #0]
10009118:	f003 0301 	and.w	r3, r3, #1
1000911c:	2b00      	cmp	r3, #0
1000911e:	d027      	beq.n	10009170 <cdcd_init+0x124>
10009120:	be00      	bkpt	0x0000
10009122:	e025      	b.n	10009170 <cdcd_init+0x124>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
10009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009126:	3310      	adds	r3, #16
10009128:	60fb      	str	r3, [r7, #12]
1000912a:	2300      	movs	r3, #0
1000912c:	60bb      	str	r3, [r7, #8]
1000912e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10009130:	607b      	str	r3, [r7, #4]
bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable);

#if OSAL_MUTEX_REQUIRED
TU_ATTR_ALWAYS_INLINE static inline
void tu_fifo_config_mutex(tu_fifo_t *f, osal_mutex_t wr_mutex, osal_mutex_t rd_mutex) {
  f->mutex_wr = wr_mutex;
10009132:	68fb      	ldr	r3, [r7, #12]
10009134:	68ba      	ldr	r2, [r7, #8]
10009136:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
10009138:	68fb      	ldr	r3, [r7, #12]
1000913a:	687a      	ldr	r2, [r7, #4]
1000913c:	611a      	str	r2, [r3, #16]
}
1000913e:	bf00      	nop
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
10009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009142:	3324      	adds	r3, #36	@ 0x24
10009144:	61bb      	str	r3, [r7, #24]
10009146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009148:	617b      	str	r3, [r7, #20]
1000914a:	2300      	movs	r3, #0
1000914c:	613b      	str	r3, [r7, #16]
  f->mutex_wr = wr_mutex;
1000914e:	69bb      	ldr	r3, [r7, #24]
10009150:	697a      	ldr	r2, [r7, #20]
10009152:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
10009154:	69bb      	ldr	r3, [r7, #24]
10009156:	693a      	ldr	r2, [r7, #16]
10009158:	611a      	str	r2, [r3, #16]
}
1000915a:	bf00      	nop
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
1000915c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
10009160:	3301      	adds	r3, #1
10009162:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10009166:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
1000916a:	2b00      	cmp	r3, #0
1000916c:	d080      	beq.n	10009070 <cdcd_init+0x24>
1000916e:	e000      	b.n	10009172 <cdcd_init+0x126>
    TU_ASSERT(mutex_rd != NULL && mutex_wr != NULL, );
10009170:	bf00      	nop
    #endif
  }
}
10009172:	3738      	adds	r7, #56	@ 0x38
10009174:	46bd      	mov	sp, r7
10009176:	bd80      	pop	{r7, pc}
10009178:	20001768 	.word	0x20001768
1000917c:	20001764 	.word	0x20001764
10009180:	1000c0c8 	.word	0x1000c0c8
10009184:	1000c098 	.word	0x1000c098
10009188:	e000edf0 	.word	0xe000edf0

1000918c <cdcd_deinit>:

bool cdcd_deinit(void) {
1000918c:	b480      	push	{r7}
1000918e:	b08d      	sub	sp, #52	@ 0x34
10009190:	af00      	add	r7, sp, #0
  #if OSAL_MUTEX_REQUIRED
  for(uint8_t i=0; i<CFG_TUD_CDC; i++) {
10009192:	2300      	movs	r3, #0
10009194:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
10009198:	e039      	b.n	1000920e <cdcd_deinit+0x82>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
1000919a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
1000919e:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
100091a2:	fb02 f303 	mul.w	r3, r2, r3
100091a6:	4a1f      	ldr	r2, [pc, #124]	@ (10009224 <cdcd_deinit+0x98>)
100091a8:	4413      	add	r3, r2
100091aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    osal_mutex_t mutex_rd = p_cdc->rx_ff.mutex_rd;
100091ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100091ae:	6a1b      	ldr	r3, [r3, #32]
100091b0:	627b      	str	r3, [r7, #36]	@ 0x24
    osal_mutex_t mutex_wr = p_cdc->tx_ff.mutex_wr;
100091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100091b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
100091b6:	623b      	str	r3, [r7, #32]

    if (mutex_rd) {
100091b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100091ba:	2b00      	cmp	r3, #0
100091bc:	d00f      	beq.n	100091de <cdcd_deinit+0x52>
100091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
100091c0:	613b      	str	r3, [r7, #16]
      osal_mutex_delete(mutex_rd);
      tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, NULL);
100091c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100091c4:	3310      	adds	r3, #16
100091c6:	61fb      	str	r3, [r7, #28]
100091c8:	2300      	movs	r3, #0
100091ca:	61bb      	str	r3, [r7, #24]
100091cc:	2300      	movs	r3, #0
100091ce:	617b      	str	r3, [r7, #20]
  f->mutex_wr = wr_mutex;
100091d0:	69fb      	ldr	r3, [r7, #28]
100091d2:	69ba      	ldr	r2, [r7, #24]
100091d4:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
100091d6:	69fb      	ldr	r3, [r7, #28]
100091d8:	697a      	ldr	r2, [r7, #20]
100091da:	611a      	str	r2, [r3, #16]
}
100091dc:	bf00      	nop
    }

    if (mutex_wr) {
100091de:	6a3b      	ldr	r3, [r7, #32]
100091e0:	2b00      	cmp	r3, #0
100091e2:	d00f      	beq.n	10009204 <cdcd_deinit+0x78>
100091e4:	6a3b      	ldr	r3, [r7, #32]
100091e6:	603b      	str	r3, [r7, #0]
      osal_mutex_delete(mutex_wr);
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
100091e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100091ea:	3324      	adds	r3, #36	@ 0x24
100091ec:	60fb      	str	r3, [r7, #12]
100091ee:	2300      	movs	r3, #0
100091f0:	60bb      	str	r3, [r7, #8]
100091f2:	2300      	movs	r3, #0
100091f4:	607b      	str	r3, [r7, #4]
  f->mutex_wr = wr_mutex;
100091f6:	68fb      	ldr	r3, [r7, #12]
100091f8:	68ba      	ldr	r2, [r7, #8]
100091fa:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
100091fc:	68fb      	ldr	r3, [r7, #12]
100091fe:	687a      	ldr	r2, [r7, #4]
10009200:	611a      	str	r2, [r3, #16]
}
10009202:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_CDC; i++) {
10009204:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
10009208:	3301      	adds	r3, #1
1000920a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
1000920e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
10009212:	2b00      	cmp	r3, #0
10009214:	d0c1      	beq.n	1000919a <cdcd_deinit+0xe>
    }
  }
  #endif

  return true;
10009216:	2301      	movs	r3, #1
}
10009218:	4618      	mov	r0, r3
1000921a:	3734      	adds	r7, #52	@ 0x34
1000921c:	46bd      	mov	sp, r7
1000921e:	f85d 7b04 	ldr.w	r7, [sp], #4
10009222:	4770      	bx	lr
10009224:	20001768 	.word	0x20001768

10009228 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
10009228:	b580      	push	{r7, lr}
1000922a:	b084      	sub	sp, #16
1000922c:	af00      	add	r7, sp, #0
1000922e:	4603      	mov	r3, r0
10009230:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
10009232:	2300      	movs	r3, #0
10009234:	73fb      	strb	r3, [r7, #15]
10009236:	e02d      	b.n	10009294 <cdcd_reset+0x6c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
10009238:	7bfb      	ldrb	r3, [r7, #15]
1000923a:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
1000923e:	fb02 f303 	mul.w	r3, r2, r3
10009242:	4a18      	ldr	r2, [pc, #96]	@ (100092a4 <cdcd_reset+0x7c>)
10009244:	4413      	add	r3, r2
10009246:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
10009248:	2205      	movs	r2, #5
1000924a:	2100      	movs	r1, #0
1000924c:	68b8      	ldr	r0, [r7, #8]
1000924e:	f001 ff17 	bl	1000b080 <memset>
    if (!_cdcd_fifo_cfg.rx_persistent) tu_fifo_clear(&p_cdc->rx_ff);
10009252:	4b15      	ldr	r3, [pc, #84]	@ (100092a8 <cdcd_reset+0x80>)
10009254:	781b      	ldrb	r3, [r3, #0]
10009256:	f003 0301 	and.w	r3, r3, #1
1000925a:	b2db      	uxtb	r3, r3
1000925c:	2b00      	cmp	r3, #0
1000925e:	d104      	bne.n	1000926a <cdcd_reset+0x42>
10009260:	68bb      	ldr	r3, [r7, #8]
10009262:	3310      	adds	r3, #16
10009264:	4618      	mov	r0, r3
10009266:	f001 fc8f 	bl	1000ab88 <tu_fifo_clear>
    if (!_cdcd_fifo_cfg.tx_persistent) tu_fifo_clear(&p_cdc->tx_ff);
1000926a:	4b0f      	ldr	r3, [pc, #60]	@ (100092a8 <cdcd_reset+0x80>)
1000926c:	781b      	ldrb	r3, [r3, #0]
1000926e:	f003 0302 	and.w	r3, r3, #2
10009272:	b2db      	uxtb	r3, r3
10009274:	2b00      	cmp	r3, #0
10009276:	d104      	bne.n	10009282 <cdcd_reset+0x5a>
10009278:	68bb      	ldr	r3, [r7, #8]
1000927a:	3324      	adds	r3, #36	@ 0x24
1000927c:	4618      	mov	r0, r3
1000927e:	f001 fc83 	bl	1000ab88 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
10009282:	68bb      	ldr	r3, [r7, #8]
10009284:	3324      	adds	r3, #36	@ 0x24
10009286:	2101      	movs	r1, #1
10009288:	4618      	mov	r0, r3
1000928a:	f001 fcc4 	bl	1000ac16 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
1000928e:	7bfb      	ldrb	r3, [r7, #15]
10009290:	3301      	adds	r3, #1
10009292:	73fb      	strb	r3, [r7, #15]
10009294:	7bfb      	ldrb	r3, [r7, #15]
10009296:	2b00      	cmp	r3, #0
10009298:	d0ce      	beq.n	10009238 <cdcd_reset+0x10>
  }
}
1000929a:	bf00      	nop
1000929c:	bf00      	nop
1000929e:	3710      	adds	r7, #16
100092a0:	46bd      	mov	sp, r7
100092a2:	bd80      	pop	{r7, pc}
100092a4:	20001768 	.word	0x20001768
100092a8:	20001764 	.word	0x20001764

100092ac <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len) {
100092ac:	b580      	push	{r7, lr}
100092ae:	b09a      	sub	sp, #104	@ 0x68
100092b0:	af02      	add	r7, sp, #8
100092b2:	4603      	mov	r3, r0
100092b4:	6039      	str	r1, [r7, #0]
100092b6:	71fb      	strb	r3, [r7, #7]
100092b8:	4613      	mov	r3, r2
100092ba:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
100092bc:	683b      	ldr	r3, [r7, #0]
100092be:	795b      	ldrb	r3, [r3, #5]
100092c0:	2b02      	cmp	r3, #2
100092c2:	d103      	bne.n	100092cc <cdcd_open+0x20>
100092c4:	683b      	ldr	r3, [r7, #0]
100092c6:	799b      	ldrb	r3, [r3, #6]
100092c8:	2b02      	cmp	r3, #2
100092ca:	d001      	beq.n	100092d0 <cdcd_open+0x24>
100092cc:	2300      	movs	r3, #0
100092ce:	e0f3      	b.n	100094b8 <cdcd_open+0x20c>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc = NULL;
100092d0:	2300      	movs	r3, #0
100092d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for (uint8_t cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
100092d4:	2300      	movs	r3, #0
100092d6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
100092da:	e01a      	b.n	10009312 <cdcd_open+0x66>
    if (_cdcd_itf[cdc_id].ep_in == 0) {
100092dc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
100092e0:	4a77      	ldr	r2, [pc, #476]	@ (100094c0 <cdcd_open+0x214>)
100092e2:	f44f 7132 	mov.w	r1, #712	@ 0x2c8
100092e6:	fb01 f303 	mul.w	r3, r1, r3
100092ea:	4413      	add	r3, r2
100092ec:	3302      	adds	r3, #2
100092ee:	781b      	ldrb	r3, [r3, #0]
100092f0:	2b00      	cmp	r3, #0
100092f2:	d109      	bne.n	10009308 <cdcd_open+0x5c>
      p_cdc = &_cdcd_itf[cdc_id];
100092f4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
100092f8:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
100092fc:	fb02 f303 	mul.w	r3, r2, r3
10009300:	4a6f      	ldr	r2, [pc, #444]	@ (100094c0 <cdcd_open+0x214>)
10009302:	4413      	add	r3, r2
10009304:	65fb      	str	r3, [r7, #92]	@ 0x5c
      break;
10009306:	e008      	b.n	1000931a <cdcd_open+0x6e>
  for (uint8_t cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
10009308:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
1000930c:	3301      	adds	r3, #1
1000930e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
10009312:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
10009316:	2b00      	cmp	r3, #0
10009318:	d0e0      	beq.n	100092dc <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
1000931a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1000931c:	2b00      	cmp	r3, #0
1000931e:	d110      	bne.n	10009342 <cdcd_open+0x96>
10009320:	f44f 729a 	mov.w	r2, #308	@ 0x134
10009324:	4967      	ldr	r1, [pc, #412]	@ (100094c4 <cdcd_open+0x218>)
10009326:	4868      	ldr	r0, [pc, #416]	@ (100094c8 <cdcd_open+0x21c>)
10009328:	f7fc fd86 	bl	10005e38 <__wrap_printf>
1000932c:	4b67      	ldr	r3, [pc, #412]	@ (100094cc <cdcd_open+0x220>)
1000932e:	647b      	str	r3, [r7, #68]	@ 0x44
10009330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10009332:	681b      	ldr	r3, [r3, #0]
10009334:	f003 0301 	and.w	r3, r3, #1
10009338:	2b00      	cmp	r3, #0
1000933a:	d000      	beq.n	1000933e <cdcd_open+0x92>
1000933c:	be00      	bkpt	0x0000
1000933e:	2300      	movs	r3, #0
10009340:	e0ba      	b.n	100094b8 <cdcd_open+0x20c>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
10009342:	683b      	ldr	r3, [r7, #0]
10009344:	789a      	ldrb	r2, [r3, #2]
10009346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10009348:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
1000934a:	2309      	movs	r3, #9
1000934c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
10009350:	683b      	ldr	r3, [r7, #0]
10009352:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t const* desc8 = (uint8_t const*) desc;
10009354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10009356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
10009358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1000935a:	781b      	ldrb	r3, [r3, #0]
1000935c:	461a      	mov	r2, r3
1000935e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10009360:	4413      	add	r3, r2
  uint8_t const* p_desc = tu_desc_next(itf_desc);
10009362:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
10009364:	e013      	b.n	1000938e <cdcd_open+0xe2>
10009366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10009368:	633b      	str	r3, [r7, #48]	@ 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
1000936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000936c:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
1000936e:	461a      	mov	r2, r3
10009370:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
10009374:	4413      	add	r3, r2
10009376:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
1000937a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000937c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
1000937e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10009380:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
10009382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10009384:	781b      	ldrb	r3, [r3, #0]
10009386:	461a      	mov	r2, r3
10009388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000938a:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
1000938c:	657b      	str	r3, [r7, #84]	@ 0x54
1000938e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10009390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10009394:	3301      	adds	r3, #1
10009396:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
10009398:	2b24      	cmp	r3, #36	@ 0x24
1000939a:	d104      	bne.n	100093a6 <cdcd_open+0xfa>
1000939c:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
100093a0:	88bb      	ldrh	r3, [r7, #4]
100093a2:	429a      	cmp	r2, r3
100093a4:	d9df      	bls.n	10009366 <cdcd_open+0xba>
100093a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100093a8:	62bb      	str	r3, [r7, #40]	@ 0x28
100093aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
100093ac:	3301      	adds	r3, #1
100093ae:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
100093b0:	2b05      	cmp	r3, #5
100093b2:	d135      	bne.n	10009420 <cdcd_open+0x174>
    // notification endpoint
    tusb_desc_endpoint_t const* desc_ep = (tusb_desc_endpoint_t const*) p_desc;
100093b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100093b6:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
100093b8:	79fb      	ldrb	r3, [r7, #7]
100093ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
100093bc:	4618      	mov	r0, r3
100093be:	f7ff f8a7 	bl	10008510 <usbd_edpt_open>
100093c2:	4603      	mov	r3, r0
100093c4:	f083 0301 	eor.w	r3, r3, #1
100093c8:	b2db      	uxtb	r3, r3
100093ca:	2b00      	cmp	r3, #0
100093cc:	d010      	beq.n	100093f0 <cdcd_open+0x144>
100093ce:	f44f 72a3 	mov.w	r2, #326	@ 0x146
100093d2:	493c      	ldr	r1, [pc, #240]	@ (100094c4 <cdcd_open+0x218>)
100093d4:	483c      	ldr	r0, [pc, #240]	@ (100094c8 <cdcd_open+0x21c>)
100093d6:	f7fc fd2f 	bl	10005e38 <__wrap_printf>
100093da:	4b3c      	ldr	r3, [pc, #240]	@ (100094cc <cdcd_open+0x220>)
100093dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
100093de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
100093e0:	681b      	ldr	r3, [r3, #0]
100093e2:	f003 0301 	and.w	r3, r3, #1
100093e6:	2b00      	cmp	r3, #0
100093e8:	d000      	beq.n	100093ec <cdcd_open+0x140>
100093ea:	be00      	bkpt	0x0000
100093ec:	2300      	movs	r3, #0
100093ee:	e063      	b.n	100094b8 <cdcd_open+0x20c>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
100093f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
100093f2:	789a      	ldrb	r2, [r3, #2]
100093f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
100093f6:	705a      	strb	r2, [r3, #1]
100093f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
100093fa:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
100093fc:	69fb      	ldr	r3, [r7, #28]
100093fe:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
10009400:	461a      	mov	r2, r3
10009402:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
10009406:	4413      	add	r3, r2
10009408:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
1000940c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000940e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
10009410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009412:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
10009414:	6a3b      	ldr	r3, [r7, #32]
10009416:	781b      	ldrb	r3, [r3, #0]
10009418:	461a      	mov	r2, r3
1000941a:	6a3b      	ldr	r3, [r7, #32]
1000941c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
1000941e:	657b      	str	r3, [r7, #84]	@ 0x54
10009420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10009422:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10009424:	69bb      	ldr	r3, [r7, #24]
10009426:	3301      	adds	r3, #1
10009428:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
1000942a:	2b04      	cmp	r3, #4
1000942c:	d13f      	bne.n	100094ae <cdcd_open+0x202>
      (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const*) p_desc)->bInterfaceClass)) {
1000942e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10009430:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
10009432:	2b0a      	cmp	r3, #10
10009434:	d13b      	bne.n	100094ae <cdcd_open+0x202>
10009436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
10009438:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
1000943a:	68fb      	ldr	r3, [r7, #12]
1000943c:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
1000943e:	461a      	mov	r2, r3
10009440:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
10009444:	4413      	add	r3, r2
10009446:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
1000944a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
1000944c:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
1000944e:	697b      	ldr	r3, [r7, #20]
10009450:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
10009452:	693b      	ldr	r3, [r7, #16]
10009454:	781b      	ldrb	r3, [r3, #0]
10009456:	461a      	mov	r2, r3
10009458:	693b      	ldr	r3, [r7, #16]
1000945a:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
1000945c:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
1000945e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
10009460:	3303      	adds	r3, #3
10009462:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
10009464:	3202      	adds	r2, #2
10009466:	79f8      	ldrb	r0, [r7, #7]
10009468:	9201      	str	r2, [sp, #4]
1000946a:	9300      	str	r3, [sp, #0]
1000946c:	2302      	movs	r3, #2
1000946e:	2202      	movs	r2, #2
10009470:	6d79      	ldr	r1, [r7, #84]	@ 0x54
10009472:	f7fe ffd5 	bl	10008420 <usbd_open_edpt_pair>
10009476:	4603      	mov	r3, r0
10009478:	f083 0301 	eor.w	r3, r3, #1
1000947c:	b2db      	uxtb	r3, r3
1000947e:	2b00      	cmp	r3, #0
10009480:	d010      	beq.n	100094a4 <cdcd_open+0x1f8>
10009482:	f240 1255 	movw	r2, #341	@ 0x155
10009486:	490f      	ldr	r1, [pc, #60]	@ (100094c4 <cdcd_open+0x218>)
10009488:	480f      	ldr	r0, [pc, #60]	@ (100094c8 <cdcd_open+0x21c>)
1000948a:	f7fc fcd5 	bl	10005e38 <__wrap_printf>
1000948e:	4b0f      	ldr	r3, [pc, #60]	@ (100094cc <cdcd_open+0x220>)
10009490:	64bb      	str	r3, [r7, #72]	@ 0x48
10009492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
10009494:	681b      	ldr	r3, [r3, #0]
10009496:	f003 0301 	and.w	r3, r3, #1
1000949a:	2b00      	cmp	r3, #0
1000949c:	d000      	beq.n	100094a0 <cdcd_open+0x1f4>
1000949e:	be00      	bkpt	0x0000
100094a0:	2300      	movs	r3, #0
100094a2:	e009      	b.n	100094b8 <cdcd_open+0x20c>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
100094a4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
100094a8:	330e      	adds	r3, #14
100094aa:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
100094ae:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
100094b0:	f7ff fc14 	bl	10008cdc <_prep_out_transaction>

  return drv_len;
100094b4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
100094b8:	4618      	mov	r0, r3
100094ba:	3760      	adds	r7, #96	@ 0x60
100094bc:	46bd      	mov	sp, r7
100094be:	bd80      	pop	{r7, pc}
100094c0:	20001768 	.word	0x20001768
100094c4:	1000c0d4 	.word	0x1000c0d4
100094c8:	1000c098 	.word	0x1000c098
100094cc:	e000edf0 	.word	0xe000edf0

100094d0 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
100094d0:	b580      	push	{r7, lr}
100094d2:	b08a      	sub	sp, #40	@ 0x28
100094d4:	af00      	add	r7, sp, #0
100094d6:	4603      	mov	r3, r0
100094d8:	603a      	str	r2, [r7, #0]
100094da:	71fb      	strb	r3, [r7, #7]
100094dc:	460b      	mov	r3, r1
100094de:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
100094e0:	683b      	ldr	r3, [r7, #0]
100094e2:	781b      	ldrb	r3, [r3, #0]
100094e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
100094e8:	b2db      	uxtb	r3, r3
100094ea:	2b20      	cmp	r3, #32
100094ec:	d001      	beq.n	100094f2 <cdcd_control_xfer_cb+0x22>
100094ee:	2300      	movs	r3, #0
100094f0:	e0cf      	b.n	10009692 <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
100094f2:	2300      	movs	r3, #0
100094f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
100094f8:	4b68      	ldr	r3, [pc, #416]	@ (1000969c <cdcd_control_xfer_cb+0x1cc>)
100094fa:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for (;; itf++, p_cdc++) {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
100094fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009500:	2b00      	cmp	r3, #0
10009502:	d001      	beq.n	10009508 <cdcd_control_xfer_cb+0x38>
10009504:	2300      	movs	r3, #0
10009506:	e0c4      	b.n	10009692 <cdcd_control_xfer_cb+0x1c2>

    if (p_cdc->itf_num == request->wIndex) break;
10009508:	6a3b      	ldr	r3, [r7, #32]
1000950a:	781b      	ldrb	r3, [r3, #0]
1000950c:	461a      	mov	r2, r3
1000950e:	683b      	ldr	r3, [r7, #0]
10009510:	889b      	ldrh	r3, [r3, #4]
10009512:	b29b      	uxth	r3, r3
10009514:	429a      	cmp	r2, r3
10009516:	d009      	beq.n	1000952c <cdcd_control_xfer_cb+0x5c>
  for (;; itf++, p_cdc++) {
10009518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
1000951c:	3301      	adds	r3, #1
1000951e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
10009522:	6a3b      	ldr	r3, [r7, #32]
10009524:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
10009528:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
1000952a:	e7e7      	b.n	100094fc <cdcd_control_xfer_cb+0x2c>
    if (p_cdc->itf_num == request->wIndex) break;
1000952c:	bf00      	nop
  }

  switch (request->bRequest) {
1000952e:	683b      	ldr	r3, [r7, #0]
10009530:	785b      	ldrb	r3, [r3, #1]
10009532:	3b20      	subs	r3, #32
10009534:	2b03      	cmp	r3, #3
10009536:	f200 80a2 	bhi.w	1000967e <cdcd_control_xfer_cb+0x1ae>
1000953a:	a201      	add	r2, pc, #4	@ (adr r2, 10009540 <cdcd_control_xfer_cb+0x70>)
1000953c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10009540:	10009551 	.word	0x10009551
10009544:	1000958d 	.word	0x1000958d
10009548:	100095a5 	.word	0x100095a5
1000954c:	1000964d 	.word	0x1000964d
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
10009550:	79bb      	ldrb	r3, [r7, #6]
10009552:	2b01      	cmp	r3, #1
10009554:	d108      	bne.n	10009568 <cdcd_control_xfer_cb+0x98>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10009556:	6a3b      	ldr	r3, [r7, #32]
10009558:	f103 0208 	add.w	r2, r3, #8
1000955c:	79f8      	ldrb	r0, [r7, #7]
1000955e:	2307      	movs	r3, #7
10009560:	6839      	ldr	r1, [r7, #0]
10009562:	f7ff fa3d 	bl	100089e0 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
      break;
10009566:	e08c      	b.n	10009682 <cdcd_control_xfer_cb+0x1b2>
      } else if (stage == CONTROL_STAGE_ACK) {
10009568:	79bb      	ldrb	r3, [r7, #6]
1000956a:	2b03      	cmp	r3, #3
1000956c:	f040 8089 	bne.w	10009682 <cdcd_control_xfer_cb+0x1b2>
        if (tud_cdc_line_coding_cb) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
10009570:	4b4b      	ldr	r3, [pc, #300]	@ (100096a0 <cdcd_control_xfer_cb+0x1d0>)
10009572:	2b00      	cmp	r3, #0
10009574:	f000 8085 	beq.w	10009682 <cdcd_control_xfer_cb+0x1b2>
10009578:	6a3b      	ldr	r3, [r7, #32]
1000957a:	f103 0208 	add.w	r2, r3, #8
1000957e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009582:	4611      	mov	r1, r2
10009584:	4618      	mov	r0, r3
10009586:	f7fc fd51 	bl	1000602c <tud_cdc_line_coding_cb>
      break;
1000958a:	e07a      	b.n	10009682 <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
1000958c:	79bb      	ldrb	r3, [r7, #6]
1000958e:	2b01      	cmp	r3, #1
10009590:	d179      	bne.n	10009686 <cdcd_control_xfer_cb+0x1b6>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
10009592:	6a3b      	ldr	r3, [r7, #32]
10009594:	f103 0208 	add.w	r2, r3, #8
10009598:	79f8      	ldrb	r0, [r7, #7]
1000959a:	2307      	movs	r3, #7
1000959c:	6839      	ldr	r1, [r7, #0]
1000959e:	f7ff fa1f 	bl	100089e0 <tud_control_xfer>
      }
      break;
100095a2:	e070      	b.n	10009686 <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
100095a4:	79bb      	ldrb	r3, [r7, #6]
100095a6:	2b01      	cmp	r3, #1
100095a8:	d105      	bne.n	100095b6 <cdcd_control_xfer_cb+0xe6>
        tud_control_status(rhport, request);
100095aa:	79fb      	ldrb	r3, [r7, #7]
100095ac:	6839      	ldr	r1, [r7, #0]
100095ae:	4618      	mov	r0, r3
100095b0:	f7ff f9a4 	bl	100088fc <tud_control_status>
        TU_LOG_DRV("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if (tud_cdc_line_state_cb) tud_cdc_line_state_cb(itf, dtr, rts);
      }
      break;
100095b4:	e069      	b.n	1000968a <cdcd_control_xfer_cb+0x1ba>
      } else if (stage == CONTROL_STAGE_ACK) {
100095b6:	79bb      	ldrb	r3, [r7, #6]
100095b8:	2b03      	cmp	r3, #3
100095ba:	d166      	bne.n	1000968a <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
100095bc:	683b      	ldr	r3, [r7, #0]
100095be:	885b      	ldrh	r3, [r3, #2]
100095c0:	b29b      	uxth	r3, r3
100095c2:	613b      	str	r3, [r7, #16]
100095c4:	2300      	movs	r3, #0
100095c6:	73fb      	strb	r3, [r7, #15]
100095c8:	7bfb      	ldrb	r3, [r7, #15]
100095ca:	693a      	ldr	r2, [r7, #16]
100095cc:	fa22 f303 	lsr.w	r3, r2, r3
100095d0:	f003 0301 	and.w	r3, r3, #1
100095d4:	2b00      	cmp	r3, #0
100095d6:	bf14      	ite	ne
100095d8:	2301      	movne	r3, #1
100095da:	2300      	moveq	r3, #0
100095dc:	b2db      	uxtb	r3, r3
100095de:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
100095e0:	683b      	ldr	r3, [r7, #0]
100095e2:	885b      	ldrh	r3, [r3, #2]
100095e4:	b29b      	uxth	r3, r3
100095e6:	61bb      	str	r3, [r7, #24]
100095e8:	2301      	movs	r3, #1
100095ea:	75fb      	strb	r3, [r7, #23]
100095ec:	7dfb      	ldrb	r3, [r7, #23]
100095ee:	69ba      	ldr	r2, [r7, #24]
100095f0:	fa22 f303 	lsr.w	r3, r2, r3
100095f4:	f003 0301 	and.w	r3, r3, #1
100095f8:	2b00      	cmp	r3, #0
100095fa:	bf14      	ite	ne
100095fc:	2301      	movne	r3, #1
100095fe:	2300      	moveq	r3, #0
10009600:	b2db      	uxtb	r3, r3
10009602:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
10009604:	683b      	ldr	r3, [r7, #0]
10009606:	885b      	ldrh	r3, [r3, #2]
10009608:	b29b      	uxth	r3, r3
1000960a:	b2da      	uxtb	r2, r3
1000960c:	6a3b      	ldr	r3, [r7, #32]
1000960e:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
10009610:	6a3b      	ldr	r3, [r7, #32]
10009612:	f103 0224 	add.w	r2, r3, #36	@ 0x24
10009616:	7ffb      	ldrb	r3, [r7, #31]
10009618:	2b00      	cmp	r3, #0
1000961a:	bf14      	ite	ne
1000961c:	2301      	movne	r3, #1
1000961e:	2300      	moveq	r3, #0
10009620:	b2db      	uxtb	r3, r3
10009622:	f083 0301 	eor.w	r3, r3, #1
10009626:	b2db      	uxtb	r3, r3
10009628:	f003 0301 	and.w	r3, r3, #1
1000962c:	b2db      	uxtb	r3, r3
1000962e:	4619      	mov	r1, r3
10009630:	4610      	mov	r0, r2
10009632:	f001 faf0 	bl	1000ac16 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) tud_cdc_line_state_cb(itf, dtr, rts);
10009636:	4b1b      	ldr	r3, [pc, #108]	@ (100096a4 <cdcd_control_xfer_cb+0x1d4>)
10009638:	2b00      	cmp	r3, #0
1000963a:	d026      	beq.n	1000968a <cdcd_control_xfer_cb+0x1ba>
1000963c:	7fba      	ldrb	r2, [r7, #30]
1000963e:	7ff9      	ldrb	r1, [r7, #31]
10009640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009644:	4618      	mov	r0, r3
10009646:	f3af 8000 	nop.w
      break;
1000964a:	e01e      	b.n	1000968a <cdcd_control_xfer_cb+0x1ba>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
1000964c:	79bb      	ldrb	r3, [r7, #6]
1000964e:	2b01      	cmp	r3, #1
10009650:	d105      	bne.n	1000965e <cdcd_control_xfer_cb+0x18e>
        tud_control_status(rhport, request);
10009652:	79fb      	ldrb	r3, [r7, #7]
10009654:	6839      	ldr	r1, [r7, #0]
10009656:	4618      	mov	r0, r3
10009658:	f7ff f950 	bl	100088fc <tud_control_status>
      } else if (stage == CONTROL_STAGE_ACK) {
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) tud_cdc_send_break_cb(itf, request->wValue);
      }
      break;
1000965c:	e017      	b.n	1000968e <cdcd_control_xfer_cb+0x1be>
      } else if (stage == CONTROL_STAGE_ACK) {
1000965e:	79bb      	ldrb	r3, [r7, #6]
10009660:	2b03      	cmp	r3, #3
10009662:	d114      	bne.n	1000968e <cdcd_control_xfer_cb+0x1be>
        if (tud_cdc_send_break_cb) tud_cdc_send_break_cb(itf, request->wValue);
10009664:	4b10      	ldr	r3, [pc, #64]	@ (100096a8 <cdcd_control_xfer_cb+0x1d8>)
10009666:	2b00      	cmp	r3, #0
10009668:	d011      	beq.n	1000968e <cdcd_control_xfer_cb+0x1be>
1000966a:	683b      	ldr	r3, [r7, #0]
1000966c:	885b      	ldrh	r3, [r3, #2]
1000966e:	b29a      	uxth	r2, r3
10009670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009674:	4611      	mov	r1, r2
10009676:	4618      	mov	r0, r3
10009678:	f3af 8000 	nop.w
      break;
1000967c:	e007      	b.n	1000968e <cdcd_control_xfer_cb+0x1be>

    default:
      return false; // stall unsupported request
1000967e:	2300      	movs	r3, #0
10009680:	e007      	b.n	10009692 <cdcd_control_xfer_cb+0x1c2>
      break;
10009682:	bf00      	nop
10009684:	e004      	b.n	10009690 <cdcd_control_xfer_cb+0x1c0>
      break;
10009686:	bf00      	nop
10009688:	e002      	b.n	10009690 <cdcd_control_xfer_cb+0x1c0>
      break;
1000968a:	bf00      	nop
1000968c:	e000      	b.n	10009690 <cdcd_control_xfer_cb+0x1c0>
      break;
1000968e:	bf00      	nop
  }

  return true;
10009690:	2301      	movs	r3, #1
}
10009692:	4618      	mov	r0, r3
10009694:	3728      	adds	r7, #40	@ 0x28
10009696:	46bd      	mov	sp, r7
10009698:	bd80      	pop	{r7, pc}
1000969a:	bf00      	nop
1000969c:	20001768 	.word	0x20001768
100096a0:	1000602d 	.word	0x1000602d
	...

100096ac <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
100096ac:	b580      	push	{r7, lr}
100096ae:	b086      	sub	sp, #24
100096b0:	af00      	add	r7, sp, #0
100096b2:	603b      	str	r3, [r7, #0]
100096b4:	4603      	mov	r3, r0
100096b6:	71fb      	strb	r3, [r7, #7]
100096b8:	460b      	mov	r3, r1
100096ba:	71bb      	strb	r3, [r7, #6]
100096bc:	4613      	mov	r3, r2
100096be:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
100096c0:	2300      	movs	r3, #0
100096c2:	75fb      	strb	r3, [r7, #23]
100096c4:	e014      	b.n	100096f0 <cdcd_xfer_cb+0x44>
    p_cdc = &_cdcd_itf[itf];
100096c6:	7dfb      	ldrb	r3, [r7, #23]
100096c8:	f44f 7232 	mov.w	r2, #712	@ 0x2c8
100096cc:	fb02 f303 	mul.w	r3, r2, r3
100096d0:	4a58      	ldr	r2, [pc, #352]	@ (10009834 <cdcd_xfer_cb+0x188>)
100096d2:	4413      	add	r3, r2
100096d4:	613b      	str	r3, [r7, #16]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) break;
100096d6:	693b      	ldr	r3, [r7, #16]
100096d8:	78db      	ldrb	r3, [r3, #3]
100096da:	79ba      	ldrb	r2, [r7, #6]
100096dc:	429a      	cmp	r2, r3
100096de:	d00a      	beq.n	100096f6 <cdcd_xfer_cb+0x4a>
100096e0:	693b      	ldr	r3, [r7, #16]
100096e2:	789b      	ldrb	r3, [r3, #2]
100096e4:	79ba      	ldrb	r2, [r7, #6]
100096e6:	429a      	cmp	r2, r3
100096e8:	d005      	beq.n	100096f6 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
100096ea:	7dfb      	ldrb	r3, [r7, #23]
100096ec:	3301      	adds	r3, #1
100096ee:	75fb      	strb	r3, [r7, #23]
100096f0:	7dfb      	ldrb	r3, [r7, #23]
100096f2:	2b00      	cmp	r3, #0
100096f4:	d0e7      	beq.n	100096c6 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
100096f6:	7dfb      	ldrb	r3, [r7, #23]
100096f8:	2b00      	cmp	r3, #0
100096fa:	d010      	beq.n	1000971e <cdcd_xfer_cb+0x72>
100096fc:	f240 12b5 	movw	r2, #437	@ 0x1b5
10009700:	494d      	ldr	r1, [pc, #308]	@ (10009838 <cdcd_xfer_cb+0x18c>)
10009702:	484e      	ldr	r0, [pc, #312]	@ (1000983c <cdcd_xfer_cb+0x190>)
10009704:	f7fc fb98 	bl	10005e38 <__wrap_printf>
10009708:	4b4d      	ldr	r3, [pc, #308]	@ (10009840 <cdcd_xfer_cb+0x194>)
1000970a:	60bb      	str	r3, [r7, #8]
1000970c:	68bb      	ldr	r3, [r7, #8]
1000970e:	681b      	ldr	r3, [r3, #0]
10009710:	f003 0301 	and.w	r3, r3, #1
10009714:	2b00      	cmp	r3, #0
10009716:	d000      	beq.n	1000971a <cdcd_xfer_cb+0x6e>
10009718:	be00      	bkpt	0x0000
1000971a:	2300      	movs	r3, #0
1000971c:	e086      	b.n	1000982c <cdcd_xfer_cb+0x180>

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
1000971e:	693b      	ldr	r3, [r7, #16]
10009720:	78db      	ldrb	r3, [r3, #3]
10009722:	79ba      	ldrb	r2, [r7, #6]
10009724:	429a      	cmp	r2, r3
10009726:	d14c      	bne.n	100097c2 <cdcd_xfer_cb+0x116>
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
10009728:	693b      	ldr	r3, [r7, #16]
1000972a:	f103 0010 	add.w	r0, r3, #16
1000972e:	693b      	ldr	r3, [r7, #16]
10009730:	f503 7312 	add.w	r3, r3, #584	@ 0x248
10009734:	683a      	ldr	r2, [r7, #0]
10009736:	b292      	uxth	r2, r2
10009738:	4619      	mov	r1, r3
1000973a:	f001 fa13 	bl	1000ab64 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
1000973e:	4b41      	ldr	r3, [pc, #260]	@ (10009844 <cdcd_xfer_cb+0x198>)
10009740:	2b00      	cmp	r3, #0
10009742:	d029      	beq.n	10009798 <cdcd_xfer_cb+0xec>
10009744:	693b      	ldr	r3, [r7, #16]
10009746:	795b      	ldrb	r3, [r3, #5]
10009748:	2bff      	cmp	r3, #255	@ 0xff
1000974a:	d025      	beq.n	10009798 <cdcd_xfer_cb+0xec>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
1000974c:	2300      	movs	r3, #0
1000974e:	60fb      	str	r3, [r7, #12]
10009750:	e01e      	b.n	10009790 <cdcd_xfer_cb+0xe4>
        if ((p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
10009752:	693b      	ldr	r3, [r7, #16]
10009754:	795a      	ldrb	r2, [r3, #5]
10009756:	6939      	ldr	r1, [r7, #16]
10009758:	68fb      	ldr	r3, [r7, #12]
1000975a:	440b      	add	r3, r1
1000975c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
10009760:	781b      	ldrb	r3, [r3, #0]
10009762:	429a      	cmp	r2, r3
10009764:	d111      	bne.n	1000978a <cdcd_xfer_cb+0xde>
10009766:	693b      	ldr	r3, [r7, #16]
10009768:	3310      	adds	r3, #16
1000976a:	4618      	mov	r0, r3
1000976c:	f001 f8cb 	bl	1000a906 <tu_fifo_empty>
10009770:	4603      	mov	r3, r0
10009772:	f083 0301 	eor.w	r3, r3, #1
10009776:	b2db      	uxtb	r3, r3
10009778:	2b00      	cmp	r3, #0
1000977a:	d006      	beq.n	1000978a <cdcd_xfer_cb+0xde>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
1000977c:	693b      	ldr	r3, [r7, #16]
1000977e:	795a      	ldrb	r2, [r3, #5]
10009780:	7dfb      	ldrb	r3, [r7, #23]
10009782:	4611      	mov	r1, r2
10009784:	4618      	mov	r0, r3
10009786:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
1000978a:	68fb      	ldr	r3, [r7, #12]
1000978c:	3301      	adds	r3, #1
1000978e:	60fb      	str	r3, [r7, #12]
10009790:	68fa      	ldr	r2, [r7, #12]
10009792:	683b      	ldr	r3, [r7, #0]
10009794:	429a      	cmp	r2, r3
10009796:	d3dc      	bcc.n	10009752 <cdcd_xfer_cb+0xa6>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) tud_cdc_rx_cb(itf);
10009798:	4b2b      	ldr	r3, [pc, #172]	@ (10009848 <cdcd_xfer_cb+0x19c>)
1000979a:	2b00      	cmp	r3, #0
1000979c:	d00e      	beq.n	100097bc <cdcd_xfer_cb+0x110>
1000979e:	693b      	ldr	r3, [r7, #16]
100097a0:	3310      	adds	r3, #16
100097a2:	4618      	mov	r0, r3
100097a4:	f001 f8af 	bl	1000a906 <tu_fifo_empty>
100097a8:	4603      	mov	r3, r0
100097aa:	f083 0301 	eor.w	r3, r3, #1
100097ae:	b2db      	uxtb	r3, r3
100097b0:	2b00      	cmp	r3, #0
100097b2:	d003      	beq.n	100097bc <cdcd_xfer_cb+0x110>
100097b4:	7dfb      	ldrb	r3, [r7, #23]
100097b6:	4618      	mov	r0, r3
100097b8:	f3af 8000 	nop.w

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
100097bc:	6938      	ldr	r0, [r7, #16]
100097be:	f7ff fa8d 	bl	10008cdc <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
100097c2:	693b      	ldr	r3, [r7, #16]
100097c4:	789b      	ldrb	r3, [r3, #2]
100097c6:	79ba      	ldrb	r2, [r7, #6]
100097c8:	429a      	cmp	r2, r3
100097ca:	d12e      	bne.n	1000982a <cdcd_xfer_cb+0x17e>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) tud_cdc_tx_complete_cb(itf);
100097cc:	4b1f      	ldr	r3, [pc, #124]	@ (1000984c <cdcd_xfer_cb+0x1a0>)
100097ce:	2b00      	cmp	r3, #0
100097d0:	d003      	beq.n	100097da <cdcd_xfer_cb+0x12e>
100097d2:	7dfb      	ldrb	r3, [r7, #23]
100097d4:	4618      	mov	r0, r3
100097d6:	f3af 8000 	nop.w

    if (0 == tud_cdc_n_write_flush(itf)) {
100097da:	7dfb      	ldrb	r3, [r7, #23]
100097dc:	4618      	mov	r0, r3
100097de:	f7ff fb97 	bl	10008f10 <tud_cdc_n_write_flush>
100097e2:	4603      	mov	r3, r0
100097e4:	2b00      	cmp	r3, #0
100097e6:	d120      	bne.n	1000982a <cdcd_xfer_cb+0x17e>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
100097e8:	693b      	ldr	r3, [r7, #16]
100097ea:	3324      	adds	r3, #36	@ 0x24
100097ec:	4618      	mov	r0, r3
100097ee:	f001 f858 	bl	1000a8a2 <tu_fifo_count>
100097f2:	4603      	mov	r3, r0
100097f4:	2b00      	cmp	r3, #0
100097f6:	d118      	bne.n	1000982a <cdcd_xfer_cb+0x17e>
100097f8:	683b      	ldr	r3, [r7, #0]
100097fa:	2b00      	cmp	r3, #0
100097fc:	d015      	beq.n	1000982a <cdcd_xfer_cb+0x17e>
100097fe:	683b      	ldr	r3, [r7, #0]
10009800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10009804:	2b00      	cmp	r3, #0
10009806:	d110      	bne.n	1000982a <cdcd_xfer_cb+0x17e>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
10009808:	693b      	ldr	r3, [r7, #16]
1000980a:	789a      	ldrb	r2, [r3, #2]
1000980c:	79fb      	ldrb	r3, [r7, #7]
1000980e:	4611      	mov	r1, r2
10009810:	4618      	mov	r0, r3
10009812:	f7fe fed1 	bl	100085b8 <usbd_edpt_claim>
10009816:	4603      	mov	r3, r0
10009818:	2b00      	cmp	r3, #0
1000981a:	d006      	beq.n	1000982a <cdcd_xfer_cb+0x17e>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
1000981c:	693b      	ldr	r3, [r7, #16]
1000981e:	7899      	ldrb	r1, [r3, #2]
10009820:	79f8      	ldrb	r0, [r7, #7]
10009822:	2300      	movs	r3, #0
10009824:	2200      	movs	r2, #0
10009826:	f7fe ff23 	bl	10008670 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
1000982a:	2301      	movs	r3, #1
}
1000982c:	4618      	mov	r0, r3
1000982e:	3718      	adds	r7, #24
10009830:	46bd      	mov	sp, r7
10009832:	bd80      	pop	{r7, pc}
10009834:	20001768 	.word	0x20001768
10009838:	1000c0e0 	.word	0x1000c0e0
1000983c:	1000c098 	.word	0x1000c098
10009840:	e000edf0 	.word	0xe000edf0
	...

10009850 <_prep_out_transaction>:

//--------------------------------------------------------------------+
// Read API
//--------------------------------------------------------------------+
static void _prep_out_transaction (vendord_interface_t* p_itf)
{
10009850:	b580      	push	{r7, lr}
10009852:	b084      	sub	sp, #16
10009854:	af00      	add	r7, sp, #0
10009856:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
10009858:	2300      	movs	r3, #0
1000985a:	73fb      	strb	r3, [r7, #15]

    // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
1000985c:	687b      	ldr	r3, [r7, #4]
1000985e:	789a      	ldrb	r2, [r3, #2]
10009860:	7bfb      	ldrb	r3, [r7, #15]
10009862:	4611      	mov	r1, r2
10009864:	4618      	mov	r0, r3
10009866:	f7fe fea7 	bl	100085b8 <usbd_edpt_claim>
1000986a:	4603      	mov	r3, r0
1000986c:	f083 0301 	eor.w	r3, r3, #1
10009870:	b2db      	uxtb	r3, r3
10009872:	2b00      	cmp	r3, #0
10009874:	d11a      	bne.n	100098ac <_prep_out_transaction+0x5c>

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  uint16_t max_read = tu_fifo_remaining(&p_itf->rx_ff);
10009876:	687b      	ldr	r3, [r7, #4]
10009878:	3304      	adds	r3, #4
1000987a:	4618      	mov	r0, r3
1000987c:	f001 f886 	bl	1000a98c <tu_fifo_remaining>
10009880:	4603      	mov	r3, r0
10009882:	81bb      	strh	r3, [r7, #12]
  if ( max_read >= CFG_TUD_VENDOR_EPSIZE )
10009884:	89bb      	ldrh	r3, [r7, #12]
10009886:	2b3f      	cmp	r3, #63	@ 0x3f
10009888:	d909      	bls.n	1000989e <_prep_out_transaction+0x4e>
  {
    usbd_edpt_xfer(rhport, p_itf->ep_out, p_itf->epout_buf, CFG_TUD_VENDOR_EPSIZE);
1000988a:	687b      	ldr	r3, [r7, #4]
1000988c:	7899      	ldrb	r1, [r3, #2]
1000988e:	687b      	ldr	r3, [r7, #4]
10009890:	f503 720f 	add.w	r2, r3, #572	@ 0x23c
10009894:	7bf8      	ldrb	r0, [r7, #15]
10009896:	2340      	movs	r3, #64	@ 0x40
10009898:	f7fe feea 	bl	10008670 <usbd_edpt_xfer>
1000989c:	e006      	b.n	100098ac <_prep_out_transaction+0x5c>
  }
  else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_itf->ep_out);
1000989e:	687b      	ldr	r3, [r7, #4]
100098a0:	789a      	ldrb	r2, [r3, #2]
100098a2:	7bfb      	ldrb	r3, [r7, #15]
100098a4:	4611      	mov	r1, r2
100098a6:	4618      	mov	r0, r3
100098a8:	f7fe feb4 	bl	10008614 <usbd_edpt_release>
  }
}
100098ac:	3710      	adds	r7, #16
100098ae:	46bd      	mov	sp, r7
100098b0:	bd80      	pop	{r7, pc}
	...

100098b4 <tud_vendor_n_write_flush>:
  }
  return ret;
}

uint32_t tud_vendor_n_write_flush (uint8_t itf)
{
100098b4:	b580      	push	{r7, lr}
100098b6:	b086      	sub	sp, #24
100098b8:	af00      	add	r7, sp, #0
100098ba:	4603      	mov	r3, r0
100098bc:	71fb      	strb	r3, [r7, #7]
  vendord_interface_t* p_itf = &_vendord_itf[itf];
100098be:	79fb      	ldrb	r3, [r7, #7]
100098c0:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
100098c4:	fb02 f303 	mul.w	r3, r2, r3
100098c8:	4a39      	ldr	r2, [pc, #228]	@ (100099b0 <tud_vendor_n_write_flush+0xfc>)
100098ca:	4413      	add	r3, r2
100098cc:	617b      	str	r3, [r7, #20]
100098ce:	f7fd fd11 	bl	100072f4 <tud_mounted>
100098d2:	4603      	mov	r3, r0
100098d4:	2b00      	cmp	r3, #0
100098d6:	d009      	beq.n	100098ec <tud_vendor_n_write_flush+0x38>
100098d8:	f7fd fd1e 	bl	10007318 <tud_suspended>
100098dc:	4603      	mov	r3, r0
100098de:	f083 0301 	eor.w	r3, r3, #1
100098e2:	b2db      	uxtb	r3, r3
100098e4:	2b00      	cmp	r3, #0
100098e6:	d001      	beq.n	100098ec <tud_vendor_n_write_flush+0x38>
100098e8:	2301      	movs	r3, #1
100098ea:	e000      	b.n	100098ee <tud_vendor_n_write_flush+0x3a>
100098ec:	2300      	movs	r3, #0
100098ee:	f003 0301 	and.w	r3, r3, #1
100098f2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
100098f4:	f083 0301 	eor.w	r3, r3, #1
100098f8:	b2db      	uxtb	r3, r3
100098fa:	2b00      	cmp	r3, #0
100098fc:	d001      	beq.n	10009902 <tud_vendor_n_write_flush+0x4e>
100098fe:	2300      	movs	r3, #0
10009900:	e052      	b.n	100099a8 <tud_vendor_n_write_flush+0xf4>

  // No data to send
  if ( !tu_fifo_count(&p_itf->tx_ff) ) return 0;
10009902:	697b      	ldr	r3, [r7, #20]
10009904:	3318      	adds	r3, #24
10009906:	4618      	mov	r0, r3
10009908:	f000 ffcb 	bl	1000a8a2 <tu_fifo_count>
1000990c:	4603      	mov	r3, r0
1000990e:	2b00      	cmp	r3, #0
10009910:	d101      	bne.n	10009916 <tud_vendor_n_write_flush+0x62>
10009912:	2300      	movs	r3, #0
10009914:	e048      	b.n	100099a8 <tud_vendor_n_write_flush+0xf4>

  uint8_t const rhport = 0;
10009916:	2300      	movs	r3, #0
10009918:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_itf->ep_in), 0 );
1000991a:	697b      	ldr	r3, [r7, #20]
1000991c:	785a      	ldrb	r2, [r3, #1]
1000991e:	7cfb      	ldrb	r3, [r7, #19]
10009920:	4611      	mov	r1, r2
10009922:	4618      	mov	r0, r3
10009924:	f7fe fe48 	bl	100085b8 <usbd_edpt_claim>
10009928:	4603      	mov	r3, r0
1000992a:	f083 0301 	eor.w	r3, r3, #1
1000992e:	b2db      	uxtb	r3, r3
10009930:	2b00      	cmp	r3, #0
10009932:	d001      	beq.n	10009938 <tud_vendor_n_write_flush+0x84>
10009934:	2300      	movs	r3, #0
10009936:	e037      	b.n	100099a8 <tud_vendor_n_write_flush+0xf4>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_itf->tx_ff, p_itf->epin_buf, sizeof(p_itf->epin_buf));
10009938:	697b      	ldr	r3, [r7, #20]
1000993a:	f103 0018 	add.w	r0, r3, #24
1000993e:	697b      	ldr	r3, [r7, #20]
10009940:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
10009944:	2240      	movs	r2, #64	@ 0x40
10009946:	4619      	mov	r1, r3
10009948:	f001 f898 	bl	1000aa7c <tu_fifo_read_n>
1000994c:	4603      	mov	r3, r0
1000994e:	823b      	strh	r3, [r7, #16]

  if ( count )
10009950:	8a3b      	ldrh	r3, [r7, #16]
10009952:	2b00      	cmp	r3, #0
10009954:	d020      	beq.n	10009998 <tud_vendor_n_write_flush+0xe4>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_itf->ep_in, p_itf->epin_buf, count), 0 );
10009956:	697b      	ldr	r3, [r7, #20]
10009958:	7859      	ldrb	r1, [r3, #1]
1000995a:	697b      	ldr	r3, [r7, #20]
1000995c:	f503 721f 	add.w	r2, r3, #636	@ 0x27c
10009960:	8a3b      	ldrh	r3, [r7, #16]
10009962:	7cf8      	ldrb	r0, [r7, #19]
10009964:	f7fe fe84 	bl	10008670 <usbd_edpt_xfer>
10009968:	4603      	mov	r3, r0
1000996a:	f083 0301 	eor.w	r3, r3, #1
1000996e:	b2db      	uxtb	r3, r3
10009970:	2b00      	cmp	r3, #0
10009972:	d00f      	beq.n	10009994 <tud_vendor_n_write_flush+0xe0>
10009974:	229b      	movs	r2, #155	@ 0x9b
10009976:	490f      	ldr	r1, [pc, #60]	@ (100099b4 <tud_vendor_n_write_flush+0x100>)
10009978:	480f      	ldr	r0, [pc, #60]	@ (100099b8 <tud_vendor_n_write_flush+0x104>)
1000997a:	f7fc fa5d 	bl	10005e38 <__wrap_printf>
1000997e:	4b0f      	ldr	r3, [pc, #60]	@ (100099bc <tud_vendor_n_write_flush+0x108>)
10009980:	60fb      	str	r3, [r7, #12]
10009982:	68fb      	ldr	r3, [r7, #12]
10009984:	681b      	ldr	r3, [r3, #0]
10009986:	f003 0301 	and.w	r3, r3, #1
1000998a:	2b00      	cmp	r3, #0
1000998c:	d000      	beq.n	10009990 <tud_vendor_n_write_flush+0xdc>
1000998e:	be00      	bkpt	0x0000
10009990:	2300      	movs	r3, #0
10009992:	e009      	b.n	100099a8 <tud_vendor_n_write_flush+0xf4>
    return count;
10009994:	8a3b      	ldrh	r3, [r7, #16]
10009996:	e007      	b.n	100099a8 <tud_vendor_n_write_flush+0xf4>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_itf->ep_in);
10009998:	697b      	ldr	r3, [r7, #20]
1000999a:	785a      	ldrb	r2, [r3, #1]
1000999c:	7cfb      	ldrb	r3, [r7, #19]
1000999e:	4611      	mov	r1, r2
100099a0:	4618      	mov	r0, r3
100099a2:	f7fe fe37 	bl	10008614 <usbd_edpt_release>
    return 0;
100099a6:	2300      	movs	r3, #0
  }
}
100099a8:	4618      	mov	r0, r3
100099aa:	3718      	adds	r7, #24
100099ac:	46bd      	mov	sp, r7
100099ae:	bd80      	pop	{r7, pc}
100099b0:	20001bc8 	.word	0x20001bc8
100099b4:	1000c108 	.word	0x1000c108
100099b8:	1000c0f0 	.word	0x1000c0f0
100099bc:	e000edf0 	.word	0xe000edf0

100099c0 <vendord_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void vendord_init(void) {
100099c0:	b580      	push	{r7, lr}
100099c2:	b090      	sub	sp, #64	@ 0x40
100099c4:	af02      	add	r7, sp, #8
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
100099c6:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
100099ca:	2100      	movs	r1, #0
100099cc:	483c      	ldr	r0, [pc, #240]	@ (10009ac0 <vendord_init+0x100>)
100099ce:	f001 fb57 	bl	1000b080 <memset>

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
100099d2:	2300      	movs	r3, #0
100099d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
100099d8:	e069      	b.n	10009aae <vendord_init+0xee>
    vendord_interface_t* p_itf = &_vendord_itf[i];
100099da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
100099de:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
100099e2:	fb02 f303 	mul.w	r3, r2, r3
100099e6:	4a36      	ldr	r2, [pc, #216]	@ (10009ac0 <vendord_init+0x100>)
100099e8:	4413      	add	r3, r2
100099ea:	633b      	str	r3, [r7, #48]	@ 0x30

    // config fifo
    tu_fifo_config(&p_itf->rx_ff, p_itf->rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE, 1, false);
100099ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100099ee:	1d18      	adds	r0, r3, #4
100099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100099f2:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
100099f6:	2300      	movs	r3, #0
100099f8:	9300      	str	r3, [sp, #0]
100099fa:	2301      	movs	r3, #1
100099fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
10009a00:	f000 fba3 	bl	1000a14a <tu_fifo_config>
    tu_fifo_config(&p_itf->tx_ff, p_itf->tx_ff_buf, CFG_TUD_VENDOR_TX_BUFSIZE, 1, false);
10009a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a06:	f103 0018 	add.w	r0, r3, #24
10009a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a0c:	f503 7196 	add.w	r1, r3, #300	@ 0x12c
10009a10:	2300      	movs	r3, #0
10009a12:	9300      	str	r3, [sp, #0]
10009a14:	2301      	movs	r3, #1
10009a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
10009a1a:	f000 fb96 	bl	1000a14a <tu_fifo_config>

    #if OSAL_MUTEX_REQUIRED
    osal_mutex_t mutex_rd = osal_mutex_create(&p_itf->rx_ff_mutex);
10009a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a20:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
10009a24:	61fb      	str	r3, [r7, #28]
  mutex_init(mdef);
10009a26:	69f8      	ldr	r0, [r7, #28]
10009a28:	f7f8 f818 	bl	10001a5c <mutex_init>
  return mdef;
10009a2c:	69fb      	ldr	r3, [r7, #28]
10009a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    osal_mutex_t mutex_wr = osal_mutex_create(&p_itf->tx_ff_mutex);
10009a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a32:	f503 730d 	add.w	r3, r3, #564	@ 0x234
10009a36:	623b      	str	r3, [r7, #32]
  mutex_init(mdef);
10009a38:	6a38      	ldr	r0, [r7, #32]
10009a3a:	f7f8 f80f 	bl	10001a5c <mutex_init>
  return mdef;
10009a3e:	6a3b      	ldr	r3, [r7, #32]
10009a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    TU_ASSERT(mutex_rd && mutex_wr,);
10009a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10009a44:	2b00      	cmp	r3, #0
10009a46:	d002      	beq.n	10009a4e <vendord_init+0x8e>
10009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009a4a:	2b00      	cmp	r3, #0
10009a4c:	d10e      	bne.n	10009a6c <vendord_init+0xac>
10009a4e:	22bb      	movs	r2, #187	@ 0xbb
10009a50:	491c      	ldr	r1, [pc, #112]	@ (10009ac4 <vendord_init+0x104>)
10009a52:	481d      	ldr	r0, [pc, #116]	@ (10009ac8 <vendord_init+0x108>)
10009a54:	f7fc f9f0 	bl	10005e38 <__wrap_printf>
10009a58:	4b1c      	ldr	r3, [pc, #112]	@ (10009acc <vendord_init+0x10c>)
10009a5a:	627b      	str	r3, [r7, #36]	@ 0x24
10009a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009a5e:	681b      	ldr	r3, [r3, #0]
10009a60:	f003 0301 	and.w	r3, r3, #1
10009a64:	2b00      	cmp	r3, #0
10009a66:	d027      	beq.n	10009ab8 <vendord_init+0xf8>
10009a68:	be00      	bkpt	0x0000
10009a6a:	e025      	b.n	10009ab8 <vendord_init+0xf8>

    tu_fifo_config_mutex(&p_itf->rx_ff, NULL, mutex_rd);
10009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a6e:	3304      	adds	r3, #4
10009a70:	60fb      	str	r3, [r7, #12]
10009a72:	2300      	movs	r3, #0
10009a74:	60bb      	str	r3, [r7, #8]
10009a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10009a78:	607b      	str	r3, [r7, #4]
  f->mutex_wr = wr_mutex;
10009a7a:	68fb      	ldr	r3, [r7, #12]
10009a7c:	68ba      	ldr	r2, [r7, #8]
10009a7e:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
10009a80:	68fb      	ldr	r3, [r7, #12]
10009a82:	687a      	ldr	r2, [r7, #4]
10009a84:	611a      	str	r2, [r3, #16]
}
10009a86:	bf00      	nop
    tu_fifo_config_mutex(&p_itf->tx_ff, mutex_wr, NULL);
10009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10009a8a:	3318      	adds	r3, #24
10009a8c:	61bb      	str	r3, [r7, #24]
10009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009a90:	617b      	str	r3, [r7, #20]
10009a92:	2300      	movs	r3, #0
10009a94:	613b      	str	r3, [r7, #16]
  f->mutex_wr = wr_mutex;
10009a96:	69bb      	ldr	r3, [r7, #24]
10009a98:	697a      	ldr	r2, [r7, #20]
10009a9a:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
10009a9c:	69bb      	ldr	r3, [r7, #24]
10009a9e:	693a      	ldr	r2, [r7, #16]
10009aa0:	611a      	str	r2, [r3, #16]
}
10009aa2:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
10009aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
10009aa8:	3301      	adds	r3, #1
10009aaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
10009aae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
10009ab2:	2b00      	cmp	r3, #0
10009ab4:	d091      	beq.n	100099da <vendord_init+0x1a>
10009ab6:	e000      	b.n	10009aba <vendord_init+0xfa>
    TU_ASSERT(mutex_rd && mutex_wr,);
10009ab8:	bf00      	nop
    #endif
  }
}
10009aba:	3738      	adds	r7, #56	@ 0x38
10009abc:	46bd      	mov	sp, r7
10009abe:	bd80      	pop	{r7, pc}
10009ac0:	20001bc8 	.word	0x20001bc8
10009ac4:	1000c124 	.word	0x1000c124
10009ac8:	1000c0f0 	.word	0x1000c0f0
10009acc:	e000edf0 	.word	0xe000edf0

10009ad0 <vendord_deinit>:

bool vendord_deinit(void) {
10009ad0:	b480      	push	{r7}
10009ad2:	b08d      	sub	sp, #52	@ 0x34
10009ad4:	af00      	add	r7, sp, #0
  #if OSAL_MUTEX_REQUIRED
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
10009ad6:	2300      	movs	r3, #0
10009ad8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
10009adc:	e039      	b.n	10009b52 <vendord_deinit+0x82>
    vendord_interface_t* p_itf = &_vendord_itf[i];
10009ade:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
10009ae2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
10009ae6:	fb02 f303 	mul.w	r3, r2, r3
10009aea:	4a1f      	ldr	r2, [pc, #124]	@ (10009b68 <vendord_deinit+0x98>)
10009aec:	4413      	add	r3, r2
10009aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    osal_mutex_t mutex_rd = p_itf->rx_ff.mutex_rd;
10009af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009af2:	695b      	ldr	r3, [r3, #20]
10009af4:	627b      	str	r3, [r7, #36]	@ 0x24
    osal_mutex_t mutex_wr = p_itf->tx_ff.mutex_wr;
10009af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10009afa:	623b      	str	r3, [r7, #32]

    if (mutex_rd) {
10009afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009afe:	2b00      	cmp	r3, #0
10009b00:	d00f      	beq.n	10009b22 <vendord_deinit+0x52>
10009b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10009b04:	613b      	str	r3, [r7, #16]
      osal_mutex_delete(mutex_rd);
      tu_fifo_config_mutex(&p_itf->rx_ff, NULL, NULL);
10009b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009b08:	3304      	adds	r3, #4
10009b0a:	61fb      	str	r3, [r7, #28]
10009b0c:	2300      	movs	r3, #0
10009b0e:	61bb      	str	r3, [r7, #24]
10009b10:	2300      	movs	r3, #0
10009b12:	617b      	str	r3, [r7, #20]
  f->mutex_wr = wr_mutex;
10009b14:	69fb      	ldr	r3, [r7, #28]
10009b16:	69ba      	ldr	r2, [r7, #24]
10009b18:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
10009b1a:	69fb      	ldr	r3, [r7, #28]
10009b1c:	697a      	ldr	r2, [r7, #20]
10009b1e:	611a      	str	r2, [r3, #16]
}
10009b20:	bf00      	nop
    }

    if (mutex_wr) {
10009b22:	6a3b      	ldr	r3, [r7, #32]
10009b24:	2b00      	cmp	r3, #0
10009b26:	d00f      	beq.n	10009b48 <vendord_deinit+0x78>
10009b28:	6a3b      	ldr	r3, [r7, #32]
10009b2a:	603b      	str	r3, [r7, #0]
      osal_mutex_delete(mutex_wr);
      tu_fifo_config_mutex(&p_itf->tx_ff, NULL, NULL);
10009b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009b2e:	3318      	adds	r3, #24
10009b30:	60fb      	str	r3, [r7, #12]
10009b32:	2300      	movs	r3, #0
10009b34:	60bb      	str	r3, [r7, #8]
10009b36:	2300      	movs	r3, #0
10009b38:	607b      	str	r3, [r7, #4]
  f->mutex_wr = wr_mutex;
10009b3a:	68fb      	ldr	r3, [r7, #12]
10009b3c:	68ba      	ldr	r2, [r7, #8]
10009b3e:	60da      	str	r2, [r3, #12]
  f->mutex_rd = rd_mutex;
10009b40:	68fb      	ldr	r3, [r7, #12]
10009b42:	687a      	ldr	r2, [r7, #4]
10009b44:	611a      	str	r2, [r3, #16]
}
10009b46:	bf00      	nop
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++) {
10009b48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
10009b4c:	3301      	adds	r3, #1
10009b4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
10009b52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
10009b56:	2b00      	cmp	r3, #0
10009b58:	d0c1      	beq.n	10009ade <vendord_deinit+0xe>
    }
  }
  #endif

  return true;
10009b5a:	2301      	movs	r3, #1
}
10009b5c:	4618      	mov	r0, r3
10009b5e:	3734      	adds	r7, #52	@ 0x34
10009b60:	46bd      	mov	sp, r7
10009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
10009b66:	4770      	bx	lr
10009b68:	20001bc8 	.word	0x20001bc8

10009b6c <vendord_reset>:

void vendord_reset(uint8_t rhport)
{
10009b6c:	b580      	push	{r7, lr}
10009b6e:	b084      	sub	sp, #16
10009b70:	af00      	add	r7, sp, #0
10009b72:	4603      	mov	r3, r0
10009b74:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
10009b76:	2300      	movs	r3, #0
10009b78:	73fb      	strb	r3, [r7, #15]
10009b7a:	e019      	b.n	10009bb0 <vendord_reset+0x44>
  {
    vendord_interface_t* p_itf = &_vendord_itf[i];
10009b7c:	7bfb      	ldrb	r3, [r7, #15]
10009b7e:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
10009b82:	fb02 f303 	mul.w	r3, r2, r3
10009b86:	4a0e      	ldr	r2, [pc, #56]	@ (10009bc0 <vendord_reset+0x54>)
10009b88:	4413      	add	r3, r2
10009b8a:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_itf, ITF_MEM_RESET_SIZE);
10009b8c:	2204      	movs	r2, #4
10009b8e:	2100      	movs	r1, #0
10009b90:	68b8      	ldr	r0, [r7, #8]
10009b92:	f001 fa75 	bl	1000b080 <memset>
    tu_fifo_clear(&p_itf->rx_ff);
10009b96:	68bb      	ldr	r3, [r7, #8]
10009b98:	3304      	adds	r3, #4
10009b9a:	4618      	mov	r0, r3
10009b9c:	f000 fff4 	bl	1000ab88 <tu_fifo_clear>
    tu_fifo_clear(&p_itf->tx_ff);
10009ba0:	68bb      	ldr	r3, [r7, #8]
10009ba2:	3318      	adds	r3, #24
10009ba4:	4618      	mov	r0, r3
10009ba6:	f000 ffef 	bl	1000ab88 <tu_fifo_clear>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
10009baa:	7bfb      	ldrb	r3, [r7, #15]
10009bac:	3301      	adds	r3, #1
10009bae:	73fb      	strb	r3, [r7, #15]
10009bb0:	7bfb      	ldrb	r3, [r7, #15]
10009bb2:	2b00      	cmp	r3, #0
10009bb4:	d0e2      	beq.n	10009b7c <vendord_reset+0x10>
  }
}
10009bb6:	bf00      	nop
10009bb8:	bf00      	nop
10009bba:	3710      	adds	r7, #16
10009bbc:	46bd      	mov	sp, r7
10009bbe:	bd80      	pop	{r7, pc}
10009bc0:	20001bc8 	.word	0x20001bc8

10009bc4 <vendord_open>:

uint16_t vendord_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
{
10009bc4:	b580      	push	{r7, lr}
10009bc6:	b08e      	sub	sp, #56	@ 0x38
10009bc8:	af02      	add	r7, sp, #8
10009bca:	4603      	mov	r3, r0
10009bcc:	6039      	str	r1, [r7, #0]
10009bce:	71fb      	strb	r3, [r7, #7]
10009bd0:	4613      	mov	r3, r2
10009bd2:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
10009bd4:	683b      	ldr	r3, [r7, #0]
10009bd6:	795b      	ldrb	r3, [r3, #5]
10009bd8:	2bff      	cmp	r3, #255	@ 0xff
10009bda:	d001      	beq.n	10009be0 <vendord_open+0x1c>
10009bdc:	2300      	movs	r3, #0
10009bde:	e0a9      	b.n	10009d34 <vendord_open+0x170>
10009be0:	683b      	ldr	r3, [r7, #0]
10009be2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
10009be4:	69bb      	ldr	r3, [r7, #24]
10009be6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
10009be8:	697b      	ldr	r3, [r7, #20]
10009bea:	781b      	ldrb	r3, [r3, #0]
10009bec:	461a      	mov	r2, r3
10009bee:	697b      	ldr	r3, [r7, #20]
10009bf0:	4413      	add	r3, r2

  uint8_t const * p_desc = tu_desc_next(desc_itf);
10009bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const * desc_end = p_desc + max_len;
10009bf4:	88bb      	ldrh	r3, [r7, #4]
10009bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10009bf8:	4413      	add	r3, r2
10009bfa:	623b      	str	r3, [r7, #32]

  // Find available interface
  vendord_interface_t* p_vendor = NULL;
10009bfc:	2300      	movs	r3, #0
10009bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
10009c00:	2300      	movs	r3, #0
10009c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
10009c06:	e026      	b.n	10009c56 <vendord_open+0x92>
  {
    if ( _vendord_itf[i].ep_in == 0 && _vendord_itf[i].ep_out == 0 )
10009c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009c0c:	4a4b      	ldr	r2, [pc, #300]	@ (10009d3c <vendord_open+0x178>)
10009c0e:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
10009c12:	fb01 f303 	mul.w	r3, r1, r3
10009c16:	4413      	add	r3, r2
10009c18:	3301      	adds	r3, #1
10009c1a:	781b      	ldrb	r3, [r3, #0]
10009c1c:	2b00      	cmp	r3, #0
10009c1e:	d115      	bne.n	10009c4c <vendord_open+0x88>
10009c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009c24:	4a45      	ldr	r2, [pc, #276]	@ (10009d3c <vendord_open+0x178>)
10009c26:	f44f 712f 	mov.w	r1, #700	@ 0x2bc
10009c2a:	fb01 f303 	mul.w	r3, r1, r3
10009c2e:	4413      	add	r3, r2
10009c30:	3302      	adds	r3, #2
10009c32:	781b      	ldrb	r3, [r3, #0]
10009c34:	2b00      	cmp	r3, #0
10009c36:	d109      	bne.n	10009c4c <vendord_open+0x88>
    {
      p_vendor = &_vendord_itf[i];
10009c38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009c3c:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
10009c40:	fb02 f303 	mul.w	r3, r2, r3
10009c44:	4a3d      	ldr	r2, [pc, #244]	@ (10009d3c <vendord_open+0x178>)
10009c46:	4413      	add	r3, r2
10009c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
10009c4a:	e008      	b.n	10009c5e <vendord_open+0x9a>
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
10009c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009c50:	3301      	adds	r3, #1
10009c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
10009c56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
10009c5a:	2b00      	cmp	r3, #0
10009c5c:	d0d4      	beq.n	10009c08 <vendord_open+0x44>
    }
  }
  TU_VERIFY(p_vendor, 0);
10009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009c60:	2b00      	cmp	r3, #0
10009c62:	d101      	bne.n	10009c68 <vendord_open+0xa4>
10009c64:	2300      	movs	r3, #0
10009c66:	e065      	b.n	10009d34 <vendord_open+0x170>

  p_vendor->itf_num = desc_itf->bInterfaceNumber;
10009c68:	683b      	ldr	r3, [r7, #0]
10009c6a:	789a      	ldrb	r2, [r3, #2]
10009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009c6e:	701a      	strb	r2, [r3, #0]
  if (desc_itf->bNumEndpoints)
10009c70:	683b      	ldr	r3, [r7, #0]
10009c72:	791b      	ldrb	r3, [r3, #4]
10009c74:	2b00      	cmp	r3, #0
10009c76:	d059      	beq.n	10009d2c <vendord_open+0x168>
  {
    // skip non-endpoint descriptors
    while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
10009c78:	e009      	b.n	10009c8e <vendord_open+0xca>
10009c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10009c7c:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
10009c7e:	693b      	ldr	r3, [r7, #16]
10009c80:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
10009c82:	68fb      	ldr	r3, [r7, #12]
10009c84:	781b      	ldrb	r3, [r3, #0]
10009c86:	461a      	mov	r2, r3
10009c88:	68fb      	ldr	r3, [r7, #12]
10009c8a:	4413      	add	r3, r2
    {
      p_desc = tu_desc_next(p_desc);
10009c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
10009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10009c90:	60bb      	str	r3, [r7, #8]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
10009c92:	68bb      	ldr	r3, [r7, #8]
10009c94:	3301      	adds	r3, #1
10009c96:	781b      	ldrb	r3, [r3, #0]
    while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
10009c98:	2b05      	cmp	r3, #5
10009c9a:	d003      	beq.n	10009ca4 <vendord_open+0xe0>
10009c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10009c9e:	6a3b      	ldr	r3, [r7, #32]
10009ca0:	429a      	cmp	r2, r3
10009ca2:	d3ea      	bcc.n	10009c7a <vendord_open+0xb6>
    }

    // Open endpoint pair with usbd helper
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_BULK, &p_vendor->ep_out, &p_vendor->ep_in), 0);
10009ca4:	683b      	ldr	r3, [r7, #0]
10009ca6:	7919      	ldrb	r1, [r3, #4]
10009ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009caa:	3302      	adds	r3, #2
10009cac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10009cae:	3201      	adds	r2, #1
10009cb0:	79f8      	ldrb	r0, [r7, #7]
10009cb2:	9201      	str	r2, [sp, #4]
10009cb4:	9300      	str	r3, [sp, #0]
10009cb6:	2302      	movs	r3, #2
10009cb8:	460a      	mov	r2, r1
10009cba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
10009cbc:	f7fe fbb0 	bl	10008420 <usbd_open_edpt_pair>
10009cc0:	4603      	mov	r3, r0
10009cc2:	f083 0301 	eor.w	r3, r3, #1
10009cc6:	b2db      	uxtb	r3, r3
10009cc8:	2b00      	cmp	r3, #0
10009cca:	d010      	beq.n	10009cee <vendord_open+0x12a>
10009ccc:	f44f 7282 	mov.w	r2, #260	@ 0x104
10009cd0:	491b      	ldr	r1, [pc, #108]	@ (10009d40 <vendord_open+0x17c>)
10009cd2:	481c      	ldr	r0, [pc, #112]	@ (10009d44 <vendord_open+0x180>)
10009cd4:	f7fc f8b0 	bl	10005e38 <__wrap_printf>
10009cd8:	4b1b      	ldr	r3, [pc, #108]	@ (10009d48 <vendord_open+0x184>)
10009cda:	61fb      	str	r3, [r7, #28]
10009cdc:	69fb      	ldr	r3, [r7, #28]
10009cde:	681b      	ldr	r3, [r3, #0]
10009ce0:	f003 0301 	and.w	r3, r3, #1
10009ce4:	2b00      	cmp	r3, #0
10009ce6:	d000      	beq.n	10009cea <vendord_open+0x126>
10009ce8:	be00      	bkpt	0x0000
10009cea:	2300      	movs	r3, #0
10009cec:	e022      	b.n	10009d34 <vendord_open+0x170>

    p_desc += desc_itf->bNumEndpoints*sizeof(tusb_desc_endpoint_t);
10009cee:	683b      	ldr	r3, [r7, #0]
10009cf0:	791b      	ldrb	r3, [r3, #4]
10009cf2:	461a      	mov	r2, r3
10009cf4:	4613      	mov	r3, r2
10009cf6:	00db      	lsls	r3, r3, #3
10009cf8:	1a9b      	subs	r3, r3, r2
10009cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10009cfc:	4413      	add	r3, r2
10009cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Prepare for incoming data
    if ( p_vendor->ep_out )
10009d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d02:	789b      	ldrb	r3, [r3, #2]
10009d04:	2b00      	cmp	r3, #0
10009d06:	d002      	beq.n	10009d0e <vendord_open+0x14a>
    {
      _prep_out_transaction(p_vendor);
10009d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
10009d0a:	f7ff fda1 	bl	10009850 <_prep_out_transaction>
    }

    if ( p_vendor->ep_in ) tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
10009d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d10:	785b      	ldrb	r3, [r3, #1]
10009d12:	2b00      	cmp	r3, #0
10009d14:	d00a      	beq.n	10009d2c <vendord_open+0x168>
10009d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10009d18:	4a08      	ldr	r2, [pc, #32]	@ (10009d3c <vendord_open+0x178>)
10009d1a:	1a9b      	subs	r3, r3, r2
10009d1c:	109b      	asrs	r3, r3, #2
10009d1e:	4a0b      	ldr	r2, [pc, #44]	@ (10009d4c <vendord_open+0x188>)
10009d20:	fb02 f303 	mul.w	r3, r2, r3
10009d24:	b2db      	uxtb	r3, r3
10009d26:	4618      	mov	r0, r3
10009d28:	f7ff fdc4 	bl	100098b4 <tud_vendor_n_write_flush>
  }

  return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
10009d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10009d2e:	683b      	ldr	r3, [r7, #0]
10009d30:	1ad3      	subs	r3, r2, r3
10009d32:	b29b      	uxth	r3, r3
}
10009d34:	4618      	mov	r0, r3
10009d36:	3730      	adds	r7, #48	@ 0x30
10009d38:	46bd      	mov	sp, r7
10009d3a:	bd80      	pop	{r7, pc}
10009d3c:	20001bc8 	.word	0x20001bc8
10009d40:	1000c134 	.word	0x1000c134
10009d44:	1000c0f0 	.word	0x1000c0f0
10009d48:	e000edf0 	.word	0xe000edf0
10009d4c:	1bcb564f 	.word	0x1bcb564f

10009d50 <vendord_xfer_cb>:

bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
10009d50:	b580      	push	{r7, lr}
10009d52:	b084      	sub	sp, #16
10009d54:	af00      	add	r7, sp, #0
10009d56:	603b      	str	r3, [r7, #0]
10009d58:	4603      	mov	r3, r0
10009d5a:	71fb      	strb	r3, [r7, #7]
10009d5c:	460b      	mov	r3, r1
10009d5e:	71bb      	strb	r3, [r7, #6]
10009d60:	4613      	mov	r3, r2
10009d62:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t itf = 0;
10009d64:	2300      	movs	r3, #0
10009d66:	73fb      	strb	r3, [r7, #15]
  vendord_interface_t* p_itf = _vendord_itf;
10009d68:	4b37      	ldr	r3, [pc, #220]	@ (10009e48 <vendord_xfer_cb+0xf8>)
10009d6a:	60bb      	str	r3, [r7, #8]

  for ( ; ; itf++, p_itf++)
  {
    if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;
10009d6c:	7bfb      	ldrb	r3, [r7, #15]
10009d6e:	2b00      	cmp	r3, #0
10009d70:	d001      	beq.n	10009d76 <vendord_xfer_cb+0x26>
10009d72:	2300      	movs	r3, #0
10009d74:	e064      	b.n	10009e40 <vendord_xfer_cb+0xf0>

    if ( ( ep_addr == p_itf->ep_out ) || ( ep_addr == p_itf->ep_in ) ) break;
10009d76:	68bb      	ldr	r3, [r7, #8]
10009d78:	789b      	ldrb	r3, [r3, #2]
10009d7a:	79ba      	ldrb	r2, [r7, #6]
10009d7c:	429a      	cmp	r2, r3
10009d7e:	d00c      	beq.n	10009d9a <vendord_xfer_cb+0x4a>
10009d80:	68bb      	ldr	r3, [r7, #8]
10009d82:	785b      	ldrb	r3, [r3, #1]
10009d84:	79ba      	ldrb	r2, [r7, #6]
10009d86:	429a      	cmp	r2, r3
10009d88:	d007      	beq.n	10009d9a <vendord_xfer_cb+0x4a>
  for ( ; ; itf++, p_itf++)
10009d8a:	7bfb      	ldrb	r3, [r7, #15]
10009d8c:	3301      	adds	r3, #1
10009d8e:	73fb      	strb	r3, [r7, #15]
10009d90:	68bb      	ldr	r3, [r7, #8]
10009d92:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
10009d96:	60bb      	str	r3, [r7, #8]
    if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;
10009d98:	e7e8      	b.n	10009d6c <vendord_xfer_cb+0x1c>
  }

  if ( ep_addr == p_itf->ep_out )
10009d9a:	68bb      	ldr	r3, [r7, #8]
10009d9c:	789b      	ldrb	r3, [r3, #2]
10009d9e:	79ba      	ldrb	r2, [r7, #6]
10009da0:	429a      	cmp	r2, r3
10009da2:	d114      	bne.n	10009dce <vendord_xfer_cb+0x7e>
  {
    // Receive new data
    tu_fifo_write_n(&p_itf->rx_ff, p_itf->epout_buf, (uint16_t) xferred_bytes);
10009da4:	68bb      	ldr	r3, [r7, #8]
10009da6:	1d18      	adds	r0, r3, #4
10009da8:	68bb      	ldr	r3, [r7, #8]
10009daa:	f503 730f 	add.w	r3, r3, #572	@ 0x23c
10009dae:	683a      	ldr	r2, [r7, #0]
10009db0:	b292      	uxth	r2, r2
10009db2:	4619      	mov	r1, r3
10009db4:	f000 fed6 	bl	1000ab64 <tu_fifo_write_n>

    // Invoked callback if any
    if (tud_vendor_rx_cb) tud_vendor_rx_cb(itf);
10009db8:	4b24      	ldr	r3, [pc, #144]	@ (10009e4c <vendord_xfer_cb+0xfc>)
10009dba:	2b00      	cmp	r3, #0
10009dbc:	d003      	beq.n	10009dc6 <vendord_xfer_cb+0x76>
10009dbe:	7bfb      	ldrb	r3, [r7, #15]
10009dc0:	4618      	mov	r0, r3
10009dc2:	f3af 8000 	nop.w

    _prep_out_transaction(p_itf);
10009dc6:	68b8      	ldr	r0, [r7, #8]
10009dc8:	f7ff fd42 	bl	10009850 <_prep_out_transaction>
10009dcc:	e037      	b.n	10009e3e <vendord_xfer_cb+0xee>
  }
  else if ( ep_addr == p_itf->ep_in )
10009dce:	68bb      	ldr	r3, [r7, #8]
10009dd0:	785b      	ldrb	r3, [r3, #1]
10009dd2:	79ba      	ldrb	r2, [r7, #6]
10009dd4:	429a      	cmp	r2, r3
10009dd6:	d132      	bne.n	10009e3e <vendord_xfer_cb+0xee>
  {
    if (tud_vendor_tx_cb) tud_vendor_tx_cb(itf, (uint16_t) xferred_bytes);
10009dd8:	4b1d      	ldr	r3, [pc, #116]	@ (10009e50 <vendord_xfer_cb+0x100>)
10009dda:	2b00      	cmp	r3, #0
10009ddc:	d007      	beq.n	10009dee <vendord_xfer_cb+0x9e>
10009dde:	683b      	ldr	r3, [r7, #0]
10009de0:	b29b      	uxth	r3, r3
10009de2:	461a      	mov	r2, r3
10009de4:	7bfb      	ldrb	r3, [r7, #15]
10009de6:	4611      	mov	r1, r2
10009de8:	4618      	mov	r0, r3
10009dea:	f3af 8000 	nop.w
    // Send complete, try to send more if possible
    if ( 0 == tud_vendor_n_write_flush(itf) )
10009dee:	7bfb      	ldrb	r3, [r7, #15]
10009df0:	4618      	mov	r0, r3
10009df2:	f7ff fd5f 	bl	100098b4 <tud_vendor_n_write_flush>
10009df6:	4603      	mov	r3, r0
10009df8:	2b00      	cmp	r3, #0
10009dfa:	d120      	bne.n	10009e3e <vendord_xfer_cb+0xee>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_itf->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
10009dfc:	68bb      	ldr	r3, [r7, #8]
10009dfe:	3318      	adds	r3, #24
10009e00:	4618      	mov	r0, r3
10009e02:	f000 fd4e 	bl	1000a8a2 <tu_fifo_count>
10009e06:	4603      	mov	r3, r0
10009e08:	2b00      	cmp	r3, #0
10009e0a:	d118      	bne.n	10009e3e <vendord_xfer_cb+0xee>
10009e0c:	683b      	ldr	r3, [r7, #0]
10009e0e:	2b00      	cmp	r3, #0
10009e10:	d015      	beq.n	10009e3e <vendord_xfer_cb+0xee>
10009e12:	683b      	ldr	r3, [r7, #0]
10009e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
10009e18:	2b00      	cmp	r3, #0
10009e1a:	d110      	bne.n	10009e3e <vendord_xfer_cb+0xee>
      {
        if ( usbd_edpt_claim(rhport, p_itf->ep_in) )
10009e1c:	68bb      	ldr	r3, [r7, #8]
10009e1e:	785a      	ldrb	r2, [r3, #1]
10009e20:	79fb      	ldrb	r3, [r7, #7]
10009e22:	4611      	mov	r1, r2
10009e24:	4618      	mov	r0, r3
10009e26:	f7fe fbc7 	bl	100085b8 <usbd_edpt_claim>
10009e2a:	4603      	mov	r3, r0
10009e2c:	2b00      	cmp	r3, #0
10009e2e:	d006      	beq.n	10009e3e <vendord_xfer_cb+0xee>
        {
          usbd_edpt_xfer(rhport, p_itf->ep_in, NULL, 0);
10009e30:	68bb      	ldr	r3, [r7, #8]
10009e32:	7859      	ldrb	r1, [r3, #1]
10009e34:	79f8      	ldrb	r0, [r7, #7]
10009e36:	2300      	movs	r3, #0
10009e38:	2200      	movs	r2, #0
10009e3a:	f7fe fc19 	bl	10008670 <usbd_edpt_xfer>
        }
      }
    }
  }

  return true;
10009e3e:	2301      	movs	r3, #1
}
10009e40:	4618      	mov	r0, r3
10009e42:	3710      	adds	r7, #16
10009e44:	46bd      	mov	sp, r7
10009e46:	bd80      	pop	{r7, pc}
10009e48:	20001bc8 	.word	0x20001bc8
	...

10009e54 <tusb_init>:

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void) {
10009e54:	b580      	push	{r7, lr}
10009e56:	b082      	sub	sp, #8
10009e58:	af00      	add	r7, sp, #0
  #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
10009e5a:	2000      	movs	r0, #0
10009e5c:	f7fd fa80 	bl	10007360 <tud_init>
10009e60:	4603      	mov	r3, r0
10009e62:	f083 0301 	eor.w	r3, r3, #1
10009e66:	b2db      	uxtb	r3, r3
10009e68:	2b00      	cmp	r3, #0
10009e6a:	d00f      	beq.n	10009e8c <tusb_init+0x38>
10009e6c:	2231      	movs	r2, #49	@ 0x31
10009e6e:	490a      	ldr	r1, [pc, #40]	@ (10009e98 <tusb_init+0x44>)
10009e70:	480a      	ldr	r0, [pc, #40]	@ (10009e9c <tusb_init+0x48>)
10009e72:	f7fb ffe1 	bl	10005e38 <__wrap_printf>
10009e76:	4b0a      	ldr	r3, [pc, #40]	@ (10009ea0 <tusb_init+0x4c>)
10009e78:	607b      	str	r3, [r7, #4]
10009e7a:	687b      	ldr	r3, [r7, #4]
10009e7c:	681b      	ldr	r3, [r3, #0]
10009e7e:	f003 0301 	and.w	r3, r3, #1
10009e82:	2b00      	cmp	r3, #0
10009e84:	d000      	beq.n	10009e88 <tusb_init+0x34>
10009e86:	be00      	bkpt	0x0000
10009e88:	2300      	movs	r3, #0
10009e8a:	e000      	b.n	10009e8e <tusb_init+0x3a>
  #if CFG_TUH_ENABLED && defined(TUH_OPT_RHPORT)
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
  #endif

  return true;
10009e8c:	2301      	movs	r3, #1
}
10009e8e:	4618      	mov	r0, r3
10009e90:	3708      	adds	r7, #8
10009e92:	46bd      	mov	sp, r7
10009e94:	bd80      	pop	{r7, pc}
10009e96:	bf00      	nop
10009e98:	1000c174 	.word	0x1000c174
10009e9c:	1000c144 	.word	0x1000c144
10009ea0:	e000edf0 	.word	0xe000edf0

10009ea4 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
10009ea4:	b580      	push	{r7, lr}
10009ea6:	b086      	sub	sp, #24
10009ea8:	af00      	add	r7, sp, #0
10009eaa:	6078      	str	r0, [r7, #4]
10009eac:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
10009eae:	687b      	ldr	r3, [r7, #4]
10009eb0:	781b      	ldrb	r3, [r3, #0]
10009eb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
10009eb6:	b2db      	uxtb	r3, r3
10009eb8:	2b00      	cmp	r3, #0
10009eba:	d106      	bne.n	10009eca <tu_edpt_claim+0x26>
10009ebc:	687b      	ldr	r3, [r7, #4]
10009ebe:	781b      	ldrb	r3, [r3, #0]
10009ec0:	f3c3 0380 	ubfx	r3, r3, #2, #1
10009ec4:	b2db      	uxtb	r3, r3
10009ec6:	2b00      	cmp	r3, #0
10009ec8:	d001      	beq.n	10009ece <tu_edpt_claim+0x2a>
10009eca:	2300      	movs	r3, #0
10009ecc:	e02c      	b.n	10009f28 <tu_edpt_claim+0x84>
10009ece:	683b      	ldr	r3, [r7, #0]
10009ed0:	613b      	str	r3, [r7, #16]
10009ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10009ed6:	60fb      	str	r3, [r7, #12]
  return mutex_enter_timeout_ms(mutex_hdl, msec);
10009ed8:	68f9      	ldr	r1, [r7, #12]
10009eda:	6938      	ldr	r0, [r7, #16]
10009edc:	f001 f92c 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
10009ee0:	687b      	ldr	r3, [r7, #4]
10009ee2:	781b      	ldrb	r3, [r3, #0]
10009ee4:	f3c3 0300 	ubfx	r3, r3, #0, #1
10009ee8:	b2db      	uxtb	r3, r3
10009eea:	2b00      	cmp	r3, #0
10009eec:	d108      	bne.n	10009f00 <tu_edpt_claim+0x5c>
10009eee:	687b      	ldr	r3, [r7, #4]
10009ef0:	781b      	ldrb	r3, [r3, #0]
10009ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
10009ef6:	b2db      	uxtb	r3, r3
10009ef8:	2b00      	cmp	r3, #0
10009efa:	d101      	bne.n	10009f00 <tu_edpt_claim+0x5c>
10009efc:	2301      	movs	r3, #1
10009efe:	e000      	b.n	10009f02 <tu_edpt_claim+0x5e>
10009f00:	2300      	movs	r3, #0
10009f02:	75fb      	strb	r3, [r7, #23]
10009f04:	7dfb      	ldrb	r3, [r7, #23]
10009f06:	f003 0301 	and.w	r3, r3, #1
10009f0a:	75fb      	strb	r3, [r7, #23]
  if (available) {
10009f0c:	7dfb      	ldrb	r3, [r7, #23]
10009f0e:	2b00      	cmp	r3, #0
10009f10:	d004      	beq.n	10009f1c <tu_edpt_claim+0x78>
    ep_state->claimed = 1;
10009f12:	687a      	ldr	r2, [r7, #4]
10009f14:	7813      	ldrb	r3, [r2, #0]
10009f16:	f043 0304 	orr.w	r3, r3, #4
10009f1a:	7013      	strb	r3, [r2, #0]
10009f1c:	683b      	ldr	r3, [r7, #0]
10009f1e:	60bb      	str	r3, [r7, #8]
  mutex_exit(mutex_hdl);
10009f20:	68b8      	ldr	r0, [r7, #8]
10009f22:	f001 f919 	bl	1000b158 <__mutex_exit_veneer>
  }

  (void) osal_mutex_unlock(mutex);
  return available;
10009f26:	7dfb      	ldrb	r3, [r7, #23]
}
10009f28:	4618      	mov	r0, r3
10009f2a:	3718      	adds	r7, #24
10009f2c:	46bd      	mov	sp, r7
10009f2e:	bd80      	pop	{r7, pc}

10009f30 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
10009f30:	b580      	push	{r7, lr}
10009f32:	b086      	sub	sp, #24
10009f34:	af00      	add	r7, sp, #0
10009f36:	6078      	str	r0, [r7, #4]
10009f38:	6039      	str	r1, [r7, #0]
10009f3a:	683b      	ldr	r3, [r7, #0]
10009f3c:	613b      	str	r3, [r7, #16]
10009f3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
10009f42:	60fb      	str	r3, [r7, #12]
  return mutex_enter_timeout_ms(mutex_hdl, msec);
10009f44:	68f9      	ldr	r1, [r7, #12]
10009f46:	6938      	ldr	r0, [r7, #16]
10009f48:	f001 f8f6 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
10009f4c:	687b      	ldr	r3, [r7, #4]
10009f4e:	781b      	ldrb	r3, [r3, #0]
10009f50:	f3c3 0380 	ubfx	r3, r3, #2, #1
10009f54:	b2db      	uxtb	r3, r3
10009f56:	2b01      	cmp	r3, #1
10009f58:	d108      	bne.n	10009f6c <tu_edpt_release+0x3c>
10009f5a:	687b      	ldr	r3, [r7, #4]
10009f5c:	781b      	ldrb	r3, [r3, #0]
10009f5e:	f3c3 0300 	ubfx	r3, r3, #0, #1
10009f62:	b2db      	uxtb	r3, r3
10009f64:	2b00      	cmp	r3, #0
10009f66:	d101      	bne.n	10009f6c <tu_edpt_release+0x3c>
10009f68:	2301      	movs	r3, #1
10009f6a:	e000      	b.n	10009f6e <tu_edpt_release+0x3e>
10009f6c:	2300      	movs	r3, #0
10009f6e:	75fb      	strb	r3, [r7, #23]
10009f70:	7dfb      	ldrb	r3, [r7, #23]
10009f72:	f003 0301 	and.w	r3, r3, #1
10009f76:	75fb      	strb	r3, [r7, #23]
  if (ret) {
10009f78:	7dfb      	ldrb	r3, [r7, #23]
10009f7a:	2b00      	cmp	r3, #0
10009f7c:	d004      	beq.n	10009f88 <tu_edpt_release+0x58>
    ep_state->claimed = 0;
10009f7e:	687a      	ldr	r2, [r7, #4]
10009f80:	7813      	ldrb	r3, [r2, #0]
10009f82:	f023 0304 	bic.w	r3, r3, #4
10009f86:	7013      	strb	r3, [r2, #0]
10009f88:	683b      	ldr	r3, [r7, #0]
10009f8a:	60bb      	str	r3, [r7, #8]
  mutex_exit(mutex_hdl);
10009f8c:	68b8      	ldr	r0, [r7, #8]
10009f8e:	f001 f8e3 	bl	1000b158 <__mutex_exit_veneer>
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
10009f92:	7dfb      	ldrb	r3, [r7, #23]
}
10009f94:	4618      	mov	r0, r3
10009f96:	3718      	adds	r7, #24
10009f98:	46bd      	mov	sp, r7
10009f9a:	bd80      	pop	{r7, pc}

10009f9c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed) {
10009f9c:	b580      	push	{r7, lr}
10009f9e:	b08a      	sub	sp, #40	@ 0x28
10009fa0:	af00      	add	r7, sp, #0
10009fa2:	6078      	str	r0, [r7, #4]
10009fa4:	460b      	mov	r3, r1
10009fa6:	70fb      	strb	r3, [r7, #3]
10009fa8:	687b      	ldr	r3, [r7, #4]
10009faa:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
10009fac:	68fb      	ldr	r3, [r7, #12]
10009fae:	889b      	ldrh	r3, [r3, #4]
10009fb0:	b29b      	uxth	r3, r3
10009fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
10009fb6:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
10009fb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
10009fba:	687b      	ldr	r3, [r7, #4]
10009fbc:	78db      	ldrb	r3, [r3, #3]
10009fbe:	f3c3 0301 	ubfx	r3, r3, #0, #2
10009fc2:	b2db      	uxtb	r3, r3
10009fc4:	2b03      	cmp	r3, #3
10009fc6:	d04d      	beq.n	1000a064 <tu_edpt_validate+0xc8>
10009fc8:	2b03      	cmp	r3, #3
10009fca:	dc67      	bgt.n	1000a09c <tu_edpt_validate+0x100>
10009fcc:	2b01      	cmp	r3, #1
10009fce:	d002      	beq.n	10009fd6 <tu_edpt_validate+0x3a>
10009fd0:	2b02      	cmp	r3, #2
10009fd2:	d01d      	beq.n	1000a010 <tu_edpt_validate+0x74>
10009fd4:	e062      	b.n	1000a09c <tu_edpt_validate+0x100>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
10009fd6:	78fb      	ldrb	r3, [r7, #3]
10009fd8:	2b02      	cmp	r3, #2
10009fda:	d102      	bne.n	10009fe2 <tu_edpt_validate+0x46>
10009fdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
10009fe0:	e001      	b.n	10009fe6 <tu_edpt_validate+0x4a>
10009fe2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
10009fe6:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
10009fe8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
10009fea:	8afb      	ldrh	r3, [r7, #22]
10009fec:	429a      	cmp	r2, r3
10009fee:	d957      	bls.n	1000a0a0 <tu_edpt_validate+0x104>
10009ff0:	2290      	movs	r2, #144	@ 0x90
10009ff2:	4930      	ldr	r1, [pc, #192]	@ (1000a0b4 <tu_edpt_validate+0x118>)
10009ff4:	4830      	ldr	r0, [pc, #192]	@ (1000a0b8 <tu_edpt_validate+0x11c>)
10009ff6:	f7fb ff1f 	bl	10005e38 <__wrap_printf>
10009ffa:	4b30      	ldr	r3, [pc, #192]	@ (1000a0bc <tu_edpt_validate+0x120>)
10009ffc:	613b      	str	r3, [r7, #16]
10009ffe:	693b      	ldr	r3, [r7, #16]
1000a000:	681b      	ldr	r3, [r3, #0]
1000a002:	f003 0301 	and.w	r3, r3, #1
1000a006:	2b00      	cmp	r3, #0
1000a008:	d000      	beq.n	1000a00c <tu_edpt_validate+0x70>
1000a00a:	be00      	bkpt	0x0000
1000a00c:	2300      	movs	r3, #0
1000a00e:	e04d      	b.n	1000a0ac <tu_edpt_validate+0x110>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
1000a010:	78fb      	ldrb	r3, [r7, #3]
1000a012:	2b02      	cmp	r3, #2
1000a014:	d113      	bne.n	1000a03e <tu_edpt_validate+0xa2>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
1000a016:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
1000a018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
1000a01c:	d042      	beq.n	1000a0a4 <tu_edpt_validate+0x108>
1000a01e:	2297      	movs	r2, #151	@ 0x97
1000a020:	4924      	ldr	r1, [pc, #144]	@ (1000a0b4 <tu_edpt_validate+0x118>)
1000a022:	4825      	ldr	r0, [pc, #148]	@ (1000a0b8 <tu_edpt_validate+0x11c>)
1000a024:	f7fb ff08 	bl	10005e38 <__wrap_printf>
1000a028:	4b24      	ldr	r3, [pc, #144]	@ (1000a0bc <tu_edpt_validate+0x120>)
1000a02a:	61bb      	str	r3, [r7, #24]
1000a02c:	69bb      	ldr	r3, [r7, #24]
1000a02e:	681b      	ldr	r3, [r3, #0]
1000a030:	f003 0301 	and.w	r3, r3, #1
1000a034:	2b00      	cmp	r3, #0
1000a036:	d000      	beq.n	1000a03a <tu_edpt_validate+0x9e>
1000a038:	be00      	bkpt	0x0000
1000a03a:	2300      	movs	r3, #0
1000a03c:	e036      	b.n	1000a0ac <tu_edpt_validate+0x110>
      } else {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
1000a03e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
1000a040:	2b40      	cmp	r3, #64	@ 0x40
1000a042:	d92f      	bls.n	1000a0a4 <tu_edpt_validate+0x108>
1000a044:	229a      	movs	r2, #154	@ 0x9a
1000a046:	491b      	ldr	r1, [pc, #108]	@ (1000a0b4 <tu_edpt_validate+0x118>)
1000a048:	481b      	ldr	r0, [pc, #108]	@ (1000a0b8 <tu_edpt_validate+0x11c>)
1000a04a:	f7fb fef5 	bl	10005e38 <__wrap_printf>
1000a04e:	4b1b      	ldr	r3, [pc, #108]	@ (1000a0bc <tu_edpt_validate+0x120>)
1000a050:	61fb      	str	r3, [r7, #28]
1000a052:	69fb      	ldr	r3, [r7, #28]
1000a054:	681b      	ldr	r3, [r3, #0]
1000a056:	f003 0301 	and.w	r3, r3, #1
1000a05a:	2b00      	cmp	r3, #0
1000a05c:	d000      	beq.n	1000a060 <tu_edpt_validate+0xc4>
1000a05e:	be00      	bkpt	0x0000
1000a060:	2300      	movs	r3, #0
1000a062:	e023      	b.n	1000a0ac <tu_edpt_validate+0x110>
      }
      break;

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
1000a064:	78fb      	ldrb	r3, [r7, #3]
1000a066:	2b02      	cmp	r3, #2
1000a068:	d102      	bne.n	1000a070 <tu_edpt_validate+0xd4>
1000a06a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1000a06e:	e000      	b.n	1000a072 <tu_edpt_validate+0xd6>
1000a070:	2340      	movs	r3, #64	@ 0x40
1000a072:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
1000a074:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
1000a076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
1000a078:	429a      	cmp	r2, r3
1000a07a:	d915      	bls.n	1000a0a8 <tu_edpt_validate+0x10c>
1000a07c:	22a0      	movs	r2, #160	@ 0xa0
1000a07e:	490d      	ldr	r1, [pc, #52]	@ (1000a0b4 <tu_edpt_validate+0x118>)
1000a080:	480d      	ldr	r0, [pc, #52]	@ (1000a0b8 <tu_edpt_validate+0x11c>)
1000a082:	f7fb fed9 	bl	10005e38 <__wrap_printf>
1000a086:	4b0d      	ldr	r3, [pc, #52]	@ (1000a0bc <tu_edpt_validate+0x120>)
1000a088:	623b      	str	r3, [r7, #32]
1000a08a:	6a3b      	ldr	r3, [r7, #32]
1000a08c:	681b      	ldr	r3, [r3, #0]
1000a08e:	f003 0301 	and.w	r3, r3, #1
1000a092:	2b00      	cmp	r3, #0
1000a094:	d000      	beq.n	1000a098 <tu_edpt_validate+0xfc>
1000a096:	be00      	bkpt	0x0000
1000a098:	2300      	movs	r3, #0
1000a09a:	e007      	b.n	1000a0ac <tu_edpt_validate+0x110>
      break;
    }

    default:
      return false;
1000a09c:	2300      	movs	r3, #0
1000a09e:	e005      	b.n	1000a0ac <tu_edpt_validate+0x110>
      break;
1000a0a0:	bf00      	nop
1000a0a2:	e002      	b.n	1000a0aa <tu_edpt_validate+0x10e>
      break;
1000a0a4:	bf00      	nop
1000a0a6:	e000      	b.n	1000a0aa <tu_edpt_validate+0x10e>
      break;
1000a0a8:	bf00      	nop
  }

  return true;
1000a0aa:	2301      	movs	r3, #1
}
1000a0ac:	4618      	mov	r0, r3
1000a0ae:	3728      	adds	r7, #40	@ 0x28
1000a0b0:	46bd      	mov	sp, r7
1000a0b2:	bd80      	pop	{r7, pc}
1000a0b4:	1000c180 	.word	0x1000c180
1000a0b8:	1000c144 	.word	0x1000c144
1000a0bc:	e000edf0 	.word	0xe000edf0

1000a0c0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
1000a0c0:	b480      	push	{r7}
1000a0c2:	b08d      	sub	sp, #52	@ 0x34
1000a0c4:	af00      	add	r7, sp, #0
1000a0c6:	60f8      	str	r0, [r7, #12]
1000a0c8:	60b9      	str	r1, [r7, #8]
1000a0ca:	4611      	mov	r1, r2
1000a0cc:	461a      	mov	r2, r3
1000a0ce:	460b      	mov	r3, r1
1000a0d0:	80fb      	strh	r3, [r7, #6]
1000a0d2:	4613      	mov	r3, r2
1000a0d4:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
1000a0d6:	68bb      	ldr	r3, [r7, #8]
1000a0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
1000a0da:	88fb      	ldrh	r3, [r7, #6]
1000a0dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000a0de:	4413      	add	r3, r2
1000a0e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
1000a0e2:	e027      	b.n	1000a134 <tu_edpt_bind_driver+0x74>
1000a0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000a0e6:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
1000a0e8:	6a3b      	ldr	r3, [r7, #32]
1000a0ea:	3301      	adds	r3, #1
1000a0ec:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
1000a0ee:	2b05      	cmp	r3, #5
1000a0f0:	d116      	bne.n	1000a120 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
1000a0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000a0f4:	789b      	ldrb	r3, [r3, #2]
1000a0f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
1000a0fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
1000a0fe:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
1000a100:	7fbb      	ldrb	r3, [r7, #30]
1000a102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
1000a106:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
1000a108:	005b      	lsls	r3, r3, #1
1000a10a:	68fa      	ldr	r2, [r7, #12]
1000a10c:	4413      	add	r3, r2
1000a10e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
1000a112:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
1000a114:	7ffa      	ldrb	r2, [r7, #31]
1000a116:	09d2      	lsrs	r2, r2, #7
1000a118:	b2d2      	uxtb	r2, r2
1000a11a:	4611      	mov	r1, r2
1000a11c:	797a      	ldrb	r2, [r7, #5]
1000a11e:	545a      	strb	r2, [r3, r1]
1000a120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000a122:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
1000a124:	69bb      	ldr	r3, [r7, #24]
1000a126:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
1000a128:	697b      	ldr	r3, [r7, #20]
1000a12a:	781b      	ldrb	r3, [r3, #0]
1000a12c:	461a      	mov	r2, r3
1000a12e:	697b      	ldr	r3, [r7, #20]
1000a130:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
1000a132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
1000a134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1000a136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000a138:	429a      	cmp	r2, r3
1000a13a:	d3d3      	bcc.n	1000a0e4 <tu_edpt_bind_driver+0x24>
  }
}
1000a13c:	bf00      	nop
1000a13e:	bf00      	nop
1000a140:	3734      	adds	r7, #52	@ 0x34
1000a142:	46bd      	mov	sp, r7
1000a144:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a148:	4770      	bx	lr

1000a14a <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
1000a14a:	b580      	push	{r7, lr}
1000a14c:	b08e      	sub	sp, #56	@ 0x38
1000a14e:	af00      	add	r7, sp, #0
1000a150:	60f8      	str	r0, [r7, #12]
1000a152:	60b9      	str	r1, [r7, #8]
1000a154:	4611      	mov	r1, r2
1000a156:	461a      	mov	r2, r3
1000a158:	460b      	mov	r3, r1
1000a15a:	80fb      	strh	r3, [r7, #6]
1000a15c:	4613      	mov	r3, r2
1000a15e:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
1000a160:	88fb      	ldrh	r3, [r7, #6]
1000a162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
1000a166:	d901      	bls.n	1000a16c <tu_fifo_config+0x22>
1000a168:	2300      	movs	r3, #0
1000a16a:	e054      	b.n	1000a216 <tu_fifo_config+0xcc>

  _ff_lock(f->mutex_wr);
1000a16c:	68fb      	ldr	r3, [r7, #12]
1000a16e:	68db      	ldr	r3, [r3, #12]
1000a170:	61bb      	str	r3, [r7, #24]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000a172:	69bb      	ldr	r3, [r7, #24]
1000a174:	2b00      	cmp	r3, #0
1000a176:	d008      	beq.n	1000a18a <tu_fifo_config+0x40>
1000a178:	69bb      	ldr	r3, [r7, #24]
1000a17a:	617b      	str	r3, [r7, #20]
1000a17c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000a180:	613b      	str	r3, [r7, #16]
  return mutex_enter_timeout_ms(mutex_hdl, msec);
1000a182:	6939      	ldr	r1, [r7, #16]
1000a184:	6978      	ldr	r0, [r7, #20]
1000a186:	f000 ffd7 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000a18a:	bf00      	nop
  _ff_lock(f->mutex_rd);
1000a18c:	68fb      	ldr	r3, [r7, #12]
1000a18e:	691b      	ldr	r3, [r3, #16]
1000a190:	627b      	str	r3, [r7, #36]	@ 0x24
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000a194:	2b00      	cmp	r3, #0
1000a196:	d008      	beq.n	1000a1aa <tu_fifo_config+0x60>
1000a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000a19a:	623b      	str	r3, [r7, #32]
1000a19c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000a1a0:	61fb      	str	r3, [r7, #28]
1000a1a2:	69f9      	ldr	r1, [r7, #28]
1000a1a4:	6a38      	ldr	r0, [r7, #32]
1000a1a6:	f000 ffc7 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000a1aa:	bf00      	nop

  f->buffer       = (uint8_t*) buffer;
1000a1ac:	68fb      	ldr	r3, [r7, #12]
1000a1ae:	68ba      	ldr	r2, [r7, #8]
1000a1b0:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
1000a1b2:	68fb      	ldr	r3, [r7, #12]
1000a1b4:	88fa      	ldrh	r2, [r7, #6]
1000a1b6:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
1000a1b8:	88bb      	ldrh	r3, [r7, #4]
1000a1ba:	f3c3 030e 	ubfx	r3, r3, #0, #15
1000a1be:	b299      	uxth	r1, r3
1000a1c0:	68fa      	ldr	r2, [r7, #12]
1000a1c2:	88d3      	ldrh	r3, [r2, #6]
1000a1c4:	f361 030e 	bfi	r3, r1, #0, #15
1000a1c8:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
1000a1ca:	68fa      	ldr	r2, [r7, #12]
1000a1cc:	79d3      	ldrb	r3, [r2, #7]
1000a1ce:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
1000a1d2:	f361 13c7 	bfi	r3, r1, #7, #1
1000a1d6:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
1000a1d8:	68fb      	ldr	r3, [r7, #12]
1000a1da:	2200      	movs	r2, #0
1000a1dc:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
1000a1de:	68fb      	ldr	r3, [r7, #12]
1000a1e0:	2200      	movs	r2, #0
1000a1e2:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
1000a1e4:	68fb      	ldr	r3, [r7, #12]
1000a1e6:	68db      	ldr	r3, [r3, #12]
1000a1e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (mutex) osal_mutex_unlock(mutex);
1000a1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000a1ec:	2b00      	cmp	r3, #0
1000a1ee:	d004      	beq.n	1000a1fa <tu_fifo_config+0xb0>
1000a1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000a1f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  mutex_exit(mutex_hdl);
1000a1f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000a1f6:	f000 ffaf 	bl	1000b158 <__mutex_exit_veneer>
}
1000a1fa:	bf00      	nop
  _ff_unlock(f->mutex_rd);
1000a1fc:	68fb      	ldr	r3, [r7, #12]
1000a1fe:	691b      	ldr	r3, [r3, #16]
1000a200:	637b      	str	r3, [r7, #52]	@ 0x34
  if (mutex) osal_mutex_unlock(mutex);
1000a202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000a204:	2b00      	cmp	r3, #0
1000a206:	d004      	beq.n	1000a212 <tu_fifo_config+0xc8>
1000a208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1000a20a:	633b      	str	r3, [r7, #48]	@ 0x30
1000a20c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
1000a20e:	f000 ffa3 	bl	1000b158 <__mutex_exit_veneer>
}
1000a212:	bf00      	nop

  return true;
1000a214:	2301      	movs	r3, #1
}
1000a216:	4618      	mov	r0, r3
1000a218:	3738      	adds	r7, #56	@ 0x38
1000a21a:	46bd      	mov	sp, r7
1000a21c:	bd80      	pop	{r7, pc}

1000a21e <_ff_push>:
}
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
1000a21e:	b580      	push	{r7, lr}
1000a220:	b084      	sub	sp, #16
1000a222:	af00      	add	r7, sp, #0
1000a224:	60f8      	str	r0, [r7, #12]
1000a226:	60b9      	str	r1, [r7, #8]
1000a228:	4613      	mov	r3, r2
1000a22a:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
1000a22c:	68fb      	ldr	r3, [r7, #12]
1000a22e:	681b      	ldr	r3, [r3, #0]
1000a230:	88fa      	ldrh	r2, [r7, #6]
1000a232:	68f9      	ldr	r1, [r7, #12]
1000a234:	88c9      	ldrh	r1, [r1, #6]
1000a236:	f3c1 010e 	ubfx	r1, r1, #0, #15
1000a23a:	b289      	uxth	r1, r1
1000a23c:	fb01 f202 	mul.w	r2, r1, r2
1000a240:	1898      	adds	r0, r3, r2
1000a242:	68fb      	ldr	r3, [r7, #12]
1000a244:	88db      	ldrh	r3, [r3, #6]
1000a246:	f3c3 030e 	ubfx	r3, r3, #0, #15
1000a24a:	b29b      	uxth	r3, r3
1000a24c:	461a      	mov	r2, r3
1000a24e:	68b9      	ldr	r1, [r7, #8]
1000a250:	f000 fe72 	bl	1000af38 <memcpy>
}
1000a254:	bf00      	nop
1000a256:	3710      	adds	r7, #16
1000a258:	46bd      	mov	sp, r7
1000a25a:	bd80      	pop	{r7, pc}

1000a25c <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
1000a25c:	b580      	push	{r7, lr}
1000a25e:	b088      	sub	sp, #32
1000a260:	af00      	add	r7, sp, #0
1000a262:	60f8      	str	r0, [r7, #12]
1000a264:	60b9      	str	r1, [r7, #8]
1000a266:	4611      	mov	r1, r2
1000a268:	461a      	mov	r2, r3
1000a26a:	460b      	mov	r3, r1
1000a26c:	80fb      	strh	r3, [r7, #6]
1000a26e:	4613      	mov	r3, r2
1000a270:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
1000a272:	68fb      	ldr	r3, [r7, #12]
1000a274:	889a      	ldrh	r2, [r3, #4]
1000a276:	88bb      	ldrh	r3, [r7, #4]
1000a278:	1ad3      	subs	r3, r2, r3
1000a27a:	83fb      	strh	r3, [r7, #30]
  uint16_t const wrap_count = n - lin_count;
1000a27c:	88fa      	ldrh	r2, [r7, #6]
1000a27e:	8bfb      	ldrh	r3, [r7, #30]
1000a280:	1ad3      	subs	r3, r2, r3
1000a282:	83bb      	strh	r3, [r7, #28]

  uint16_t lin_bytes = lin_count * f->item_size;
1000a284:	68fb      	ldr	r3, [r7, #12]
1000a286:	88db      	ldrh	r3, [r3, #6]
1000a288:	f3c3 030e 	ubfx	r3, r3, #0, #15
1000a28c:	b29b      	uxth	r3, r3
1000a28e:	461a      	mov	r2, r3
1000a290:	8bfb      	ldrh	r3, [r7, #30]
1000a292:	fb13 f302 	smulbb	r3, r3, r2
1000a296:	837b      	strh	r3, [r7, #26]
  uint16_t wrap_bytes = wrap_count * f->item_size;
1000a298:	68fb      	ldr	r3, [r7, #12]
1000a29a:	88db      	ldrh	r3, [r3, #6]
1000a29c:	f3c3 030e 	ubfx	r3, r3, #0, #15
1000a2a0:	b29b      	uxth	r3, r3
1000a2a2:	461a      	mov	r2, r3
1000a2a4:	8bbb      	ldrh	r3, [r7, #28]
1000a2a6:	fb13 f302 	smulbb	r3, r3, r2
1000a2aa:	833b      	strh	r3, [r7, #24]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
1000a2ac:	68fb      	ldr	r3, [r7, #12]
1000a2ae:	681b      	ldr	r3, [r3, #0]
1000a2b0:	88ba      	ldrh	r2, [r7, #4]
1000a2b2:	68f9      	ldr	r1, [r7, #12]
1000a2b4:	88c9      	ldrh	r1, [r1, #6]
1000a2b6:	f3c1 010e 	ubfx	r1, r1, #0, #15
1000a2ba:	b289      	uxth	r1, r1
1000a2bc:	fb01 f202 	mul.w	r2, r1, r2
1000a2c0:	4413      	add	r3, r2
1000a2c2:	617b      	str	r3, [r7, #20]

  switch (copy_mode)
1000a2c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
1000a2c8:	2b00      	cmp	r3, #0
1000a2ca:	d121      	bne.n	1000a310 <_ff_push_n+0xb4>
  {
    case TU_FIFO_COPY_INC:
      if(n <= lin_count)
1000a2cc:	88fa      	ldrh	r2, [r7, #6]
1000a2ce:	8bfb      	ldrh	r3, [r7, #30]
1000a2d0:	429a      	cmp	r2, r3
1000a2d2:	d80d      	bhi.n	1000a2f0 <_ff_push_n+0x94>
      {
        // Linear only
        memcpy(ff_buf, app_buf, n*f->item_size);
1000a2d4:	88fb      	ldrh	r3, [r7, #6]
1000a2d6:	68fa      	ldr	r2, [r7, #12]
1000a2d8:	88d2      	ldrh	r2, [r2, #6]
1000a2da:	f3c2 020e 	ubfx	r2, r2, #0, #15
1000a2de:	b292      	uxth	r2, r2
1000a2e0:	fb02 f303 	mul.w	r3, r2, r3
1000a2e4:	461a      	mov	r2, r3
1000a2e6:	68b9      	ldr	r1, [r7, #8]
1000a2e8:	6978      	ldr	r0, [r7, #20]
1000a2ea:	f000 fe25 	bl	1000af38 <memcpy>

        // Write data wrapped around
        // TU_ASSERT(nWrap_bytes <= f->depth, );
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
      }
      break;
1000a2ee:	e010      	b.n	1000a312 <_ff_push_n+0xb6>
        memcpy(ff_buf, app_buf, lin_bytes);
1000a2f0:	8b7b      	ldrh	r3, [r7, #26]
1000a2f2:	461a      	mov	r2, r3
1000a2f4:	68b9      	ldr	r1, [r7, #8]
1000a2f6:	6978      	ldr	r0, [r7, #20]
1000a2f8:	f000 fe1e 	bl	1000af38 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
1000a2fc:	68fb      	ldr	r3, [r7, #12]
1000a2fe:	6818      	ldr	r0, [r3, #0]
1000a300:	8b7b      	ldrh	r3, [r7, #26]
1000a302:	68ba      	ldr	r2, [r7, #8]
1000a304:	4413      	add	r3, r2
1000a306:	8b3a      	ldrh	r2, [r7, #24]
1000a308:	4619      	mov	r1, r3
1000a30a:	f000 fe15 	bl	1000af38 <memcpy>
      break;
1000a30e:	e000      	b.n	1000a312 <_ff_push_n+0xb6>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
1000a310:	bf00      	nop
  }
}
1000a312:	bf00      	nop
1000a314:	3720      	adds	r7, #32
1000a316:	46bd      	mov	sp, r7
1000a318:	bd80      	pop	{r7, pc}

1000a31a <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
1000a31a:	b580      	push	{r7, lr}
1000a31c:	b084      	sub	sp, #16
1000a31e:	af00      	add	r7, sp, #0
1000a320:	60f8      	str	r0, [r7, #12]
1000a322:	60b9      	str	r1, [r7, #8]
1000a324:	4613      	mov	r3, r2
1000a326:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
1000a328:	68fb      	ldr	r3, [r7, #12]
1000a32a:	681b      	ldr	r3, [r3, #0]
1000a32c:	88fa      	ldrh	r2, [r7, #6]
1000a32e:	68f9      	ldr	r1, [r7, #12]
1000a330:	88c9      	ldrh	r1, [r1, #6]
1000a332:	f3c1 010e 	ubfx	r1, r1, #0, #15
1000a336:	b289      	uxth	r1, r1
1000a338:	fb01 f202 	mul.w	r2, r1, r2
1000a33c:	1899      	adds	r1, r3, r2
1000a33e:	68fb      	ldr	r3, [r7, #12]
1000a340:	88db      	ldrh	r3, [r3, #6]
1000a342:	f3c3 030e 	ubfx	r3, r3, #0, #15
1000a346:	b29b      	uxth	r3, r3
1000a348:	461a      	mov	r2, r3
1000a34a:	68b8      	ldr	r0, [r7, #8]
1000a34c:	f000 fdf4 	bl	1000af38 <memcpy>
}
1000a350:	bf00      	nop
1000a352:	3710      	adds	r7, #16
1000a354:	46bd      	mov	sp, r7
1000a356:	bd80      	pop	{r7, pc}

1000a358 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
1000a358:	b580      	push	{r7, lr}
1000a35a:	b088      	sub	sp, #32
1000a35c:	af00      	add	r7, sp, #0
1000a35e:	60f8      	str	r0, [r7, #12]
1000a360:	60b9      	str	r1, [r7, #8]
1000a362:	4611      	mov	r1, r2
1000a364:	461a      	mov	r2, r3
1000a366:	460b      	mov	r3, r1
1000a368:	80fb      	strh	r3, [r7, #6]
1000a36a:	4613      	mov	r3, r2
1000a36c:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
1000a36e:	68fb      	ldr	r3, [r7, #12]
1000a370:	889a      	ldrh	r2, [r3, #4]
1000a372:	88bb      	ldrh	r3, [r7, #4]
1000a374:	1ad3      	subs	r3, r2, r3
1000a376:	83fb      	strh	r3, [r7, #30]
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
1000a378:	88fa      	ldrh	r2, [r7, #6]
1000a37a:	8bfb      	ldrh	r3, [r7, #30]
1000a37c:	1ad3      	subs	r3, r2, r3
1000a37e:	83bb      	strh	r3, [r7, #28]

  uint16_t lin_bytes = lin_count * f->item_size;
1000a380:	68fb      	ldr	r3, [r7, #12]
1000a382:	88db      	ldrh	r3, [r3, #6]
1000a384:	f3c3 030e 	ubfx	r3, r3, #0, #15
1000a388:	b29b      	uxth	r3, r3
1000a38a:	461a      	mov	r2, r3
1000a38c:	8bfb      	ldrh	r3, [r7, #30]
1000a38e:	fb13 f302 	smulbb	r3, r3, r2
1000a392:	837b      	strh	r3, [r7, #26]
  uint16_t wrap_bytes = wrap_count * f->item_size;
1000a394:	68fb      	ldr	r3, [r7, #12]
1000a396:	88db      	ldrh	r3, [r3, #6]
1000a398:	f3c3 030e 	ubfx	r3, r3, #0, #15
1000a39c:	b29b      	uxth	r3, r3
1000a39e:	461a      	mov	r2, r3
1000a3a0:	8bbb      	ldrh	r3, [r7, #28]
1000a3a2:	fb13 f302 	smulbb	r3, r3, r2
1000a3a6:	833b      	strh	r3, [r7, #24]

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
1000a3a8:	68fb      	ldr	r3, [r7, #12]
1000a3aa:	681b      	ldr	r3, [r3, #0]
1000a3ac:	88ba      	ldrh	r2, [r7, #4]
1000a3ae:	68f9      	ldr	r1, [r7, #12]
1000a3b0:	88c9      	ldrh	r1, [r1, #6]
1000a3b2:	f3c1 010e 	ubfx	r1, r1, #0, #15
1000a3b6:	b289      	uxth	r1, r1
1000a3b8:	fb01 f202 	mul.w	r2, r1, r2
1000a3bc:	4413      	add	r3, r2
1000a3be:	617b      	str	r3, [r7, #20]

  switch (copy_mode)
1000a3c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
1000a3c4:	2b00      	cmp	r3, #0
1000a3c6:	d121      	bne.n	1000a40c <_ff_pull_n+0xb4>
  {
    case TU_FIFO_COPY_INC:
      if ( n <= lin_count )
1000a3c8:	88fa      	ldrh	r2, [r7, #6]
1000a3ca:	8bfb      	ldrh	r3, [r7, #30]
1000a3cc:	429a      	cmp	r2, r3
1000a3ce:	d80d      	bhi.n	1000a3ec <_ff_pull_n+0x94>
      {
        // Linear only
        memcpy(app_buf, ff_buf, n*f->item_size);
1000a3d0:	88fb      	ldrh	r3, [r7, #6]
1000a3d2:	68fa      	ldr	r2, [r7, #12]
1000a3d4:	88d2      	ldrh	r2, [r2, #6]
1000a3d6:	f3c2 020e 	ubfx	r2, r2, #0, #15
1000a3da:	b292      	uxth	r2, r2
1000a3dc:	fb02 f303 	mul.w	r3, r2, r3
1000a3e0:	461a      	mov	r2, r3
1000a3e2:	6979      	ldr	r1, [r7, #20]
1000a3e4:	68b8      	ldr	r0, [r7, #8]
1000a3e6:	f000 fda7 	bl	1000af38 <memcpy>
        memcpy(app_buf, ff_buf, lin_bytes);

        // Read data wrapped part
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
      }
    break;
1000a3ea:	e010      	b.n	1000a40e <_ff_pull_n+0xb6>
        memcpy(app_buf, ff_buf, lin_bytes);
1000a3ec:	8b7b      	ldrh	r3, [r7, #26]
1000a3ee:	461a      	mov	r2, r3
1000a3f0:	6979      	ldr	r1, [r7, #20]
1000a3f2:	68b8      	ldr	r0, [r7, #8]
1000a3f4:	f000 fda0 	bl	1000af38 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
1000a3f8:	8b7b      	ldrh	r3, [r7, #26]
1000a3fa:	68ba      	ldr	r2, [r7, #8]
1000a3fc:	18d0      	adds	r0, r2, r3
1000a3fe:	68fb      	ldr	r3, [r7, #12]
1000a400:	681b      	ldr	r3, [r3, #0]
1000a402:	8b3a      	ldrh	r2, [r7, #24]
1000a404:	4619      	mov	r1, r3
1000a406:	f000 fd97 	bl	1000af38 <memcpy>
    break;
1000a40a:	e000      	b.n	1000a40e <_ff_pull_n+0xb6>
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
#endif
    break;

    default: break;
1000a40c:	bf00      	nop
  }
}
1000a40e:	bf00      	nop
1000a410:	3720      	adds	r7, #32
1000a412:	46bd      	mov	sp, r7
1000a414:	bd80      	pop	{r7, pc}

1000a416 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
1000a416:	b480      	push	{r7}
1000a418:	b085      	sub	sp, #20
1000a41a:	af00      	add	r7, sp, #0
1000a41c:	4603      	mov	r3, r0
1000a41e:	80fb      	strh	r3, [r7, #6]
1000a420:	460b      	mov	r3, r1
1000a422:	80bb      	strh	r3, [r7, #4]
1000a424:	4613      	mov	r3, r2
1000a426:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
1000a428:	88ba      	ldrh	r2, [r7, #4]
1000a42a:	887b      	ldrh	r3, [r7, #2]
1000a42c:	4413      	add	r3, r2
1000a42e:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
1000a430:	88ba      	ldrh	r2, [r7, #4]
1000a432:	89fb      	ldrh	r3, [r7, #14]
1000a434:	429a      	cmp	r2, r3
1000a436:	d804      	bhi.n	1000a442 <advance_index+0x2c>
1000a438:	89fa      	ldrh	r2, [r7, #14]
1000a43a:	88fb      	ldrh	r3, [r7, #6]
1000a43c:	005b      	lsls	r3, r3, #1
1000a43e:	429a      	cmp	r2, r3
1000a440:	db08      	blt.n	1000a454 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
1000a442:	88fb      	ldrh	r3, [r7, #6]
1000a444:	005b      	lsls	r3, r3, #1
1000a446:	b29b      	uxth	r3, r3
1000a448:	425b      	negs	r3, r3
1000a44a:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
1000a44c:	89fa      	ldrh	r2, [r7, #14]
1000a44e:	89bb      	ldrh	r3, [r7, #12]
1000a450:	4413      	add	r3, r2
1000a452:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
1000a454:	89fb      	ldrh	r3, [r7, #14]
}
1000a456:	4618      	mov	r0, r3
1000a458:	3714      	adds	r7, #20
1000a45a:	46bd      	mov	sp, r7
1000a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a460:	4770      	bx	lr

1000a462 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
1000a462:	b580      	push	{r7, lr}
1000a464:	b08a      	sub	sp, #40	@ 0x28
1000a466:	af00      	add	r7, sp, #0
1000a468:	60f8      	str	r0, [r7, #12]
1000a46a:	60b9      	str	r1, [r7, #8]
1000a46c:	4611      	mov	r1, r2
1000a46e:	461a      	mov	r2, r3
1000a470:	460b      	mov	r3, r1
1000a472:	80fb      	strh	r3, [r7, #6]
1000a474:	4613      	mov	r3, r2
1000a476:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
1000a478:	68fb      	ldr	r3, [r7, #12]
1000a47a:	889b      	ldrh	r3, [r3, #4]
1000a47c:	847b      	strh	r3, [r7, #34]	@ 0x22
1000a47e:	88fb      	ldrh	r3, [r7, #6]
1000a480:	843b      	strh	r3, [r7, #32]
1000a482:	88bb      	ldrh	r3, [r7, #4]
1000a484:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
1000a486:	8c3a      	ldrh	r2, [r7, #32]
1000a488:	8bfb      	ldrh	r3, [r7, #30]
1000a48a:	429a      	cmp	r2, r3
1000a48c:	d304      	bcc.n	1000a498 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
1000a48e:	8c3a      	ldrh	r2, [r7, #32]
1000a490:	8bfb      	ldrh	r3, [r7, #30]
1000a492:	1ad3      	subs	r3, r2, r3
1000a494:	b29b      	uxth	r3, r3
1000a496:	e008      	b.n	1000a4aa <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
1000a498:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
1000a49a:	005b      	lsls	r3, r3, #1
1000a49c:	b29a      	uxth	r2, r3
1000a49e:	8c39      	ldrh	r1, [r7, #32]
1000a4a0:	8bfb      	ldrh	r3, [r7, #30]
1000a4a2:	1acb      	subs	r3, r1, r3
1000a4a4:	b29b      	uxth	r3, r3
1000a4a6:	4413      	add	r3, r2
1000a4a8:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
1000a4aa:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
1000a4ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
1000a4ae:	2b00      	cmp	r3, #0
1000a4b0:	d101      	bne.n	1000a4b6 <_tu_fifo_peek+0x54>
1000a4b2:	2300      	movs	r3, #0
1000a4b4:	e037      	b.n	1000a526 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
1000a4b6:	68fb      	ldr	r3, [r7, #12]
1000a4b8:	889b      	ldrh	r3, [r3, #4]
1000a4ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
1000a4bc:	429a      	cmp	r2, r3
1000a4be:	d91b      	bls.n	1000a4f8 <_tu_fifo_peek+0x96>
1000a4c0:	68fb      	ldr	r3, [r7, #12]
1000a4c2:	61bb      	str	r3, [r7, #24]
1000a4c4:	88fb      	ldrh	r3, [r7, #6]
1000a4c6:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
1000a4c8:	69bb      	ldr	r3, [r7, #24]
1000a4ca:	889b      	ldrh	r3, [r3, #4]
1000a4cc:	8afa      	ldrh	r2, [r7, #22]
1000a4ce:	429a      	cmp	r2, r3
1000a4d0:	d305      	bcc.n	1000a4de <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
1000a4d2:	69bb      	ldr	r3, [r7, #24]
1000a4d4:	889b      	ldrh	r3, [r3, #4]
1000a4d6:	8afa      	ldrh	r2, [r7, #22]
1000a4d8:	1ad3      	subs	r3, r2, r3
1000a4da:	82bb      	strh	r3, [r7, #20]
1000a4dc:	e004      	b.n	1000a4e8 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
1000a4de:	69bb      	ldr	r3, [r7, #24]
1000a4e0:	889a      	ldrh	r2, [r3, #4]
1000a4e2:	8afb      	ldrh	r3, [r7, #22]
1000a4e4:	4413      	add	r3, r2
1000a4e6:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
1000a4e8:	69bb      	ldr	r3, [r7, #24]
1000a4ea:	8aba      	ldrh	r2, [r7, #20]
1000a4ec:	815a      	strh	r2, [r3, #10]
  return rd_idx;
1000a4ee:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
1000a4f0:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
1000a4f2:	68fb      	ldr	r3, [r7, #12]
1000a4f4:	889b      	ldrh	r3, [r3, #4]
1000a4f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
1000a4f8:	68fb      	ldr	r3, [r7, #12]
1000a4fa:	889b      	ldrh	r3, [r3, #4]
1000a4fc:	827b      	strh	r3, [r7, #18]
1000a4fe:	88bb      	ldrh	r3, [r7, #4]
1000a500:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
1000a502:	e003      	b.n	1000a50c <_tu_fifo_peek+0xaa>
1000a504:	8a3a      	ldrh	r2, [r7, #16]
1000a506:	8a7b      	ldrh	r3, [r7, #18]
1000a508:	1ad3      	subs	r3, r2, r3
1000a50a:	823b      	strh	r3, [r7, #16]
1000a50c:	8a7a      	ldrh	r2, [r7, #18]
1000a50e:	8a3b      	ldrh	r3, [r7, #16]
1000a510:	429a      	cmp	r2, r3
1000a512:	d9f7      	bls.n	1000a504 <_tu_fifo_peek+0xa2>
  return idx;
1000a514:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
1000a516:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
1000a518:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
1000a51a:	461a      	mov	r2, r3
1000a51c:	68b9      	ldr	r1, [r7, #8]
1000a51e:	68f8      	ldr	r0, [r7, #12]
1000a520:	f7ff fefb 	bl	1000a31a <_ff_pull>

  return true;
1000a524:	2301      	movs	r3, #1
}
1000a526:	4618      	mov	r0, r3
1000a528:	3728      	adds	r7, #40	@ 0x28
1000a52a:	46bd      	mov	sp, r7
1000a52c:	bd80      	pop	{r7, pc}

1000a52e <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
1000a52e:	b580      	push	{r7, lr}
1000a530:	b08c      	sub	sp, #48	@ 0x30
1000a532:	af02      	add	r7, sp, #8
1000a534:	60f8      	str	r0, [r7, #12]
1000a536:	60b9      	str	r1, [r7, #8]
1000a538:	4611      	mov	r1, r2
1000a53a:	461a      	mov	r2, r3
1000a53c:	460b      	mov	r3, r1
1000a53e:	80fb      	strh	r3, [r7, #6]
1000a540:	4613      	mov	r3, r2
1000a542:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
1000a544:	68fb      	ldr	r3, [r7, #12]
1000a546:	889b      	ldrh	r3, [r3, #4]
1000a548:	847b      	strh	r3, [r7, #34]	@ 0x22
1000a54a:	88bb      	ldrh	r3, [r7, #4]
1000a54c:	843b      	strh	r3, [r7, #32]
1000a54e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
1000a550:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
1000a552:	8c3a      	ldrh	r2, [r7, #32]
1000a554:	8bfb      	ldrh	r3, [r7, #30]
1000a556:	429a      	cmp	r2, r3
1000a558:	d304      	bcc.n	1000a564 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
1000a55a:	8c3a      	ldrh	r2, [r7, #32]
1000a55c:	8bfb      	ldrh	r3, [r7, #30]
1000a55e:	1ad3      	subs	r3, r2, r3
1000a560:	b29b      	uxth	r3, r3
1000a562:	e008      	b.n	1000a576 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
1000a564:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
1000a566:	005b      	lsls	r3, r3, #1
1000a568:	b29a      	uxth	r2, r3
1000a56a:	8c39      	ldrh	r1, [r7, #32]
1000a56c:	8bfb      	ldrh	r3, [r7, #30]
1000a56e:	1acb      	subs	r3, r1, r3
1000a570:	b29b      	uxth	r3, r3
1000a572:	4413      	add	r3, r2
1000a574:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
1000a576:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
1000a578:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
1000a57a:	2b00      	cmp	r3, #0
1000a57c:	d101      	bne.n	1000a582 <_tu_fifo_peek_n+0x54>
1000a57e:	2300      	movs	r3, #0
1000a580:	e041      	b.n	1000a606 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
1000a582:	68fb      	ldr	r3, [r7, #12]
1000a584:	889b      	ldrh	r3, [r3, #4]
1000a586:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
1000a588:	429a      	cmp	r2, r3
1000a58a:	d91b      	bls.n	1000a5c4 <_tu_fifo_peek_n+0x96>
1000a58c:	68fb      	ldr	r3, [r7, #12]
1000a58e:	61bb      	str	r3, [r7, #24]
1000a590:	88bb      	ldrh	r3, [r7, #4]
1000a592:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
1000a594:	69bb      	ldr	r3, [r7, #24]
1000a596:	889b      	ldrh	r3, [r3, #4]
1000a598:	8afa      	ldrh	r2, [r7, #22]
1000a59a:	429a      	cmp	r2, r3
1000a59c:	d305      	bcc.n	1000a5aa <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
1000a59e:	69bb      	ldr	r3, [r7, #24]
1000a5a0:	889b      	ldrh	r3, [r3, #4]
1000a5a2:	8afa      	ldrh	r2, [r7, #22]
1000a5a4:	1ad3      	subs	r3, r2, r3
1000a5a6:	82bb      	strh	r3, [r7, #20]
1000a5a8:	e004      	b.n	1000a5b4 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
1000a5aa:	69bb      	ldr	r3, [r7, #24]
1000a5ac:	889a      	ldrh	r2, [r3, #4]
1000a5ae:	8afb      	ldrh	r3, [r7, #22]
1000a5b0:	4413      	add	r3, r2
1000a5b2:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
1000a5b4:	69bb      	ldr	r3, [r7, #24]
1000a5b6:	8aba      	ldrh	r2, [r7, #20]
1000a5b8:	815a      	strh	r2, [r3, #10]
  return rd_idx;
1000a5ba:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
1000a5bc:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
1000a5be:	68fb      	ldr	r3, [r7, #12]
1000a5c0:	889b      	ldrh	r3, [r3, #4]
1000a5c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
1000a5c4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
1000a5c6:	88fb      	ldrh	r3, [r7, #6]
1000a5c8:	429a      	cmp	r2, r3
1000a5ca:	d201      	bcs.n	1000a5d0 <_tu_fifo_peek_n+0xa2>
1000a5cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
1000a5ce:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
1000a5d0:	68fb      	ldr	r3, [r7, #12]
1000a5d2:	889b      	ldrh	r3, [r3, #4]
1000a5d4:	827b      	strh	r3, [r7, #18]
1000a5d6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
1000a5d8:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
1000a5da:	e003      	b.n	1000a5e4 <_tu_fifo_peek_n+0xb6>
1000a5dc:	8a3a      	ldrh	r2, [r7, #16]
1000a5de:	8a7b      	ldrh	r3, [r7, #18]
1000a5e0:	1ad3      	subs	r3, r2, r3
1000a5e2:	823b      	strh	r3, [r7, #16]
1000a5e4:	8a7a      	ldrh	r2, [r7, #18]
1000a5e6:	8a3b      	ldrh	r3, [r7, #16]
1000a5e8:	429a      	cmp	r2, r3
1000a5ea:	d9f7      	bls.n	1000a5dc <_tu_fifo_peek_n+0xae>
  return idx;
1000a5ec:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
1000a5ee:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
1000a5f0:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
1000a5f2:	88fa      	ldrh	r2, [r7, #6]
1000a5f4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
1000a5f8:	9300      	str	r3, [sp, #0]
1000a5fa:	460b      	mov	r3, r1
1000a5fc:	68b9      	ldr	r1, [r7, #8]
1000a5fe:	68f8      	ldr	r0, [r7, #12]
1000a600:	f7ff feaa 	bl	1000a358 <_ff_pull_n>

  return n;
1000a604:	88fb      	ldrh	r3, [r7, #6]
}
1000a606:	4618      	mov	r0, r3
1000a608:	3728      	adds	r7, #40	@ 0x28
1000a60a:	46bd      	mov	sp, r7
1000a60c:	bd80      	pop	{r7, pc}

1000a60e <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
1000a60e:	b580      	push	{r7, lr}
1000a610:	b096      	sub	sp, #88	@ 0x58
1000a612:	af02      	add	r7, sp, #8
1000a614:	60f8      	str	r0, [r7, #12]
1000a616:	60b9      	str	r1, [r7, #8]
1000a618:	4611      	mov	r1, r2
1000a61a:	461a      	mov	r2, r3
1000a61c:	460b      	mov	r3, r1
1000a61e:	80fb      	strh	r3, [r7, #6]
1000a620:	4613      	mov	r3, r2
1000a622:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
1000a624:	88fb      	ldrh	r3, [r7, #6]
1000a626:	2b00      	cmp	r3, #0
1000a628:	d101      	bne.n	1000a62e <_tu_fifo_write_n+0x20>
1000a62a:	2300      	movs	r3, #0
1000a62c:	e0ea      	b.n	1000a804 <_tu_fifo_write_n+0x1f6>

  _ff_lock(f->mutex_wr);
1000a62e:	68fb      	ldr	r3, [r7, #12]
1000a630:	68db      	ldr	r3, [r3, #12]
1000a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000a634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1000a636:	2b00      	cmp	r3, #0
1000a638:	d008      	beq.n	1000a64c <_tu_fifo_write_n+0x3e>
1000a63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1000a63c:	63bb      	str	r3, [r7, #56]	@ 0x38
1000a63e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000a642:	637b      	str	r3, [r7, #52]	@ 0x34
  return mutex_enter_timeout_ms(mutex_hdl, msec);
1000a644:	6b79      	ldr	r1, [r7, #52]	@ 0x34
1000a646:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
1000a648:	f000 fd76 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000a64c:	bf00      	nop

  uint16_t wr_idx = f->wr_idx;
1000a64e:	68fb      	ldr	r3, [r7, #12]
1000a650:	891b      	ldrh	r3, [r3, #8]
1000a652:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  uint16_t rd_idx = f->rd_idx;
1000a656:	68fb      	ldr	r3, [r7, #12]
1000a658:	895b      	ldrh	r3, [r3, #10]
1000a65a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

  uint8_t const* buf8 = (uint8_t const*) data;
1000a65e:	68bb      	ldr	r3, [r7, #8]
1000a660:	64bb      	str	r3, [r7, #72]	@ 0x48

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
1000a662:	68fb      	ldr	r3, [r7, #12]
1000a664:	79db      	ldrb	r3, [r3, #7]
1000a666:	f3c3 13c0 	ubfx	r3, r3, #7, #1
1000a66a:	b2db      	uxtb	r3, r3
1000a66c:	f083 0301 	eor.w	r3, r3, #1
1000a670:	b2db      	uxtb	r3, r3
1000a672:	2b00      	cmp	r3, #0
1000a674:	d03a      	beq.n	1000a6ec <_tu_fifo_write_n+0xde>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
1000a676:	68fb      	ldr	r3, [r7, #12]
1000a678:	889b      	ldrh	r3, [r3, #4]
1000a67a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
1000a67c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
1000a680:	85bb      	strh	r3, [r7, #44]	@ 0x2c
1000a682:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
1000a686:	857b      	strh	r3, [r7, #42]	@ 0x2a
1000a688:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
1000a68a:	853b      	strh	r3, [r7, #40]	@ 0x28
1000a68c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
1000a68e:	84fb      	strh	r3, [r7, #38]	@ 0x26
1000a690:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
1000a692:	84bb      	strh	r3, [r7, #36]	@ 0x24
  if (wr_idx >= rd_idx)
1000a694:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
1000a696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
1000a698:	429a      	cmp	r2, r3
1000a69a:	d304      	bcc.n	1000a6a6 <_tu_fifo_write_n+0x98>
    return (uint16_t) (wr_idx - rd_idx);
1000a69c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
1000a69e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
1000a6a0:	1ad3      	subs	r3, r2, r3
1000a6a2:	b29b      	uxth	r3, r3
1000a6a4:	e008      	b.n	1000a6b8 <_tu_fifo_write_n+0xaa>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
1000a6a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
1000a6a8:	005b      	lsls	r3, r3, #1
1000a6aa:	b29a      	uxth	r2, r3
1000a6ac:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
1000a6ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
1000a6b0:	1acb      	subs	r3, r1, r3
1000a6b2:	b29b      	uxth	r3, r3
1000a6b4:	4413      	add	r3, r2
1000a6b6:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
1000a6b8:	847b      	strh	r3, [r7, #34]	@ 0x22
  return (depth > count) ? (depth - count) : 0;
1000a6ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
1000a6bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
1000a6be:	429a      	cmp	r2, r3
1000a6c0:	d904      	bls.n	1000a6cc <_tu_fifo_write_n+0xbe>
1000a6c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
1000a6c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
1000a6c6:	1ad3      	subs	r3, r2, r3
1000a6c8:	b29b      	uxth	r3, r3
1000a6ca:	e000      	b.n	1000a6ce <_tu_fifo_write_n+0xc0>
1000a6cc:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
1000a6ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
1000a6d2:	88fb      	ldrh	r3, [r7, #6]
1000a6d4:	867b      	strh	r3, [r7, #50]	@ 0x32
1000a6d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
1000a6da:	863b      	strh	r3, [r7, #48]	@ 0x30
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
1000a6dc:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
1000a6de:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
1000a6e0:	4293      	cmp	r3, r2
1000a6e2:	bf28      	it	cs
1000a6e4:	4613      	movcs	r3, r2
1000a6e6:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
1000a6e8:	80fb      	strh	r3, [r7, #6]
1000a6ea:	e053      	b.n	1000a794 <_tu_fifo_write_n+0x186>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
1000a6ec:	68fb      	ldr	r3, [r7, #12]
1000a6ee:	889b      	ldrh	r3, [r3, #4]
1000a6f0:	88fa      	ldrh	r2, [r7, #6]
1000a6f2:	429a      	cmp	r2, r3
1000a6f4:	d319      	bcc.n	1000a72a <_tu_fifo_write_n+0x11c>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
1000a6f6:	797b      	ldrb	r3, [r7, #5]
1000a6f8:	2b00      	cmp	r3, #0
1000a6fa:	d10e      	bne.n	1000a71a <_tu_fifo_write_n+0x10c>
      {
        buf8 += (n - f->depth) * f->item_size;
1000a6fc:	88fb      	ldrh	r3, [r7, #6]
1000a6fe:	68fa      	ldr	r2, [r7, #12]
1000a700:	8892      	ldrh	r2, [r2, #4]
1000a702:	1a9b      	subs	r3, r3, r2
1000a704:	68fa      	ldr	r2, [r7, #12]
1000a706:	88d2      	ldrh	r2, [r2, #6]
1000a708:	f3c2 020e 	ubfx	r2, r2, #0, #15
1000a70c:	b292      	uxth	r2, r2
1000a70e:	fb02 f303 	mul.w	r3, r2, r3
1000a712:	461a      	mov	r2, r3
1000a714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1000a716:	4413      	add	r3, r2
1000a718:	64bb      	str	r3, [r7, #72]	@ 0x48
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
1000a71a:	68fb      	ldr	r3, [r7, #12]
1000a71c:	889b      	ldrh	r3, [r3, #4]
1000a71e:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
1000a720:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
1000a724:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
1000a728:	e034      	b.n	1000a794 <_tu_fifo_write_n+0x186>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
1000a72a:	68fb      	ldr	r3, [r7, #12]
1000a72c:	889b      	ldrh	r3, [r3, #4]
1000a72e:	843b      	strh	r3, [r7, #32]
1000a730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
1000a734:	83fb      	strh	r3, [r7, #30]
1000a736:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
1000a73a:	83bb      	strh	r3, [r7, #28]
  if (wr_idx >= rd_idx)
1000a73c:	8bfa      	ldrh	r2, [r7, #30]
1000a73e:	8bbb      	ldrh	r3, [r7, #28]
1000a740:	429a      	cmp	r2, r3
1000a742:	d304      	bcc.n	1000a74e <_tu_fifo_write_n+0x140>
    return (uint16_t) (wr_idx - rd_idx);
1000a744:	8bfa      	ldrh	r2, [r7, #30]
1000a746:	8bbb      	ldrh	r3, [r7, #28]
1000a748:	1ad3      	subs	r3, r2, r3
1000a74a:	b29b      	uxth	r3, r3
1000a74c:	e008      	b.n	1000a760 <_tu_fifo_write_n+0x152>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
1000a74e:	8c3b      	ldrh	r3, [r7, #32]
1000a750:	005b      	lsls	r3, r3, #1
1000a752:	b29a      	uxth	r2, r3
1000a754:	8bf9      	ldrh	r1, [r7, #30]
1000a756:	8bbb      	ldrh	r3, [r7, #28]
1000a758:	1acb      	subs	r3, r1, r3
1000a75a:	b29b      	uxth	r3, r3
1000a75c:	4413      	add	r3, r2
1000a75e:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
1000a760:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (overflowable_count + n >= 2*f->depth)
1000a764:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
1000a768:	88fb      	ldrh	r3, [r7, #6]
1000a76a:	441a      	add	r2, r3
1000a76c:	68fb      	ldr	r3, [r7, #12]
1000a76e:	889b      	ldrh	r3, [r3, #4]
1000a770:	005b      	lsls	r3, r3, #1
1000a772:	429a      	cmp	r2, r3
1000a774:	db0e      	blt.n	1000a794 <_tu_fifo_write_n+0x186>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
1000a776:	68fb      	ldr	r3, [r7, #12]
1000a778:	8898      	ldrh	r0, [r3, #4]
1000a77a:	68fb      	ldr	r3, [r7, #12]
1000a77c:	889a      	ldrh	r2, [r3, #4]
1000a77e:	88fb      	ldrh	r3, [r7, #6]
1000a780:	1ad3      	subs	r3, r2, r3
1000a782:	b29a      	uxth	r2, r3
1000a784:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
1000a788:	4619      	mov	r1, r3
1000a78a:	f7ff fe44 	bl	1000a416 <advance_index>
1000a78e:	4603      	mov	r3, r0
1000a790:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
1000a794:	88fb      	ldrh	r3, [r7, #6]
1000a796:	2b00      	cmp	r3, #0
1000a798:	d027      	beq.n	1000a7ea <_tu_fifo_write_n+0x1dc>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
1000a79a:	68fb      	ldr	r3, [r7, #12]
1000a79c:	889b      	ldrh	r3, [r3, #4]
1000a79e:	837b      	strh	r3, [r7, #26]
1000a7a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
1000a7a4:	833b      	strh	r3, [r7, #24]
  while ( idx >= depth ) idx -= depth;
1000a7a6:	e003      	b.n	1000a7b0 <_tu_fifo_write_n+0x1a2>
1000a7a8:	8b3a      	ldrh	r2, [r7, #24]
1000a7aa:	8b7b      	ldrh	r3, [r7, #26]
1000a7ac:	1ad3      	subs	r3, r2, r3
1000a7ae:	833b      	strh	r3, [r7, #24]
1000a7b0:	8b7a      	ldrh	r2, [r7, #26]
1000a7b2:	8b3b      	ldrh	r3, [r7, #24]
1000a7b4:	429a      	cmp	r2, r3
1000a7b6:	d9f7      	bls.n	1000a7a8 <_tu_fifo_write_n+0x19a>
  return idx;
1000a7b8:	8b3b      	ldrh	r3, [r7, #24]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
1000a7ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
1000a7be:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
1000a7c2:	88fa      	ldrh	r2, [r7, #6]
1000a7c4:	797b      	ldrb	r3, [r7, #5]
1000a7c6:	9300      	str	r3, [sp, #0]
1000a7c8:	460b      	mov	r3, r1
1000a7ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
1000a7cc:	68f8      	ldr	r0, [r7, #12]
1000a7ce:	f7ff fd45 	bl	1000a25c <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
1000a7d2:	68fb      	ldr	r3, [r7, #12]
1000a7d4:	889b      	ldrh	r3, [r3, #4]
1000a7d6:	88fa      	ldrh	r2, [r7, #6]
1000a7d8:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
1000a7dc:	4618      	mov	r0, r3
1000a7de:	f7ff fe1a 	bl	1000a416 <advance_index>
1000a7e2:	4603      	mov	r3, r0
1000a7e4:	461a      	mov	r2, r3
1000a7e6:	68fb      	ldr	r3, [r7, #12]
1000a7e8:	811a      	strh	r2, [r3, #8]

    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);
1000a7ea:	68fb      	ldr	r3, [r7, #12]
1000a7ec:	68db      	ldr	r3, [r3, #12]
1000a7ee:	617b      	str	r3, [r7, #20]
  if (mutex) osal_mutex_unlock(mutex);
1000a7f0:	697b      	ldr	r3, [r7, #20]
1000a7f2:	2b00      	cmp	r3, #0
1000a7f4:	d004      	beq.n	1000a800 <_tu_fifo_write_n+0x1f2>
1000a7f6:	697b      	ldr	r3, [r7, #20]
1000a7f8:	613b      	str	r3, [r7, #16]
  mutex_exit(mutex_hdl);
1000a7fa:	6938      	ldr	r0, [r7, #16]
1000a7fc:	f000 fcac 	bl	1000b158 <__mutex_exit_veneer>
}
1000a800:	bf00      	nop

  return n;
1000a802:	88fb      	ldrh	r3, [r7, #6]
}
1000a804:	4618      	mov	r0, r3
1000a806:	3750      	adds	r7, #80	@ 0x50
1000a808:	46bd      	mov	sp, r7
1000a80a:	bd80      	pop	{r7, pc}

1000a80c <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
1000a80c:	b580      	push	{r7, lr}
1000a80e:	b08c      	sub	sp, #48	@ 0x30
1000a810:	af02      	add	r7, sp, #8
1000a812:	60f8      	str	r0, [r7, #12]
1000a814:	60b9      	str	r1, [r7, #8]
1000a816:	4611      	mov	r1, r2
1000a818:	461a      	mov	r2, r3
1000a81a:	460b      	mov	r3, r1
1000a81c:	80fb      	strh	r3, [r7, #6]
1000a81e:	4613      	mov	r3, r2
1000a820:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);
1000a822:	68fb      	ldr	r3, [r7, #12]
1000a824:	691b      	ldr	r3, [r3, #16]
1000a826:	61fb      	str	r3, [r7, #28]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000a828:	69fb      	ldr	r3, [r7, #28]
1000a82a:	2b00      	cmp	r3, #0
1000a82c:	d008      	beq.n	1000a840 <_tu_fifo_read_n+0x34>
1000a82e:	69fb      	ldr	r3, [r7, #28]
1000a830:	61bb      	str	r3, [r7, #24]
1000a832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000a836:	617b      	str	r3, [r7, #20]
  return mutex_enter_timeout_ms(mutex_hdl, msec);
1000a838:	6979      	ldr	r1, [r7, #20]
1000a83a:	69b8      	ldr	r0, [r7, #24]
1000a83c:	f000 fc7c 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000a840:	bf00      	nop

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
1000a842:	68fb      	ldr	r3, [r7, #12]
1000a844:	891b      	ldrh	r3, [r3, #8]
1000a846:	b298      	uxth	r0, r3
1000a848:	68fb      	ldr	r3, [r7, #12]
1000a84a:	895b      	ldrh	r3, [r3, #10]
1000a84c:	b29b      	uxth	r3, r3
1000a84e:	88f9      	ldrh	r1, [r7, #6]
1000a850:	797a      	ldrb	r2, [r7, #5]
1000a852:	9201      	str	r2, [sp, #4]
1000a854:	9300      	str	r3, [sp, #0]
1000a856:	4603      	mov	r3, r0
1000a858:	460a      	mov	r2, r1
1000a85a:	68b9      	ldr	r1, [r7, #8]
1000a85c:	68f8      	ldr	r0, [r7, #12]
1000a85e:	f7ff fe66 	bl	1000a52e <_tu_fifo_peek_n>
1000a862:	4603      	mov	r3, r0
1000a864:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
1000a866:	68fb      	ldr	r3, [r7, #12]
1000a868:	8898      	ldrh	r0, [r3, #4]
1000a86a:	68fb      	ldr	r3, [r7, #12]
1000a86c:	895b      	ldrh	r3, [r3, #10]
1000a86e:	b29b      	uxth	r3, r3
1000a870:	88fa      	ldrh	r2, [r7, #6]
1000a872:	4619      	mov	r1, r3
1000a874:	f7ff fdcf 	bl	1000a416 <advance_index>
1000a878:	4603      	mov	r3, r0
1000a87a:	461a      	mov	r2, r3
1000a87c:	68fb      	ldr	r3, [r7, #12]
1000a87e:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
1000a880:	68fb      	ldr	r3, [r7, #12]
1000a882:	691b      	ldr	r3, [r3, #16]
1000a884:	627b      	str	r3, [r7, #36]	@ 0x24
  if (mutex) osal_mutex_unlock(mutex);
1000a886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000a888:	2b00      	cmp	r3, #0
1000a88a:	d004      	beq.n	1000a896 <_tu_fifo_read_n+0x8a>
1000a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000a88e:	623b      	str	r3, [r7, #32]
  mutex_exit(mutex_hdl);
1000a890:	6a38      	ldr	r0, [r7, #32]
1000a892:	f000 fc61 	bl	1000b158 <__mutex_exit_veneer>
}
1000a896:	bf00      	nop
  return n;
1000a898:	88fb      	ldrh	r3, [r7, #6]
}
1000a89a:	4618      	mov	r0, r3
1000a89c:	3728      	adds	r7, #40	@ 0x28
1000a89e:	46bd      	mov	sp, r7
1000a8a0:	bd80      	pop	{r7, pc}

1000a8a2 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
1000a8a2:	b480      	push	{r7}
1000a8a4:	b087      	sub	sp, #28
1000a8a6:	af00      	add	r7, sp, #0
1000a8a8:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
1000a8aa:	687b      	ldr	r3, [r7, #4]
1000a8ac:	8899      	ldrh	r1, [r3, #4]
1000a8ae:	687b      	ldr	r3, [r7, #4]
1000a8b0:	891b      	ldrh	r3, [r3, #8]
1000a8b2:	b29a      	uxth	r2, r3
1000a8b4:	687b      	ldr	r3, [r7, #4]
1000a8b6:	895b      	ldrh	r3, [r3, #10]
1000a8b8:	b29b      	uxth	r3, r3
1000a8ba:	8279      	strh	r1, [r7, #18]
1000a8bc:	823a      	strh	r2, [r7, #16]
1000a8be:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
1000a8c0:	8a3a      	ldrh	r2, [r7, #16]
1000a8c2:	89fb      	ldrh	r3, [r7, #14]
1000a8c4:	429a      	cmp	r2, r3
1000a8c6:	d304      	bcc.n	1000a8d2 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
1000a8c8:	8a3a      	ldrh	r2, [r7, #16]
1000a8ca:	89fb      	ldrh	r3, [r7, #14]
1000a8cc:	1ad3      	subs	r3, r2, r3
1000a8ce:	b29b      	uxth	r3, r3
1000a8d0:	e008      	b.n	1000a8e4 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
1000a8d2:	8a7b      	ldrh	r3, [r7, #18]
1000a8d4:	005b      	lsls	r3, r3, #1
1000a8d6:	b29a      	uxth	r2, r3
1000a8d8:	8a39      	ldrh	r1, [r7, #16]
1000a8da:	89fb      	ldrh	r3, [r7, #14]
1000a8dc:	1acb      	subs	r3, r1, r3
1000a8de:	b29b      	uxth	r3, r3
1000a8e0:	4413      	add	r3, r2
1000a8e2:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
1000a8e4:	687a      	ldr	r2, [r7, #4]
1000a8e6:	8892      	ldrh	r2, [r2, #4]
1000a8e8:	82fb      	strh	r3, [r7, #22]
1000a8ea:	4613      	mov	r3, r2
1000a8ec:	82bb      	strh	r3, [r7, #20]
1000a8ee:	8afa      	ldrh	r2, [r7, #22]
1000a8f0:	8abb      	ldrh	r3, [r7, #20]
1000a8f2:	4293      	cmp	r3, r2
1000a8f4:	bf28      	it	cs
1000a8f6:	4613      	movcs	r3, r2
1000a8f8:	b29b      	uxth	r3, r3
}
1000a8fa:	4618      	mov	r0, r3
1000a8fc:	371c      	adds	r7, #28
1000a8fe:	46bd      	mov	sp, r7
1000a900:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a904:	4770      	bx	lr

1000a906 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
1000a906:	b480      	push	{r7}
1000a908:	b083      	sub	sp, #12
1000a90a:	af00      	add	r7, sp, #0
1000a90c:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
1000a90e:	687b      	ldr	r3, [r7, #4]
1000a910:	891b      	ldrh	r3, [r3, #8]
1000a912:	b29a      	uxth	r2, r3
1000a914:	687b      	ldr	r3, [r7, #4]
1000a916:	895b      	ldrh	r3, [r3, #10]
1000a918:	b29b      	uxth	r3, r3
1000a91a:	429a      	cmp	r2, r3
1000a91c:	bf0c      	ite	eq
1000a91e:	2301      	moveq	r3, #1
1000a920:	2300      	movne	r3, #0
1000a922:	b2db      	uxtb	r3, r3
}
1000a924:	4618      	mov	r0, r3
1000a926:	370c      	adds	r7, #12
1000a928:	46bd      	mov	sp, r7
1000a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a92e:	4770      	bx	lr

1000a930 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
1000a930:	b480      	push	{r7}
1000a932:	b085      	sub	sp, #20
1000a934:	af00      	add	r7, sp, #0
1000a936:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
1000a938:	687b      	ldr	r3, [r7, #4]
1000a93a:	8899      	ldrh	r1, [r3, #4]
1000a93c:	687b      	ldr	r3, [r7, #4]
1000a93e:	891b      	ldrh	r3, [r3, #8]
1000a940:	b29a      	uxth	r2, r3
1000a942:	687b      	ldr	r3, [r7, #4]
1000a944:	895b      	ldrh	r3, [r3, #10]
1000a946:	b29b      	uxth	r3, r3
1000a948:	81f9      	strh	r1, [r7, #14]
1000a94a:	81ba      	strh	r2, [r7, #12]
1000a94c:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
1000a94e:	89ba      	ldrh	r2, [r7, #12]
1000a950:	897b      	ldrh	r3, [r7, #10]
1000a952:	429a      	cmp	r2, r3
1000a954:	d304      	bcc.n	1000a960 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
1000a956:	89ba      	ldrh	r2, [r7, #12]
1000a958:	897b      	ldrh	r3, [r7, #10]
1000a95a:	1ad3      	subs	r3, r2, r3
1000a95c:	b29b      	uxth	r3, r3
1000a95e:	e008      	b.n	1000a972 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
1000a960:	89fb      	ldrh	r3, [r7, #14]
1000a962:	005b      	lsls	r3, r3, #1
1000a964:	b29a      	uxth	r2, r3
1000a966:	89b9      	ldrh	r1, [r7, #12]
1000a968:	897b      	ldrh	r3, [r7, #10]
1000a96a:	1acb      	subs	r3, r1, r3
1000a96c:	b29b      	uxth	r3, r3
1000a96e:	4413      	add	r3, r2
1000a970:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
1000a972:	687a      	ldr	r2, [r7, #4]
1000a974:	8892      	ldrh	r2, [r2, #4]
1000a976:	4293      	cmp	r3, r2
1000a978:	bf2c      	ite	cs
1000a97a:	2301      	movcs	r3, #1
1000a97c:	2300      	movcc	r3, #0
1000a97e:	b2db      	uxtb	r3, r3
}
1000a980:	4618      	mov	r0, r3
1000a982:	3714      	adds	r7, #20
1000a984:	46bd      	mov	sp, r7
1000a986:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a98a:	4770      	bx	lr

1000a98c <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
1000a98c:	b480      	push	{r7}
1000a98e:	b087      	sub	sp, #28
1000a990:	af00      	add	r7, sp, #0
1000a992:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
1000a994:	687b      	ldr	r3, [r7, #4]
1000a996:	8899      	ldrh	r1, [r3, #4]
1000a998:	687b      	ldr	r3, [r7, #4]
1000a99a:	891b      	ldrh	r3, [r3, #8]
1000a99c:	b29a      	uxth	r2, r3
1000a99e:	687b      	ldr	r3, [r7, #4]
1000a9a0:	895b      	ldrh	r3, [r3, #10]
1000a9a2:	b29b      	uxth	r3, r3
1000a9a4:	82f9      	strh	r1, [r7, #22]
1000a9a6:	82ba      	strh	r2, [r7, #20]
1000a9a8:	827b      	strh	r3, [r7, #18]
1000a9aa:	8afb      	ldrh	r3, [r7, #22]
1000a9ac:	823b      	strh	r3, [r7, #16]
1000a9ae:	8abb      	ldrh	r3, [r7, #20]
1000a9b0:	81fb      	strh	r3, [r7, #14]
1000a9b2:	8a7b      	ldrh	r3, [r7, #18]
1000a9b4:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
1000a9b6:	89fa      	ldrh	r2, [r7, #14]
1000a9b8:	89bb      	ldrh	r3, [r7, #12]
1000a9ba:	429a      	cmp	r2, r3
1000a9bc:	d304      	bcc.n	1000a9c8 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
1000a9be:	89fa      	ldrh	r2, [r7, #14]
1000a9c0:	89bb      	ldrh	r3, [r7, #12]
1000a9c2:	1ad3      	subs	r3, r2, r3
1000a9c4:	b29b      	uxth	r3, r3
1000a9c6:	e008      	b.n	1000a9da <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
1000a9c8:	8a3b      	ldrh	r3, [r7, #16]
1000a9ca:	005b      	lsls	r3, r3, #1
1000a9cc:	b29a      	uxth	r2, r3
1000a9ce:	89f9      	ldrh	r1, [r7, #14]
1000a9d0:	89bb      	ldrh	r3, [r7, #12]
1000a9d2:	1acb      	subs	r3, r1, r3
1000a9d4:	b29b      	uxth	r3, r3
1000a9d6:	4413      	add	r3, r2
1000a9d8:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
1000a9da:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
1000a9dc:	8afa      	ldrh	r2, [r7, #22]
1000a9de:	897b      	ldrh	r3, [r7, #10]
1000a9e0:	429a      	cmp	r2, r3
1000a9e2:	d904      	bls.n	1000a9ee <tu_fifo_remaining+0x62>
1000a9e4:	8afa      	ldrh	r2, [r7, #22]
1000a9e6:	897b      	ldrh	r3, [r7, #10]
1000a9e8:	1ad3      	subs	r3, r2, r3
1000a9ea:	b29b      	uxth	r3, r3
1000a9ec:	e000      	b.n	1000a9f0 <tu_fifo_remaining+0x64>
1000a9ee:	2300      	movs	r3, #0
}
1000a9f0:	4618      	mov	r0, r3
1000a9f2:	371c      	adds	r7, #28
1000a9f4:	46bd      	mov	sp, r7
1000a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
1000a9fa:	4770      	bx	lr

1000a9fc <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
1000a9fc:	b580      	push	{r7, lr}
1000a9fe:	b088      	sub	sp, #32
1000aa00:	af00      	add	r7, sp, #0
1000aa02:	6078      	str	r0, [r7, #4]
1000aa04:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);
1000aa06:	687b      	ldr	r3, [r7, #4]
1000aa08:	691b      	ldr	r3, [r3, #16]
1000aa0a:	613b      	str	r3, [r7, #16]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000aa0c:	693b      	ldr	r3, [r7, #16]
1000aa0e:	2b00      	cmp	r3, #0
1000aa10:	d008      	beq.n	1000aa24 <tu_fifo_read+0x28>
1000aa12:	693b      	ldr	r3, [r7, #16]
1000aa14:	60fb      	str	r3, [r7, #12]
1000aa16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000aa1a:	60bb      	str	r3, [r7, #8]
  return mutex_enter_timeout_ms(mutex_hdl, msec);
1000aa1c:	68b9      	ldr	r1, [r7, #8]
1000aa1e:	68f8      	ldr	r0, [r7, #12]
1000aa20:	f000 fb8a 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000aa24:	bf00      	nop

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
1000aa26:	687b      	ldr	r3, [r7, #4]
1000aa28:	891b      	ldrh	r3, [r3, #8]
1000aa2a:	b29a      	uxth	r2, r3
1000aa2c:	687b      	ldr	r3, [r7, #4]
1000aa2e:	895b      	ldrh	r3, [r3, #10]
1000aa30:	b29b      	uxth	r3, r3
1000aa32:	6839      	ldr	r1, [r7, #0]
1000aa34:	6878      	ldr	r0, [r7, #4]
1000aa36:	f7ff fd14 	bl	1000a462 <_tu_fifo_peek>
1000aa3a:	4603      	mov	r3, r0
1000aa3c:	77fb      	strb	r3, [r7, #31]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
1000aa3e:	687b      	ldr	r3, [r7, #4]
1000aa40:	8898      	ldrh	r0, [r3, #4]
1000aa42:	687b      	ldr	r3, [r7, #4]
1000aa44:	895b      	ldrh	r3, [r3, #10]
1000aa46:	b29b      	uxth	r3, r3
1000aa48:	7ffa      	ldrb	r2, [r7, #31]
1000aa4a:	b292      	uxth	r2, r2
1000aa4c:	4619      	mov	r1, r3
1000aa4e:	f7ff fce2 	bl	1000a416 <advance_index>
1000aa52:	4603      	mov	r3, r0
1000aa54:	461a      	mov	r2, r3
1000aa56:	687b      	ldr	r3, [r7, #4]
1000aa58:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
1000aa5a:	687b      	ldr	r3, [r7, #4]
1000aa5c:	691b      	ldr	r3, [r3, #16]
1000aa5e:	61bb      	str	r3, [r7, #24]
  if (mutex) osal_mutex_unlock(mutex);
1000aa60:	69bb      	ldr	r3, [r7, #24]
1000aa62:	2b00      	cmp	r3, #0
1000aa64:	d004      	beq.n	1000aa70 <tu_fifo_read+0x74>
1000aa66:	69bb      	ldr	r3, [r7, #24]
1000aa68:	617b      	str	r3, [r7, #20]
  mutex_exit(mutex_hdl);
1000aa6a:	6978      	ldr	r0, [r7, #20]
1000aa6c:	f000 fb74 	bl	1000b158 <__mutex_exit_veneer>
}
1000aa70:	bf00      	nop
  return ret;
1000aa72:	7ffb      	ldrb	r3, [r7, #31]
}
1000aa74:	4618      	mov	r0, r3
1000aa76:	3720      	adds	r7, #32
1000aa78:	46bd      	mov	sp, r7
1000aa7a:	bd80      	pop	{r7, pc}

1000aa7c <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
1000aa7c:	b580      	push	{r7, lr}
1000aa7e:	b084      	sub	sp, #16
1000aa80:	af00      	add	r7, sp, #0
1000aa82:	60f8      	str	r0, [r7, #12]
1000aa84:	60b9      	str	r1, [r7, #8]
1000aa86:	4613      	mov	r3, r2
1000aa88:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
1000aa8a:	88fa      	ldrh	r2, [r7, #6]
1000aa8c:	2300      	movs	r3, #0
1000aa8e:	68b9      	ldr	r1, [r7, #8]
1000aa90:	68f8      	ldr	r0, [r7, #12]
1000aa92:	f7ff febb 	bl	1000a80c <_tu_fifo_read_n>
1000aa96:	4603      	mov	r3, r0
}
1000aa98:	4618      	mov	r0, r3
1000aa9a:	3710      	adds	r7, #16
1000aa9c:	46bd      	mov	sp, r7
1000aa9e:	bd80      	pop	{r7, pc}

1000aaa0 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
1000aaa0:	b580      	push	{r7, lr}
1000aaa2:	b08a      	sub	sp, #40	@ 0x28
1000aaa4:	af00      	add	r7, sp, #0
1000aaa6:	6078      	str	r0, [r7, #4]
1000aaa8:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);
1000aaaa:	687b      	ldr	r3, [r7, #4]
1000aaac:	68db      	ldr	r3, [r3, #12]
1000aaae:	61fb      	str	r3, [r7, #28]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000aab0:	69fb      	ldr	r3, [r7, #28]
1000aab2:	2b00      	cmp	r3, #0
1000aab4:	d008      	beq.n	1000aac8 <tu_fifo_write+0x28>
1000aab6:	69fb      	ldr	r3, [r7, #28]
1000aab8:	61bb      	str	r3, [r7, #24]
1000aaba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000aabe:	617b      	str	r3, [r7, #20]
  return mutex_enter_timeout_ms(mutex_hdl, msec);
1000aac0:	6979      	ldr	r1, [r7, #20]
1000aac2:	69b8      	ldr	r0, [r7, #24]
1000aac4:	f000 fb38 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000aac8:	bf00      	nop

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
1000aaca:	687b      	ldr	r3, [r7, #4]
1000aacc:	891b      	ldrh	r3, [r3, #8]
1000aace:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if ( tu_fifo_full(f) && !f->overwritable )
1000aad0:	6878      	ldr	r0, [r7, #4]
1000aad2:	f7ff ff2d 	bl	1000a930 <tu_fifo_full>
1000aad6:	4603      	mov	r3, r0
1000aad8:	2b00      	cmp	r3, #0
1000aada:	d00d      	beq.n	1000aaf8 <tu_fifo_write+0x58>
1000aadc:	687b      	ldr	r3, [r7, #4]
1000aade:	79db      	ldrb	r3, [r3, #7]
1000aae0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
1000aae4:	b2db      	uxtb	r3, r3
1000aae6:	f083 0301 	eor.w	r3, r3, #1
1000aaea:	b2db      	uxtb	r3, r3
1000aaec:	2b00      	cmp	r3, #0
1000aaee:	d003      	beq.n	1000aaf8 <tu_fifo_write+0x58>
  {
    ret = false;
1000aaf0:	2300      	movs	r3, #0
1000aaf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
1000aaf6:	e023      	b.n	1000ab40 <tu_fifo_write+0xa0>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
1000aaf8:	687b      	ldr	r3, [r7, #4]
1000aafa:	889b      	ldrh	r3, [r3, #4]
1000aafc:	827b      	strh	r3, [r7, #18]
1000aafe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
1000ab00:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
1000ab02:	e003      	b.n	1000ab0c <tu_fifo_write+0x6c>
1000ab04:	8a3a      	ldrh	r2, [r7, #16]
1000ab06:	8a7b      	ldrh	r3, [r7, #18]
1000ab08:	1ad3      	subs	r3, r2, r3
1000ab0a:	823b      	strh	r3, [r7, #16]
1000ab0c:	8a7a      	ldrh	r2, [r7, #18]
1000ab0e:	8a3b      	ldrh	r3, [r7, #16]
1000ab10:	429a      	cmp	r2, r3
1000ab12:	d9f7      	bls.n	1000ab04 <tu_fifo_write+0x64>
  return idx;
1000ab14:	8a3b      	ldrh	r3, [r7, #16]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
1000ab16:	847b      	strh	r3, [r7, #34]	@ 0x22

    // Write data
    _ff_push(f, data, wr_ptr);
1000ab18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
1000ab1a:	461a      	mov	r2, r3
1000ab1c:	6839      	ldr	r1, [r7, #0]
1000ab1e:	6878      	ldr	r0, [r7, #4]
1000ab20:	f7ff fb7d 	bl	1000a21e <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
1000ab24:	687b      	ldr	r3, [r7, #4]
1000ab26:	889b      	ldrh	r3, [r3, #4]
1000ab28:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
1000ab2a:	2201      	movs	r2, #1
1000ab2c:	4618      	mov	r0, r3
1000ab2e:	f7ff fc72 	bl	1000a416 <advance_index>
1000ab32:	4603      	mov	r3, r0
1000ab34:	461a      	mov	r2, r3
1000ab36:	687b      	ldr	r3, [r7, #4]
1000ab38:	811a      	strh	r2, [r3, #8]

    ret = true;
1000ab3a:	2301      	movs	r3, #1
1000ab3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  _ff_unlock(f->mutex_wr);
1000ab40:	687b      	ldr	r3, [r7, #4]
1000ab42:	68db      	ldr	r3, [r3, #12]
1000ab44:	60fb      	str	r3, [r7, #12]
  if (mutex) osal_mutex_unlock(mutex);
1000ab46:	68fb      	ldr	r3, [r7, #12]
1000ab48:	2b00      	cmp	r3, #0
1000ab4a:	d004      	beq.n	1000ab56 <tu_fifo_write+0xb6>
1000ab4c:	68fb      	ldr	r3, [r7, #12]
1000ab4e:	60bb      	str	r3, [r7, #8]
  mutex_exit(mutex_hdl);
1000ab50:	68b8      	ldr	r0, [r7, #8]
1000ab52:	f000 fb01 	bl	1000b158 <__mutex_exit_veneer>
}
1000ab56:	bf00      	nop

  return ret;
1000ab58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
1000ab5c:	4618      	mov	r0, r3
1000ab5e:	3728      	adds	r7, #40	@ 0x28
1000ab60:	46bd      	mov	sp, r7
1000ab62:	bd80      	pop	{r7, pc}

1000ab64 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
1000ab64:	b580      	push	{r7, lr}
1000ab66:	b084      	sub	sp, #16
1000ab68:	af00      	add	r7, sp, #0
1000ab6a:	60f8      	str	r0, [r7, #12]
1000ab6c:	60b9      	str	r1, [r7, #8]
1000ab6e:	4613      	mov	r3, r2
1000ab70:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
1000ab72:	88fa      	ldrh	r2, [r7, #6]
1000ab74:	2300      	movs	r3, #0
1000ab76:	68b9      	ldr	r1, [r7, #8]
1000ab78:	68f8      	ldr	r0, [r7, #12]
1000ab7a:	f7ff fd48 	bl	1000a60e <_tu_fifo_write_n>
1000ab7e:	4603      	mov	r3, r0
}
1000ab80:	4618      	mov	r0, r3
1000ab82:	3710      	adds	r7, #16
1000ab84:	46bd      	mov	sp, r7
1000ab86:	bd80      	pop	{r7, pc}

1000ab88 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
1000ab88:	b580      	push	{r7, lr}
1000ab8a:	b08c      	sub	sp, #48	@ 0x30
1000ab8c:	af00      	add	r7, sp, #0
1000ab8e:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
1000ab90:	687b      	ldr	r3, [r7, #4]
1000ab92:	68db      	ldr	r3, [r3, #12]
1000ab94:	613b      	str	r3, [r7, #16]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000ab96:	693b      	ldr	r3, [r7, #16]
1000ab98:	2b00      	cmp	r3, #0
1000ab9a:	d008      	beq.n	1000abae <tu_fifo_clear+0x26>
1000ab9c:	693b      	ldr	r3, [r7, #16]
1000ab9e:	60fb      	str	r3, [r7, #12]
1000aba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000aba4:	60bb      	str	r3, [r7, #8]
  return mutex_enter_timeout_ms(mutex_hdl, msec);
1000aba6:	68b9      	ldr	r1, [r7, #8]
1000aba8:	68f8      	ldr	r0, [r7, #12]
1000abaa:	f000 fac5 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000abae:	bf00      	nop
  _ff_lock(f->mutex_rd);
1000abb0:	687b      	ldr	r3, [r7, #4]
1000abb2:	691b      	ldr	r3, [r3, #16]
1000abb4:	61fb      	str	r3, [r7, #28]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000abb6:	69fb      	ldr	r3, [r7, #28]
1000abb8:	2b00      	cmp	r3, #0
1000abba:	d008      	beq.n	1000abce <tu_fifo_clear+0x46>
1000abbc:	69fb      	ldr	r3, [r7, #28]
1000abbe:	61bb      	str	r3, [r7, #24]
1000abc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000abc4:	617b      	str	r3, [r7, #20]
1000abc6:	6979      	ldr	r1, [r7, #20]
1000abc8:	69b8      	ldr	r0, [r7, #24]
1000abca:	f000 fab5 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000abce:	bf00      	nop

  f->rd_idx = 0;
1000abd0:	687b      	ldr	r3, [r7, #4]
1000abd2:	2200      	movs	r2, #0
1000abd4:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
1000abd6:	687b      	ldr	r3, [r7, #4]
1000abd8:	2200      	movs	r2, #0
1000abda:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
1000abdc:	687b      	ldr	r3, [r7, #4]
1000abde:	68db      	ldr	r3, [r3, #12]
1000abe0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (mutex) osal_mutex_unlock(mutex);
1000abe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000abe4:	2b00      	cmp	r3, #0
1000abe6:	d004      	beq.n	1000abf2 <tu_fifo_clear+0x6a>
1000abe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000abea:	623b      	str	r3, [r7, #32]
  mutex_exit(mutex_hdl);
1000abec:	6a38      	ldr	r0, [r7, #32]
1000abee:	f000 fab3 	bl	1000b158 <__mutex_exit_veneer>
}
1000abf2:	bf00      	nop
  _ff_unlock(f->mutex_rd);
1000abf4:	687b      	ldr	r3, [r7, #4]
1000abf6:	691b      	ldr	r3, [r3, #16]
1000abf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (mutex) osal_mutex_unlock(mutex);
1000abfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000abfc:	2b00      	cmp	r3, #0
1000abfe:	d004      	beq.n	1000ac0a <tu_fifo_clear+0x82>
1000ac00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000ac02:	62bb      	str	r3, [r7, #40]	@ 0x28
1000ac04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000ac06:	f000 faa7 	bl	1000b158 <__mutex_exit_veneer>
}
1000ac0a:	bf00      	nop
  return true;
1000ac0c:	2301      	movs	r3, #1
}
1000ac0e:	4618      	mov	r0, r3
1000ac10:	3730      	adds	r7, #48	@ 0x30
1000ac12:	46bd      	mov	sp, r7
1000ac14:	bd80      	pop	{r7, pc}

1000ac16 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
1000ac16:	b580      	push	{r7, lr}
1000ac18:	b08c      	sub	sp, #48	@ 0x30
1000ac1a:	af00      	add	r7, sp, #0
1000ac1c:	6078      	str	r0, [r7, #4]
1000ac1e:	460b      	mov	r3, r1
1000ac20:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
1000ac22:	687b      	ldr	r3, [r7, #4]
1000ac24:	68db      	ldr	r3, [r3, #12]
1000ac26:	613b      	str	r3, [r7, #16]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000ac28:	693b      	ldr	r3, [r7, #16]
1000ac2a:	2b00      	cmp	r3, #0
1000ac2c:	d008      	beq.n	1000ac40 <tu_fifo_set_overwritable+0x2a>
1000ac2e:	693b      	ldr	r3, [r7, #16]
1000ac30:	60fb      	str	r3, [r7, #12]
1000ac32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000ac36:	60bb      	str	r3, [r7, #8]
  return mutex_enter_timeout_ms(mutex_hdl, msec);
1000ac38:	68b9      	ldr	r1, [r7, #8]
1000ac3a:	68f8      	ldr	r0, [r7, #12]
1000ac3c:	f000 fa7c 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000ac40:	bf00      	nop
  _ff_lock(f->mutex_rd);
1000ac42:	687b      	ldr	r3, [r7, #4]
1000ac44:	691b      	ldr	r3, [r3, #16]
1000ac46:	61fb      	str	r3, [r7, #28]
  if (mutex) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
1000ac48:	69fb      	ldr	r3, [r7, #28]
1000ac4a:	2b00      	cmp	r3, #0
1000ac4c:	d008      	beq.n	1000ac60 <tu_fifo_set_overwritable+0x4a>
1000ac4e:	69fb      	ldr	r3, [r7, #28]
1000ac50:	61bb      	str	r3, [r7, #24]
1000ac52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
1000ac56:	617b      	str	r3, [r7, #20]
1000ac58:	6979      	ldr	r1, [r7, #20]
1000ac5a:	69b8      	ldr	r0, [r7, #24]
1000ac5c:	f000 fa6c 	bl	1000b138 <__mutex_enter_timeout_ms_veneer>
}
1000ac60:	bf00      	nop

  f->overwritable = overwritable;
1000ac62:	687a      	ldr	r2, [r7, #4]
1000ac64:	79d3      	ldrb	r3, [r2, #7]
1000ac66:	78f9      	ldrb	r1, [r7, #3]
1000ac68:	f361 13c7 	bfi	r3, r1, #7, #1
1000ac6c:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
1000ac6e:	687b      	ldr	r3, [r7, #4]
1000ac70:	68db      	ldr	r3, [r3, #12]
1000ac72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (mutex) osal_mutex_unlock(mutex);
1000ac74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000ac76:	2b00      	cmp	r3, #0
1000ac78:	d004      	beq.n	1000ac84 <tu_fifo_set_overwritable+0x6e>
1000ac7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000ac7c:	623b      	str	r3, [r7, #32]
  mutex_exit(mutex_hdl);
1000ac7e:	6a38      	ldr	r0, [r7, #32]
1000ac80:	f000 fa6a 	bl	1000b158 <__mutex_exit_veneer>
}
1000ac84:	bf00      	nop
  _ff_unlock(f->mutex_rd);
1000ac86:	687b      	ldr	r3, [r7, #4]
1000ac88:	691b      	ldr	r3, [r3, #16]
1000ac8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (mutex) osal_mutex_unlock(mutex);
1000ac8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000ac8e:	2b00      	cmp	r3, #0
1000ac90:	d004      	beq.n	1000ac9c <tu_fifo_set_overwritable+0x86>
1000ac92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000ac94:	62bb      	str	r3, [r7, #40]	@ 0x28
1000ac96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
1000ac98:	f000 fa5e 	bl	1000b158 <__mutex_exit_veneer>
}
1000ac9c:	bf00      	nop

  return true;
1000ac9e:	2301      	movs	r3, #1
}
1000aca0:	4618      	mov	r0, r3
1000aca2:	3730      	adds	r7, #48	@ 0x30
1000aca4:	46bd      	mov	sp, r7
1000aca6:	bd80      	pop	{r7, pc}

1000aca8 <reset_block_num>:
static inline void reset_block_num(uint32_t block_num) {
1000aca8:	b480      	push	{r7}
1000acaa:	b087      	sub	sp, #28
1000acac:	af00      	add	r7, sp, #0
1000acae:	6078      	str	r0, [r7, #4]
    reset_block_reg_mask(&resets_hw->reset, 1u << block_num);
1000acb0:	2201      	movs	r2, #1
1000acb2:	687b      	ldr	r3, [r7, #4]
1000acb4:	fa02 f303 	lsl.w	r3, r2, r3
1000acb8:	4a0a      	ldr	r2, [pc, #40]	@ (1000ace4 <reset_block_num+0x3c>)
1000acba:	617a      	str	r2, [r7, #20]
1000acbc:	613b      	str	r3, [r7, #16]
1000acbe:	697b      	ldr	r3, [r7, #20]
1000acc0:	60fb      	str	r3, [r7, #12]
1000acc2:	693b      	ldr	r3, [r7, #16]
1000acc4:	60bb      	str	r3, [r7, #8]
    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
1000acc6:	68fb      	ldr	r3, [r7, #12]
1000acc8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
1000accc:	461a      	mov	r2, r3
1000acce:	68bb      	ldr	r3, [r7, #8]
1000acd0:	6013      	str	r3, [r2, #0]
}
1000acd2:	bf00      	nop
}
1000acd4:	bf00      	nop
}
1000acd6:	bf00      	nop
1000acd8:	371c      	adds	r7, #28
1000acda:	46bd      	mov	sp, r7
1000acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ace0:	4770      	bx	lr
1000ace2:	bf00      	nop
1000ace4:	40020000 	.word	0x40020000

1000ace8 <unreset_block_num_wait_blocking>:
static inline void unreset_block_num_wait_blocking(uint block_num) {
1000ace8:	b480      	push	{r7}
1000acea:	b089      	sub	sp, #36	@ 0x24
1000acec:	af00      	add	r7, sp, #0
1000acee:	6078      	str	r0, [r7, #4]
    unreset_block_reg_mask_wait_blocking(&resets_hw->reset, &resets_hw->reset_done, 1u << block_num);
1000acf0:	2201      	movs	r2, #1
1000acf2:	687b      	ldr	r3, [r7, #4]
1000acf4:	fa02 f303 	lsl.w	r3, r2, r3
1000acf8:	4a0f      	ldr	r2, [pc, #60]	@ (1000ad38 <unreset_block_num_wait_blocking+0x50>)
1000acfa:	61fa      	str	r2, [r7, #28]
1000acfc:	4a0f      	ldr	r2, [pc, #60]	@ (1000ad3c <unreset_block_num_wait_blocking+0x54>)
1000acfe:	61ba      	str	r2, [r7, #24]
1000ad00:	617b      	str	r3, [r7, #20]
1000ad02:	69fb      	ldr	r3, [r7, #28]
1000ad04:	613b      	str	r3, [r7, #16]
1000ad06:	697b      	ldr	r3, [r7, #20]
1000ad08:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
1000ad0a:	693b      	ldr	r3, [r7, #16]
1000ad0c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
1000ad10:	461a      	mov	r2, r3
1000ad12:	68fb      	ldr	r3, [r7, #12]
1000ad14:	6013      	str	r3, [r2, #0]
}
1000ad16:	bf00      	nop
    while (~*reset_done & mask)
1000ad18:	e000      	b.n	1000ad1c <unreset_block_num_wait_blocking+0x34>
1000ad1a:	bf00      	nop
1000ad1c:	69bb      	ldr	r3, [r7, #24]
1000ad1e:	681b      	ldr	r3, [r3, #0]
1000ad20:	43da      	mvns	r2, r3
1000ad22:	697b      	ldr	r3, [r7, #20]
1000ad24:	4013      	ands	r3, r2
1000ad26:	2b00      	cmp	r3, #0
1000ad28:	d1f7      	bne.n	1000ad1a <unreset_block_num_wait_blocking+0x32>
}
1000ad2a:	bf00      	nop
}
1000ad2c:	bf00      	nop
1000ad2e:	3724      	adds	r7, #36	@ 0x24
1000ad30:	46bd      	mov	sp, r7
1000ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
1000ad36:	4770      	bx	lr
1000ad38:	40020000 	.word	0x40020000
1000ad3c:	40020008 	.word	0x40020008

1000ad40 <i2c_reset>:
check_hw_layout(i2c_hw_t, clr_restart_det, I2C_IC_CLR_RESTART_DET_OFFSET);

i2c_inst_t i2c0_inst = {i2c0_hw, false};
i2c_inst_t i2c1_inst = {i2c1_hw, false};

static inline void i2c_reset(i2c_inst_t *i2c) {
1000ad40:	b580      	push	{r7, lr}
1000ad42:	b082      	sub	sp, #8
1000ad44:	af00      	add	r7, sp, #0
1000ad46:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_I2C, i2c != i2c0 && i2c != i2c1);
    reset_block_num(i2c == i2c0 ? RESET_I2C0 : RESET_I2C1);
1000ad48:	687b      	ldr	r3, [r7, #4]
1000ad4a:	4a06      	ldr	r2, [pc, #24]	@ (1000ad64 <i2c_reset+0x24>)
1000ad4c:	4293      	cmp	r3, r2
1000ad4e:	d101      	bne.n	1000ad54 <i2c_reset+0x14>
1000ad50:	2304      	movs	r3, #4
1000ad52:	e000      	b.n	1000ad56 <i2c_reset+0x16>
1000ad54:	2305      	movs	r3, #5
1000ad56:	4618      	mov	r0, r3
1000ad58:	f7ff ffa6 	bl	1000aca8 <reset_block_num>
}
1000ad5c:	bf00      	nop
1000ad5e:	3708      	adds	r7, #8
1000ad60:	46bd      	mov	sp, r7
1000ad62:	bd80      	pop	{r7, pc}
1000ad64:	200015c4 	.word	0x200015c4

1000ad68 <i2c_unreset>:

static inline void i2c_unreset(i2c_inst_t *i2c) {
1000ad68:	b580      	push	{r7, lr}
1000ad6a:	b082      	sub	sp, #8
1000ad6c:	af00      	add	r7, sp, #0
1000ad6e:	6078      	str	r0, [r7, #4]
    invalid_params_if(HARDWARE_I2C, i2c != i2c0 && i2c != i2c1);
    unreset_block_num_wait_blocking(i2c == i2c0 ? RESET_I2C0 : RESET_I2C1);
1000ad70:	687b      	ldr	r3, [r7, #4]
1000ad72:	4a06      	ldr	r2, [pc, #24]	@ (1000ad8c <i2c_unreset+0x24>)
1000ad74:	4293      	cmp	r3, r2
1000ad76:	d101      	bne.n	1000ad7c <i2c_unreset+0x14>
1000ad78:	2304      	movs	r3, #4
1000ad7a:	e000      	b.n	1000ad7e <i2c_unreset+0x16>
1000ad7c:	2305      	movs	r3, #5
1000ad7e:	4618      	mov	r0, r3
1000ad80:	f7ff ffb2 	bl	1000ace8 <unreset_block_num_wait_blocking>
}
1000ad84:	bf00      	nop
1000ad86:	3708      	adds	r7, #8
1000ad88:	46bd      	mov	sp, r7
1000ad8a:	bd80      	pop	{r7, pc}
1000ad8c:	200015c4 	.word	0x200015c4

1000ad90 <i2c_init>:

// Addresses of the form 000 0xxx or 111 1xxx are reserved. No slave should
// have these addresses.
#define i2c_reserved_addr(addr) (((addr) & 0x78) == 0 || ((addr) & 0x78) == 0x78)

uint i2c_init(i2c_inst_t *i2c, uint baudrate) {
1000ad90:	b580      	push	{r7, lr}
1000ad92:	b082      	sub	sp, #8
1000ad94:	af00      	add	r7, sp, #0
1000ad96:	6078      	str	r0, [r7, #4]
1000ad98:	6039      	str	r1, [r7, #0]
    i2c_reset(i2c);
1000ad9a:	6878      	ldr	r0, [r7, #4]
1000ad9c:	f7ff ffd0 	bl	1000ad40 <i2c_reset>
    i2c_unreset(i2c);
1000ada0:	6878      	ldr	r0, [r7, #4]
1000ada2:	f7ff ffe1 	bl	1000ad68 <i2c_unreset>
    i2c->restart_on_next = false;
1000ada6:	687b      	ldr	r3, [r7, #4]
1000ada8:	2200      	movs	r2, #0
1000adaa:	711a      	strb	r2, [r3, #4]

    i2c->hw->enable = 0;
1000adac:	687b      	ldr	r3, [r7, #4]
1000adae:	681b      	ldr	r3, [r3, #0]
1000adb0:	2200      	movs	r2, #0
1000adb2:	66da      	str	r2, [r3, #108]	@ 0x6c

    // Configure as a fast-mode master with RepStart support, 7-bit addresses
    i2c->hw->con =
1000adb4:	687b      	ldr	r3, [r7, #4]
1000adb6:	681b      	ldr	r3, [r3, #0]
1000adb8:	f240 1265 	movw	r2, #357	@ 0x165
1000adbc:	601a      	str	r2, [r3, #0]
            I2C_IC_CON_IC_SLAVE_DISABLE_BITS |
            I2C_IC_CON_IC_RESTART_EN_BITS |
            I2C_IC_CON_TX_EMPTY_CTRL_BITS;

    // Set FIFO watermarks to 1 to make things simpler. This is encoded by a register value of 0.
    i2c->hw->tx_tl = 0;
1000adbe:	687b      	ldr	r3, [r7, #4]
1000adc0:	681b      	ldr	r3, [r3, #0]
1000adc2:	2200      	movs	r2, #0
1000adc4:	63da      	str	r2, [r3, #60]	@ 0x3c
    i2c->hw->rx_tl = 0;
1000adc6:	687b      	ldr	r3, [r7, #4]
1000adc8:	681b      	ldr	r3, [r3, #0]
1000adca:	2200      	movs	r2, #0
1000adcc:	639a      	str	r2, [r3, #56]	@ 0x38

    // Always enable the DREQ signalling -- harmless if DMA isn't listening
    i2c->hw->dma_cr = I2C_IC_DMA_CR_TDMAE_BITS | I2C_IC_DMA_CR_RDMAE_BITS;
1000adce:	687b      	ldr	r3, [r7, #4]
1000add0:	681b      	ldr	r3, [r3, #0]
1000add2:	2203      	movs	r2, #3
1000add4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Re-sets i2c->hw->enable upon returning:
    return i2c_set_baudrate(i2c, baudrate);
1000add8:	6839      	ldr	r1, [r7, #0]
1000adda:	6878      	ldr	r0, [r7, #4]
1000addc:	f000 f806 	bl	1000adec <i2c_set_baudrate>
1000ade0:	4603      	mov	r3, r0
}
1000ade2:	4618      	mov	r0, r3
1000ade4:	3708      	adds	r7, #8
1000ade6:	46bd      	mov	sp, r7
1000ade8:	bd80      	pop	{r7, pc}
	...

1000adec <i2c_set_baudrate>:

void i2c_deinit(i2c_inst_t *i2c) {
    i2c_reset(i2c);
}

uint i2c_set_baudrate(i2c_inst_t *i2c, uint baudrate) {
1000adec:	b580      	push	{r7, lr}
1000adee:	b092      	sub	sp, #72	@ 0x48
1000adf0:	af00      	add	r7, sp, #0
1000adf2:	6078      	str	r0, [r7, #4]
1000adf4:	6039      	str	r1, [r7, #0]
    invalid_params_if(HARDWARE_I2C, baudrate == 0);
    // I2C is synchronous design that runs from clk_sys
    uint freq_in = clock_get_hz(clk_sys);
1000adf6:	2005      	movs	r0, #5
1000adf8:	f7f8 fa64 	bl	100032c4 <clock_get_hz>
1000adfc:	6438      	str	r0, [r7, #64]	@ 0x40

    // TODO there are some subtleties to I2C timing which we are completely ignoring here
    uint period = (freq_in + baudrate / 2) / baudrate;
1000adfe:	683b      	ldr	r3, [r7, #0]
1000ae00:	085a      	lsrs	r2, r3, #1
1000ae02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1000ae04:	441a      	add	r2, r3
1000ae06:	683b      	ldr	r3, [r7, #0]
1000ae08:	fbb2 f3f3 	udiv	r3, r2, r3
1000ae0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint lcnt = period * 3 / 5; // oof this one hurts
1000ae0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1000ae10:	4613      	mov	r3, r2
1000ae12:	005b      	lsls	r3, r3, #1
1000ae14:	4413      	add	r3, r2
1000ae16:	4a41      	ldr	r2, [pc, #260]	@ (1000af1c <i2c_set_baudrate+0x130>)
1000ae18:	fba2 2303 	umull	r2, r3, r2, r3
1000ae1c:	089b      	lsrs	r3, r3, #2
1000ae1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint hcnt = period - lcnt;
1000ae20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1000ae22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000ae24:	1ad3      	subs	r3, r2, r3
1000ae26:	637b      	str	r3, [r7, #52]	@ 0x34
    // Per I2C-bus specification a device in standard or fast mode must
    // internally provide a hold time of at least 300ns for the SDA signal to
    // bridge the undefined region of the falling edge of SCL. A smaller hold
    // time of 120ns is used for fast mode plus.
    uint sda_tx_hold_count;
    if (baudrate < 1000000) {
1000ae28:	683b      	ldr	r3, [r7, #0]
1000ae2a:	4a3d      	ldr	r2, [pc, #244]	@ (1000af20 <i2c_set_baudrate+0x134>)
1000ae2c:	4293      	cmp	r3, r2
1000ae2e:	d80a      	bhi.n	1000ae46 <i2c_set_baudrate+0x5a>
        // sda_tx_hold_count = freq_in [cycles/s] * 300ns * (1s / 1e9ns)
        // Reduce 300/1e9 to 3/1e7 to avoid numbers that don't fit in uint.
        // Add 1 to avoid division truncation.
        sda_tx_hold_count = ((freq_in * 3) / 10000000) + 1;
1000ae30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000ae32:	4613      	mov	r3, r2
1000ae34:	005b      	lsls	r3, r3, #1
1000ae36:	4413      	add	r3, r2
1000ae38:	4a3a      	ldr	r2, [pc, #232]	@ (1000af24 <i2c_set_baudrate+0x138>)
1000ae3a:	fba2 2303 	umull	r2, r3, r2, r3
1000ae3e:	0d9b      	lsrs	r3, r3, #22
1000ae40:	3301      	adds	r3, #1
1000ae42:	647b      	str	r3, [r7, #68]	@ 0x44
1000ae44:	e009      	b.n	1000ae5a <i2c_set_baudrate+0x6e>
    } else {
        // sda_tx_hold_count = freq_in [cycles/s] * 120ns * (1s / 1e9ns)
        // Reduce 120/1e9 to 3/25e6 to avoid numbers that don't fit in uint.
        // Add 1 to avoid division truncation.
        sda_tx_hold_count = ((freq_in * 3) / 25000000) + 1;
1000ae46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000ae48:	4613      	mov	r3, r2
1000ae4a:	005b      	lsls	r3, r3, #1
1000ae4c:	4413      	add	r3, r2
1000ae4e:	4a36      	ldr	r2, [pc, #216]	@ (1000af28 <i2c_set_baudrate+0x13c>)
1000ae50:	fba2 2303 	umull	r2, r3, r2, r3
1000ae54:	0ddb      	lsrs	r3, r3, #23
1000ae56:	3301      	adds	r3, #1
1000ae58:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    assert(sda_tx_hold_count <= lcnt - 2);
1000ae5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000ae5c:	3b02      	subs	r3, #2
1000ae5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1000ae60:	429a      	cmp	r2, r3
1000ae62:	d905      	bls.n	1000ae70 <i2c_set_baudrate+0x84>
1000ae64:	4b31      	ldr	r3, [pc, #196]	@ (1000af2c <i2c_set_baudrate+0x140>)
1000ae66:	4a32      	ldr	r2, [pc, #200]	@ (1000af30 <i2c_set_baudrate+0x144>)
1000ae68:	215d      	movs	r1, #93	@ 0x5d
1000ae6a:	4832      	ldr	r0, [pc, #200]	@ (1000af34 <i2c_set_baudrate+0x148>)
1000ae6c:	f7fa fd02 	bl	10005874 <__assert_func>

    i2c->hw->enable = 0;
1000ae70:	687b      	ldr	r3, [r7, #4]
1000ae72:	681b      	ldr	r3, [r3, #0]
1000ae74:	2200      	movs	r2, #0
1000ae76:	66da      	str	r2, [r3, #108]	@ 0x6c
    // Always use "fast" mode (<= 400 kHz, works fine for standard mode too)
    hw_write_masked(&i2c->hw->con,
1000ae78:	687b      	ldr	r3, [r7, #4]
1000ae7a:	681b      	ldr	r3, [r3, #0]
1000ae7c:	633b      	str	r3, [r7, #48]	@ 0x30
1000ae7e:	2304      	movs	r3, #4
1000ae80:	62fb      	str	r3, [r7, #44]	@ 0x2c
1000ae82:	2306      	movs	r3, #6
1000ae84:	62bb      	str	r3, [r7, #40]	@ 0x28
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1000ae88:	681a      	ldr	r2, [r3, #0]
1000ae8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1000ae8c:	405a      	eors	r2, r3
1000ae8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1000ae90:	4013      	ands	r3, r2
1000ae92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1000ae94:	627a      	str	r2, [r7, #36]	@ 0x24
1000ae96:	623b      	str	r3, [r7, #32]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1000ae9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1000ae9e:	461a      	mov	r2, r3
1000aea0:	6a3b      	ldr	r3, [r7, #32]
1000aea2:	6013      	str	r3, [r2, #0]
}
1000aea4:	bf00      	nop
}
1000aea6:	bf00      	nop
                   I2C_IC_CON_SPEED_VALUE_FAST << I2C_IC_CON_SPEED_LSB,
                   I2C_IC_CON_SPEED_BITS
    );
    i2c->hw->fs_scl_hcnt = hcnt;
1000aea8:	687b      	ldr	r3, [r7, #4]
1000aeaa:	681b      	ldr	r3, [r3, #0]
1000aeac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1000aeae:	61da      	str	r2, [r3, #28]
    i2c->hw->fs_scl_lcnt = lcnt;
1000aeb0:	687b      	ldr	r3, [r7, #4]
1000aeb2:	681b      	ldr	r3, [r3, #0]
1000aeb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
1000aeb6:	621a      	str	r2, [r3, #32]
    i2c->hw->fs_spklen = lcnt < 16 ? 1 : lcnt / 16;
1000aeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000aeba:	2b0f      	cmp	r3, #15
1000aebc:	d902      	bls.n	1000aec4 <i2c_set_baudrate+0xd8>
1000aebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1000aec0:	091b      	lsrs	r3, r3, #4
1000aec2:	e000      	b.n	1000aec6 <i2c_set_baudrate+0xda>
1000aec4:	2301      	movs	r3, #1
1000aec6:	687a      	ldr	r2, [r7, #4]
1000aec8:	6812      	ldr	r2, [r2, #0]
1000aeca:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
    hw_write_masked(&i2c->hw->sda_hold,
1000aece:	687b      	ldr	r3, [r7, #4]
1000aed0:	681b      	ldr	r3, [r3, #0]
1000aed2:	337c      	adds	r3, #124	@ 0x7c
1000aed4:	61fb      	str	r3, [r7, #28]
1000aed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1000aed8:	61bb      	str	r3, [r7, #24]
1000aeda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
1000aede:	617b      	str	r3, [r7, #20]
    hw_xor_bits(addr, (*addr ^ values) & write_mask);
1000aee0:	69fb      	ldr	r3, [r7, #28]
1000aee2:	681a      	ldr	r2, [r3, #0]
1000aee4:	69bb      	ldr	r3, [r7, #24]
1000aee6:	405a      	eors	r2, r3
1000aee8:	697b      	ldr	r3, [r7, #20]
1000aeea:	4013      	ands	r3, r2
1000aeec:	69fa      	ldr	r2, [r7, #28]
1000aeee:	613a      	str	r2, [r7, #16]
1000aef0:	60fb      	str	r3, [r7, #12]
    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
1000aef2:	693b      	ldr	r3, [r7, #16]
1000aef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1000aef8:	461a      	mov	r2, r3
1000aefa:	68fb      	ldr	r3, [r7, #12]
1000aefc:	6013      	str	r3, [r2, #0]
}
1000aefe:	bf00      	nop
}
1000af00:	bf00      	nop
                    sda_tx_hold_count << I2C_IC_SDA_HOLD_IC_SDA_TX_HOLD_LSB,
                    I2C_IC_SDA_HOLD_IC_SDA_TX_HOLD_BITS);

    i2c->hw->enable = 1;
1000af02:	687b      	ldr	r3, [r7, #4]
1000af04:	681b      	ldr	r3, [r3, #0]
1000af06:	2201      	movs	r2, #1
1000af08:	66da      	str	r2, [r3, #108]	@ 0x6c
    return freq_in / period;
1000af0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1000af0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1000af0e:	fbb2 f3f3 	udiv	r3, r2, r3
}
1000af12:	4618      	mov	r0, r3
1000af14:	3748      	adds	r7, #72	@ 0x48
1000af16:	46bd      	mov	sp, r7
1000af18:	bd80      	pop	{r7, pc}
1000af1a:	bf00      	nop
1000af1c:	cccccccd 	.word	0xcccccccd
1000af20:	000f423f 	.word	0x000f423f
1000af24:	6b5fca6b 	.word	0x6b5fca6b
1000af28:	55e63b89 	.word	0x55e63b89
1000af2c:	1000c194 	.word	0x1000c194
1000af30:	1000c1f4 	.word	0x1000c1f4
1000af34:	1000c1b4 	.word	0x1000c1b4

1000af38 <memcpy>:
1000af38:	4684      	mov	ip, r0
1000af3a:	ea41 0300 	orr.w	r3, r1, r0
1000af3e:	f013 0303 	ands.w	r3, r3, #3
1000af42:	d149      	bne.n	1000afd8 <memcpy+0xa0>
1000af44:	3a40      	subs	r2, #64	@ 0x40
1000af46:	d323      	bcc.n	1000af90 <memcpy+0x58>
1000af48:	680b      	ldr	r3, [r1, #0]
1000af4a:	6003      	str	r3, [r0, #0]
1000af4c:	684b      	ldr	r3, [r1, #4]
1000af4e:	6043      	str	r3, [r0, #4]
1000af50:	688b      	ldr	r3, [r1, #8]
1000af52:	6083      	str	r3, [r0, #8]
1000af54:	68cb      	ldr	r3, [r1, #12]
1000af56:	60c3      	str	r3, [r0, #12]
1000af58:	690b      	ldr	r3, [r1, #16]
1000af5a:	6103      	str	r3, [r0, #16]
1000af5c:	694b      	ldr	r3, [r1, #20]
1000af5e:	6143      	str	r3, [r0, #20]
1000af60:	698b      	ldr	r3, [r1, #24]
1000af62:	6183      	str	r3, [r0, #24]
1000af64:	69cb      	ldr	r3, [r1, #28]
1000af66:	61c3      	str	r3, [r0, #28]
1000af68:	6a0b      	ldr	r3, [r1, #32]
1000af6a:	6203      	str	r3, [r0, #32]
1000af6c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
1000af6e:	6243      	str	r3, [r0, #36]	@ 0x24
1000af70:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
1000af72:	6283      	str	r3, [r0, #40]	@ 0x28
1000af74:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
1000af76:	62c3      	str	r3, [r0, #44]	@ 0x2c
1000af78:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
1000af7a:	6303      	str	r3, [r0, #48]	@ 0x30
1000af7c:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
1000af7e:	6343      	str	r3, [r0, #52]	@ 0x34
1000af80:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
1000af82:	6383      	str	r3, [r0, #56]	@ 0x38
1000af84:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
1000af86:	63c3      	str	r3, [r0, #60]	@ 0x3c
1000af88:	3040      	adds	r0, #64	@ 0x40
1000af8a:	3140      	adds	r1, #64	@ 0x40
1000af8c:	3a40      	subs	r2, #64	@ 0x40
1000af8e:	d2db      	bcs.n	1000af48 <memcpy+0x10>
1000af90:	3230      	adds	r2, #48	@ 0x30
1000af92:	d30b      	bcc.n	1000afac <memcpy+0x74>
1000af94:	680b      	ldr	r3, [r1, #0]
1000af96:	6003      	str	r3, [r0, #0]
1000af98:	684b      	ldr	r3, [r1, #4]
1000af9a:	6043      	str	r3, [r0, #4]
1000af9c:	688b      	ldr	r3, [r1, #8]
1000af9e:	6083      	str	r3, [r0, #8]
1000afa0:	68cb      	ldr	r3, [r1, #12]
1000afa2:	60c3      	str	r3, [r0, #12]
1000afa4:	3010      	adds	r0, #16
1000afa6:	3110      	adds	r1, #16
1000afa8:	3a10      	subs	r2, #16
1000afaa:	d2f3      	bcs.n	1000af94 <memcpy+0x5c>
1000afac:	320c      	adds	r2, #12
1000afae:	d305      	bcc.n	1000afbc <memcpy+0x84>
1000afb0:	f851 3b04 	ldr.w	r3, [r1], #4
1000afb4:	f840 3b04 	str.w	r3, [r0], #4
1000afb8:	3a04      	subs	r2, #4
1000afba:	d2f9      	bcs.n	1000afb0 <memcpy+0x78>
1000afbc:	3204      	adds	r2, #4
1000afbe:	d008      	beq.n	1000afd2 <memcpy+0x9a>
1000afc0:	07d2      	lsls	r2, r2, #31
1000afc2:	bf1c      	itt	ne
1000afc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1000afc8:	f800 3b01 	strbne.w	r3, [r0], #1
1000afcc:	d301      	bcc.n	1000afd2 <memcpy+0x9a>
1000afce:	880b      	ldrh	r3, [r1, #0]
1000afd0:	8003      	strh	r3, [r0, #0]
1000afd2:	4660      	mov	r0, ip
1000afd4:	4770      	bx	lr
1000afd6:	bf00      	nop
1000afd8:	2a08      	cmp	r2, #8
1000afda:	d313      	bcc.n	1000b004 <memcpy+0xcc>
1000afdc:	078b      	lsls	r3, r1, #30
1000afde:	d0b1      	beq.n	1000af44 <memcpy+0xc>
1000afe0:	f010 0303 	ands.w	r3, r0, #3
1000afe4:	d0ae      	beq.n	1000af44 <memcpy+0xc>
1000afe6:	f1c3 0304 	rsb	r3, r3, #4
1000afea:	1ad2      	subs	r2, r2, r3
1000afec:	07db      	lsls	r3, r3, #31
1000afee:	bf1c      	itt	ne
1000aff0:	f811 3b01 	ldrbne.w	r3, [r1], #1
1000aff4:	f800 3b01 	strbne.w	r3, [r0], #1
1000aff8:	d3a4      	bcc.n	1000af44 <memcpy+0xc>
1000affa:	f831 3b02 	ldrh.w	r3, [r1], #2
1000affe:	f820 3b02 	strh.w	r3, [r0], #2
1000b002:	e79f      	b.n	1000af44 <memcpy+0xc>
1000b004:	3a04      	subs	r2, #4
1000b006:	d3d9      	bcc.n	1000afbc <memcpy+0x84>
1000b008:	3a01      	subs	r2, #1
1000b00a:	f811 3b01 	ldrb.w	r3, [r1], #1
1000b00e:	f800 3b01 	strb.w	r3, [r0], #1
1000b012:	d2f9      	bcs.n	1000b008 <memcpy+0xd0>
1000b014:	780b      	ldrb	r3, [r1, #0]
1000b016:	7003      	strb	r3, [r0, #0]
1000b018:	784b      	ldrb	r3, [r1, #1]
1000b01a:	7043      	strb	r3, [r0, #1]
1000b01c:	788b      	ldrb	r3, [r1, #2]
1000b01e:	7083      	strb	r3, [r0, #2]
1000b020:	4660      	mov	r0, ip
1000b022:	4770      	bx	lr

1000b024 <strlen>:
1000b024:	f020 0103 	bic.w	r1, r0, #3
1000b028:	f010 0003 	ands.w	r0, r0, #3
1000b02c:	f1c0 0000 	rsb	r0, r0, #0
1000b030:	f851 3b04 	ldr.w	r3, [r1], #4
1000b034:	f100 0c04 	add.w	ip, r0, #4
1000b038:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
1000b03c:	f06f 0200 	mvn.w	r2, #0
1000b040:	bf1c      	itt	ne
1000b042:	fa22 f20c 	lsrne.w	r2, r2, ip
1000b046:	4313      	orrne	r3, r2
1000b048:	f04f 0c01 	mov.w	ip, #1
1000b04c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
1000b050:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
1000b054:	eba3 020c 	sub.w	r2, r3, ip
1000b058:	ea22 0203 	bic.w	r2, r2, r3
1000b05c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
1000b060:	bf04      	itt	eq
1000b062:	f851 3b04 	ldreq.w	r3, [r1], #4
1000b066:	3004      	addeq	r0, #4
1000b068:	d0f4      	beq.n	1000b054 <strlen+0x30>
1000b06a:	f1c2 0100 	rsb	r1, r2, #0
1000b06e:	ea02 0201 	and.w	r2, r2, r1
1000b072:	fab2 f282 	clz	r2, r2
1000b076:	f1c2 021f 	rsb	r2, r2, #31
1000b07a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1000b07e:	4770      	bx	lr

1000b080 <memset>:
1000b080:	b570      	push	{r4, r5, r6, lr}
1000b082:	0786      	lsls	r6, r0, #30
1000b084:	d047      	beq.n	1000b116 <memset+0x96>
1000b086:	1e54      	subs	r4, r2, #1
1000b088:	2a00      	cmp	r2, #0
1000b08a:	d03e      	beq.n	1000b10a <memset+0x8a>
1000b08c:	b2ca      	uxtb	r2, r1
1000b08e:	4603      	mov	r3, r0
1000b090:	e001      	b.n	1000b096 <memset+0x16>
1000b092:	3c01      	subs	r4, #1
1000b094:	d339      	bcc.n	1000b10a <memset+0x8a>
1000b096:	f803 2b01 	strb.w	r2, [r3], #1
1000b09a:	079d      	lsls	r5, r3, #30
1000b09c:	d1f9      	bne.n	1000b092 <memset+0x12>
1000b09e:	2c03      	cmp	r4, #3
1000b0a0:	d92c      	bls.n	1000b0fc <memset+0x7c>
1000b0a2:	b2cd      	uxtb	r5, r1
1000b0a4:	2c0f      	cmp	r4, #15
1000b0a6:	eb05 2505 	add.w	r5, r5, r5, lsl #8
1000b0aa:	eb05 4505 	add.w	r5, r5, r5, lsl #16
1000b0ae:	d935      	bls.n	1000b11c <memset+0x9c>
1000b0b0:	f1a4 0c10 	sub.w	ip, r4, #16
1000b0b4:	f103 0e10 	add.w	lr, r3, #16
1000b0b8:	461a      	mov	r2, r3
1000b0ba:	f02c 060f 	bic.w	r6, ip, #15
1000b0be:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
1000b0c2:	44b6      	add	lr, r6
1000b0c4:	e9c2 5500 	strd	r5, r5, [r2]
1000b0c8:	e9c2 5502 	strd	r5, r5, [r2, #8]
1000b0cc:	3210      	adds	r2, #16
1000b0ce:	4572      	cmp	r2, lr
1000b0d0:	d1f8      	bne.n	1000b0c4 <memset+0x44>
1000b0d2:	f10c 0201 	add.w	r2, ip, #1
1000b0d6:	f014 0f0c 	tst.w	r4, #12
1000b0da:	f004 0c0f 	and.w	ip, r4, #15
1000b0de:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1000b0e2:	d013      	beq.n	1000b10c <memset+0x8c>
1000b0e4:	f1ac 0304 	sub.w	r3, ip, #4
1000b0e8:	f023 0303 	bic.w	r3, r3, #3
1000b0ec:	3304      	adds	r3, #4
1000b0ee:	4413      	add	r3, r2
1000b0f0:	f842 5b04 	str.w	r5, [r2], #4
1000b0f4:	4293      	cmp	r3, r2
1000b0f6:	d1fb      	bne.n	1000b0f0 <memset+0x70>
1000b0f8:	f00c 0403 	and.w	r4, ip, #3
1000b0fc:	b12c      	cbz	r4, 1000b10a <memset+0x8a>
1000b0fe:	b2c9      	uxtb	r1, r1
1000b100:	441c      	add	r4, r3
1000b102:	f803 1b01 	strb.w	r1, [r3], #1
1000b106:	42a3      	cmp	r3, r4
1000b108:	d1fb      	bne.n	1000b102 <memset+0x82>
1000b10a:	bd70      	pop	{r4, r5, r6, pc}
1000b10c:	4664      	mov	r4, ip
1000b10e:	4613      	mov	r3, r2
1000b110:	2c00      	cmp	r4, #0
1000b112:	d1f4      	bne.n	1000b0fe <memset+0x7e>
1000b114:	e7f9      	b.n	1000b10a <memset+0x8a>
1000b116:	4603      	mov	r3, r0
1000b118:	4614      	mov	r4, r2
1000b11a:	e7c0      	b.n	1000b09e <memset+0x1e>
1000b11c:	461a      	mov	r2, r3
1000b11e:	46a4      	mov	ip, r4
1000b120:	e7e0      	b.n	1000b0e4 <memset+0x64>
1000b122:	bf00      	nop

1000b124 <_fini>:
1000b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b126:	bf00      	nop

1000b128 <__hw_endpoint_reset_transfer_veneer>:
1000b128:	f85f f000 	ldr.w	pc, [pc]	@ 1000b12c <__hw_endpoint_reset_transfer_veneer+0x4>
1000b12c:	20000909 	.word	0x20000909

1000b130 <__reset_non_control_endpoints_veneer>:
1000b130:	f85f f000 	ldr.w	pc, [pc]	@ 1000b134 <__reset_non_control_endpoints_veneer+0x4>
1000b134:	200004c9 	.word	0x200004c9

1000b138 <__mutex_enter_timeout_ms_veneer>:
1000b138:	f85f f000 	ldr.w	pc, [pc]	@ 1000b13c <__mutex_enter_timeout_ms_veneer+0x4>
1000b13c:	20000217 	.word	0x20000217

1000b140 <__hw_endpoint_start_next_buffer_veneer>:
1000b140:	f85f f000 	ldr.w	pc, [pc]	@ 1000b144 <__hw_endpoint_start_next_buffer_veneer+0x4>
1000b144:	20000a91 	.word	0x20000a91

1000b148 <__e15_is_bulkin_ep_veneer>:
1000b148:	f85f f000 	ldr.w	pc, [pc]	@ 1000b14c <__e15_is_bulkin_ep_veneer+0x4>
1000b14c:	20000d15 	.word	0x20000d15

1000b150 <____aeabi_uldivmod_veneer>:
1000b150:	f85f f000 	ldr.w	pc, [pc]	@ 1000b154 <____aeabi_uldivmod_veneer+0x4>
1000b154:	20001169 	.word	0x20001169

1000b158 <__mutex_exit_veneer>:
1000b158:	f85f f000 	ldr.w	pc, [pc]	@ 1000b15c <__mutex_exit_veneer+0x4>
1000b15c:	20000331 	.word	0x20000331

1000b160 <___hw_endpoint_buffer_control_update32_veneer>:
1000b160:	f85f f000 	ldr.w	pc, [pc]	@ 1000b164 <___hw_endpoint_buffer_control_update32_veneer+0x4>
1000b164:	20000935 	.word	0x20000935

1000b168 <__mutex_try_enter_block_until_veneer>:
1000b168:	f85f f000 	ldr.w	pc, [pc]	@ 1000b16c <__mutex_try_enter_block_until_veneer+0x4>
1000b16c:	200001c7 	.word	0x200001c7

1000b170 <__mutex_try_enter_veneer>:
1000b170:	f85f f000 	ldr.w	pc, [pc]	@ 1000b174 <__mutex_try_enter_veneer+0x4>
1000b174:	20000111 	.word	0x20000111

1000b178 <__e15_is_critical_frame_period_veneer>:
1000b178:	f85f f000 	ldr.w	pc, [pc]	@ 1000b17c <__e15_is_critical_frame_period_veneer+0x4>
1000b17c:	20000d6d 	.word	0x20000d6d

1000b180 <__pre_init_runtime_init_bootrom_reset>:
1000b180:	10003783                                .7..

1000b184 <__pre_init_runtime_init_early_resets>:
1000b184:	100037c5                                .7..

1000b188 <__pre_init_runtime_init_usb_power_down>:
1000b188:	10003849                                I8..

1000b18c <__pre_init_runtime_init_clocks>:
1000b18c:	100039b1                                .9..

1000b190 <__pre_init_runtime_init_post_clock_resets>:
1000b190:	100038cd                                .8..

1000b194 <__pre_init_runtime_init_spin_locks_reset>:
1000b194:	10003925                                %9..

1000b198 <__pre_init_runtime_init_boot_locks_reset>:
1000b198:	10003c85                                .<..

1000b19c <__pre_init_runtime_init_bootrom_locking_enable>:
1000b19c:	10003c21                                !<..

1000b1a0 <__pre_init_runtime_init_mutex>:
1000b1a0:	100019ed                                ....

1000b1a4 <__pre_init_runtime_init_install_ram_vector_table>:
1000b1a4:	10003931                                19..

1000b1a8 <__pre_init_runtime_init_default_alarm_pool>:
1000b1a8:	10001f3d                                =...

1000b1ac <__pre_init_first_per_core_initializer>:
1000b1ac:	10003775                                u7..

1000b1b0 <__pre_init_runtime_init_per_core_bootrom_reset>:
1000b1b0:	100037a3                                .7..

1000b1b4 <__pre_init_runtime_init_per_core_enable_coprocessors>:
1000b1b4:	10003885                                .8..

1000b1b8 <__pre_init_spinlock_set_extexclall>:
1000b1b8:	10000f31                                1...

1000b1bc <__pre_init_runtime_init_per_core_irq_priorities>:
1000b1bc:	10001809                                ....

1000b1c0 <__frame_dummy_init_array_entry>:
1000b1c0:	10000219 100068c5                       .....h..

Disassembly of section .data:

20000110 <mutex_try_enter>:
            lock_internal_spin_unlock_with_wait(&mtx->core, save);
        }
    } while (true);
}

bool __time_critical_func(mutex_try_enter)(mutex_t *mtx, uint32_t *owner_out) {
20000110:	b480      	push	{r7}
20000112:	b091      	sub	sp, #68	@ 0x44
20000114:	af00      	add	r7, sp, #0
20000116:	6078      	str	r0, [r7, #4]
20000118:	6039      	str	r1, [r7, #0]
    if (mtx->recursive) {
        return recursive_mutex_try_enter(mtx, owner_out);
    }
#endif
    bool entered;
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
2000011a:	687b      	ldr	r3, [r7, #4]
2000011c:	681b      	ldr	r3, [r3, #0]
2000011e:	637b      	str	r3, [r7, #52]	@ 0x34
    pico_default_asm_volatile (
20000120:	f3ef 8310 	mrs	r3, PRIMASK
20000124:	b672      	cpsid	i
20000126:	633b      	str	r3, [r7, #48]	@ 0x30
    return status;
20000128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    uint32_t save = save_and_disable_interrupts();
2000012a:	62fb      	str	r3, [r7, #44]	@ 0x2c
2000012c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000012e:	62bb      	str	r3, [r7, #40]	@ 0x28
    SW_SPIN_LOCK_LOCK(lock);
20000130:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
20000132:	e8d1 3fcf 	ldaexb	r3, [r1]
20000136:	2201      	movs	r2, #1
20000138:	2b00      	cmp	r3, #0
2000013a:	d1fa      	bne.n	20000132 <mutex_try_enter+0x22>
2000013c:	e8c1 2f43 	strexb	r3, r2, [r1]
20000140:	2b00      	cmp	r3, #0
20000142:	d1f6      	bne.n	20000132 <mutex_try_enter+0x22>
20000144:	627a      	str	r2, [r7, #36]	@ 0x24
20000146:	623b      	str	r3, [r7, #32]
    pico_default_asm_volatile ("dmb" : : : "memory");
20000148:	f3bf 8f5f 	dmb	sy
}
2000014c:	bf00      	nop
}
2000014e:	bf00      	nop
}
20000150:	bf00      	nop
    return save;
20000152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20000154:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (!lock_is_owner_id_valid(mtx->owner)) {
20000156:	687b      	ldr	r3, [r7, #4]
20000158:	f993 3004 	ldrsb.w	r3, [r3, #4]
2000015c:	2b00      	cmp	r3, #0
2000015e:	da09      	bge.n	20000174 <mutex_try_enter+0x64>
    return (*(uint32_t *) (SIO_BASE + SIO_CPUID_OFFSET));
20000160:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
20000164:	681b      	ldr	r3, [r3, #0]
        mtx->owner = lock_get_caller_owner_id();
20000166:	b25a      	sxtb	r2, r3
20000168:	687b      	ldr	r3, [r7, #4]
2000016a:	711a      	strb	r2, [r3, #4]
        entered = true;
2000016c:	2301      	movs	r3, #1
2000016e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
20000172:	e00b      	b.n	2000018c <mutex_try_enter+0x7c>
    } else {
        if (owner_out) *owner_out = (uint32_t) mtx->owner;
20000174:	683b      	ldr	r3, [r7, #0]
20000176:	2b00      	cmp	r3, #0
20000178:	d005      	beq.n	20000186 <mutex_try_enter+0x76>
2000017a:	687b      	ldr	r3, [r7, #4]
2000017c:	f993 3004 	ldrsb.w	r3, [r3, #4]
20000180:	461a      	mov	r2, r3
20000182:	683b      	ldr	r3, [r7, #0]
20000184:	601a      	str	r2, [r3, #0]
        entered = false;
20000186:	2300      	movs	r3, #0
20000188:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    spin_unlock(mtx->core.spin_lock, save);
2000018c:	687b      	ldr	r3, [r7, #4]
2000018e:	681b      	ldr	r3, [r3, #0]
20000190:	61fb      	str	r3, [r7, #28]
20000192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
20000194:	61bb      	str	r3, [r7, #24]
20000196:	69fb      	ldr	r3, [r7, #28]
20000198:	617b      	str	r3, [r7, #20]
    SW_SPIN_LOCK_UNLOCK(lock);
2000019a:	2300      	movs	r3, #0
2000019c:	613b      	str	r3, [r7, #16]
2000019e:	693b      	ldr	r3, [r7, #16]
200001a0:	697a      	ldr	r2, [r7, #20]
200001a2:	e8c2 3f8f 	stlb	r3, [r2]
}
200001a6:	bf00      	nop
200001a8:	69bb      	ldr	r3, [r7, #24]
200001aa:	60fb      	str	r3, [r7, #12]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
200001ac:	68fb      	ldr	r3, [r7, #12]
200001ae:	f383 8810 	msr	PRIMASK, r3
}
200001b2:	bf00      	nop
}
200001b4:	bf00      	nop
    return entered;
200001b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
200001ba:	4618      	mov	r0, r3
200001bc:	3744      	adds	r7, #68	@ 0x44
200001be:	46bd      	mov	sp, r7
200001c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200001c4:	4770      	bx	lr

200001c6 <mutex_try_enter_block_until>:

bool __time_critical_func(mutex_try_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
200001c6:	b580      	push	{r7, lr}
200001c8:	b086      	sub	sp, #24
200001ca:	af00      	add	r7, sp, #0
200001cc:	60f8      	str	r0, [r7, #12]
200001ce:	e9c7 2300 	strd	r2, r3, [r7]
    // not using lock_owner_id_t to avoid backwards incompatibility change to mutex_try_enter API
    static_assert(sizeof(lock_owner_id_t) <= 4, "");
    uint32_t owner;
    if (!mutex_try_enter(mtx, &owner)) {
200001d2:	f107 0314 	add.w	r3, r7, #20
200001d6:	4619      	mov	r1, r3
200001d8:	68f8      	ldr	r0, [r7, #12]
200001da:	f7ff ff99 	bl	20000110 <mutex_try_enter>
200001de:	4603      	mov	r3, r0
200001e0:	f083 0301 	eor.w	r3, r3, #1
200001e4:	b2db      	uxtb	r3, r3
200001e6:	2b00      	cmp	r3, #0
200001e8:	d010      	beq.n	2000020c <mutex_try_enter_block_until+0x46>
        if ((lock_owner_id_t)owner == lock_get_caller_owner_id()) return false; // deadlock, so we can never own it
200001ea:	697b      	ldr	r3, [r7, #20]
200001ec:	b25a      	sxtb	r2, r3
200001ee:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
200001f2:	681b      	ldr	r3, [r3, #0]
200001f4:	b25b      	sxtb	r3, r3
200001f6:	429a      	cmp	r2, r3
200001f8:	d101      	bne.n	200001fe <mutex_try_enter_block_until+0x38>
200001fa:	2300      	movs	r3, #0
200001fc:	e007      	b.n	2000020e <mutex_try_enter_block_until+0x48>
        return mutex_enter_block_until(mtx, until);
200001fe:	e9d7 2300 	ldrd	r2, r3, [r7]
20000202:	68f8      	ldr	r0, [r7, #12]
20000204:	f000 f81a 	bl	2000023c <mutex_enter_block_until>
20000208:	4603      	mov	r3, r0
2000020a:	e000      	b.n	2000020e <mutex_try_enter_block_until+0x48>
    }
    return true;
2000020c:	2301      	movs	r3, #1
}
2000020e:	4618      	mov	r0, r3
20000210:	3718      	adds	r7, #24
20000212:	46bd      	mov	sp, r7
20000214:	bd80      	pop	{r7, pc}

20000216 <mutex_enter_timeout_ms>:
    }
    spin_unlock(mtx->core.spin_lock, save);
    return entered;
}

bool __time_critical_func(mutex_enter_timeout_ms)(mutex_t *mtx, uint32_t timeout_ms) {
20000216:	b580      	push	{r7, lr}
20000218:	b082      	sub	sp, #8
2000021a:	af00      	add	r7, sp, #0
2000021c:	6078      	str	r0, [r7, #4]
2000021e:	6039      	str	r1, [r7, #0]
    return mutex_enter_block_until(mtx, make_timeout_time_ms(timeout_ms));
20000220:	6838      	ldr	r0, [r7, #0]
20000222:	f001 f959 	bl	200014d8 <__make_timeout_time_ms_veneer>
20000226:	4602      	mov	r2, r0
20000228:	460b      	mov	r3, r1
2000022a:	6878      	ldr	r0, [r7, #4]
2000022c:	f000 f806 	bl	2000023c <mutex_enter_block_until>
20000230:	4603      	mov	r3, r0
}
20000232:	4618      	mov	r0, r3
20000234:	3708      	adds	r7, #8
20000236:	46bd      	mov	sp, r7
20000238:	bd80      	pop	{r7, pc}
	...

2000023c <mutex_enter_block_until>:

bool __time_critical_func(recursive_mutex_enter_timeout_us)(recursive_mutex_t *mtx, uint32_t timeout_us) {
    return recursive_mutex_enter_block_until(mtx, make_timeout_time_us(timeout_us));
}

bool __time_critical_func(mutex_enter_block_until)(mutex_t *mtx, absolute_time_t until) {
2000023c:	b580      	push	{r7, lr}
2000023e:	b096      	sub	sp, #88	@ 0x58
20000240:	af00      	add	r7, sp, #0
20000242:	60f8      	str	r0, [r7, #12]
20000244:	e9c7 2300 	strd	r2, r3, [r7]
#if PICO_MUTEX_ENABLE_SDK120_COMPATIBILITY
    if (mtx->recursive) {
        return recursive_mutex_enter_block_until(mtx, until);
    }
#endif
    assert(mtx->core.spin_lock);
20000248:	68fb      	ldr	r3, [r7, #12]
2000024a:	681b      	ldr	r3, [r3, #0]
2000024c:	2b00      	cmp	r3, #0
2000024e:	d105      	bne.n	2000025c <mutex_enter_block_until+0x20>
20000250:	4b34      	ldr	r3, [pc, #208]	@ (20000324 <mutex_enter_block_until+0xe8>)
20000252:	4a35      	ldr	r2, [pc, #212]	@ (20000328 <mutex_enter_block_until+0xec>)
20000254:	21a6      	movs	r1, #166	@ 0xa6
20000256:	4835      	ldr	r0, [pc, #212]	@ (2000032c <mutex_enter_block_until+0xf0>)
20000258:	f001 f94e 	bl	200014f8 <____assert_func_veneer>
2000025c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
20000260:	681b      	ldr	r3, [r3, #0]
    lock_owner_id_t caller = lock_get_caller_owner_id();
20000262:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    do {
        uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000266:	68fb      	ldr	r3, [r7, #12]
20000268:	681b      	ldr	r3, [r3, #0]
2000026a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    pico_default_asm_volatile (
2000026c:	f3ef 8310 	mrs	r3, PRIMASK
20000270:	b672      	cpsid	i
20000272:	64bb      	str	r3, [r7, #72]	@ 0x48
    return status;
20000274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    uint32_t save = save_and_disable_interrupts();
20000276:	647b      	str	r3, [r7, #68]	@ 0x44
20000278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000027a:	643b      	str	r3, [r7, #64]	@ 0x40
    SW_SPIN_LOCK_LOCK(lock);
2000027c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
2000027e:	e8d1 3fcf 	ldaexb	r3, [r1]
20000282:	2201      	movs	r2, #1
20000284:	2b00      	cmp	r3, #0
20000286:	d1fa      	bne.n	2000027e <mutex_enter_block_until+0x42>
20000288:	e8c1 2f43 	strexb	r3, r2, [r1]
2000028c:	2b00      	cmp	r3, #0
2000028e:	d1f6      	bne.n	2000027e <mutex_enter_block_until+0x42>
20000290:	63fa      	str	r2, [r7, #60]	@ 0x3c
20000292:	63bb      	str	r3, [r7, #56]	@ 0x38
    pico_default_asm_volatile ("dmb" : : : "memory");
20000294:	f3bf 8f5f 	dmb	sy
}
20000298:	bf00      	nop
}
2000029a:	bf00      	nop
}
2000029c:	bf00      	nop
    return save;
2000029e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
200002a0:	653b      	str	r3, [r7, #80]	@ 0x50
        if (!lock_is_owner_id_valid(mtx->owner)) {
200002a2:	68fb      	ldr	r3, [r7, #12]
200002a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
200002a8:	2b00      	cmp	r3, #0
200002aa:	da1a      	bge.n	200002e2 <mutex_enter_block_until+0xa6>
            mtx->owner = caller;
200002ac:	68fb      	ldr	r3, [r7, #12]
200002ae:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
200002b2:	711a      	strb	r2, [r3, #4]
            spin_unlock(mtx->core.spin_lock, save);
200002b4:	68fb      	ldr	r3, [r7, #12]
200002b6:	681b      	ldr	r3, [r3, #0]
200002b8:	637b      	str	r3, [r7, #52]	@ 0x34
200002ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200002bc:	633b      	str	r3, [r7, #48]	@ 0x30
200002be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200002c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    SW_SPIN_LOCK_UNLOCK(lock);
200002c2:	2300      	movs	r3, #0
200002c4:	62bb      	str	r3, [r7, #40]	@ 0x28
200002c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200002c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200002ca:	e8c2 3f8f 	stlb	r3, [r2]
}
200002ce:	bf00      	nop
200002d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
200002d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
200002d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
200002d6:	f383 8810 	msr	PRIMASK, r3
}
200002da:	bf00      	nop
}
200002dc:	bf00      	nop
            return true;
200002de:	2301      	movs	r3, #1
200002e0:	e01c      	b.n	2000031c <mutex_enter_block_until+0xe0>
        } else {
            if (lock_internal_spin_unlock_with_best_effort_wait_or_timeout(&mtx->core, save, until)) {
200002e2:	68fb      	ldr	r3, [r7, #12]
200002e4:	681b      	ldr	r3, [r3, #0]
200002e6:	623b      	str	r3, [r7, #32]
200002e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
200002ea:	61fb      	str	r3, [r7, #28]
200002ec:	6a3b      	ldr	r3, [r7, #32]
200002ee:	61bb      	str	r3, [r7, #24]
    SW_SPIN_LOCK_UNLOCK(lock);
200002f0:	2300      	movs	r3, #0
200002f2:	617b      	str	r3, [r7, #20]
200002f4:	697b      	ldr	r3, [r7, #20]
200002f6:	69ba      	ldr	r2, [r7, #24]
200002f8:	e8c2 3f8f 	stlb	r3, [r2]
}
200002fc:	bf00      	nop
200002fe:	69fb      	ldr	r3, [r7, #28]
20000300:	613b      	str	r3, [r7, #16]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
20000302:	693b      	ldr	r3, [r7, #16]
20000304:	f383 8810 	msr	PRIMASK, r3
}
20000308:	bf00      	nop
}
2000030a:	bf00      	nop
2000030c:	e9d7 0100 	ldrd	r0, r1, [r7]
20000310:	f001 f8d2 	bl	200014b8 <__best_effort_wfe_or_timeout_veneer>
20000314:	4603      	mov	r3, r0
20000316:	2b00      	cmp	r3, #0
20000318:	d0a5      	beq.n	20000266 <mutex_enter_block_until+0x2a>
                // timed out
                return false;
2000031a:	2300      	movs	r3, #0
            }
            // not timed out; spin lock already unlocked, so loop again
        }
    } while (true);
}
2000031c:	4618      	mov	r0, r3
2000031e:	3758      	adds	r7, #88	@ 0x58
20000320:	46bd      	mov	sp, r7
20000322:	bd80      	pop	{r7, pc}
20000324:	1000b54c 	.word	0x1000b54c
20000328:	1000b5ac 	.word	0x1000b5ac
2000032c:	1000b508 	.word	0x1000b508

20000330 <mutex_exit>:
            // not timed out; spin lock already unlocked, so loop again
        }
    } while (true);
}

void __time_critical_func(mutex_exit)(mutex_t *mtx) {
20000330:	b580      	push	{r7, lr}
20000332:	b08e      	sub	sp, #56	@ 0x38
20000334:	af00      	add	r7, sp, #0
20000336:	6078      	str	r0, [r7, #4]
    if (mtx->recursive) {
        recursive_mutex_exit(mtx);
        return;
    }
#endif
    uint32_t save = spin_lock_blocking(mtx->core.spin_lock);
20000338:	687b      	ldr	r3, [r7, #4]
2000033a:	681b      	ldr	r3, [r3, #0]
2000033c:	633b      	str	r3, [r7, #48]	@ 0x30
    pico_default_asm_volatile (
2000033e:	f3ef 8310 	mrs	r3, PRIMASK
20000342:	b672      	cpsid	i
20000344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return status;
20000346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    uint32_t save = save_and_disable_interrupts();
20000348:	62bb      	str	r3, [r7, #40]	@ 0x28
2000034a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2000034c:	627b      	str	r3, [r7, #36]	@ 0x24
    SW_SPIN_LOCK_LOCK(lock);
2000034e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
20000350:	e8d1 3fcf 	ldaexb	r3, [r1]
20000354:	2201      	movs	r2, #1
20000356:	2b00      	cmp	r3, #0
20000358:	d1fa      	bne.n	20000350 <mutex_exit+0x20>
2000035a:	e8c1 2f43 	strexb	r3, r2, [r1]
2000035e:	2b00      	cmp	r3, #0
20000360:	d1f6      	bne.n	20000350 <mutex_exit+0x20>
20000362:	623a      	str	r2, [r7, #32]
20000364:	61fb      	str	r3, [r7, #28]
    pico_default_asm_volatile ("dmb" : : : "memory");
20000366:	f3bf 8f5f 	dmb	sy
}
2000036a:	bf00      	nop
}
2000036c:	bf00      	nop
}
2000036e:	bf00      	nop
    return save;
20000370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20000372:	637b      	str	r3, [r7, #52]	@ 0x34
    assert(lock_is_owner_id_valid(mtx->owner));
20000374:	687b      	ldr	r3, [r7, #4]
20000376:	f993 3004 	ldrsb.w	r3, [r3, #4]
2000037a:	2b00      	cmp	r3, #0
2000037c:	da05      	bge.n	2000038a <mutex_exit+0x5a>
2000037e:	4b12      	ldr	r3, [pc, #72]	@ (200003c8 <mutex_exit+0x98>)
20000380:	4a12      	ldr	r2, [pc, #72]	@ (200003cc <mutex_exit+0x9c>)
20000382:	21d5      	movs	r1, #213	@ 0xd5
20000384:	4812      	ldr	r0, [pc, #72]	@ (200003d0 <mutex_exit+0xa0>)
20000386:	f001 f8b7 	bl	200014f8 <____assert_func_veneer>
    mtx->owner = LOCK_INVALID_OWNER_ID;
2000038a:	687b      	ldr	r3, [r7, #4]
2000038c:	22ff      	movs	r2, #255	@ 0xff
2000038e:	711a      	strb	r2, [r3, #4]
    lock_internal_spin_unlock_with_notify(&mtx->core, save);
20000390:	687b      	ldr	r3, [r7, #4]
20000392:	681b      	ldr	r3, [r3, #0]
20000394:	61bb      	str	r3, [r7, #24]
20000396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
20000398:	617b      	str	r3, [r7, #20]
2000039a:	69bb      	ldr	r3, [r7, #24]
2000039c:	613b      	str	r3, [r7, #16]
    SW_SPIN_LOCK_UNLOCK(lock);
2000039e:	2300      	movs	r3, #0
200003a0:	60fb      	str	r3, [r7, #12]
200003a2:	68fb      	ldr	r3, [r7, #12]
200003a4:	693a      	ldr	r2, [r7, #16]
200003a6:	e8c2 3f8f 	stlb	r3, [r2]
}
200003aa:	bf00      	nop
200003ac:	697b      	ldr	r3, [r7, #20]
200003ae:	60bb      	str	r3, [r7, #8]
    pico_default_asm_volatile ("msr PRIMASK,%0"::"r" (status) : "memory" );
200003b0:	68bb      	ldr	r3, [r7, #8]
200003b2:	f383 8810 	msr	PRIMASK, r3
}
200003b6:	bf00      	nop
}
200003b8:	bf00      	nop
    pico_default_asm_volatile ("sev");
200003ba:	bf40      	sev
}
200003bc:	bf00      	nop
}
200003be:	bf00      	nop
200003c0:	3738      	adds	r7, #56	@ 0x38
200003c2:	46bd      	mov	sp, r7
200003c4:	bd80      	pop	{r7, pc}
200003c6:	bf00      	nop
200003c8:	1000b560 	.word	0x1000b560
200003cc:	1000b5c4 	.word	0x1000b5c4
200003d0:	1000b508 	.word	0x1000b508

200003d4 <hw_handle_buff_status>:
static void __tusb_irq_path_func(hw_handle_buff_status)(void) {
200003d4:	b580      	push	{r7, lr}
200003d6:	b08c      	sub	sp, #48	@ 0x30
200003d8:	af00      	add	r7, sp, #0
  uint32_t remaining_buffers = usb_hw->buf_status;
200003da:	4b38      	ldr	r3, [pc, #224]	@ (200004bc <hw_handle_buff_status+0xe8>)
200003dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
200003de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint bit = 1u;
200003e0:	2301      	movs	r3, #1
200003e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint8_t i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++) {
200003e4:	2300      	movs	r3, #0
200003e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
200003ea:	e05b      	b.n	200004a4 <hw_handle_buff_status+0xd0>
    if (remaining_buffers & bit) {
200003ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
200003ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200003f0:	4013      	ands	r3, r2
200003f2:	2b00      	cmp	r3, #0
200003f4:	d04e      	beq.n	20000494 <hw_handle_buff_status+0xc0>
      usb_hw_clear->buf_status = bit;
200003f6:	4a32      	ldr	r2, [pc, #200]	@ (200004c0 <hw_handle_buff_status+0xec>)
200003f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
200003fa:	6593      	str	r3, [r2, #88]	@ 0x58
      struct hw_endpoint* ep = hw_endpoint_get_by_num(i >> 1u, (i & 1u) ? TUSB_DIR_OUT : TUSB_DIR_IN);
200003fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
20000400:	085b      	lsrs	r3, r3, #1
20000402:	b2da      	uxtb	r2, r3
20000404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
20000408:	f003 0301 	and.w	r3, r3, #1
2000040c:	2b00      	cmp	r3, #0
2000040e:	bf0c      	ite	eq
20000410:	2301      	moveq	r3, #1
20000412:	2300      	movne	r3, #0
20000414:	b2db      	uxtb	r3, r3
20000416:	4619      	mov	r1, r3
20000418:	4613      	mov	r3, r2
2000041a:	77bb      	strb	r3, [r7, #30]
2000041c:	460b      	mov	r3, r1
2000041e:	777b      	strb	r3, [r7, #29]
  return &hw_endpoints[num][dir];
20000420:	7fba      	ldrb	r2, [r7, #30]
20000422:	7f7b      	ldrb	r3, [r7, #29]
20000424:	0052      	lsls	r2, r2, #1
20000426:	4413      	add	r3, r2
20000428:	015b      	lsls	r3, r3, #5
2000042a:	4a26      	ldr	r2, [pc, #152]	@ (200004c4 <hw_handle_buff_status+0xf0>)
2000042c:	4413      	add	r3, r2
      struct hw_endpoint* ep = hw_endpoint_get_by_num(i >> 1u, (i & 1u) ? TUSB_DIR_OUT : TUSB_DIR_IN);
2000042e:	623b      	str	r3, [r7, #32]
      bool done = hw_endpoint_xfer_continue(ep);
20000430:	6a38      	ldr	r0, [r7, #32]
20000432:	f000 fc2f 	bl	20000c94 <hw_endpoint_xfer_continue>
20000436:	4603      	mov	r3, r0
20000438:	77fb      	strb	r3, [r7, #31]
      if (done) {
2000043a:	7ffb      	ldrb	r3, [r7, #31]
2000043c:	2b00      	cmp	r3, #0
2000043e:	d024      	beq.n	2000048a <hw_handle_buff_status+0xb6>
        dcd_event_xfer_complete(0, ep->ep_addr, ep->xferred_len, XFER_RESULT_SUCCESS, true);
20000440:	6a3b      	ldr	r3, [r7, #32]
20000442:	789a      	ldrb	r2, [r3, #2]
20000444:	6a3b      	ldr	r3, [r7, #32]
20000446:	8adb      	ldrh	r3, [r3, #22]
20000448:	2100      	movs	r1, #0
2000044a:	7739      	strb	r1, [r7, #28]
2000044c:	76fa      	strb	r2, [r7, #27]
2000044e:	617b      	str	r3, [r7, #20]
20000450:	2300      	movs	r3, #0
20000452:	74fb      	strb	r3, [r7, #19]
20000454:	2301      	movs	r3, #1
20000456:	74bb      	strb	r3, [r7, #18]
  dcd_event_handler(&event, in_isr);
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
20000458:	1d3b      	adds	r3, r7, #4
2000045a:	2200      	movs	r2, #0
2000045c:	601a      	str	r2, [r3, #0]
2000045e:	605a      	str	r2, [r3, #4]
20000460:	609a      	str	r2, [r3, #8]
20000462:	7f3b      	ldrb	r3, [r7, #28]
20000464:	713b      	strb	r3, [r7, #4]
20000466:	2307      	movs	r3, #7
20000468:	717b      	strb	r3, [r7, #5]

  event.xfer_complete.ep_addr = ep_addr;
2000046a:	7efb      	ldrb	r3, [r7, #27]
2000046c:	723b      	strb	r3, [r7, #8]
  event.xfer_complete.len     = xferred_bytes;
2000046e:	697b      	ldr	r3, [r7, #20]
20000470:	60fb      	str	r3, [r7, #12]
  event.xfer_complete.result  = result;
20000472:	7cfb      	ldrb	r3, [r7, #19]
20000474:	727b      	strb	r3, [r7, #9]

  dcd_event_handler(&event, in_isr);
20000476:	7cba      	ldrb	r2, [r7, #18]
20000478:	1d3b      	adds	r3, r7, #4
2000047a:	4611      	mov	r1, r2
2000047c:	4618      	mov	r0, r3
2000047e:	f000 fc9d 	bl	20000dbc <dcd_event_handler>
}
20000482:	bf00      	nop
        hw_endpoint_reset_transfer(ep);
20000484:	6a38      	ldr	r0, [r7, #32]
20000486:	f000 fa3f 	bl	20000908 <hw_endpoint_reset_transfer>
      remaining_buffers &= ~bit;
2000048a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2000048c:	43db      	mvns	r3, r3
2000048e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
20000490:	4013      	ands	r3, r2
20000492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    bit <<= 1u;
20000494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
20000496:	005b      	lsls	r3, r3, #1
20000498:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint8_t i = 0; remaining_buffers && i < USB_MAX_ENDPOINTS * 2; i++) {
2000049a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2000049e:	3301      	adds	r3, #1
200004a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
200004a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200004a6:	2b00      	cmp	r3, #0
200004a8:	d003      	beq.n	200004b2 <hw_handle_buff_status+0xde>
200004aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
200004ae:	2b1f      	cmp	r3, #31
200004b0:	d99c      	bls.n	200003ec <hw_handle_buff_status+0x18>
}
200004b2:	bf00      	nop
200004b4:	3730      	adds	r7, #48	@ 0x30
200004b6:	46bd      	mov	sp, r7
200004b8:	bd80      	pop	{r7, pc}
200004ba:	bf00      	nop
200004bc:	50110000 	.word	0x50110000
200004c0:	50113000 	.word	0x50113000
200004c4:	20002110 	.word	0x20002110

200004c8 <reset_non_control_endpoints>:
static void __tusb_irq_path_func(reset_non_control_endpoints)(void) {
200004c8:	b580      	push	{r7, lr}
200004ca:	b082      	sub	sp, #8
200004cc:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < USB_MAX_ENDPOINTS - 1; i++) {
200004ce:	2300      	movs	r3, #0
200004d0:	71fb      	strb	r3, [r7, #7]
200004d2:	e00f      	b.n	200004f4 <reset_non_control_endpoints+0x2c>
    usb_dpram->ep_ctrl[i].in = 0;
200004d4:	4a0f      	ldr	r2, [pc, #60]	@ (20000514 <reset_non_control_endpoints+0x4c>)
200004d6:	79fb      	ldrb	r3, [r7, #7]
200004d8:	3301      	adds	r3, #1
200004da:	2100      	movs	r1, #0
200004dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    usb_dpram->ep_ctrl[i].out = 0;
200004e0:	4a0c      	ldr	r2, [pc, #48]	@ (20000514 <reset_non_control_endpoints+0x4c>)
200004e2:	79fb      	ldrb	r3, [r7, #7]
200004e4:	3301      	adds	r3, #1
200004e6:	00db      	lsls	r3, r3, #3
200004e8:	4413      	add	r3, r2
200004ea:	2200      	movs	r2, #0
200004ec:	605a      	str	r2, [r3, #4]
  for (uint8_t i = 0; i < USB_MAX_ENDPOINTS - 1; i++) {
200004ee:	79fb      	ldrb	r3, [r7, #7]
200004f0:	3301      	adds	r3, #1
200004f2:	71fb      	strb	r3, [r7, #7]
200004f4:	79fb      	ldrb	r3, [r7, #7]
200004f6:	2b0e      	cmp	r3, #14
200004f8:	d9ec      	bls.n	200004d4 <reset_non_control_endpoints+0xc>
  tu_memclr(hw_endpoints[1], sizeof(hw_endpoints) - 2 * sizeof(hw_endpoint_t));
200004fa:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
200004fe:	2100      	movs	r1, #0
20000500:	4805      	ldr	r0, [pc, #20]	@ (20000518 <reset_non_control_endpoints+0x50>)
20000502:	f000 ffe1 	bl	200014c8 <__memset_veneer>
  next_buffer_ptr = &usb_dpram->epx_data[0];
20000506:	4b05      	ldr	r3, [pc, #20]	@ (2000051c <reset_non_control_endpoints+0x54>)
20000508:	4a05      	ldr	r2, [pc, #20]	@ (20000520 <reset_non_control_endpoints+0x58>)
2000050a:	601a      	str	r2, [r3, #0]
}
2000050c:	bf00      	nop
2000050e:	3708      	adds	r7, #8
20000510:	46bd      	mov	sp, r7
20000512:	bd80      	pop	{r7, pc}
20000514:	50100000 	.word	0x50100000
20000518:	20002150 	.word	0x20002150
2000051c:	20002514 	.word	0x20002514
20000520:	50100180 	.word	0x50100180

20000524 <dcd_rp2040_irq>:
static void __tusb_irq_path_func(dcd_rp2040_irq)(void) {
20000524:	b580      	push	{r7, lr}
20000526:	b0a6      	sub	sp, #152	@ 0x98
20000528:	af00      	add	r7, sp, #0
  uint32_t const status = usb_hw->ints;
2000052a:	4b6a      	ldr	r3, [pc, #424]	@ (200006d4 <dcd_rp2040_irq+0x1b0>)
2000052c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
20000530:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t handled = 0;
20000534:	2300      	movs	r3, #0
20000536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (status & USB_INTF_DEV_SOF_BITS) {
2000053a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
2000053e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
20000542:	2b00      	cmp	r3, #0
20000544:	f000 8088 	beq.w	20000658 <dcd_rp2040_irq+0x134>
    bool keep_sof_alive = false;
20000548:	2300      	movs	r3, #0
2000054a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    handled |= USB_INTF_DEV_SOF_BITS;
2000054e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
20000552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
20000556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    e15_last_sof = time_us_32();
2000055a:	f000 ffc9 	bl	200014f0 <__time_us_32_veneer>
2000055e:	4603      	mov	r3, r0
20000560:	4a5d      	ldr	r2, [pc, #372]	@ (200006d8 <dcd_rp2040_irq+0x1b4>)
20000562:	6013      	str	r3, [r2, #0]
    for (uint8_t i = 0; i < USB_MAX_ENDPOINTS; i++) {
20000564:	2300      	movs	r3, #0
20000566:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
2000056a:	e03d      	b.n	200005e8 <dcd_rp2040_irq+0xc4>
2000056c:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
20000570:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
20000574:	2301      	movs	r3, #1
20000576:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  return &hw_endpoints[num][dir];
2000057a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
2000057e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
20000582:	0052      	lsls	r2, r2, #1
20000584:	4413      	add	r3, r2
20000586:	015b      	lsls	r3, r3, #5
20000588:	4a54      	ldr	r2, [pc, #336]	@ (200006dc <dcd_rp2040_irq+0x1b8>)
2000058a:	4413      	add	r3, r2
      struct hw_endpoint* ep = hw_endpoint_get_by_num(i, TUSB_DIR_IN);
2000058c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      if ((ep->transfer_type == TUSB_XFER_BULK) && ep->active) {
20000590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
20000594:	7edb      	ldrb	r3, [r3, #27]
20000596:	2b02      	cmp	r3, #2
20000598:	d121      	bne.n	200005de <dcd_rp2040_irq+0xba>
2000059a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
2000059e:	7e9b      	ldrb	r3, [r3, #26]
200005a0:	2b00      	cmp	r3, #0
200005a2:	d01c      	beq.n	200005de <dcd_rp2040_irq+0xba>
        keep_sof_alive = true;
200005a4:	2301      	movs	r3, #1
200005a6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
200005aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
200005ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
200005b0:	2301      	movs	r3, #1
200005b2:	67bb      	str	r3, [r7, #120]	@ 0x78
200005b4:	bf00      	nop
        if (ep->pending) {
200005b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
200005ba:	7f1b      	ldrb	r3, [r3, #28]
200005bc:	2b00      	cmp	r3, #0
200005be:	d007      	beq.n	200005d0 <dcd_rp2040_irq+0xac>
          ep->pending = 0;
200005c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
200005c4:	2200      	movs	r2, #0
200005c6:	771a      	strb	r2, [r3, #28]
          hw_endpoint_start_next_buffer(ep);
200005c8:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
200005cc:	f000 fa60 	bl	20000a90 <hw_endpoint_start_next_buffer>
200005d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
200005d4:	677b      	str	r3, [r7, #116]	@ 0x74
200005d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
200005da:	673b      	str	r3, [r7, #112]	@ 0x70
200005dc:	bf00      	nop
    for (uint8_t i = 0; i < USB_MAX_ENDPOINTS; i++) {
200005de:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
200005e2:	3301      	adds	r3, #1
200005e4:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
200005e8:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
200005ec:	2b0f      	cmp	r3, #15
200005ee:	d9bd      	bls.n	2000056c <dcd_rp2040_irq+0x48>
    if (!keep_sof_alive && !_sof_enable) usb_hw_clear->inte = USB_INTS_DEV_SOF_BITS;
200005f0:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
200005f4:	f083 0301 	eor.w	r3, r3, #1
200005f8:	b2db      	uxtb	r3, r3
200005fa:	2b00      	cmp	r3, #0
200005fc:	d00b      	beq.n	20000616 <dcd_rp2040_irq+0xf2>
200005fe:	4b38      	ldr	r3, [pc, #224]	@ (200006e0 <dcd_rp2040_irq+0x1bc>)
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	f083 0301 	eor.w	r3, r3, #1
20000606:	b2db      	uxtb	r3, r3
20000608:	2b00      	cmp	r3, #0
2000060a:	d004      	beq.n	20000616 <dcd_rp2040_irq+0xf2>
2000060c:	4b35      	ldr	r3, [pc, #212]	@ (200006e4 <dcd_rp2040_irq+0x1c0>)
2000060e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
20000612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    dcd_event_sof(0, usb_hw->sof_rd & USB_SOF_RD_BITS, true);
20000616:	4b2f      	ldr	r3, [pc, #188]	@ (200006d4 <dcd_rp2040_irq+0x1b0>)
20000618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2000061a:	f3c3 030a 	ubfx	r3, r3, #0, #11
2000061e:	2200      	movs	r2, #0
20000620:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
20000624:	66bb      	str	r3, [r7, #104]	@ 0x68
20000626:	2301      	movs	r3, #1
20000628:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
2000062c:	f107 0310 	add.w	r3, r7, #16
20000630:	2200      	movs	r2, #0
20000632:	601a      	str	r2, [r3, #0]
20000634:	605a      	str	r2, [r3, #4]
20000636:	609a      	str	r2, [r3, #8]
20000638:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
2000063c:	743b      	strb	r3, [r7, #16]
2000063e:	2303      	movs	r3, #3
20000640:	747b      	strb	r3, [r7, #17]
  event.sof.frame_count = frame_count;
20000642:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
20000644:	617b      	str	r3, [r7, #20]
  dcd_event_handler(&event, in_isr);
20000646:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
2000064a:	f107 0310 	add.w	r3, r7, #16
2000064e:	4611      	mov	r1, r2
20000650:	4618      	mov	r0, r3
20000652:	f000 fbb3 	bl	20000dbc <dcd_event_handler>
}
20000656:	bf00      	nop
  if (status & USB_INTS_BUFF_STATUS_BITS) {
20000658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
2000065c:	f003 0310 	and.w	r3, r3, #16
20000660:	2b00      	cmp	r3, #0
20000662:	d007      	beq.n	20000674 <dcd_rp2040_irq+0x150>
    handled |= USB_INTS_BUFF_STATUS_BITS;
20000664:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
20000668:	f043 0310 	orr.w	r3, r3, #16
2000066c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    hw_handle_buff_status();
20000670:	f7ff feb0 	bl	200003d4 <hw_handle_buff_status>
  if (status & USB_INTS_SETUP_REQ_BITS) {
20000674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2000067c:	2b00      	cmp	r3, #0
2000067e:	f000 8092 	beq.w	200007a6 <dcd_rp2040_irq+0x282>
    handled |= USB_INTS_SETUP_REQ_BITS;
20000682:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
20000686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2000068a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t const* setup = remove_volatile_cast(uint8_t const*, &usb_dpram->setup_packet);
2000068e:	4b16      	ldr	r3, [pc, #88]	@ (200006e8 <dcd_rp2040_irq+0x1c4>)
20000690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  for (uint8_t dir = 0; dir < 2; dir++) {
20000694:	2300      	movs	r3, #0
20000696:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
2000069a:	e05a      	b.n	20000752 <dcd_rp2040_irq+0x22e>
2000069c:	2300      	movs	r3, #0
2000069e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
200006a2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
200006a6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  return &hw_endpoints[num][dir];
200006aa:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
200006ae:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
200006b2:	0052      	lsls	r2, r2, #1
200006b4:	4413      	add	r3, r2
200006b6:	015b      	lsls	r3, r3, #5
200006b8:	4a08      	ldr	r2, [pc, #32]	@ (200006dc <dcd_rp2040_irq+0x1b8>)
200006ba:	4413      	add	r3, r2
    struct hw_endpoint* ep = hw_endpoint_get_by_num(0, dir);
200006bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (ep->active) {
200006be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
200006c0:	7e9b      	ldrb	r3, [r3, #26]
200006c2:	2b00      	cmp	r3, #0
200006c4:	d03d      	beq.n	20000742 <dcd_rp2040_irq+0x21e>
      uint32_t const abort_mask = (dir ? USB_EP_ABORT_EP0_IN_BITS : USB_EP_ABORT_EP0_OUT_BITS);
200006c6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
200006ca:	2b00      	cmp	r3, #0
200006cc:	d00e      	beq.n	200006ec <dcd_rp2040_irq+0x1c8>
200006ce:	2301      	movs	r3, #1
200006d0:	e00d      	b.n	200006ee <dcd_rp2040_irq+0x1ca>
200006d2:	bf00      	nop
200006d4:	50110000 	.word	0x50110000
200006d8:	20002108 	.word	0x20002108
200006dc:	20002110 	.word	0x20002110
200006e0:	20002582 	.word	0x20002582
200006e4:	50113000 	.word	0x50113000
200006e8:	50100000 	.word	0x50100000
200006ec:	2302      	movs	r3, #2
200006ee:	657b      	str	r3, [r7, #84]	@ 0x54
      if (rp2040_chip_version() >= 2) {
200006f0:	f000 fef6 	bl	200014e0 <__rp2040_chip_version_veneer>
200006f4:	4603      	mov	r3, r0
200006f6:	2b01      	cmp	r3, #1
200006f8:	d90a      	bls.n	20000710 <dcd_rp2040_irq+0x1ec>
        usb_hw_set->abort = abort_mask;
200006fa:	4a7f      	ldr	r2, [pc, #508]	@ (200008f8 <dcd_rp2040_irq+0x3d4>)
200006fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
200006fe:	6613      	str	r3, [r2, #96]	@ 0x60
        while ((usb_hw->abort_done & abort_mask) != abort_mask) {}
20000700:	bf00      	nop
20000702:	4b7e      	ldr	r3, [pc, #504]	@ (200008fc <dcd_rp2040_irq+0x3d8>)
20000704:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
20000706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000708:	4013      	ands	r3, r2
2000070a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
2000070c:	429a      	cmp	r2, r3
2000070e:	d1f8      	bne.n	20000702 <dcd_rp2040_irq+0x1de>
20000710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20000712:	653b      	str	r3, [r7, #80]	@ 0x50
20000714:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
20000718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  _hw_endpoint_buffer_control_update32(ep, 0, value);
2000071a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
2000071c:	2100      	movs	r1, #0
2000071e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
20000720:	f000 f908 	bl	20000934 <_hw_endpoint_buffer_control_update32>
}
20000724:	bf00      	nop
      hw_endpoint_reset_transfer(ep);
20000726:	6db8      	ldr	r0, [r7, #88]	@ 0x58
20000728:	f000 f8ee 	bl	20000908 <hw_endpoint_reset_transfer>
      if (rp2040_chip_version() >= 2) {
2000072c:	f000 fed8 	bl	200014e0 <__rp2040_chip_version_veneer>
20000730:	4603      	mov	r3, r0
20000732:	2b01      	cmp	r3, #1
20000734:	d905      	bls.n	20000742 <dcd_rp2040_irq+0x21e>
        usb_hw_clear->abort_done = abort_mask;
20000736:	4a72      	ldr	r2, [pc, #456]	@ (20000900 <dcd_rp2040_irq+0x3dc>)
20000738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
2000073a:	6653      	str	r3, [r2, #100]	@ 0x64
        usb_hw_clear->abort = abort_mask;
2000073c:	4a70      	ldr	r2, [pc, #448]	@ (20000900 <dcd_rp2040_irq+0x3dc>)
2000073e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
20000740:	6613      	str	r3, [r2, #96]	@ 0x60
    ep->next_pid = 1u;
20000742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20000744:	2201      	movs	r2, #1
20000746:	70da      	strb	r2, [r3, #3]
  for (uint8_t dir = 0; dir < 2; dir++) {
20000748:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
2000074c:	3301      	adds	r3, #1
2000074e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
20000752:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
20000756:	2b01      	cmp	r3, #1
20000758:	d9a0      	bls.n	2000069c <dcd_rp2040_irq+0x178>
}
2000075a:	bf00      	nop
2000075c:	2300      	movs	r3, #0
2000075e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
20000762:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
20000766:	663b      	str	r3, [r7, #96]	@ 0x60
20000768:	2301      	movs	r3, #1
2000076a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
2000076e:	1d3b      	adds	r3, r7, #4
20000770:	2200      	movs	r2, #0
20000772:	601a      	str	r2, [r3, #0]
20000774:	605a      	str	r2, [r3, #4]
20000776:	609a      	str	r2, [r3, #8]
20000778:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
2000077c:	713b      	strb	r3, [r7, #4]
2000077e:	2306      	movs	r3, #6
20000780:	717b      	strb	r3, [r7, #5]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
20000782:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
20000784:	f107 0308 	add.w	r3, r7, #8
20000788:	6810      	ldr	r0, [r2, #0]
2000078a:	6851      	ldr	r1, [r2, #4]
2000078c:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
2000078e:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
20000792:	1d3b      	adds	r3, r7, #4
20000794:	4611      	mov	r1, r2
20000796:	4618      	mov	r0, r3
20000798:	f000 fb10 	bl	20000dbc <dcd_event_handler>
}
2000079c:	bf00      	nop
    usb_hw_clear->sie_status = USB_SIE_STATUS_SETUP_REC_BITS;
2000079e:	4b58      	ldr	r3, [pc, #352]	@ (20000900 <dcd_rp2040_irq+0x3dc>)
200007a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
200007a4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (status & USB_INTS_BUS_RESET_BITS) {
200007a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
200007aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
200007ae:	2b00      	cmp	r3, #0
200007b0:	d02f      	beq.n	20000812 <dcd_rp2040_irq+0x2ee>
    handled |= USB_INTS_BUS_RESET_BITS;
200007b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
200007b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
200007ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    usb_hw->dev_addr_ctrl = 0;
200007be:	4b4f      	ldr	r3, [pc, #316]	@ (200008fc <dcd_rp2040_irq+0x3d8>)
200007c0:	2200      	movs	r2, #0
200007c2:	601a      	str	r2, [r3, #0]
    reset_non_control_endpoints();
200007c4:	f7ff fe80 	bl	200004c8 <reset_non_control_endpoints>
200007c8:	2300      	movs	r3, #0
200007ca:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
200007ce:	2300      	movs	r3, #0
200007d0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
200007d4:	2301      	movs	r3, #1
200007d6:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
200007da:	f107 031c 	add.w	r3, r7, #28
200007de:	2200      	movs	r2, #0
200007e0:	601a      	str	r2, [r3, #0]
200007e2:	605a      	str	r2, [r3, #4]
200007e4:	609a      	str	r2, [r3, #8]
200007e6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
200007ea:	773b      	strb	r3, [r7, #28]
200007ec:	2301      	movs	r3, #1
200007ee:	777b      	strb	r3, [r7, #29]
  event.bus_reset.speed = speed;
200007f0:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
200007f4:	f887 3020 	strb.w	r3, [r7, #32]
  dcd_event_handler(&event, in_isr);
200007f8:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
200007fc:	f107 031c 	add.w	r3, r7, #28
20000800:	4611      	mov	r1, r2
20000802:	4618      	mov	r0, r3
20000804:	f000 fada 	bl	20000dbc <dcd_event_handler>
}
20000808:	bf00      	nop
    usb_hw_clear->sie_status = USB_SIE_STATUS_BUS_RESET_BITS;
2000080a:	4b3d      	ldr	r3, [pc, #244]	@ (20000900 <dcd_rp2040_irq+0x3dc>)
2000080c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
20000810:	651a      	str	r2, [r3, #80]	@ 0x50
  if (status & USB_INTS_DEV_SUSPEND_BITS) {
20000812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
2000081a:	2b00      	cmp	r3, #0
2000081c:	d028      	beq.n	20000870 <dcd_rp2040_irq+0x34c>
    handled |= USB_INTS_DEV_SUSPEND_BITS;
2000081e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
20000822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20000826:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
2000082a:	2300      	movs	r3, #0
2000082c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
20000830:	2304      	movs	r3, #4
20000832:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
20000836:	2301      	movs	r3, #1
20000838:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
2000083c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
20000840:	2200      	movs	r2, #0
20000842:	601a      	str	r2, [r3, #0]
20000844:	605a      	str	r2, [r3, #4]
20000846:	609a      	str	r2, [r3, #8]
20000848:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
2000084c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
20000850:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
20000854:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  dcd_event_handler(&event, in_isr);
20000858:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
2000085c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
20000860:	4611      	mov	r1, r2
20000862:	4618      	mov	r0, r3
20000864:	f000 faaa 	bl	20000dbc <dcd_event_handler>
}
20000868:	bf00      	nop
    usb_hw_clear->sie_status = USB_SIE_STATUS_SUSPENDED_BITS;
2000086a:	4b25      	ldr	r3, [pc, #148]	@ (20000900 <dcd_rp2040_irq+0x3dc>)
2000086c:	2210      	movs	r2, #16
2000086e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (status & USB_INTS_DEV_RESUME_FROM_HOST_BITS) {
20000870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
20000874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20000878:	2b00      	cmp	r3, #0
2000087a:	d029      	beq.n	200008d0 <dcd_rp2040_irq+0x3ac>
    handled |= USB_INTS_DEV_RESUME_FROM_HOST_BITS;
2000087c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
20000880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20000884:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
20000888:	2300      	movs	r3, #0
2000088a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
2000088e:	2305      	movs	r3, #5
20000890:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
20000894:	2301      	movs	r3, #1
20000896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
2000089a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
2000089e:	2200      	movs	r2, #0
200008a0:	601a      	str	r2, [r3, #0]
200008a2:	605a      	str	r2, [r3, #4]
200008a4:	609a      	str	r2, [r3, #8]
200008a6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
200008aa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
200008ae:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
200008b2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  dcd_event_handler(&event, in_isr);
200008b6:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
200008ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
200008be:	4611      	mov	r1, r2
200008c0:	4618      	mov	r0, r3
200008c2:	f000 fa7b 	bl	20000dbc <dcd_event_handler>
}
200008c6:	bf00      	nop
    usb_hw_clear->sie_status = USB_SIE_STATUS_RESUME_BITS;
200008c8:	4b0d      	ldr	r3, [pc, #52]	@ (20000900 <dcd_rp2040_irq+0x3dc>)
200008ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
200008ce:	651a      	str	r2, [r3, #80]	@ 0x50
  if (status ^ handled) {
200008d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
200008d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
200008d8:	429a      	cmp	r2, r3
200008da:	d008      	beq.n	200008ee <dcd_rp2040_irq+0x3ca>
    panic("Unhandled IRQ 0x%x\n", (uint) (status ^ handled));
200008dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
200008e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
200008e4:	4053      	eors	r3, r2
200008e6:	4619      	mov	r1, r3
200008e8:	4806      	ldr	r0, [pc, #24]	@ (20000904 <dcd_rp2040_irq+0x3e0>)
200008ea:	f000 fe09 	bl	20001500 <__panic_veneer>
}
200008ee:	bf00      	nop
200008f0:	3798      	adds	r7, #152	@ 0x98
200008f2:	46bd      	mov	sp, r7
200008f4:	bd80      	pop	{r7, pc}
200008f6:	bf00      	nop
200008f8:	50112000 	.word	0x50112000
200008fc:	50110000 	.word	0x50110000
20000900:	50113000 	.word	0x50113000
20000904:	1000bda0 	.word	0x1000bda0

20000908 <hw_endpoint_reset_transfer>:
void __tusb_irq_path_func(hw_endpoint_reset_transfer)(struct hw_endpoint* ep) {
20000908:	b480      	push	{r7}
2000090a:	b083      	sub	sp, #12
2000090c:	af00      	add	r7, sp, #0
2000090e:	6078      	str	r0, [r7, #4]
  ep->active = false;
20000910:	687b      	ldr	r3, [r7, #4]
20000912:	2200      	movs	r2, #0
20000914:	769a      	strb	r2, [r3, #26]
  ep->remaining_len = 0;
20000916:	687b      	ldr	r3, [r7, #4]
20000918:	2200      	movs	r2, #0
2000091a:	829a      	strh	r2, [r3, #20]
  ep->xferred_len = 0;
2000091c:	687b      	ldr	r3, [r7, #4]
2000091e:	2200      	movs	r2, #0
20000920:	82da      	strh	r2, [r3, #22]
  ep->user_buf = 0;
20000922:	687b      	ldr	r3, [r7, #4]
20000924:	2200      	movs	r2, #0
20000926:	611a      	str	r2, [r3, #16]
}
20000928:	bf00      	nop
2000092a:	370c      	adds	r7, #12
2000092c:	46bd      	mov	sp, r7
2000092e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000932:	4770      	bx	lr

20000934 <_hw_endpoint_buffer_control_update32>:
                                                               uint32_t or_mask) {
20000934:	b580      	push	{r7, lr}
20000936:	b086      	sub	sp, #24
20000938:	af00      	add	r7, sp, #0
2000093a:	60f8      	str	r0, [r7, #12]
2000093c:	60b9      	str	r1, [r7, #8]
2000093e:	607a      	str	r2, [r7, #4]
  uint32_t value = 0;
20000940:	2300      	movs	r3, #0
20000942:	617b      	str	r3, [r7, #20]
  if (and_mask) {
20000944:	68bb      	ldr	r3, [r7, #8]
20000946:	2b00      	cmp	r3, #0
20000948:	d005      	beq.n	20000956 <_hw_endpoint_buffer_control_update32+0x22>
    value = *ep->buffer_control & and_mask;
2000094a:	68fb      	ldr	r3, [r7, #12]
2000094c:	689b      	ldr	r3, [r3, #8]
2000094e:	681b      	ldr	r3, [r3, #0]
20000950:	68ba      	ldr	r2, [r7, #8]
20000952:	4013      	ands	r3, r2
20000954:	617b      	str	r3, [r7, #20]
  if (or_mask) {
20000956:	687b      	ldr	r3, [r7, #4]
20000958:	2b00      	cmp	r3, #0
2000095a:	d02c      	beq.n	200009b6 <_hw_endpoint_buffer_control_update32+0x82>
    value |= or_mask;
2000095c:	697a      	ldr	r2, [r7, #20]
2000095e:	687b      	ldr	r3, [r7, #4]
20000960:	4313      	orrs	r3, r2
20000962:	617b      	str	r3, [r7, #20]
    if (or_mask & USB_BUF_CTRL_AVAIL) {
20000964:	687b      	ldr	r3, [r7, #4]
20000966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
2000096a:	2b00      	cmp	r3, #0
2000096c:	d023      	beq.n	200009b6 <_hw_endpoint_buffer_control_update32+0x82>
      if (*ep->buffer_control & USB_BUF_CTRL_AVAIL) {
2000096e:	68fb      	ldr	r3, [r7, #12]
20000970:	689b      	ldr	r3, [r3, #8]
20000972:	681b      	ldr	r3, [r3, #0]
20000974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
20000978:	2b00      	cmp	r3, #0
2000097a:	d005      	beq.n	20000988 <_hw_endpoint_buffer_control_update32+0x54>
        panic("ep %02X was already available", ep->ep_addr);
2000097c:	68fb      	ldr	r3, [r7, #12]
2000097e:	789b      	ldrb	r3, [r3, #2]
20000980:	4619      	mov	r1, r3
20000982:	4811      	ldr	r0, [pc, #68]	@ (200009c8 <_hw_endpoint_buffer_control_update32+0x94>)
20000984:	f000 fdbc 	bl	20001500 <__panic_veneer>
      *ep->buffer_control = value & ~USB_BUF_CTRL_AVAIL;
20000988:	68fb      	ldr	r3, [r7, #12]
2000098a:	689b      	ldr	r3, [r3, #8]
2000098c:	697a      	ldr	r2, [r7, #20]
2000098e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
20000992:	601a      	str	r2, [r3, #0]
  return (usb_hw->main_ctrl & USB_MAIN_CTRL_HOST_NDEVICE_BITS) ? true : false;
20000994:	4b0d      	ldr	r3, [pc, #52]	@ (200009cc <_hw_endpoint_buffer_control_update32+0x98>)
20000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000998:	f003 0302 	and.w	r3, r3, #2
2000099c:	2b00      	cmp	r3, #0
2000099e:	bf14      	ite	ne
200009a0:	2301      	movne	r3, #1
200009a2:	2300      	moveq	r3, #0
200009a4:	b2db      	uxtb	r3, r3
      if ( !is_host_mode()) {
200009a6:	f083 0301 	eor.w	r3, r3, #1
200009aa:	b2db      	uxtb	r3, r3
200009ac:	2b00      	cmp	r3, #0
200009ae:	d002      	beq.n	200009b6 <_hw_endpoint_buffer_control_update32+0x82>
        busy_wait_at_least_cycles(12);
200009b0:	200c      	movs	r0, #12
200009b2:	f000 fda9 	bl	20001508 <__busy_wait_at_least_cycles_veneer>
  *ep->buffer_control = value;
200009b6:	68fb      	ldr	r3, [r7, #12]
200009b8:	689b      	ldr	r3, [r3, #8]
200009ba:	697a      	ldr	r2, [r7, #20]
200009bc:	601a      	str	r2, [r3, #0]
}
200009be:	bf00      	nop
200009c0:	3718      	adds	r7, #24
200009c2:	46bd      	mov	sp, r7
200009c4:	bd80      	pop	{r7, pc}
200009c6:	bf00      	nop
200009c8:	1000be20 	.word	0x1000be20
200009cc:	50110000 	.word	0x50110000

200009d0 <prepare_ep_buffer>:
static uint32_t __tusb_irq_path_func(prepare_ep_buffer)(struct hw_endpoint* ep, uint8_t buf_id) {
200009d0:	b580      	push	{r7, lr}
200009d2:	b086      	sub	sp, #24
200009d4:	af00      	add	r7, sp, #0
200009d6:	6078      	str	r0, [r7, #4]
200009d8:	460b      	mov	r3, r1
200009da:	70fb      	strb	r3, [r7, #3]
  uint16_t const buflen = tu_min16(ep->remaining_len, ep->wMaxPacketSize);
200009dc:	687b      	ldr	r3, [r7, #4]
200009de:	8a9a      	ldrh	r2, [r3, #20]
200009e0:	687b      	ldr	r3, [r7, #4]
200009e2:	8b1b      	ldrh	r3, [r3, #24]
200009e4:	823a      	strh	r2, [r7, #16]
200009e6:	81fb      	strh	r3, [r7, #14]
200009e8:	8a3a      	ldrh	r2, [r7, #16]
200009ea:	89fb      	ldrh	r3, [r7, #14]
200009ec:	4293      	cmp	r3, r2
200009ee:	bf28      	it	cs
200009f0:	4613      	movcs	r3, r2
200009f2:	b29b      	uxth	r3, r3
200009f4:	827b      	strh	r3, [r7, #18]
  ep->remaining_len = (uint16_t) (ep->remaining_len - buflen);
200009f6:	687b      	ldr	r3, [r7, #4]
200009f8:	8a9a      	ldrh	r2, [r3, #20]
200009fa:	8a7b      	ldrh	r3, [r7, #18]
200009fc:	1ad3      	subs	r3, r2, r3
200009fe:	b29a      	uxth	r2, r3
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	829a      	strh	r2, [r3, #20]
  uint32_t buf_ctrl = buflen | USB_BUF_CTRL_AVAIL;
20000a04:	8a7b      	ldrh	r3, [r7, #18]
20000a06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
20000a0a:	b29b      	uxth	r3, r3
20000a0c:	617b      	str	r3, [r7, #20]
  buf_ctrl |= ep->next_pid ? USB_BUF_CTRL_DATA1_PID : USB_BUF_CTRL_DATA0_PID;
20000a0e:	687b      	ldr	r3, [r7, #4]
20000a10:	78db      	ldrb	r3, [r3, #3]
20000a12:	2b00      	cmp	r3, #0
20000a14:	d002      	beq.n	20000a1c <prepare_ep_buffer+0x4c>
20000a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
20000a1a:	e000      	b.n	20000a1e <prepare_ep_buffer+0x4e>
20000a1c:	2300      	movs	r3, #0
20000a1e:	697a      	ldr	r2, [r7, #20]
20000a20:	4313      	orrs	r3, r2
20000a22:	617b      	str	r3, [r7, #20]
  ep->next_pid ^= 1u;
20000a24:	687b      	ldr	r3, [r7, #4]
20000a26:	78db      	ldrb	r3, [r3, #3]
20000a28:	f083 0301 	eor.w	r3, r3, #1
20000a2c:	b2da      	uxtb	r2, r3
20000a2e:	687b      	ldr	r3, [r7, #4]
20000a30:	70da      	strb	r2, [r3, #3]
  if (!ep->rx) {
20000a32:	687b      	ldr	r3, [r7, #4]
20000a34:	785b      	ldrb	r3, [r3, #1]
20000a36:	f083 0301 	eor.w	r3, r3, #1
20000a3a:	b2db      	uxtb	r3, r3
20000a3c:	2b00      	cmp	r3, #0
20000a3e:	d014      	beq.n	20000a6a <prepare_ep_buffer+0x9a>
    unaligned_memcpy(ep->hw_data_buf + buf_id * 64, ep->user_buf, buflen);
20000a40:	687b      	ldr	r3, [r7, #4]
20000a42:	68db      	ldr	r3, [r3, #12]
20000a44:	78fa      	ldrb	r2, [r7, #3]
20000a46:	0192      	lsls	r2, r2, #6
20000a48:	1898      	adds	r0, r3, r2
20000a4a:	687b      	ldr	r3, [r7, #4]
20000a4c:	691b      	ldr	r3, [r3, #16]
20000a4e:	8a7a      	ldrh	r2, [r7, #18]
20000a50:	4619      	mov	r1, r3
20000a52:	f000 fd5d 	bl	20001510 <__unaligned_memcpy_veneer>
    ep->user_buf += buflen;
20000a56:	687b      	ldr	r3, [r7, #4]
20000a58:	691a      	ldr	r2, [r3, #16]
20000a5a:	8a7b      	ldrh	r3, [r7, #18]
20000a5c:	441a      	add	r2, r3
20000a5e:	687b      	ldr	r3, [r7, #4]
20000a60:	611a      	str	r2, [r3, #16]
    buf_ctrl |= USB_BUF_CTRL_FULL;
20000a62:	697b      	ldr	r3, [r7, #20]
20000a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
20000a68:	617b      	str	r3, [r7, #20]
  if (ep->remaining_len == 0) {
20000a6a:	687b      	ldr	r3, [r7, #4]
20000a6c:	8a9b      	ldrh	r3, [r3, #20]
20000a6e:	2b00      	cmp	r3, #0
20000a70:	d103      	bne.n	20000a7a <prepare_ep_buffer+0xaa>
    buf_ctrl |= USB_BUF_CTRL_LAST;
20000a72:	697b      	ldr	r3, [r7, #20]
20000a74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
20000a78:	617b      	str	r3, [r7, #20]
  if (buf_id) buf_ctrl = buf_ctrl << 16;
20000a7a:	78fb      	ldrb	r3, [r7, #3]
20000a7c:	2b00      	cmp	r3, #0
20000a7e:	d002      	beq.n	20000a86 <prepare_ep_buffer+0xb6>
20000a80:	697b      	ldr	r3, [r7, #20]
20000a82:	041b      	lsls	r3, r3, #16
20000a84:	617b      	str	r3, [r7, #20]
  return buf_ctrl;
20000a86:	697b      	ldr	r3, [r7, #20]
}
20000a88:	4618      	mov	r0, r3
20000a8a:	3718      	adds	r7, #24
20000a8c:	46bd      	mov	sp, r7
20000a8e:	bd80      	pop	{r7, pc}

20000a90 <hw_endpoint_start_next_buffer>:
void __tusb_irq_path_func(hw_endpoint_start_next_buffer)(struct hw_endpoint* ep) {
20000a90:	b580      	push	{r7, lr}
20000a92:	b088      	sub	sp, #32
20000a94:	af00      	add	r7, sp, #0
20000a96:	6078      	str	r0, [r7, #4]
  uint32_t ep_ctrl = *ep->endpoint_control;
20000a98:	687b      	ldr	r3, [r7, #4]
20000a9a:	685b      	ldr	r3, [r3, #4]
20000a9c:	681b      	ldr	r3, [r3, #0]
20000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t buf_ctrl = prepare_ep_buffer(ep, 0) | USB_BUF_CTRL_SEL;
20000aa0:	2100      	movs	r1, #0
20000aa2:	6878      	ldr	r0, [r7, #4]
20000aa4:	f7ff ff94 	bl	200009d0 <prepare_ep_buffer>
20000aa8:	4603      	mov	r3, r0
20000aaa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
20000aae:	61bb      	str	r3, [r7, #24]
  return (usb_hw->main_ctrl & USB_MAIN_CTRL_HOST_NDEVICE_BITS) ? true : false;
20000ab0:	4b30      	ldr	r3, [pc, #192]	@ (20000b74 <hw_endpoint_start_next_buffer+0xe4>)
20000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000ab4:	f003 0302 	and.w	r3, r3, #2
20000ab8:	2b00      	cmp	r3, #0
20000aba:	bf14      	ite	ne
20000abc:	2301      	movne	r3, #1
20000abe:	2300      	moveq	r3, #0
20000ac0:	b2db      	uxtb	r3, r3
  bool const is_host = is_host_mode();
20000ac2:	75fb      	strb	r3, [r7, #23]
  bool const force_single = (!is_host && !tu_edpt_dir(ep->ep_addr)) ||
20000ac4:	7dfb      	ldrb	r3, [r7, #23]
20000ac6:	f083 0301 	eor.w	r3, r3, #1
20000aca:	b2db      	uxtb	r3, r3
20000acc:	2b00      	cmp	r3, #0
20000ace:	d007      	beq.n	20000ae0 <hw_endpoint_start_next_buffer+0x50>
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	789b      	ldrb	r3, [r3, #2]
20000ad4:	757b      	strb	r3, [r7, #21]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
20000ad6:	7d7b      	ldrb	r3, [r7, #21]
20000ad8:	09db      	lsrs	r3, r3, #7
20000ada:	b2db      	uxtb	r3, r3
20000adc:	2b00      	cmp	r3, #0
20000ade:	d00b      	beq.n	20000af8 <hw_endpoint_start_next_buffer+0x68>
20000ae0:	7dfb      	ldrb	r3, [r7, #23]
20000ae2:	2b00      	cmp	r3, #0
20000ae4:	d00a      	beq.n	20000afc <hw_endpoint_start_next_buffer+0x6c>
                            (is_host && tu_edpt_number(ep->ep_addr) != 0);
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	789b      	ldrb	r3, [r3, #2]
20000aea:	753b      	strb	r3, [r7, #20]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
20000aec:	7d3b      	ldrb	r3, [r7, #20]
20000aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
20000af2:	b2db      	uxtb	r3, r3
20000af4:	2b00      	cmp	r3, #0
20000af6:	d001      	beq.n	20000afc <hw_endpoint_start_next_buffer+0x6c>
  bool const force_single = (!is_host && !tu_edpt_dir(ep->ep_addr)) ||
20000af8:	2301      	movs	r3, #1
20000afa:	e000      	b.n	20000afe <hw_endpoint_start_next_buffer+0x6e>
20000afc:	2300      	movs	r3, #0
20000afe:	75bb      	strb	r3, [r7, #22]
20000b00:	7dbb      	ldrb	r3, [r7, #22]
20000b02:	f003 0301 	and.w	r3, r3, #1
20000b06:	75bb      	strb	r3, [r7, #22]
  if (ep->remaining_len && !force_single) {
20000b08:	687b      	ldr	r3, [r7, #4]
20000b0a:	8a9b      	ldrh	r3, [r3, #20]
20000b0c:	2b00      	cmp	r3, #0
20000b0e:	d016      	beq.n	20000b3e <hw_endpoint_start_next_buffer+0xae>
20000b10:	7dbb      	ldrb	r3, [r7, #22]
20000b12:	f083 0301 	eor.w	r3, r3, #1
20000b16:	b2db      	uxtb	r3, r3
20000b18:	2b00      	cmp	r3, #0
20000b1a:	d010      	beq.n	20000b3e <hw_endpoint_start_next_buffer+0xae>
    buf_ctrl |= prepare_ep_buffer(ep, 1);
20000b1c:	2101      	movs	r1, #1
20000b1e:	6878      	ldr	r0, [r7, #4]
20000b20:	f7ff ff56 	bl	200009d0 <prepare_ep_buffer>
20000b24:	4602      	mov	r2, r0
20000b26:	69bb      	ldr	r3, [r7, #24]
20000b28:	4313      	orrs	r3, r2
20000b2a:	61bb      	str	r3, [r7, #24]
    ep_ctrl &= ~EP_CTRL_INTERRUPT_PER_BUFFER;
20000b2c:	69fb      	ldr	r3, [r7, #28]
20000b2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
20000b32:	61fb      	str	r3, [r7, #28]
    ep_ctrl |= EP_CTRL_DOUBLE_BUFFERED_BITS | EP_CTRL_INTERRUPT_PER_DOUBLE_BUFFER;
20000b34:	69fb      	ldr	r3, [r7, #28]
20000b36:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
20000b3a:	61fb      	str	r3, [r7, #28]
20000b3c:	e007      	b.n	20000b4e <hw_endpoint_start_next_buffer+0xbe>
    ep_ctrl &= ~(EP_CTRL_DOUBLE_BUFFERED_BITS | EP_CTRL_INTERRUPT_PER_DOUBLE_BUFFER);
20000b3e:	69fb      	ldr	r3, [r7, #28]
20000b40:	f023 43a0 	bic.w	r3, r3, #1342177280	@ 0x50000000
20000b44:	61fb      	str	r3, [r7, #28]
    ep_ctrl |= EP_CTRL_INTERRUPT_PER_BUFFER;
20000b46:	69fb      	ldr	r3, [r7, #28]
20000b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
20000b4c:	61fb      	str	r3, [r7, #28]
  *ep->endpoint_control = ep_ctrl;
20000b4e:	687b      	ldr	r3, [r7, #4]
20000b50:	685b      	ldr	r3, [r3, #4]
20000b52:	69fa      	ldr	r2, [r7, #28]
20000b54:	601a      	str	r2, [r3, #0]
20000b56:	687b      	ldr	r3, [r7, #4]
20000b58:	613b      	str	r3, [r7, #16]
20000b5a:	69bb      	ldr	r3, [r7, #24]
20000b5c:	60fb      	str	r3, [r7, #12]
  _hw_endpoint_buffer_control_update32(ep, 0, value);
20000b5e:	68fa      	ldr	r2, [r7, #12]
20000b60:	2100      	movs	r1, #0
20000b62:	6938      	ldr	r0, [r7, #16]
20000b64:	f7ff fee6 	bl	20000934 <_hw_endpoint_buffer_control_update32>
}
20000b68:	bf00      	nop
}
20000b6a:	bf00      	nop
20000b6c:	3720      	adds	r7, #32
20000b6e:	46bd      	mov	sp, r7
20000b70:	bd80      	pop	{r7, pc}
20000b72:	bf00      	nop
20000b74:	50110000 	.word	0x50110000

20000b78 <sync_ep_buffer>:

// sync endpoint buffer and return transferred bytes
static uint16_t __tusb_irq_path_func(sync_ep_buffer)(struct hw_endpoint* ep, uint8_t buf_id) {
20000b78:	b580      	push	{r7, lr}
20000b7a:	b086      	sub	sp, #24
20000b7c:	af00      	add	r7, sp, #0
20000b7e:	6078      	str	r0, [r7, #4]
20000b80:	460b      	mov	r3, r1
20000b82:	70fb      	strb	r3, [r7, #3]
20000b84:	687b      	ldr	r3, [r7, #4]
20000b86:	60fb      	str	r3, [r7, #12]
  return *ep->buffer_control;
20000b88:	68fb      	ldr	r3, [r7, #12]
20000b8a:	689b      	ldr	r3, [r3, #8]
20000b8c:	681b      	ldr	r3, [r3, #0]
  uint32_t buf_ctrl = _hw_endpoint_buffer_control_get_value32(ep);
20000b8e:	617b      	str	r3, [r7, #20]
  if (buf_id) buf_ctrl = buf_ctrl >> 16;
20000b90:	78fb      	ldrb	r3, [r7, #3]
20000b92:	2b00      	cmp	r3, #0
20000b94:	d002      	beq.n	20000b9c <sync_ep_buffer+0x24>
20000b96:	697b      	ldr	r3, [r7, #20]
20000b98:	0c1b      	lsrs	r3, r3, #16
20000b9a:	617b      	str	r3, [r7, #20]

  uint16_t xferred_bytes = buf_ctrl & USB_BUF_CTRL_LEN_MASK;
20000b9c:	697b      	ldr	r3, [r7, #20]
20000b9e:	b29b      	uxth	r3, r3
20000ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
20000ba4:	827b      	strh	r3, [r7, #18]

  if (!ep->rx) {
20000ba6:	687b      	ldr	r3, [r7, #4]
20000ba8:	785b      	ldrb	r3, [r3, #1]
20000baa:	f083 0301 	eor.w	r3, r3, #1
20000bae:	b2db      	uxtb	r3, r3
20000bb0:	2b00      	cmp	r3, #0
20000bb2:	d012      	beq.n	20000bda <sync_ep_buffer+0x62>
    // We are continuing a transfer here. If we are TX, we have successfully
    // sent some data can increase the length we have sent
    assert(!(buf_ctrl & USB_BUF_CTRL_FULL));
20000bb4:	697b      	ldr	r3, [r7, #20]
20000bb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20000bba:	2b00      	cmp	r3, #0
20000bbc:	d005      	beq.n	20000bca <sync_ep_buffer+0x52>
20000bbe:	4b1f      	ldr	r3, [pc, #124]	@ (20000c3c <sync_ep_buffer+0xc4>)
20000bc0:	4a1f      	ldr	r2, [pc, #124]	@ (20000c40 <sync_ep_buffer+0xc8>)
20000bc2:	21e8      	movs	r1, #232	@ 0xe8
20000bc4:	481f      	ldr	r0, [pc, #124]	@ (20000c44 <sync_ep_buffer+0xcc>)
20000bc6:	f000 fc97 	bl	200014f8 <____assert_func_veneer>

    ep->xferred_len = (uint16_t) (ep->xferred_len + xferred_bytes);
20000bca:	687b      	ldr	r3, [r7, #4]
20000bcc:	8ada      	ldrh	r2, [r3, #22]
20000bce:	8a7b      	ldrh	r3, [r7, #18]
20000bd0:	4413      	add	r3, r2
20000bd2:	b29a      	uxth	r2, r3
20000bd4:	687b      	ldr	r3, [r7, #4]
20000bd6:	82da      	strh	r2, [r3, #22]
20000bd8:	e022      	b.n	20000c20 <sync_ep_buffer+0xa8>
  } else {
    // If we have received some data, so can increase the length
    // we have received AFTER we have copied it to the user buffer at the appropriate offset
    assert(buf_ctrl & USB_BUF_CTRL_FULL);
20000bda:	697b      	ldr	r3, [r7, #20]
20000bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
20000be0:	2b00      	cmp	r3, #0
20000be2:	d105      	bne.n	20000bf0 <sync_ep_buffer+0x78>
20000be4:	4b18      	ldr	r3, [pc, #96]	@ (20000c48 <sync_ep_buffer+0xd0>)
20000be6:	4a16      	ldr	r2, [pc, #88]	@ (20000c40 <sync_ep_buffer+0xc8>)
20000be8:	21ee      	movs	r1, #238	@ 0xee
20000bea:	4816      	ldr	r0, [pc, #88]	@ (20000c44 <sync_ep_buffer+0xcc>)
20000bec:	f000 fc84 	bl	200014f8 <____assert_func_veneer>

    unaligned_memcpy(ep->user_buf, ep->hw_data_buf + buf_id * 64, xferred_bytes);
20000bf0:	687b      	ldr	r3, [r7, #4]
20000bf2:	6918      	ldr	r0, [r3, #16]
20000bf4:	687b      	ldr	r3, [r7, #4]
20000bf6:	68db      	ldr	r3, [r3, #12]
20000bf8:	78fa      	ldrb	r2, [r7, #3]
20000bfa:	0192      	lsls	r2, r2, #6
20000bfc:	4413      	add	r3, r2
20000bfe:	8a7a      	ldrh	r2, [r7, #18]
20000c00:	4619      	mov	r1, r3
20000c02:	f000 fc85 	bl	20001510 <__unaligned_memcpy_veneer>
    ep->xferred_len = (uint16_t) (ep->xferred_len + xferred_bytes);
20000c06:	687b      	ldr	r3, [r7, #4]
20000c08:	8ada      	ldrh	r2, [r3, #22]
20000c0a:	8a7b      	ldrh	r3, [r7, #18]
20000c0c:	4413      	add	r3, r2
20000c0e:	b29a      	uxth	r2, r3
20000c10:	687b      	ldr	r3, [r7, #4]
20000c12:	82da      	strh	r2, [r3, #22]
    ep->user_buf += xferred_bytes;
20000c14:	687b      	ldr	r3, [r7, #4]
20000c16:	691a      	ldr	r2, [r3, #16]
20000c18:	8a7b      	ldrh	r3, [r7, #18]
20000c1a:	441a      	add	r2, r3
20000c1c:	687b      	ldr	r3, [r7, #4]
20000c1e:	611a      	str	r2, [r3, #16]
  }

  // Short packet
  if (xferred_bytes < ep->wMaxPacketSize) {
20000c20:	687b      	ldr	r3, [r7, #4]
20000c22:	8b1b      	ldrh	r3, [r3, #24]
20000c24:	8a7a      	ldrh	r2, [r7, #18]
20000c26:	429a      	cmp	r2, r3
20000c28:	d202      	bcs.n	20000c30 <sync_ep_buffer+0xb8>
    pico_trace("  Short packet on buffer %d with %u bytes\r\n", buf_id, xferred_bytes);
    // Reduce total length as this is last packet
    ep->remaining_len = 0;
20000c2a:	687b      	ldr	r3, [r7, #4]
20000c2c:	2200      	movs	r2, #0
20000c2e:	829a      	strh	r2, [r3, #20]
  }

  return xferred_bytes;
20000c30:	8a7b      	ldrh	r3, [r7, #18]
}
20000c32:	4618      	mov	r0, r3
20000c34:	3718      	adds	r7, #24
20000c36:	46bd      	mov	sp, r7
20000c38:	bd80      	pop	{r7, pc}
20000c3a:	bf00      	nop
20000c3c:	1000be78 	.word	0x1000be78
20000c40:	1000bf38 	.word	0x1000bf38
20000c44:	1000be98 	.word	0x1000be98
20000c48:	1000bef0 	.word	0x1000bef0

20000c4c <_hw_endpoint_xfer_sync>:

static void __tusb_irq_path_func(_hw_endpoint_xfer_sync)(struct hw_endpoint* ep) {
20000c4c:	b580      	push	{r7, lr}
20000c4e:	b086      	sub	sp, #24
20000c50:	af00      	add	r7, sp, #0
20000c52:	6078      	str	r0, [r7, #4]
20000c54:	687b      	ldr	r3, [r7, #4]
20000c56:	60fb      	str	r3, [r7, #12]
20000c58:	68fb      	ldr	r3, [r7, #12]
20000c5a:	689b      	ldr	r3, [r3, #8]
20000c5c:	681b      	ldr	r3, [r3, #0]
  // Update hw endpoint struct with info from hardware
  // after a buff status interrupt

  uint32_t __unused buf_ctrl = _hw_endpoint_buffer_control_get_value32(ep);
20000c5e:	617b      	str	r3, [r7, #20]
  TU_LOG(3, "  Sync BufCtrl: [0] = 0x%04x  [1] = 0x%04x\r\n", tu_u32_low16(buf_ctrl), tu_u32_high16(buf_ctrl));

  // always sync buffer 0
  uint16_t buf0_bytes = sync_ep_buffer(ep, 0);
20000c60:	2100      	movs	r1, #0
20000c62:	6878      	ldr	r0, [r7, #4]
20000c64:	f7ff ff88 	bl	20000b78 <sync_ep_buffer>
20000c68:	4603      	mov	r3, r0
20000c6a:	827b      	strh	r3, [r7, #18]

  // sync buffer 1 if double buffered
  if ((*ep->endpoint_control) & EP_CTRL_DOUBLE_BUFFERED_BITS) {
20000c6c:	687b      	ldr	r3, [r7, #4]
20000c6e:	685b      	ldr	r3, [r3, #4]
20000c70:	681b      	ldr	r3, [r3, #0]
20000c72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
20000c76:	2b00      	cmp	r3, #0
20000c78:	d008      	beq.n	20000c8c <_hw_endpoint_xfer_sync+0x40>
    if (buf0_bytes == ep->wMaxPacketSize) {
20000c7a:	687b      	ldr	r3, [r7, #4]
20000c7c:	8b1b      	ldrh	r3, [r3, #24]
20000c7e:	8a7a      	ldrh	r2, [r7, #18]
20000c80:	429a      	cmp	r2, r3
20000c82:	d103      	bne.n	20000c8c <_hw_endpoint_xfer_sync+0x40>
      // sync buffer 1 if not short packet
      sync_ep_buffer(ep, 1);
20000c84:	2101      	movs	r1, #1
20000c86:	6878      	ldr	r0, [r7, #4]
20000c88:	f7ff ff76 	bl	20000b78 <sync_ep_buffer>
      TU_LOG(3, "----SHORT PACKET buffer0 on EP %02X:\r\n", ep->ep_addr);
      TU_LOG(3, "  BufCtrl: [0] = 0x%04x  [1] = 0x%04x\r\n", tu_u32_low16(buf_ctrl), tu_u32_high16(buf_ctrl));
#endif
    }
  }
}
20000c8c:	bf00      	nop
20000c8e:	3718      	adds	r7, #24
20000c90:	46bd      	mov	sp, r7
20000c92:	bd80      	pop	{r7, pc}

20000c94 <hw_endpoint_xfer_continue>:

// Returns true if transfer is complete
bool __tusb_irq_path_func(hw_endpoint_xfer_continue)(struct hw_endpoint* ep) {
20000c94:	b580      	push	{r7, lr}
20000c96:	b088      	sub	sp, #32
20000c98:	af00      	add	r7, sp, #0
20000c9a:	6078      	str	r0, [r7, #4]
20000c9c:	687b      	ldr	r3, [r7, #4]
20000c9e:	61fb      	str	r3, [r7, #28]
20000ca0:	2301      	movs	r3, #1
20000ca2:	61bb      	str	r3, [r7, #24]
}
20000ca4:	bf00      	nop
  hw_endpoint_lock_update(ep, 1);

  // Part way through a transfer
  if (!ep->active) {
20000ca6:	687b      	ldr	r3, [r7, #4]
20000ca8:	7e9b      	ldrb	r3, [r3, #26]
20000caa:	f083 0301 	eor.w	r3, r3, #1
20000cae:	b2db      	uxtb	r3, r3
20000cb0:	2b00      	cmp	r3, #0
20000cb2:	d005      	beq.n	20000cc0 <hw_endpoint_xfer_continue+0x2c>
    panic("Can't continue xfer on inactive ep %02X", ep->ep_addr);
20000cb4:	687b      	ldr	r3, [r7, #4]
20000cb6:	789b      	ldrb	r3, [r3, #2]
20000cb8:	4619      	mov	r1, r3
20000cba:	4815      	ldr	r0, [pc, #84]	@ (20000d10 <hw_endpoint_xfer_continue+0x7c>)
20000cbc:	f000 fc20 	bl	20001500 <__panic_veneer>
  }

  // Update EP struct from hardware state
  _hw_endpoint_xfer_sync(ep);
20000cc0:	6878      	ldr	r0, [r7, #4]
20000cc2:	f7ff ffc3 	bl	20000c4c <_hw_endpoint_xfer_sync>

  // Now we have synced our state with the hardware. Is there more data to transfer?
  // If we are done then notify tinyusb
  if (ep->remaining_len == 0) {
20000cc6:	687b      	ldr	r3, [r7, #4]
20000cc8:	8a9b      	ldrh	r3, [r3, #20]
20000cca:	2b00      	cmp	r3, #0
20000ccc:	d107      	bne.n	20000cde <hw_endpoint_xfer_continue+0x4a>
20000cce:	687b      	ldr	r3, [r7, #4]
20000cd0:	617b      	str	r3, [r7, #20]
20000cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
20000cd6:	613b      	str	r3, [r7, #16]
20000cd8:	bf00      	nop
    pico_trace("Completed transfer of %d bytes on ep %02X\r\n", ep->xferred_len, ep->ep_addr);
    // Notify caller we are done so it can notify the tinyusb stack
    hw_endpoint_lock_update(ep, -1);
    return true;
20000cda:	2301      	movs	r3, #1
20000cdc:	e013      	b.n	20000d06 <hw_endpoint_xfer_continue+0x72>
  } else {
    if (e15_is_critical_frame_period(ep)) {
20000cde:	6878      	ldr	r0, [r7, #4]
20000ce0:	f000 f844 	bl	20000d6c <e15_is_critical_frame_period>
20000ce4:	4603      	mov	r3, r0
20000ce6:	2b00      	cmp	r3, #0
20000ce8:	d003      	beq.n	20000cf2 <hw_endpoint_xfer_continue+0x5e>
      ep->pending = 1;
20000cea:	687b      	ldr	r3, [r7, #4]
20000cec:	2201      	movs	r2, #1
20000cee:	771a      	strb	r2, [r3, #28]
20000cf0:	e002      	b.n	20000cf8 <hw_endpoint_xfer_continue+0x64>
    } else {
      hw_endpoint_start_next_buffer(ep);
20000cf2:	6878      	ldr	r0, [r7, #4]
20000cf4:	f7ff fecc 	bl	20000a90 <hw_endpoint_start_next_buffer>
20000cf8:	687b      	ldr	r3, [r7, #4]
20000cfa:	60fb      	str	r3, [r7, #12]
20000cfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
20000d00:	60bb      	str	r3, [r7, #8]
20000d02:	bf00      	nop
    }
  }

  hw_endpoint_lock_update(ep, -1);
  // More work to do
  return false;
20000d04:	2300      	movs	r3, #0
}
20000d06:	4618      	mov	r0, r3
20000d08:	3720      	adds	r7, #32
20000d0a:	46bd      	mov	sp, r7
20000d0c:	bd80      	pop	{r7, pc}
20000d0e:	bf00      	nop
20000d10:	1000bf10 	.word	0x1000bf10

20000d14 <e15_is_bulkin_ep>:
*/

volatile uint32_t e15_last_sof = 0;

// check if Errata 15 is needed for this endpoint i.e device bulk-in
static bool __tusb_irq_path_func(e15_is_bulkin_ep)(struct hw_endpoint* ep) {
20000d14:	b480      	push	{r7}
20000d16:	b085      	sub	sp, #20
20000d18:	af00      	add	r7, sp, #0
20000d1a:	6078      	str	r0, [r7, #4]
  return (usb_hw->main_ctrl & USB_MAIN_CTRL_HOST_NDEVICE_BITS) ? true : false;
20000d1c:	4b12      	ldr	r3, [pc, #72]	@ (20000d68 <e15_is_bulkin_ep+0x54>)
20000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
20000d20:	f003 0302 	and.w	r3, r3, #2
20000d24:	2b00      	cmp	r3, #0
20000d26:	bf14      	ite	ne
20000d28:	2301      	movne	r3, #1
20000d2a:	2300      	moveq	r3, #0
20000d2c:	b2db      	uxtb	r3, r3
  return (!is_host_mode() && tu_edpt_dir(ep->ep_addr) == TUSB_DIR_IN &&
20000d2e:	f083 0301 	eor.w	r3, r3, #1
20000d32:	b2db      	uxtb	r3, r3
20000d34:	2b00      	cmp	r3, #0
20000d36:	d00d      	beq.n	20000d54 <e15_is_bulkin_ep+0x40>
20000d38:	687b      	ldr	r3, [r7, #4]
20000d3a:	789b      	ldrb	r3, [r3, #2]
20000d3c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
20000d3e:	7bfb      	ldrb	r3, [r7, #15]
20000d40:	09db      	lsrs	r3, r3, #7
20000d42:	b2db      	uxtb	r3, r3
20000d44:	2b01      	cmp	r3, #1
20000d46:	d105      	bne.n	20000d54 <e15_is_bulkin_ep+0x40>
          ep->transfer_type == TUSB_XFER_BULK);
20000d48:	687b      	ldr	r3, [r7, #4]
20000d4a:	7edb      	ldrb	r3, [r3, #27]
  return (!is_host_mode() && tu_edpt_dir(ep->ep_addr) == TUSB_DIR_IN &&
20000d4c:	2b02      	cmp	r3, #2
20000d4e:	d101      	bne.n	20000d54 <e15_is_bulkin_ep+0x40>
20000d50:	2301      	movs	r3, #1
20000d52:	e000      	b.n	20000d56 <e15_is_bulkin_ep+0x42>
20000d54:	2300      	movs	r3, #0
20000d56:	f003 0301 	and.w	r3, r3, #1
20000d5a:	b2db      	uxtb	r3, r3
}
20000d5c:	4618      	mov	r0, r3
20000d5e:	3714      	adds	r7, #20
20000d60:	46bd      	mov	sp, r7
20000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
20000d66:	4770      	bx	lr
20000d68:	50110000 	.word	0x50110000

20000d6c <e15_is_critical_frame_period>:

// check if we need to apply Errata 15 workaround : i.e
// Endpoint is BULK IN and is currently in critical frame period i.e 20% of last usb frame
static bool __tusb_irq_path_func(e15_is_critical_frame_period)(struct hw_endpoint* ep) {
20000d6c:	b580      	push	{r7, lr}
20000d6e:	b084      	sub	sp, #16
20000d70:	af00      	add	r7, sp, #0
20000d72:	6078      	str	r0, [r7, #4]
  TU_VERIFY(e15_is_bulkin_ep(ep));
20000d74:	6878      	ldr	r0, [r7, #4]
20000d76:	f7ff ffcd 	bl	20000d14 <e15_is_bulkin_ep>
20000d7a:	4603      	mov	r3, r0
20000d7c:	f083 0301 	eor.w	r3, r3, #1
20000d80:	b2db      	uxtb	r3, r3
20000d82:	2b00      	cmp	r3, #0
20000d84:	d001      	beq.n	20000d8a <e15_is_critical_frame_period+0x1e>
20000d86:	2300      	movs	r3, #0
20000d88:	e012      	b.n	20000db0 <e15_is_critical_frame_period+0x44>

  /* Avoid the last 200us (uframe 6.5-7) of a frame, up to the EOF2 point.
   * The device state machine cannot recover from receiving an incorrect PID
   * when it is expecting an ACK.
   */
  uint32_t delta = time_us_32() - e15_last_sof;
20000d8a:	f000 fb99 	bl	200014c0 <__time_us_32_veneer>
20000d8e:	4602      	mov	r2, r0
20000d90:	4b09      	ldr	r3, [pc, #36]	@ (20000db8 <e15_is_critical_frame_period+0x4c>)
20000d92:	681b      	ldr	r3, [r3, #0]
20000d94:	1ad3      	subs	r3, r2, r3
20000d96:	60fb      	str	r3, [r7, #12]
  if (delta < 800 || delta > 998) {
20000d98:	68fb      	ldr	r3, [r7, #12]
20000d9a:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
20000d9e:	d304      	bcc.n	20000daa <e15_is_critical_frame_period+0x3e>
20000da0:	68fb      	ldr	r3, [r7, #12]
20000da2:	f240 32e6 	movw	r2, #998	@ 0x3e6
20000da6:	4293      	cmp	r3, r2
20000da8:	d901      	bls.n	20000dae <e15_is_critical_frame_period+0x42>
    return false;
20000daa:	2300      	movs	r3, #0
20000dac:	e000      	b.n	20000db0 <e15_is_critical_frame_period+0x44>
  }
  TU_LOG(3, "Avoiding sof %lu now %lu last %lu\r\n", (usb_hw->sof_rd + 1) & USB_SOF_RD_BITS, time_us_32(),
         e15_last_sof);
  return true;
20000dae:	2301      	movs	r3, #1
}
20000db0:	4618      	mov	r0, r3
20000db2:	3710      	adds	r7, #16
20000db4:	46bd      	mov	sp, r7
20000db6:	bd80      	pop	{r7, pc}
20000db8:	20002108 	.word	0x20002108

20000dbc <dcd_event_handler>:
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
20000dbc:	b580      	push	{r7, lr}
20000dbe:	b0a0      	sub	sp, #128	@ 0x80
20000dc0:	af00      	add	r7, sp, #0
20000dc2:	6078      	str	r0, [r7, #4]
20000dc4:	460b      	mov	r3, r1
20000dc6:	70fb      	strb	r3, [r7, #3]
  bool send = false;
20000dc8:	2300      	movs	r3, #0
20000dca:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
20000dce:	687b      	ldr	r3, [r7, #4]
20000dd0:	785b      	ldrb	r3, [r3, #1]
20000dd2:	3b02      	subs	r3, #2
20000dd4:	2b04      	cmp	r3, #4
20000dd6:	f200 8158 	bhi.w	2000108a <dcd_event_handler+0x2ce>
20000dda:	a201      	add	r2, pc, #4	@ (adr r2, 20000de0 <dcd_event_handler+0x24>)
20000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000de0:	20000df5 	.word	0x20000df5
20000de4:	20000e65 	.word	0x20000e65
20000de8:	20000e21 	.word	0x20000e21
20000dec:	20000e43 	.word	0x20000e43
20000df0:	20001075 	.word	0x20001075
      _usbd_dev.connected = 0;
20000df4:	4aa9      	ldr	r2, [pc, #676]	@ (2000109c <dcd_event_handler+0x2e0>)
20000df6:	7813      	ldrb	r3, [r2, #0]
20000df8:	f023 0301 	bic.w	r3, r3, #1
20000dfc:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
20000dfe:	4aa7      	ldr	r2, [pc, #668]	@ (2000109c <dcd_event_handler+0x2e0>)
20000e00:	7813      	ldrb	r3, [r2, #0]
20000e02:	f023 0302 	bic.w	r3, r3, #2
20000e06:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
20000e08:	4ba4      	ldr	r3, [pc, #656]	@ (2000109c <dcd_event_handler+0x2e0>)
20000e0a:	2200      	movs	r2, #0
20000e0c:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
20000e0e:	4aa3      	ldr	r2, [pc, #652]	@ (2000109c <dcd_event_handler+0x2e0>)
20000e10:	7813      	ldrb	r3, [r2, #0]
20000e12:	f023 0304 	bic.w	r3, r3, #4
20000e16:	7013      	strb	r3, [r2, #0]
      send = true;
20000e18:	2301      	movs	r3, #1
20000e1a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
20000e1e:	e150      	b.n	200010c2 <dcd_event_handler+0x306>
      if (_usbd_dev.connected) {
20000e20:	4b9e      	ldr	r3, [pc, #632]	@ (2000109c <dcd_event_handler+0x2e0>)
20000e22:	781b      	ldrb	r3, [r3, #0]
20000e24:	f3c3 0300 	ubfx	r3, r3, #0, #1
20000e28:	b2db      	uxtb	r3, r3
20000e2a:	2b00      	cmp	r3, #0
20000e2c:	f000 8131 	beq.w	20001092 <dcd_event_handler+0x2d6>
        _usbd_dev.suspended = 1;
20000e30:	4a9a      	ldr	r2, [pc, #616]	@ (2000109c <dcd_event_handler+0x2e0>)
20000e32:	7813      	ldrb	r3, [r2, #0]
20000e34:	f043 0304 	orr.w	r3, r3, #4
20000e38:	7013      	strb	r3, [r2, #0]
        send = true;
20000e3a:	2301      	movs	r3, #1
20000e3c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
20000e40:	e127      	b.n	20001092 <dcd_event_handler+0x2d6>
      if (_usbd_dev.connected) {
20000e42:	4b96      	ldr	r3, [pc, #600]	@ (2000109c <dcd_event_handler+0x2e0>)
20000e44:	781b      	ldrb	r3, [r3, #0]
20000e46:	f3c3 0300 	ubfx	r3, r3, #0, #1
20000e4a:	b2db      	uxtb	r3, r3
20000e4c:	2b00      	cmp	r3, #0
20000e4e:	f000 8122 	beq.w	20001096 <dcd_event_handler+0x2da>
        _usbd_dev.suspended = 0;
20000e52:	4a92      	ldr	r2, [pc, #584]	@ (2000109c <dcd_event_handler+0x2e0>)
20000e54:	7813      	ldrb	r3, [r2, #0]
20000e56:	f023 0304 	bic.w	r3, r3, #4
20000e5a:	7013      	strb	r3, [r2, #0]
        send = true;
20000e5c:	2301      	movs	r3, #1
20000e5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
20000e62:	e118      	b.n	20001096 <dcd_event_handler+0x2da>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
20000e64:	2300      	movs	r3, #0
20000e66:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
20000e6a:	e039      	b.n	20000ee0 <dcd_event_handler+0x124>
20000e6c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
20000e70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
20000e74:	2300      	movs	r3, #0
20000e76:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
20000e78:	4b89      	ldr	r3, [pc, #548]	@ (200010a0 <dcd_event_handler+0x2e4>)
20000e7a:	781b      	ldrb	r3, [r3, #0]
20000e7c:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
20000e80:	429a      	cmp	r2, r3
20000e82:	d207      	bcs.n	20000e94 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
20000e84:	4b87      	ldr	r3, [pc, #540]	@ (200010a4 <dcd_event_handler+0x2e8>)
20000e86:	681a      	ldr	r2, [r3, #0]
20000e88:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
20000e8c:	015b      	lsls	r3, r3, #5
20000e8e:	4413      	add	r3, r2
20000e90:	673b      	str	r3, [r7, #112]	@ 0x70
20000e92:	e00f      	b.n	20000eb4 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
20000e94:	4b82      	ldr	r3, [pc, #520]	@ (200010a0 <dcd_event_handler+0x2e4>)
20000e96:	781b      	ldrb	r3, [r3, #0]
20000e98:	1c5a      	adds	r2, r3, #1
20000e9a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
20000e9e:	429a      	cmp	r2, r3
20000ea0:	db08      	blt.n	20000eb4 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
20000ea2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
20000ea6:	4a7e      	ldr	r2, [pc, #504]	@ (200010a0 <dcd_event_handler+0x2e4>)
20000ea8:	7812      	ldrb	r2, [r2, #0]
20000eaa:	1a9b      	subs	r3, r3, r2
20000eac:	015b      	lsls	r3, r3, #5
20000eae:	4a7e      	ldr	r2, [pc, #504]	@ (200010a8 <dcd_event_handler+0x2ec>)
20000eb0:	4413      	add	r3, r2
20000eb2:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
20000eb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
20000eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
20000eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20000eba:	2b00      	cmp	r3, #0
20000ebc:	d00b      	beq.n	20000ed6 <dcd_event_handler+0x11a>
20000ebe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20000ec0:	69db      	ldr	r3, [r3, #28]
20000ec2:	2b00      	cmp	r3, #0
20000ec4:	d007      	beq.n	20000ed6 <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
20000ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
20000ec8:	69db      	ldr	r3, [r3, #28]
20000eca:	687a      	ldr	r2, [r7, #4]
20000ecc:	7810      	ldrb	r0, [r2, #0]
20000ece:	687a      	ldr	r2, [r7, #4]
20000ed0:	6852      	ldr	r2, [r2, #4]
20000ed2:	4611      	mov	r1, r2
20000ed4:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
20000ed6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
20000eda:	3301      	adds	r3, #1
20000edc:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
20000ee0:	4b6f      	ldr	r3, [pc, #444]	@ (200010a0 <dcd_event_handler+0x2e4>)
20000ee2:	781b      	ldrb	r3, [r3, #0]
20000ee4:	1c5a      	adds	r2, r3, #1
20000ee6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
20000eea:	429a      	cmp	r2, r3
20000eec:	dabe      	bge.n	20000e6c <dcd_event_handler+0xb0>
      if (_usbd_dev.suspended) {
20000eee:	4b6b      	ldr	r3, [pc, #428]	@ (2000109c <dcd_event_handler+0x2e0>)
20000ef0:	781b      	ldrb	r3, [r3, #0]
20000ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
20000ef6:	b2db      	uxtb	r3, r3
20000ef8:	2b00      	cmp	r3, #0
20000efa:	d053      	beq.n	20000fa4 <dcd_event_handler+0x1e8>
        _usbd_dev.suspended = 0;
20000efc:	4a67      	ldr	r2, [pc, #412]	@ (2000109c <dcd_event_handler+0x2e0>)
20000efe:	7813      	ldrb	r3, [r2, #0]
20000f00:	f023 0304 	bic.w	r3, r3, #4
20000f04:	7013      	strb	r3, [r2, #0]
        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
20000f06:	f107 0314 	add.w	r3, r7, #20
20000f0a:	2200      	movs	r2, #0
20000f0c:	601a      	str	r2, [r3, #0]
20000f0e:	605a      	str	r2, [r3, #4]
20000f10:	609a      	str	r2, [r3, #8]
20000f12:	687b      	ldr	r3, [r7, #4]
20000f14:	781b      	ldrb	r3, [r3, #0]
20000f16:	753b      	strb	r3, [r7, #20]
20000f18:	2305      	movs	r3, #5
20000f1a:	757b      	strb	r3, [r7, #21]
20000f1c:	f107 0314 	add.w	r3, r7, #20
20000f20:	66fb      	str	r3, [r7, #108]	@ 0x6c
20000f22:	78fb      	ldrb	r3, [r7, #3]
20000f24:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
20000f28:	4b60      	ldr	r3, [pc, #384]	@ (200010ac <dcd_event_handler+0x2f0>)
20000f2a:	681b      	ldr	r3, [r3, #0]
20000f2c:	667b      	str	r3, [r7, #100]	@ 0x64
20000f2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20000f30:	663b      	str	r3, [r7, #96]	@ 0x60
20000f32:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
20000f36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  (void) in_isr;

  critical_section_enter_blocking(&qhdl->critsec);
20000f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20000f3c:	3314      	adds	r3, #20
20000f3e:	4618      	mov	r0, r3
20000f40:	f000 fad2 	bl	200014e8 <__critical_section_enter_blocking_veneer>
  bool success = tu_fifo_write(&qhdl->ff, data);
20000f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20000f46:	6e39      	ldr	r1, [r7, #96]	@ 0x60
20000f48:	4618      	mov	r0, r3
20000f4a:	f000 faad 	bl	200014a8 <__tu_fifo_write_veneer>
20000f4e:	4603      	mov	r3, r0
20000f50:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  critical_section_exit(&qhdl->critsec);
20000f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
20000f56:	3314      	adds	r3, #20
20000f58:	4618      	mov	r0, r3
20000f5a:	f000 faa9 	bl	200014b0 <__critical_section_exit_veneer>

  return success;
20000f5e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
20000f62:	f083 0301 	eor.w	r3, r3, #1
20000f66:	b2db      	uxtb	r3, r3
20000f68:	2b00      	cmp	r3, #0
20000f6a:	d00f      	beq.n	20000f8c <dcd_event_handler+0x1d0>
20000f6c:	f44f 72ad 	mov.w	r2, #346	@ 0x15a
20000f70:	494f      	ldr	r1, [pc, #316]	@ (200010b0 <dcd_event_handler+0x2f4>)
20000f72:	4850      	ldr	r0, [pc, #320]	@ (200010b4 <dcd_event_handler+0x2f8>)
20000f74:	f000 faac 	bl	200014d0 <____wrap_printf_veneer>
20000f78:	4b4f      	ldr	r3, [pc, #316]	@ (200010b8 <dcd_event_handler+0x2fc>)
20000f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
20000f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
20000f7e:	681b      	ldr	r3, [r3, #0]
20000f80:	f003 0301 	and.w	r3, r3, #1
20000f84:	2b00      	cmp	r3, #0
20000f86:	d00c      	beq.n	20000fa2 <dcd_event_handler+0x1e6>
20000f88:	be00      	bkpt	0x0000
20000f8a:	e00a      	b.n	20000fa2 <dcd_event_handler+0x1e6>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
20000f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20000f8e:	7818      	ldrb	r0, [r3, #0]
20000f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
20000f92:	785b      	ldrb	r3, [r3, #1]
20000f94:	4619      	mov	r1, r3
20000f96:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
20000f9a:	461a      	mov	r2, r3
20000f9c:	f000 fa80 	bl	200014a0 <__tud_event_hook_cb_veneer>
  return true;
20000fa0:	e000      	b.n	20000fa4 <dcd_event_handler+0x1e8>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
20000fa2:	bf00      	nop
      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
20000fa4:	4b3d      	ldr	r3, [pc, #244]	@ (2000109c <dcd_event_handler+0x2e0>)
20000fa6:	78db      	ldrb	r3, [r3, #3]
20000fa8:	b2db      	uxtb	r3, r3
20000faa:	657b      	str	r3, [r7, #84]	@ 0x54
20000fac:	2300      	movs	r3, #0
20000fae:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
20000fb2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
20000fb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
20000fb8:	fa22 f303 	lsr.w	r3, r2, r3
20000fbc:	f003 0301 	and.w	r3, r3, #1
20000fc0:	2b00      	cmp	r3, #0
20000fc2:	bf14      	ite	ne
20000fc4:	2301      	movne	r3, #1
20000fc6:	2300      	moveq	r3, #0
20000fc8:	b2db      	uxtb	r3, r3
20000fca:	2b00      	cmp	r3, #0
20000fcc:	d078      	beq.n	200010c0 <dcd_event_handler+0x304>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
20000fce:	f107 0308 	add.w	r3, r7, #8
20000fd2:	2200      	movs	r2, #0
20000fd4:	601a      	str	r2, [r3, #0]
20000fd6:	605a      	str	r2, [r3, #4]
20000fd8:	609a      	str	r2, [r3, #8]
20000fda:	687b      	ldr	r3, [r7, #4]
20000fdc:	781b      	ldrb	r3, [r3, #0]
20000fde:	723b      	strb	r3, [r7, #8]
20000fe0:	2303      	movs	r3, #3
20000fe2:	727b      	strb	r3, [r7, #9]
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	685b      	ldr	r3, [r3, #4]
20000fe8:	60fb      	str	r3, [r7, #12]
20000fea:	f107 0308 	add.w	r3, r7, #8
20000fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
20000ff0:	78fb      	ldrb	r3, [r7, #3]
20000ff2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
20000ff6:	4b2d      	ldr	r3, [pc, #180]	@ (200010ac <dcd_event_handler+0x2f0>)
20000ff8:	681b      	ldr	r3, [r3, #0]
20000ffa:	647b      	str	r3, [r7, #68]	@ 0x44
20000ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
20001000:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
20001004:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  critical_section_enter_blocking(&qhdl->critsec);
20001008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
2000100a:	3314      	adds	r3, #20
2000100c:	4618      	mov	r0, r3
2000100e:	f000 fa6b 	bl	200014e8 <__critical_section_enter_blocking_veneer>
  bool success = tu_fifo_write(&qhdl->ff, data);
20001012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20001014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
20001016:	4618      	mov	r0, r3
20001018:	f000 fa46 	bl	200014a8 <__tu_fifo_write_veneer>
2000101c:	4603      	mov	r3, r0
2000101e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  critical_section_exit(&qhdl->critsec);
20001022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
20001024:	3314      	adds	r3, #20
20001026:	4618      	mov	r0, r3
20001028:	f000 fa42 	bl	200014b0 <__critical_section_exit_veneer>
  return success;
2000102c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
20001030:	f083 0301 	eor.w	r3, r3, #1
20001034:	b2db      	uxtb	r3, r3
20001036:	2b00      	cmp	r3, #0
20001038:	d00f      	beq.n	2000105a <dcd_event_handler+0x29e>
2000103a:	f44f 72ad 	mov.w	r2, #346	@ 0x15a
2000103e:	491c      	ldr	r1, [pc, #112]	@ (200010b0 <dcd_event_handler+0x2f4>)
20001040:	481c      	ldr	r0, [pc, #112]	@ (200010b4 <dcd_event_handler+0x2f8>)
20001042:	f000 fa45 	bl	200014d0 <____wrap_printf_veneer>
20001046:	4b1c      	ldr	r3, [pc, #112]	@ (200010b8 <dcd_event_handler+0x2fc>)
20001048:	63bb      	str	r3, [r7, #56]	@ 0x38
2000104a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2000104c:	681b      	ldr	r3, [r3, #0]
2000104e:	f003 0301 	and.w	r3, r3, #1
20001052:	2b00      	cmp	r3, #0
20001054:	d00c      	beq.n	20001070 <dcd_event_handler+0x2b4>
20001056:	be00      	bkpt	0x0000
20001058:	e00a      	b.n	20001070 <dcd_event_handler+0x2b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
2000105a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
2000105c:	7818      	ldrb	r0, [r3, #0]
2000105e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
20001060:	785b      	ldrb	r3, [r3, #1]
20001062:	4619      	mov	r1, r3
20001064:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
20001068:	461a      	mov	r2, r3
2000106a:	f000 fa19 	bl	200014a0 <__tud_event_hook_cb_veneer>
  return true;
2000106e:	e000      	b.n	20001072 <dcd_event_handler+0x2b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
20001070:	bf00      	nop
      break;
20001072:	e025      	b.n	200010c0 <dcd_event_handler+0x304>
      _usbd_queued_setup++;
20001074:	4b11      	ldr	r3, [pc, #68]	@ (200010bc <dcd_event_handler+0x300>)
20001076:	781b      	ldrb	r3, [r3, #0]
20001078:	b2db      	uxtb	r3, r3
2000107a:	3301      	adds	r3, #1
2000107c:	b2da      	uxtb	r2, r3
2000107e:	4b0f      	ldr	r3, [pc, #60]	@ (200010bc <dcd_event_handler+0x300>)
20001080:	701a      	strb	r2, [r3, #0]
      send = true;
20001082:	2301      	movs	r3, #1
20001084:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
20001088:	e01b      	b.n	200010c2 <dcd_event_handler+0x306>
      send = true;
2000108a:	2301      	movs	r3, #1
2000108c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
20001090:	e017      	b.n	200010c2 <dcd_event_handler+0x306>
      break;
20001092:	bf00      	nop
20001094:	e015      	b.n	200010c2 <dcd_event_handler+0x306>
      break;
20001096:	bf00      	nop
20001098:	e013      	b.n	200010c2 <dcd_event_handler+0x306>
2000109a:	bf00      	nop
2000109c:	20001aac 	.word	0x20001aac
200010a0:	20002581 	.word	0x20002581
200010a4:	20001760 	.word	0x20001760
200010a8:	1000bf48 	.word	0x1000bf48
200010ac:	20001b04 	.word	0x20001b04
200010b0:	1000c014 	.word	0x1000c014
200010b4:	1000bf88 	.word	0x1000bf88
200010b8:	e000edf0 	.word	0xe000edf0
200010bc:	20002583 	.word	0x20002583
      break;
200010c0:	bf00      	nop
  if (send) {
200010c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
200010c6:	2b00      	cmp	r3, #0
200010c8:	d042      	beq.n	20001150 <dcd_event_handler+0x394>
200010ca:	687b      	ldr	r3, [r7, #4]
200010cc:	637b      	str	r3, [r7, #52]	@ 0x34
200010ce:	78fb      	ldrb	r3, [r7, #3]
200010d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
200010d4:	4b20      	ldr	r3, [pc, #128]	@ (20001158 <dcd_event_handler+0x39c>)
200010d6:	681b      	ldr	r3, [r3, #0]
200010d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
200010da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
200010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
200010de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
200010e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  critical_section_enter_blocking(&qhdl->critsec);
200010e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200010e8:	3314      	adds	r3, #20
200010ea:	4618      	mov	r0, r3
200010ec:	f000 f9fc 	bl	200014e8 <__critical_section_enter_blocking_veneer>
  bool success = tu_fifo_write(&qhdl->ff, data);
200010f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
200010f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
200010f4:	4618      	mov	r0, r3
200010f6:	f000 f9d7 	bl	200014a8 <__tu_fifo_write_veneer>
200010fa:	4603      	mov	r3, r0
200010fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  critical_section_exit(&qhdl->critsec);
20001100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
20001102:	3314      	adds	r3, #20
20001104:	4618      	mov	r0, r3
20001106:	f000 f9d3 	bl	200014b0 <__critical_section_exit_veneer>
  return success;
2000110a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
2000110e:	f083 0301 	eor.w	r3, r3, #1
20001112:	b2db      	uxtb	r3, r3
20001114:	2b00      	cmp	r3, #0
20001116:	d00f      	beq.n	20001138 <dcd_event_handler+0x37c>
20001118:	f44f 72ad 	mov.w	r2, #346	@ 0x15a
2000111c:	490f      	ldr	r1, [pc, #60]	@ (2000115c <dcd_event_handler+0x3a0>)
2000111e:	4810      	ldr	r0, [pc, #64]	@ (20001160 <dcd_event_handler+0x3a4>)
20001120:	f000 f9d6 	bl	200014d0 <____wrap_printf_veneer>
20001124:	4b0f      	ldr	r3, [pc, #60]	@ (20001164 <dcd_event_handler+0x3a8>)
20001126:	623b      	str	r3, [r7, #32]
20001128:	6a3b      	ldr	r3, [r7, #32]
2000112a:	681b      	ldr	r3, [r3, #0]
2000112c:	f003 0301 	and.w	r3, r3, #1
20001130:	2b00      	cmp	r3, #0
20001132:	d00c      	beq.n	2000114e <dcd_event_handler+0x392>
20001134:	be00      	bkpt	0x0000
20001136:	e00a      	b.n	2000114e <dcd_event_handler+0x392>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
20001138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000113a:	7818      	ldrb	r0, [r3, #0]
2000113c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2000113e:	785b      	ldrb	r3, [r3, #1]
20001140:	4619      	mov	r1, r3
20001142:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
20001146:	461a      	mov	r2, r3
20001148:	f000 f9aa 	bl	200014a0 <__tud_event_hook_cb_veneer>
  return true;
2000114c:	e000      	b.n	20001150 <dcd_event_handler+0x394>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
2000114e:	bf00      	nop
}
20001150:	bf00      	nop
20001152:	3780      	adds	r7, #128	@ 0x80
20001154:	46bd      	mov	sp, r7
20001156:	bd80      	pop	{r7, pc}
20001158:	20001b04 	.word	0x20001b04
2000115c:	1000c014 	.word	0x1000c014
20001160:	1000bf88 	.word	0x1000bf88
20001164:	e000edf0 	.word	0xe000edf0

20001168 <__aeabi_uldivmod>:
20001168:	b953      	cbnz	r3, 20001180 <__aeabi_uldivmod+0x18>
2000116a:	b94a      	cbnz	r2, 20001180 <__aeabi_uldivmod+0x18>
2000116c:	2900      	cmp	r1, #0
2000116e:	bf08      	it	eq
20001170:	2800      	cmpeq	r0, #0
20001172:	bf1c      	itt	ne
20001174:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
20001178:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
2000117c:	f000 b98c 	b.w	20001498 <__aeabi_idiv0>
20001180:	f1ad 0c08 	sub.w	ip, sp, #8
20001184:	e96d ce04 	strd	ip, lr, [sp, #-16]!
20001188:	f000 f806 	bl	20001198 <__udivmoddi4>
2000118c:	f8dd e004 	ldr.w	lr, [sp, #4]
20001190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20001194:	b004      	add	sp, #16
20001196:	4770      	bx	lr

20001198 <__udivmoddi4>:
20001198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000119c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
2000119e:	460e      	mov	r6, r1
200011a0:	4604      	mov	r4, r0
200011a2:	460f      	mov	r7, r1
200011a4:	2b00      	cmp	r3, #0
200011a6:	d147      	bne.n	20001238 <__udivmoddi4+0xa0>
200011a8:	428a      	cmp	r2, r1
200011aa:	4694      	mov	ip, r2
200011ac:	fab2 f382 	clz	r3, r2
200011b0:	d95a      	bls.n	20001268 <__udivmoddi4+0xd0>
200011b2:	b143      	cbz	r3, 200011c6 <__udivmoddi4+0x2e>
200011b4:	fa02 fc03 	lsl.w	ip, r2, r3
200011b8:	f1c3 0220 	rsb	r2, r3, #32
200011bc:	409f      	lsls	r7, r3
200011be:	409c      	lsls	r4, r3
200011c0:	fa20 f202 	lsr.w	r2, r0, r2
200011c4:	4317      	orrs	r7, r2
200011c6:	ea4f 461c 	mov.w	r6, ip, lsr #16
200011ca:	fa1f fe8c 	uxth.w	lr, ip
200011ce:	0c22      	lsrs	r2, r4, #16
200011d0:	fbb7 f1f6 	udiv	r1, r7, r6
200011d4:	fb06 7711 	mls	r7, r6, r1, r7
200011d8:	fb01 f00e 	mul.w	r0, r1, lr
200011dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
200011e0:	4290      	cmp	r0, r2
200011e2:	d908      	bls.n	200011f6 <__udivmoddi4+0x5e>
200011e4:	eb1c 0202 	adds.w	r2, ip, r2
200011e8:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
200011ec:	d202      	bcs.n	200011f4 <__udivmoddi4+0x5c>
200011ee:	4290      	cmp	r0, r2
200011f0:	f200 813c 	bhi.w	2000146c <__udivmoddi4+0x2d4>
200011f4:	4639      	mov	r1, r7
200011f6:	1a12      	subs	r2, r2, r0
200011f8:	b2a4      	uxth	r4, r4
200011fa:	fbb2 f0f6 	udiv	r0, r2, r6
200011fe:	fb06 2210 	mls	r2, r6, r0, r2
20001202:	fb00 fe0e 	mul.w	lr, r0, lr
20001206:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
2000120a:	45a6      	cmp	lr, r4
2000120c:	d908      	bls.n	20001220 <__udivmoddi4+0x88>
2000120e:	eb1c 0404 	adds.w	r4, ip, r4
20001212:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
20001216:	d202      	bcs.n	2000121e <__udivmoddi4+0x86>
20001218:	45a6      	cmp	lr, r4
2000121a:	f200 812a 	bhi.w	20001472 <__udivmoddi4+0x2da>
2000121e:	4610      	mov	r0, r2
20001220:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
20001224:	eba4 040e 	sub.w	r4, r4, lr
20001228:	2100      	movs	r1, #0
2000122a:	b11d      	cbz	r5, 20001234 <__udivmoddi4+0x9c>
2000122c:	40dc      	lsrs	r4, r3
2000122e:	2300      	movs	r3, #0
20001230:	e9c5 4300 	strd	r4, r3, [r5]
20001234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20001238:	428b      	cmp	r3, r1
2000123a:	d905      	bls.n	20001248 <__udivmoddi4+0xb0>
2000123c:	b10d      	cbz	r5, 20001242 <__udivmoddi4+0xaa>
2000123e:	e9c5 0100 	strd	r0, r1, [r5]
20001242:	2100      	movs	r1, #0
20001244:	4608      	mov	r0, r1
20001246:	e7f5      	b.n	20001234 <__udivmoddi4+0x9c>
20001248:	fab3 f183 	clz	r1, r3
2000124c:	2900      	cmp	r1, #0
2000124e:	d14f      	bne.n	200012f0 <__udivmoddi4+0x158>
20001250:	42b3      	cmp	r3, r6
20001252:	f0c0 8102 	bcc.w	2000145a <__udivmoddi4+0x2c2>
20001256:	4282      	cmp	r2, r0
20001258:	f240 80ff 	bls.w	2000145a <__udivmoddi4+0x2c2>
2000125c:	4608      	mov	r0, r1
2000125e:	2d00      	cmp	r5, #0
20001260:	d0e8      	beq.n	20001234 <__udivmoddi4+0x9c>
20001262:	e9c5 4700 	strd	r4, r7, [r5]
20001266:	e7e5      	b.n	20001234 <__udivmoddi4+0x9c>
20001268:	2b00      	cmp	r3, #0
2000126a:	f040 80af 	bne.w	200013cc <__udivmoddi4+0x234>
2000126e:	1a8a      	subs	r2, r1, r2
20001270:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
20001274:	fa1f f78c 	uxth.w	r7, ip
20001278:	2101      	movs	r1, #1
2000127a:	fbb2 f6fe 	udiv	r6, r2, lr
2000127e:	fb0e 2016 	mls	r0, lr, r6, r2
20001282:	0c22      	lsrs	r2, r4, #16
20001284:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
20001288:	fb07 f006 	mul.w	r0, r7, r6
2000128c:	4290      	cmp	r0, r2
2000128e:	d90f      	bls.n	200012b0 <__udivmoddi4+0x118>
20001290:	eb1c 0202 	adds.w	r2, ip, r2
20001294:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
20001298:	bf2c      	ite	cs
2000129a:	f04f 0901 	movcs.w	r9, #1
2000129e:	f04f 0900 	movcc.w	r9, #0
200012a2:	4290      	cmp	r0, r2
200012a4:	d903      	bls.n	200012ae <__udivmoddi4+0x116>
200012a6:	f1b9 0f00 	cmp.w	r9, #0
200012aa:	f000 80dc 	beq.w	20001466 <__udivmoddi4+0x2ce>
200012ae:	4646      	mov	r6, r8
200012b0:	1a12      	subs	r2, r2, r0
200012b2:	b2a4      	uxth	r4, r4
200012b4:	fbb2 f0fe 	udiv	r0, r2, lr
200012b8:	fb0e 2210 	mls	r2, lr, r0, r2
200012bc:	fb00 f707 	mul.w	r7, r0, r7
200012c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
200012c4:	42a7      	cmp	r7, r4
200012c6:	d90f      	bls.n	200012e8 <__udivmoddi4+0x150>
200012c8:	eb1c 0404 	adds.w	r4, ip, r4
200012cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
200012d0:	bf2c      	ite	cs
200012d2:	f04f 0e01 	movcs.w	lr, #1
200012d6:	f04f 0e00 	movcc.w	lr, #0
200012da:	42a7      	cmp	r7, r4
200012dc:	d903      	bls.n	200012e6 <__udivmoddi4+0x14e>
200012de:	f1be 0f00 	cmp.w	lr, #0
200012e2:	f000 80c9 	beq.w	20001478 <__udivmoddi4+0x2e0>
200012e6:	4610      	mov	r0, r2
200012e8:	1be4      	subs	r4, r4, r7
200012ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
200012ee:	e79c      	b.n	2000122a <__udivmoddi4+0x92>
200012f0:	f1c1 0420 	rsb	r4, r1, #32
200012f4:	408b      	lsls	r3, r1
200012f6:	fa06 fc01 	lsl.w	ip, r6, r1
200012fa:	fa00 fe01 	lsl.w	lr, r0, r1
200012fe:	fa22 f704 	lsr.w	r7, r2, r4
20001302:	40e6      	lsrs	r6, r4
20001304:	408a      	lsls	r2, r1
20001306:	431f      	orrs	r7, r3
20001308:	fa20 f304 	lsr.w	r3, r0, r4
2000130c:	ea4f 4817 	mov.w	r8, r7, lsr #16
20001310:	ea43 030c 	orr.w	r3, r3, ip
20001314:	fa1f fc87 	uxth.w	ip, r7
20001318:	ea4f 4913 	mov.w	r9, r3, lsr #16
2000131c:	fbb6 f0f8 	udiv	r0, r6, r8
20001320:	fb08 6610 	mls	r6, r8, r0, r6
20001324:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
20001328:	fb00 f90c 	mul.w	r9, r0, ip
2000132c:	45b1      	cmp	r9, r6
2000132e:	d90e      	bls.n	2000134e <__udivmoddi4+0x1b6>
20001330:	19be      	adds	r6, r7, r6
20001332:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
20001336:	bf2c      	ite	cs
20001338:	f04f 0b01 	movcs.w	fp, #1
2000133c:	f04f 0b00 	movcc.w	fp, #0
20001340:	45b1      	cmp	r9, r6
20001342:	d903      	bls.n	2000134c <__udivmoddi4+0x1b4>
20001344:	f1bb 0f00 	cmp.w	fp, #0
20001348:	f000 80a2 	beq.w	20001490 <__udivmoddi4+0x2f8>
2000134c:	4650      	mov	r0, sl
2000134e:	eba6 0609 	sub.w	r6, r6, r9
20001352:	fa1f f983 	uxth.w	r9, r3
20001356:	fbb6 f3f8 	udiv	r3, r6, r8
2000135a:	fb08 6613 	mls	r6, r8, r3, r6
2000135e:	fb03 fc0c 	mul.w	ip, r3, ip
20001362:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
20001366:	45b4      	cmp	ip, r6
20001368:	d90e      	bls.n	20001388 <__udivmoddi4+0x1f0>
2000136a:	19be      	adds	r6, r7, r6
2000136c:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
20001370:	bf2c      	ite	cs
20001372:	f04f 0901 	movcs.w	r9, #1
20001376:	f04f 0900 	movcc.w	r9, #0
2000137a:	45b4      	cmp	ip, r6
2000137c:	d903      	bls.n	20001386 <__udivmoddi4+0x1ee>
2000137e:	f1b9 0f00 	cmp.w	r9, #0
20001382:	f000 8082 	beq.w	2000148a <__udivmoddi4+0x2f2>
20001386:	4643      	mov	r3, r8
20001388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
2000138c:	eba6 060c 	sub.w	r6, r6, ip
20001390:	fba0 8c02 	umull	r8, ip, r0, r2
20001394:	4566      	cmp	r6, ip
20001396:	4643      	mov	r3, r8
20001398:	46e1      	mov	r9, ip
2000139a:	d302      	bcc.n	200013a2 <__udivmoddi4+0x20a>
2000139c:	d107      	bne.n	200013ae <__udivmoddi4+0x216>
2000139e:	45c6      	cmp	lr, r8
200013a0:	d205      	bcs.n	200013ae <__udivmoddi4+0x216>
200013a2:	ebb8 0302 	subs.w	r3, r8, r2
200013a6:	eb6c 0c07 	sbc.w	ip, ip, r7
200013aa:	3801      	subs	r0, #1
200013ac:	46e1      	mov	r9, ip
200013ae:	b15d      	cbz	r5, 200013c8 <__udivmoddi4+0x230>
200013b0:	ebbe 0203 	subs.w	r2, lr, r3
200013b4:	eb66 0609 	sbc.w	r6, r6, r9
200013b8:	fa06 f404 	lsl.w	r4, r6, r4
200013bc:	fa22 f301 	lsr.w	r3, r2, r1
200013c0:	40ce      	lsrs	r6, r1
200013c2:	431c      	orrs	r4, r3
200013c4:	e9c5 4600 	strd	r4, r6, [r5]
200013c8:	2100      	movs	r1, #0
200013ca:	e733      	b.n	20001234 <__udivmoddi4+0x9c>
200013cc:	fa02 fc03 	lsl.w	ip, r2, r3
200013d0:	f1c3 0220 	rsb	r2, r3, #32
200013d4:	4099      	lsls	r1, r3
200013d6:	409c      	lsls	r4, r3
200013d8:	40d6      	lsrs	r6, r2
200013da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
200013de:	fa20 f202 	lsr.w	r2, r0, r2
200013e2:	fa1f f78c 	uxth.w	r7, ip
200013e6:	fbb6 f0fe 	udiv	r0, r6, lr
200013ea:	430a      	orrs	r2, r1
200013ec:	fb0e 6610 	mls	r6, lr, r0, r6
200013f0:	0c11      	lsrs	r1, r2, #16
200013f2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
200013f6:	fb00 f607 	mul.w	r6, r0, r7
200013fa:	428e      	cmp	r6, r1
200013fc:	d90e      	bls.n	2000141c <__udivmoddi4+0x284>
200013fe:	eb1c 0101 	adds.w	r1, ip, r1
20001402:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
20001406:	bf2c      	ite	cs
20001408:	f04f 0901 	movcs.w	r9, #1
2000140c:	f04f 0900 	movcc.w	r9, #0
20001410:	428e      	cmp	r6, r1
20001412:	d902      	bls.n	2000141a <__udivmoddi4+0x282>
20001414:	f1b9 0f00 	cmp.w	r9, #0
20001418:	d034      	beq.n	20001484 <__udivmoddi4+0x2ec>
2000141a:	4640      	mov	r0, r8
2000141c:	1b89      	subs	r1, r1, r6
2000141e:	b292      	uxth	r2, r2
20001420:	fbb1 f6fe 	udiv	r6, r1, lr
20001424:	fb0e 1116 	mls	r1, lr, r6, r1
20001428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
2000142c:	fb06 f107 	mul.w	r1, r6, r7
20001430:	4291      	cmp	r1, r2
20001432:	d90e      	bls.n	20001452 <__udivmoddi4+0x2ba>
20001434:	eb1c 0202 	adds.w	r2, ip, r2
20001438:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
2000143c:	bf2c      	ite	cs
2000143e:	f04f 0901 	movcs.w	r9, #1
20001442:	f04f 0900 	movcc.w	r9, #0
20001446:	4291      	cmp	r1, r2
20001448:	d902      	bls.n	20001450 <__udivmoddi4+0x2b8>
2000144a:	f1b9 0f00 	cmp.w	r9, #0
2000144e:	d016      	beq.n	2000147e <__udivmoddi4+0x2e6>
20001450:	4646      	mov	r6, r8
20001452:	1a52      	subs	r2, r2, r1
20001454:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
20001458:	e70f      	b.n	2000127a <__udivmoddi4+0xe2>
2000145a:	1a84      	subs	r4, r0, r2
2000145c:	eb66 0203 	sbc.w	r2, r6, r3
20001460:	2001      	movs	r0, #1
20001462:	4617      	mov	r7, r2
20001464:	e6fb      	b.n	2000125e <__udivmoddi4+0xc6>
20001466:	3e02      	subs	r6, #2
20001468:	4462      	add	r2, ip
2000146a:	e721      	b.n	200012b0 <__udivmoddi4+0x118>
2000146c:	3902      	subs	r1, #2
2000146e:	4462      	add	r2, ip
20001470:	e6c1      	b.n	200011f6 <__udivmoddi4+0x5e>
20001472:	4464      	add	r4, ip
20001474:	3802      	subs	r0, #2
20001476:	e6d3      	b.n	20001220 <__udivmoddi4+0x88>
20001478:	4464      	add	r4, ip
2000147a:	3802      	subs	r0, #2
2000147c:	e734      	b.n	200012e8 <__udivmoddi4+0x150>
2000147e:	3e02      	subs	r6, #2
20001480:	4462      	add	r2, ip
20001482:	e7e6      	b.n	20001452 <__udivmoddi4+0x2ba>
20001484:	3802      	subs	r0, #2
20001486:	4461      	add	r1, ip
20001488:	e7c8      	b.n	2000141c <__udivmoddi4+0x284>
2000148a:	3b02      	subs	r3, #2
2000148c:	443e      	add	r6, r7
2000148e:	e77b      	b.n	20001388 <__udivmoddi4+0x1f0>
20001490:	3802      	subs	r0, #2
20001492:	443e      	add	r6, r7
20001494:	e75b      	b.n	2000134e <__udivmoddi4+0x1b6>
20001496:	bf00      	nop

20001498 <__aeabi_idiv0>:
20001498:	4770      	bx	lr
2000149a:	bf00      	nop
2000149c:	0000      	movs	r0, r0
	...

200014a0 <__tud_event_hook_cb_veneer>:
200014a0:	f85f f000 	ldr.w	pc, [pc]	@ 200014a4 <__tud_event_hook_cb_veneer+0x4>
200014a4:	1000725b 	.word	0x1000725b

200014a8 <__tu_fifo_write_veneer>:
200014a8:	f85f f000 	ldr.w	pc, [pc]	@ 200014ac <__tu_fifo_write_veneer+0x4>
200014ac:	1000aaa1 	.word	0x1000aaa1

200014b0 <__critical_section_exit_veneer>:
200014b0:	f85f f000 	ldr.w	pc, [pc]	@ 200014b4 <__critical_section_exit_veneer+0x4>
200014b4:	1000721b 	.word	0x1000721b

200014b8 <__best_effort_wfe_or_timeout_veneer>:
200014b8:	f85f f000 	ldr.w	pc, [pc]	@ 200014bc <__best_effort_wfe_or_timeout_veneer+0x4>
200014bc:	100029d5 	.word	0x100029d5

200014c0 <__time_us_32_veneer>:
200014c0:	f85f f000 	ldr.w	pc, [pc]	@ 200014c4 <__time_us_32_veneer+0x4>
200014c4:	10007039 	.word	0x10007039

200014c8 <__memset_veneer>:
200014c8:	f85f f000 	ldr.w	pc, [pc]	@ 200014cc <__memset_veneer+0x4>
200014cc:	1000b081 	.word	0x1000b081

200014d0 <____wrap_printf_veneer>:
200014d0:	f85f f000 	ldr.w	pc, [pc]	@ 200014d4 <____wrap_printf_veneer+0x4>
200014d4:	10005e39 	.word	0x10005e39

200014d8 <__make_timeout_time_ms_veneer>:
200014d8:	f85f f000 	ldr.w	pc, [pc]	@ 200014dc <__make_timeout_time_ms_veneer+0x4>
200014dc:	100019cb 	.word	0x100019cb

200014e0 <__rp2040_chip_version_veneer>:
200014e0:	f85f f000 	ldr.w	pc, [pc]	@ 200014e4 <__rp2040_chip_version_veneer+0x4>
200014e4:	100069d9 	.word	0x100069d9

200014e8 <__critical_section_enter_blocking_veneer>:
200014e8:	f85f f000 	ldr.w	pc, [pc]	@ 200014ec <__critical_section_enter_blocking_veneer+0x4>
200014ec:	100071c9 	.word	0x100071c9

200014f0 <__time_us_32_veneer>:
200014f0:	f85f f000 	ldr.w	pc, [pc]	@ 200014f4 <__time_us_32_veneer+0x4>
200014f4:	10006a01 	.word	0x10006a01

200014f8 <____assert_func_veneer>:
200014f8:	f85f f000 	ldr.w	pc, [pc]	@ 200014fc <____assert_func_veneer+0x4>
200014fc:	10005875 	.word	0x10005875

20001500 <__panic_veneer>:
20001500:	f85f f000 	ldr.w	pc, [pc]	@ 20001504 <__panic_veneer+0x4>
20001504:	10000c85 	.word	0x10000c85

20001508 <__busy_wait_at_least_cycles_veneer>:
20001508:	f85f f000 	ldr.w	pc, [pc]	@ 2000150c <__busy_wait_at_least_cycles_veneer+0x4>
2000150c:	10007005 	.word	0x10007005

20001510 <__unaligned_memcpy_veneer>:
20001510:	f85f f000 	ldr.w	pc, [pc]	@ 20001514 <__unaligned_memcpy_veneer+0x4>
20001514:	1000704d 	.word	0x1000704d

20001518 <u16_period>:
20001518:	000003e8                                ....

2000151c <p_cb_in>:
2000151c:	20001e84                                ... 

20001520 <p_cb_out>:
20001520:	20001f94                                ... 

20001524 <pu8_ch>:
20001524:	20002589                                .%. 

20001528 <striped_spin_lock_num>:
20001528:	00000010                                ....

2000152c <irq_handler_chain_slots>:
2000152c:	00000000 	.word	0x00000000
20001530:	00010000 	.word	0x00010000
	...
2000153c:	00020000 	.word	0x00020000
	...
20001548:	00030000 	.word	0x00030000
	...
20001554:	00ff0000 	.word	0x00ff0000
20001558:	00000000 	.word	0x00000000

2000155c <irq_handler_chain_first_slot>:
2000155c:	b501      	push	{r0, lr}
2000155e:	6848      	ldr	r0, [r1, #4]
20001560:	3101      	adds	r1, #1
20001562:	468e      	mov	lr, r1
20001564:	4700      	bx	r0

20001566 <irq_handler_chain_remove_tail>:
20001566:	4670      	mov	r0, lr
20001568:	3809      	subs	r0, #9
2000156a:	4901      	ldr	r1, [pc, #4]	@ (20001570 <irq_handler_chain_remove_tail+0xa>)
2000156c:	4788      	blx	r1
2000156e:	bd01      	pop	{r0, pc}
20001570:	1000165d 	.word	0x1000165d

20001574 <default_alarm_pool>:
	...
20001588:	200015d8                                ... 

2000158c <stdio_usb>:
2000158c:	10006495 100065b1 100065fd 100066a5     .d...e...e...f..
2000159c:	00000000 00000100                       ........

200015a4 <_usbd_rhport>:
200015a4:	000000ff                                ....

200015a8 <_usbd_qdef>:
200015a8:	20001b08 000c0010 00000000 00000000     ... ............
	...

200015c4 <i2c0_inst>:
200015c4:	40090000 00000000                       ...@....

200015cc <print_mutex>:
	...
